<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ratears</title>
  
  <subtitle>ratears&#39;s blog</subtitle>
  <link href="https://ratears.gitee.io/dev.ratears.life/atom.xml" rel="self"/>
  
  <link href="https://ratears.gitee.io/dev.ratears.life/"/>
  <updated>2022-11-26T14:00:57.000Z</updated>
  <id>https://ratears.gitee.io/dev.ratears.life/</id>
  
  <author>
    <name>ratears</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Kafka 核心技术与实战》study notes</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8AKafka-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8AKafka-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/</id>
    <published>2022-11-26T14:00:57.000Z</published>
    <updated>2022-11-26T14:00:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇词-1讲"><a href="#开篇词-1讲" class="headerlink" title="开篇词 (1讲)"></a>开篇词 (1讲)</h1><h2 id="开篇词-为什么要学习Kafka？"><a href="#开篇词-为什么要学习Kafka？" class="headerlink" title="开篇词 | 为什么要学习Kafka？"></a>开篇词 | 为什么要学习Kafka？</h2><ul><li><p>当下互联网行业最火的技术当属 ABC 了</p><ul><li>AI 人工智能</li><li>BigData 大数据</li><li>Cloud 云计算云平台</li></ul></li><li><p>对于数据密集型应用来说，如何应对数据量激增、数据复杂度增加以及数据变化速率变快，是彰显大数据工程师、架构师功力的最有效表征</p><ul><li>Kafka 在帮助应对这些问题方面能起到非常好的效果（Kafka 能够有效隔离上下游业务，将上游突增的流量缓存起来，以平滑的方式传导到下游子系统中，避免了流量的不规则冲击）</li></ul></li><li><p>Kafka 有着非常广阔的应用场景</p><ul><li>目前 Apache Kafka 被认为是整个消息引擎领域的执牛耳者</li><li>从学习技术的角度而言，Kafka 也是很有亮点的（我们仅需要学习一套框架就能在实际业务系统中实现消息引擎应用、应用程序集成、分布式存储构建，甚至是流处理应用的开发与部署）</li><li>Kafka 无论是作为消息引擎还是实时流处理平台，都能在大数据工程领域发挥重要的作用</li></ul></li></ul><br><h3 id="学透-Kafka-推荐路径"><a href="#学透-Kafka-推荐路径" class="headerlink" title="学透 Kafka 推荐路径"></a>学透 Kafka 推荐路径</h3><ul><li>软件开发工程师</li></ul><ol><li>根据你掌握的编程语言去寻找对应的 Kafka 客户端</li><li>去官网上学习一下代码示例（如果能够正确编译和运行这些样例，就能轻松地驾驭客户端了）</li><li>尝试修改样例代码尝试去理解并使用其他的 API（观测修改的结果）</li><li>编写一个小型项目来验证下学习成果，然后就是改善和提升客户端的可靠性和性能了</li><li>熟读一遍 Kafka 官网文档，确保理解了那些可能影响可靠性和性能的参数</li><li>学习 Kafka 的高级功能（比如流处理应用开发。流处理 API 不仅能够生产和消费消息，还能执行高级的流式处理操作，比如时间窗口聚合、流处理连接等）</li></ol><ul><li>系统管理员或运维工程师</li></ul><blockquote><p>如果你是系统管理员或运维工程师，那么相应的学习目标应该是学习搭建及管理 Kafka 线上环境。如何根据实际业务需求评估、搭建生产线上环境将是你主要的学习目标。另外对生产环境的监控也是重中之重的工作，Kafka 提供了超多的 JMX 监控指标，你可以选择任意你熟知的框架进行监控。有了监控数据，作为系统运维管理员的你，势必要观测真实业务负载下的 Kafka 集群表现。之后如何利用已有的监控指标来找出系统瓶颈，然后提升整个系统的吞吐量，这也是最能体现你工作价值的地方</p></blockquote><br><h3 id="专栏思维导图"><a href="#专栏思维导图" class="headerlink" title="专栏思维导图"></a>专栏思维导图</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.26rhfqn0svcw.webp"                      width="100%"                ><br><p>（1）Kafka 入门</p><ul><li>介绍消息引擎这类系统大致的原理和用途，以及作为优秀消息引擎代表的 Kafka 在这方面的表现</li></ul><p>（2）Kafka 的基本使用</p><ul><li>重点探讨 Kafka 如何用于生产环境，特别是线上环境方案的制定</li></ul><p>（3）客户端详解</p><ul><li>学习 Kafka 客户端的方方面面，既有生产者的实操讲解也有消费者的原理剖析</li></ul><p>（4）Kafka 原理介绍</p><ul><li>着重介绍 Kafka 最核心的设计原理，包括 Controller 的设计机制、请求处理全流程解析等</li></ul><p>（5）Kafka 运维与监控</p><ul><li>获得高效运维 Kafka 集群以及有效监控 Kafka 的实战经验</li></ul><p>（6）高级 Kafka 应用</p><ul><li>Kafka 流处理组件 Kafka Streams 的实战应用</li></ul><br><br><br><h1 id="Kafka入门-5讲"><a href="#Kafka入门-5讲" class="headerlink" title="Kafka入门 (5讲)"></a>Kafka入门 (5讲)</h1><h2 id="01-消息引擎系统ABC"><a href="#01-消息引擎系统ABC" class="headerlink" title="01 | 消息引擎系统ABC"></a>01 | 消息引擎系统ABC</h2><ul><li><strong>Apache Kafka 是一款开源的消息引擎系统</strong></li><li>消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递</li><li>Kafka使用纯二进制字节序列传递消息，消息也是有结构的</li></ul><h3 id="消息引擎传输消息模型"><a href="#消息引擎传输消息模型" class="headerlink" title="消息引擎传输消息模型"></a>消息引擎传输消息模型</h3><ul><li><strong>点对点模型</strong>：一对一发送or接收消息</li><li><strong>发布 / 订阅模型</strong>：它有一个主题（Topic）的概念（可以理解成逻辑语义相近的消息容器）。发送方也称为发布者（Publisher），接收方称为订阅者（Subscriber）。和点对点模型不同的是，这个模型可能存在多个发布者向相同的主题发送消息，而订阅者也可能存在多个</li></ul><ul><li>JMS：JMS 是 Java Message Service，它也是支持上面这两种消息引擎模型的。严格来说它并非传输协议而仅仅是一组 API 罢了</li></ul><h3 id="为什么要使用消息引擎"><a href="#为什么要使用消息引擎" class="headerlink" title="为什么要使用消息引擎"></a>为什么要使用消息引擎</h3><ul><li><strong>削峰填谷</strong></li></ul><blockquote><p>​    所谓的“削峰填谷”就是指缓冲上下游瞬时突发流量，使其更平滑。特别是对于那种发送能力很强的上游系统，如果没有消息引擎的保护，“脆弱”的下游系统可能会直接被压垮导致全链路服务“雪崩”。但是，一旦有了消息引擎，它能够有效地对抗上游的流量冲击，真正做到将上游的“峰”填满到“谷”中，避免了流量的震荡。消息引擎系统的另一大好处在于发送方和接收方的松耦合，这也在一定程度上简化了应用的开发，减少了系统间不必要的交互。</p></blockquote><ul><li>当引入了 Kafka 之后。上游订单服务不再直接与下游子服务进行交互。当新订单生成后它仅仅是向 Kafka Broker 发送一条订单消息即可。类似地，下游的各个子服务订阅 Kafka 中的对应主题，并实时从该主题的各自分区（Partition）中获取到订单消息进行处理，从而实现了上游订单服务与下游订单处理服务的解耦。这样当出现秒杀业务时，Kafka 能够将瞬时增加的订单流量全部以消息形式保存在对应的主题中，既不影响上游服务的 TPS，同时也给下游子服务留出了充足的时间去消费它们。这就是 Kafka 这类消息引擎系统的最大意义所在。</li></ul><br><br><h2 id="02-一篇文章带你快速搞定Kafka术语"><a href="#02-一篇文章带你快速搞定Kafka术语" class="headerlink" title="02 | 一篇文章带你快速搞定Kafka术语"></a>02 | 一篇文章带你快速搞定Kafka术语</h2><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><br><br><br><img src="" width="60%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开篇词-1讲&quot;&gt;&lt;a href=&quot;#开篇词-1讲&quot; class=&quot;headerlink&quot; title=&quot;开篇词 (1讲)&quot;&gt;&lt;/a&gt;开篇词 (1讲)&lt;/h1&gt;&lt;h2 id=&quot;开篇词-为什么要学习Kafka？&quot;&gt;&lt;a href=&quot;#开篇词-为什么要学习Kafka？&quot;</summary>
      
    
    
    
    <category term="MQ" scheme="https://ratears.gitee.io/dev.ratears.life/categories/MQ/"/>
    
    <category term="Kafka" scheme="https://ratears.gitee.io/dev.ratears.life/categories/MQ/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://ratears.gitee.io/dev.ratears.life/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>《MySQL 8.0详解与实战》study notes</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8AMySQL-8-0%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8AMySQL-8-0%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/</id>
    <published>2022-10-24T03:00:34.000Z</published>
    <updated>2022-10-24T03:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库选型"><a href="#数据库选型" class="headerlink" title="数据库选型"></a>数据库选型</h1><h2 id="SQL-VS-NOSQL"><a href="#SQL-VS-NOSQL" class="headerlink" title="SQL VS NOSQL"></a>SQL VS NOSQL</h2><table><thead><tr><th align="center">类型</th><th align="center">示例</th><th align="left">特点</th><th align="left">适用场景</th></tr></thead><tbody><tr><td align="center">SQL</td><td align="center">MySQL<br>Oracle<br>SQLServer<br>PostGreSQL</td><td align="left">数据结构化存储在二维表格中。<br/>支持事务的 ACID 特性。<br/>支持使用SQL语言对存储在其中的数据进行操作</td><td align="left">数据之间存在着一定关系，需要关联查询数据的场景。<br/>需要事务支持的业务场景。<br/>需要使用SQL语言灵活操作数据的场景。</td></tr><tr><td align="center">NOSQL</td><td align="center">HBase<br>MongoDB<br>Redis<br>Hadoop</td><td align="left">存储结构灵活，没有固定的存储结构<br/>对事务的支持比较弱，但对数据的并发处理性能高<br/>大多不使用SQL语言操作数据</td><td align="left">数据结构不固定的场景<br/>对事务要求不高，但读写并发比较大的场景。<br/>对数据处理操作比较简单的场景</td></tr></tbody></table><br><br><h2 id="关系数据库选型原则"><a href="#关系数据库选型原则" class="headerlink" title="关系数据库选型原则"></a>关系数据库选型原则</h2><ul><li><p>数据库使用的广泛性</p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4hxh96wd6lc0.webp"                      width="80%"                ></li><li><p>数据库的可扩展性</p><ul><li>支持基于二进制日志的逻辑复制</li><li>存在多种第三方数据库中间件，支持读写分离，分库分表</li></ul></li><li><p>数据库的安全性和稳定性</p><ul><li>MySQL主从复制集群可达到99%的可用性</li><li>配合主从复制高可用架构，可达到99%的可用性</li><li>支持对存储在MySQL的数据，进行分级安全控制</li></ul></li><li><p>数据库所支持的系统</p><ul><li>支持Linux操作系统</li><li>支持windows操作系统</li></ul></li><li><p>数据库的使用成本</p><ul><li>社区版本免费</li><li>使用人员众多，社区活跃，可以方便获取技术支持</li></ul></li></ul><br><br><h2 id="MySQL-8-x-的安装"><a href="#MySQL-8-x-的安装" class="headerlink" title="MySQL 8.x 的安装"></a>MySQL 8.x 的安装</h2><ul><li>服务器环境：CentOS 7 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（1）下载mysql的安装包</span></span><br><span class="line">[root@localhost ~]# cd /install/</span><br><span class="line">[root@localhost install]# wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.31-el7-x86_64.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（2）解压</span></span><br><span class="line">[root@localhost install]# tar -zxvf mysql-8.0.31-el7-x86_64.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（3）移动mysql的位置，创建软连接（便于管理）</span></span><br><span class="line">[root@localhost install]# mv mysql-8.0.31-el7-x86_64 /usr/local/</span><br><span class="line">[root@localhost install]# cd /usr/local/</span><br><span class="line">[root@localhost local]# ln -s mysql-8.0.31-el7-x86_64/ mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（4）配置mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先备份原 /etc/my.cnf 文件</span></span><br><span class="line">[root@localhost mysql]# cp /etc/my.cnf /etc/my.cnf.bak</span><br><span class="line">[root@localhost mysql]# vim /etc/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /usr/local/mysql/data/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line"># Skip #</span><br><span class="line">skip_name_resolve              = 1</span><br><span class="line">skip_external_locking          = 1 </span><br><span class="line">skip_symbolic_links     = 1</span><br><span class="line"># GENERAL #</span><br><span class="line">user = mysql</span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line">character-set-server = utf8</span><br><span class="line">socket  = /usr/local/mysql/data/mysql.sock</span><br><span class="line">pid_file = /usr/local/mysql/data/mysqld.pid</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">port = 3306</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line">explicit_defaults_for_timestamp = off</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">#read_only=on</span><br><span class="line"># MyISAM #</span><br><span class="line">key_buffer_size                = 32M</span><br><span class="line">#myisam_recover                 = FORCE,BACKUP</span><br><span class="line"></span><br><span class="line"># undo log #</span><br><span class="line">innodb_undo_directory = /usr/local/mysql/undo</span><br><span class="line">innodb_undo_tablespaces = 8</span><br><span class="line"></span><br><span class="line"># SAFETY #</span><br><span class="line">max_allowed_packet             = 100M</span><br><span class="line">max_connect_errors             = 1000000</span><br><span class="line">sysdate_is_now                 = 1</span><br><span class="line">#innodb = FORCE</span><br><span class="line">#innodb_strict_mode = 1</span><br><span class="line">secure-file-priv=&#x27;/tmp&#x27;</span><br><span class="line">default_authentication_plugin=&#x27;mysql_native_password&#x27;</span><br><span class="line"># Replice #</span><br><span class="line"> server-id = 1001</span><br><span class="line"> relay_log = mysqld-relay-bin</span><br><span class="line"> gtid_mode = on</span><br><span class="line"> enforce-gtid-consistency</span><br><span class="line"> log-slave-updates = on</span><br><span class="line"> master_info_repository =TABLE</span><br><span class="line"> relay_log_info_repository =TABLE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># DATA STORAGE #</span><br><span class="line"> datadir = /usr/local/mysql/data/</span><br><span class="line"> tmpdir = /tmp</span><br><span class="line"> </span><br><span class="line"># BINARY LOGGING #</span><br><span class="line"> log_bin = /usr/local/mysql/sql_log/mysql-bin</span><br><span class="line"> max_binlog_size = 1000M</span><br><span class="line"> binlog_format = row</span><br><span class="line"> binlog_expire_logs_seconds=86400</span><br><span class="line"># sync_binlog = 1</span><br><span class="line"></span><br><span class="line"> # CACHES AND LIMITS #</span><br><span class="line"> tmp_table_size                 = 32M</span><br><span class="line"> max_heap_table_size            = 32M</span><br><span class="line"> max_connections                = 4000</span><br><span class="line"> thread_cache_size              = 2048</span><br><span class="line"> open_files_limit               = 65535</span><br><span class="line"> table_definition_cache         = 4096</span><br><span class="line"> table_open_cache               = 4096</span><br><span class="line"> sort_buffer_size               = 2M</span><br><span class="line"> read_buffer_size               = 2M</span><br><span class="line"> read_rnd_buffer_size           = 2M</span><br><span class="line"># thread_concurrency             = 24</span><br><span class="line"> join_buffer_size = 1M</span><br><span class="line"># table_cache = 32768</span><br><span class="line"> thread_stack = 512k</span><br><span class="line"> max_length_for_sort_data = 16k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> # INNODB #</span><br><span class="line"> innodb_flush_method            = O_DIRECT</span><br><span class="line"> innodb_log_buffer_size = 16M</span><br><span class="line"> innodb_flush_log_at_trx_commit = 2</span><br><span class="line"> innodb_file_per_table          = 1</span><br><span class="line"> innodb_buffer_pool_size        = 256M</span><br><span class="line"> #innodb_buffer_pool_instances = 8</span><br><span class="line"> innodb_stats_on_metadata = off</span><br><span class="line"> innodb_open_files = 8192</span><br><span class="line"> innodb_read_io_threads = 16</span><br><span class="line"> innodb_write_io_threads = 16</span><br><span class="line"> innodb_io_capacity = 20000</span><br><span class="line"> innodb_thread_concurrency = 0</span><br><span class="line"> innodb_lock_wait_timeout = 60</span><br><span class="line"> innodb_old_blocks_time=1000</span><br><span class="line"> innodb_use_native_aio = 1</span><br><span class="line"> innodb_purge_threads=1</span><br><span class="line"> innodb_change_buffering=all</span><br><span class="line"> innodb_log_file_size = 64M</span><br><span class="line"> innodb_log_files_in_group = 2</span><br><span class="line"> innodb_data_file_path  = ibdata1:256M:autoextend</span><br><span class="line"> </span><br><span class="line"> innodb_rollback_on_timeout=on</span><br><span class="line"> # LOGGING #</span><br><span class="line"> log_error                      = /usr/local/mysql/sql_log/mysql-error.log</span><br><span class="line"> # log_queries_not_using_indexes  = 1</span><br><span class="line"> # slow_query_log                 = 1</span><br><span class="line">  slow_query_log_file            = /usr/local/mysql/sql_log/slowlog.log</span><br><span class="line"></span><br><span class="line"> # TimeOut #</span><br><span class="line"> #interactive_timeout = 30</span><br><span class="line"> #wait_timeout        = 30</span><br><span class="line"> #net_read_timeout = 60</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 100M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"># Remove the next comment character if you are not familiar with SQL</span><br><span class="line">#safe-updates</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = 256M</span><br><span class="line">sort_buffer_size = 256M</span><br><span class="line">read_buffer = 2M</span><br><span class="line">write_buffer = 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（5）创建管理mysql的用户mysql</span></span><br><span class="line">[root@localhost mysql]# useradd mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（6）创建mysql相关数据目录，并修改文件权限</span></span><br><span class="line">[root@localhost mysql]# mkdir data sql_log undo</span><br><span class="line">[root@localhost mysql]# chown -R mysql:mysql data sql_log undo</span><br><span class="line">[root@localhost mysql]# ll</span><br><span class="line">total 300</span><br><span class="line">drwxr-xr-x.  2  7161 31415   4096 Sep 14 01:50 bin</span><br><span class="line">drwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 data</span><br><span class="line">drwxr-xr-x.  2  7161 31415     55 Sep 14 01:50 docs</span><br><span class="line">drwxr-xr-x.  3  7161 31415   4096 Sep 14 01:50 include</span><br><span class="line">drwxr-xr-x.  6  7161 31415    201 Sep 14 01:50 lib</span><br><span class="line">-rw-r--r--.  1  7161 31415 287627 Sep 14 00:15 LICENSE</span><br><span class="line">drwxr-xr-x.  4  7161 31415     30 Sep 14 01:50 man</span><br><span class="line">-rw-r--r--.  1  7161 31415    666 Sep 14 00:15 README</span><br><span class="line">drwxr-xr-x. 28  7161 31415   4096 Sep 14 01:50 share</span><br><span class="line">drwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 sql_log</span><br><span class="line">drwxr-xr-x.  2  7161 31415     77 Sep 14 01:50 support-files</span><br><span class="line">drwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 undo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（7）配置mysql的环境变量</span></span><br><span class="line">[root@localhost mysql]# vim /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 /etc/profile 文件末尾添加如下内容</span></span><br><span class="line">export PATH=$PATH:/usr/local/mysql/bin</span><br><span class="line"></span><br><span class="line">[root@localhost mysql]# source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（8）初始化mysql数据库</span></span><br><span class="line">[root@localhost mysql]# mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证：数据库初始化成功后，会在data目录下有相关文件生成</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（9）拷贝数据库启动脚本</span></span><br><span class="line">[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">至此，mysql数据库安装完成</span></span><br></pre></td></tr></table></figure><br><br><h2 id="MySQL-启动"><a href="#MySQL-启动" class="headerlink" title="MySQL 启动"></a>MySQL 启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# /etc/init.d/mysqld start</span><br><span class="line">Starting MySQL.. SUCCESS!</span><br><span class="line"></span><br><span class="line"># 获取mysql的初始密码</span><br><span class="line">[root@localhost mysql]# grep password sql_log/mysql-error.log</span><br><span class="line"></span><br><span class="line"># 登录mysql后，修改mysql的密码</span><br><span class="line">mysql&gt; alter user user() identified by &#x27;root&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><br><br><br><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><ul><li>业务分析    =》    逻辑设计    =》    数据类型    =》    对象命名    =》 建立库表</li></ul><h2 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h2><h3 id="宽表模式存在的问题"><a href="#宽表模式存在的问题" class="headerlink" title="宽表模式存在的问题"></a>宽表模式存在的问题</h3><ul><li>宽表模式：指把所有需求字段设计在一张表中</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkqourzzp40.webp"                      width="70%"                ><br><br><h4 id="数据冗余"><a href="#数据冗余" class="headerlink" title="数据冗余"></a>数据冗余</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.693sty7axdk0.webp"                      width="80%"                ><br><ul><li>相同数据在一个表中出现了多次（增加数据占用空间）</li><li>需要对数据进行多次维护（如果讲师的职位发生了变化，就需要对多条数据进行维护，如果有数据没有维护，就会导致数据不一致）</li></ul><br><br><h4 id="宽表模式的应用场景"><a href="#宽表模式的应用场景" class="headerlink" title="宽表模式的应用场景"></a>宽表模式的应用场景</h4><ul><li>配合列存储的数据报表应用</li></ul><br><br><h2 id="数据库设计范式"><a href="#数据库设计范式" class="headerlink" title="数据库设计范式"></a>数据库设计范式</h2><ul><li>第一范式：要求有主键，并且要求每一个字段原子性不可再分</li><li>第二范式：表中必须存在业务主键，并且非主键全部依赖于业务主键</li><li>第三范式：表中的非主键列之间不能相互依赖</li></ul><br><br><ul><li>反反范式化设计<ul><li>范式化设计存在的问题：为了满足范式化设计要求，我们对表拆分的很细。但是在查询时候关联的表会很多，影响性能</li><li>为了提高查询性能，我们需要反范式化设计</li></ul></li></ul><br><br><h2 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h2><h3 id="MySQL常见的存储引擎"><a href="#MySQL常见的存储引擎" class="headerlink" title="MySQL常见的存储引擎"></a>MySQL常见的存储引擎</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pqx87bjieq0.webp"                      width="80%"                ><br><br><h3 id="InnoDB存储引擎的特点"><a href="#InnoDB存储引擎的特点" class="headerlink" title="InnoDB存储引擎的特点"></a>InnoDB存储引擎的特点</h3><ul><li>事物型存储引擎支持ACID</li><li>数据按主键聚集存储</li><li>支持行级锁及MVCC</li><li>支持Btree和自适应Hash索引</li><li>支持全文和空间索引</li></ul><br><br><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75n135ulfk00.webp"                      width="80%"                ><br><br><h3 id="实数类型"><a href="#实数类型" class="headerlink" title="实数类型"></a>实数类型</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4d7mn2i88vq0.webp"                      width="80%"                ><br><br><h3 id="常用时间类型"><a href="#常用时间类型" class="headerlink" title="常用时间类型"></a>常用时间类型</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5e3m2d5s8yc0.webp"                      width="80%"                ><br><br><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.618wwafqys00.webp"                      width="80%"                ><br><br><h3 id="选择合适的数据类型"><a href="#选择合适的数据类型" class="headerlink" title="选择合适的数据类型"></a>选择合适的数据类型</h3><ul><li>优先选择符合存储数据需求的最小数据类型</li><li>谨慎使用ENUM,TEXT字符串类型</li><li>同财务相关的数据类型，必须使用decimal类型</li></ul><br><br><h3 id="数据库对象命名原则"><a href="#数据库对象命名原则" class="headerlink" title="数据库对象命名原则"></a>数据库对象命名原则</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6bx7vkwrtgc0.webp"                      width="60%"                ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.58c8x2q3kq80.webp"                      width="60%"                ><br><br><br><h1 id="MySQL-访问数据库"><a href="#MySQL-访问数据库" class="headerlink" title="MySQL 访问数据库"></a>MySQL 访问数据库</h1><h2 id="MySQL-访问异常处理"><a href="#MySQL-访问异常处理" class="headerlink" title="MySQL 访问异常处理"></a>MySQL 访问异常处理</h2><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6si7f2uku6w0.webp"                      width="80%"                ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4zrntdxrjtk0.webp"                      width="80%"                ><br><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>数据类型这块还需要加强一下呢</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><br><br><br><img src="" width="80%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库选型&quot;&gt;&lt;a href=&quot;#数据库选型&quot; class=&quot;headerlink&quot; title=&quot;数据库选型&quot;&gt;&lt;/a&gt;数据库选型&lt;/h1&gt;&lt;h2 id=&quot;SQL-VS-NOSQL&quot;&gt;&lt;a href=&quot;#SQL-VS-NOSQL&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="database" scheme="https://ratears.gitee.io/dev.ratears.life/categories/database/"/>
    
    <category term="MySQL" scheme="https://ratears.gitee.io/dev.ratears.life/categories/database/MySQL/"/>
    
    
    <category term="database" scheme="https://ratears.gitee.io/dev.ratears.life/tags/database/"/>
    
    <category term="MySQL" scheme="https://ratears.gitee.io/dev.ratears.life/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《扛得住的MySQL数据库架构》study notes</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8A%E6%89%9B%E5%BE%97%E4%BD%8F%E7%9A%84MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8A%E6%89%9B%E5%BE%97%E4%BD%8F%E7%9A%84MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84%E3%80%8Bstudy-notes/</id>
    <published>2022-10-18T03:17:42.000Z</published>
    <updated>2022-10-18T03:17:42.000Z</updated>
    
    <content type="html"><![CDATA[<br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><br><br><br><img src="" width="60%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;br&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h1 id=&quot;学习备注&quot;&gt;&lt;a href=&quot;#学习备注&quot; class=&quot;headerlink&quot; title=&quot;学习备注&quot;&gt;&lt;/a&gt;学习备注&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="database" scheme="https://ratears.gitee.io/dev.ratears.life/categories/database/"/>
    
    <category term="MySQL" scheme="https://ratears.gitee.io/dev.ratears.life/categories/database/MySQL/"/>
    
    
    <category term="database" scheme="https://ratears.gitee.io/dev.ratears.life/tags/database/"/>
    
    <category term="MySQL" scheme="https://ratears.gitee.io/dev.ratears.life/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《Nginx 核心知识 150 讲》study notes</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8ANginx-%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86-150-%E8%AE%B2%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8ANginx-%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86-150-%E8%AE%B2%E3%80%8Bstudy-notes/</id>
    <published>2022-10-06T15:07:51.000Z</published>
    <updated>2022-10-06T15:07:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Nginx"><a href="#初识Nginx" class="headerlink" title="初识Nginx"></a>初识Nginx</h1><h2 id="Nginx的三个主要应用场景"><a href="#Nginx的三个主要应用场景" class="headerlink" title="Nginx的三个主要应用场景"></a>Nginx的三个主要应用场景</h2><ul><li><p>静态资源服务</p><ul><li>通过本地文件系统提供服务</li></ul></li><li><p>反向代理服务</p><ul><li>Nginx的强大性能</li><li>缓存</li><li>负载均衡</li></ul></li><li><p>API服务</p><ul><li>OpenResty</li></ul></li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ie7urbi69s0.webp"                      width="60%"                ><br><br><h2 id="Nginx出现的历史背景"><a href="#Nginx出现的历史背景" class="headerlink" title="Nginx出现的历史背景"></a>Nginx出现的历史背景</h2><ul><li>互联网的数据量快速增长<ul><li>互联网的快速普及</li><li>全球化</li><li>物联网</li></ul></li><li>摩尔定律：性能提升</li><li>低效的Apache<ul><li>一个连接对应一个进程</li></ul></li></ul><br><br><h2 id="Nginx的5个主要优点"><a href="#Nginx的5个主要优点" class="headerlink" title="Nginx的5个主要优点"></a>Nginx的5个主要优点</h2><p>（1）高并发，高性能</p><p>（2）可扩展性好</p><p>（3）高可靠性</p><p>（4）热部署</p><p>（5）BSD许可证</p><br><br><h2 id="Nginx的4个主要组成部分"><a href="#Nginx的4个主要组成部分" class="headerlink" title="Nginx的4个主要组成部分"></a>Nginx的4个主要组成部分</h2><p>（1）Nginx 二进制可执行文件</p><blockquote><p>由各模块源码编译出的一个文件</p></blockquote><p>（2）Nginx.conf 配置文件</p><blockquote><p>控制 Nginx 的行为</p></blockquote><p>（3）access.log 访问日志</p><blockquote><p>记录每一条 http 请求信息</p></blockquote><p>（4）error.log 错误日志</p><blockquote><p>定位问题</p></blockquote><br><br><h2 id="Nginx的版本发布历史"><a href="#Nginx的版本发布历史" class="headerlink" title="Nginx的版本发布历史"></a>Nginx的版本发布历史</h2><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.cmiy02n409c.webp"                      width="60%"                ><br><ul><li>开源免费的Nginx与商业版Nginx Plus</li><li>阿里巴巴的Tengine</li><li>免费OpenResty与商业版OpenResty</li></ul><br><br><h2 id="编译Nginx"><a href="#编译Nginx" class="headerlink" title="编译Nginx"></a>编译Nginx</h2><ul><li>如果要扩展第三方功能，可以使用编译方式安装nginx</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（1）下载nginx</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.22.0.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf nginx-1.22.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装相关依赖库</span></span><br><span class="line">yum install -y pcre pcre-devel gcc zlib zlib-devel</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（2）编译安装</span></span><br><span class="line">[root@bogon nginx-1.22.0]# ./configure --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line">[root@bogon nginx-1.22.0]# make</span><br><span class="line"></span><br><span class="line">[root@bogon nginx-1.22.0]# make install</span><br></pre></td></tr></table></figure><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>课程介绍中的问题</li><li></li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><br><br><br><img src="" width="60%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识Nginx&quot;&gt;&lt;a href=&quot;#初识Nginx&quot; class=&quot;headerlink&quot; title=&quot;初识Nginx&quot;&gt;&lt;/a&gt;初识Nginx&lt;/h1&gt;&lt;h2 id=&quot;Nginx的三个主要应用场景&quot;&gt;&lt;a href=&quot;#Nginx的三个主要应用场景&quot; cla</summary>
      
    
    
    
    <category term="Nginx" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Nginx/"/>
    
    
    <category term="Nginx" scheme="https://ratears.gitee.io/dev.ratears.life/tags/Nginx/"/>
    
    <category term="study-notes" scheme="https://ratears.gitee.io/dev.ratears.life/tags/study-notes/"/>
    
  </entry>
  
  <entry>
    <title>Nexus搭建Maven私服</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/Nexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/Nexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D/</id>
    <published>2022-09-28T10:38:46.000Z</published>
    <updated>2022-09-28T10:38:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nexus-安装"><a href="#Nexus-安装" class="headerlink" title="Nexus 安装"></a>Nexus 安装</h1><ul><li><a class="link"   href="https://www.sonatype.com/thanks/repo-oss" >Nexus下载<i class="fas fa-external-link-alt"></i></a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（1）上传 下载的软件到目录 /app</span></span><br><span class="line">[root@bu2-vm-svr-67 app]# ll</span><br><span class="line">total 212392</span><br><span class="line">-rw-r--r-- 1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz</span><br><span class="line"></span><br><span class="line">[root@bu2-vm-svr-67 app]# tar -zxvf nexus-3.42.0-01-unix.tar.gz</span><br><span class="line"></span><br><span class="line">[root@bu2-vm-svr-67 app]# ll</span><br><span class="line">total 212400</span><br><span class="line">drwxr-xr-x 10 root root      4096 Sep 28 18:55 nexus-3.42.0-01</span><br><span class="line">-rw-r--r--  1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz</span><br><span class="line">drwxr-xr-x  3 root root      4096 Sep 28 18:55 sonatype-work</span><br><span class="line"></span><br><span class="line">[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/bin/nexus</span><br><span class="line"></span><br><span class="line">run_as_root=false</span><br><span class="line"></span><br><span class="line">[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/etc/nexus-default.properties</span><br><span class="line"></span><br><span class="line">application-port=7071</span><br><span class="line"></span><br><span class="line">[root@bu2-vm-svr-67 app]# /app/nexus-3.42.0-01/bin/nexus start</span><br><span class="line">Starting nexus</span><br></pre></td></tr></table></figure><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><br><br><br><img src="" width="60%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nexus-安装&quot;&gt;&lt;a href=&quot;#Nexus-安装&quot; class=&quot;headerlink&quot; title=&quot;Nexus 安装&quot;&gt;&lt;/a&gt;Nexus 安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.sona</summary>
      
    
    
    
    <category term="Maven" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Maven/"/>
    
    <category term="Nexus" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Maven/Nexus/"/>
    
    
    <category term="Nexus" scheme="https://ratears.gitee.io/dev.ratears.life/tags/Nexus/"/>
    
    <category term="Maven" scheme="https://ratears.gitee.io/dev.ratears.life/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>浅析 —— 同步异步&amp;阻塞非阻塞</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E6%B5%85%E6%9E%90-%E2%80%94%E2%80%94-%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5-%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E6%B5%85%E6%9E%90-%E2%80%94%E2%80%94-%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5-%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E/</id>
    <published>2022-09-19T14:14:02.000Z</published>
    <updated>2022-09-19T14:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><br><br><br><img src="" width="60%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;br&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h1 id=&quot;学习备注&quot;&gt;&lt;a href=&quot;#学习备注&quot; class=&quot;headerlink&quot; title=&quot;学习备注&quot;&gt;&lt;/a&gt;学习备注&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="Operating-Systems" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/"/>
    
    <category term="I/O" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/I-O/"/>
    
    
    <category term="Operating-Systems" scheme="https://ratears.gitee.io/dev.ratears.life/tags/Operating-Systems/"/>
    
    <category term="communication-mechanism" scheme="https://ratears.gitee.io/dev.ratears.life/tags/communication-mechanism/"/>
    
  </entry>
  
  <entry>
    <title>浅析 I/O（3）—— I/O模型</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E6%B5%85%E6%9E%90-I-O%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94-I-O%E6%A8%A1%E5%9E%8B/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E6%B5%85%E6%9E%90-I-O%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94-I-O%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-09-19T14:06:09.000Z</published>
    <updated>2022-09-19T14:06:09.000Z</updated>
    
    <content type="html"><![CDATA[<br><ul><li>网络通信中，最底层的就是内核中的网络 I/O 模型了。</li></ul><blockquote><p>随着技术的发展，操作系统内核的网络模型衍生出了<strong>五种 I/O 模型</strong>，《UNIX网络编程》一书将这五种 I/O 模型分为 <code>阻塞式 I/O</code>、<code>非阻塞式 I/O</code>、<code>I/O 复用</code>、<code>信号驱动式 I/O</code> 和 <code>异步 I/O</code>。每一种 I/O 模型的出现，都是基于前一种 I/O 模型的优化升级。</p></blockquote><br><br><br><h1 id="①-阻塞IO模型"><a href="#①-阻塞IO模型" class="headerlink" title="① 阻塞IO模型"></a>① 阻塞IO模型</h1><ul><li>阻塞式 IO （Blocking IO）：应用进程从发起 IO 系统调用，至内核返回成功标识，这整个期间是处于阻塞状态的。</li></ul><blockquote><p>当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。</p></blockquote><blockquote><p><strong>Tips：我们之前所学过的所有的套接字，默认都是阻塞方式。</strong></p></blockquote><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7wrvgu36e5k.webp"                      width="75%"                ><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.qd7jcvl1as0.webp"                      width="75%"                ><ul><li>优点：开发相对简单，在阻塞期间，用户线程被挂起，挂起期间不会占用CPU资源；</li><li>缺点：<ul><li>1）连接利用率不高，内核如果没有响应数据，则该连接一直处于阻塞状态，占用连接资源</li><li>2）一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；</li></ul></li></ul><br><br><br><h1 id="②-非阻塞IO模型"><a href="#②-非阻塞IO模型" class="headerlink" title="② 非阻塞IO模型"></a>② 非阻塞IO模型</h1><ul><li>非阻塞式IO（Non-Blocking IO）：应用进程可以将 Socket 设置为非阻塞，这样应用进程在发起 IO 系统调用后，会立刻返回。应用进程可以轮询的发起 IO 系统调用，直到内核返回成功标识。</li></ul><blockquote><p>当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。</p></blockquote><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3utzrtza30.webp"                      width="70%"                ><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.79dq8pifksg0.webp"                      width="60%"                ><ul><li>优点：每次发起IO调用去内核获取数据时，在内核等待数据的过程中可以立即返回，用户线程不会被阻塞，实时性较好；</li><li>缺点：<ul><li>1）当用户线程A没有获取到数据时，不断轮询内核，查看是否有新的数据，占用大量CPU时间，效率不高；</li><li>2）和阻塞IO一样，一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；</li></ul></li></ul><br><br><br><h1 id="③-复用IO模型（IO多路复用模型）"><a href="#③-复用IO模型（IO多路复用模型）" class="headerlink" title="③ 复用IO模型（IO多路复用模型）"></a>③ 复用IO模型（IO多路复用模型）</h1><ul><li>IO 多路复用（IO Multiplexin）：可以将多个应用进程的 Socket 注册到一个 Select（多路复用器）上，然后使用一个进程来监听该 Select（该操作会阻塞），Select 会监听所有注册进来的 Socket。只要有一个 Socket 的数据准备好，就会返回该Socket。再由应用进程发起 IO 系统调用，来完成数据读取。</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5bxxajmccj00.webp"                      width="60%"                ><br><br><p>&emsp;&emsp;如果在并发的环境下，可能会N个人向应用B发送消息，这种情况下我们的应用就必须创建多个线程去接收N个人发送过来的请求，每个请求都是一个独立的线程来处理；在并发量呈线性增长时，我们需要创建的线程数也随之而然的激增；</p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4qf0gyqhcao0.webp"                      width="70%"                ><p>&emsp;&emsp;这种情况下应用B就需要创建N个线程去读取数据，同时又因为应用线程是不知道什么时候会有数据读取，为了保证消息能及时读取到，那么这些线程自己必须不断的向内核发送请求来读取数据（非阻塞式）；</p><p>&emsp;&emsp;这么多的线程不断请求数据，先不说服务器能不能扛得住这么多线程，就算扛得住那么很明显这种方式是不是太浪费资源了，线程是我们操作系统的宝贵资源，大量的线程用来去读取数据了，那么就意味着能做其它事情的线程就会少。</p><p>&emsp;&emsp;后来，有人就提出了一个思路，能不能提供一种方式，可以由一个线程监控多个网络请求（<strong>linux系统把所有网络请求以一个fd来标识，我们后面将称为fd即文件描述符</strong>），这样就可以只需要一个或几个线程就可以完成数据状态询问的操作，当有数据准备就绪之后再分配对应的线程去读取数据，这么做就可以节省出大量的线程资源出来，这个就是<strong>IO复用模型</strong>的思路。</p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4gods2kobxu0.webp"                      width="70%"                ><p>&emsp;&emsp;IO复用模型的思路就是系统提供了一种函数（select/poll/epoll）可以同时监控多个fd的操作，有了这个函数后，应用线程通过调用select函数就可以同时监控多个fd，如果select监听的fd都没有可读数据，<strong>select调用进程会被阻塞</strong>；而只要有任何一个fd准备就绪了，select函数就会返回可读状态，这时询问线程再去通知处理数据的线程，对应的线程此时再发起请求去读取内核中准备好的数据；</p><blockquote><p><strong>Tips：在IO复用模型下，允许单线程内处理多个IO请求；</strong></p></blockquote><br><br><ul><li><font color="red"><strong>Linux中IO复用的实现方式主要有select，poll和epoll</strong></font></li></ul><h2 id="1）select"><a href="#1）select" class="headerlink" title="1）select"></a>1）select</h2><ul><li><strong>线性轮询扫描所有的fd</strong>，不管他们是否活跃，监听的IO最大连接数不能多于FD_ SIZE（32位操作系统1024，64位操作系统2048）。</li><li>时间复杂度O(n)</li></ul><blockquote><p><strong>Tips：select方式仅仅知道有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），用户线程只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。</strong></p></blockquote><br><h2 id="2）poll"><a href="#2）poll" class="headerlink" title="2）poll"></a>2）poll</h2><ul><li>原理和select相似，poll底层需要分配一个pollfd结构数组，维护在内核中，它没有数量限制，但IO数量大，扫描线性性能下降。</li><li>时间复杂度O(n)</li></ul><br><h2 id="3）epoll"><a href="#3）epoll" class="headerlink" title="3）epoll"></a>3）epoll</h2><ul><li>用于代替poll和select，没有大小限制。<strong>epoll采用事件驱动代替了轮询</strong>，epoll会把哪个流发生了怎样的I/O事件通知用户线程，所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时用户线程对这些流的操作都是有意义的。（复杂度降低到了O(1)），另外epoll模型采用mmap内存映射实现内核与用户空间的消息传递，减少用户态和内核态数据传输的开销，epoll模型在Linux2.6后内核支持。</li><li>时间复杂度O(1)</li></ul><br><hr><ul><li><font color="red">select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符准备就绪，能够通知程序进行相应的读写操作。<strong>但select，poll，epoll本质上都是同步I/O</strong>，因为他们都需要在读写事件就绪后自己负责进行读写(一个个的处理)，也就是说这个读写过程是<strong>阻塞的</strong>，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</font></li></ul><blockquote><p>Tips：epoll跟select都能提供多路I/O复用的解决方案。在现在的Linux内核里有都能够支持，其中epoll是Linux所特有，而select则应该是POSIX所规定，一般操作系统均有实现</p></blockquote><br><h2 id="复用IO模型小结"><a href="#复用IO模型小结" class="headerlink" title="复用IO模型小结"></a>复用IO模型小结</h2><ul><li>关于IO复用模型，下面这个例子可以很好的说明IO复用模型的原理：</li></ul><blockquote><p>某教室有10名学生和1名老师，这些学生上课会不停的提问，所以一个老师处理不了这么多的问题。那么学校为每个学生都配一名老师，也就是这个教室目前有10名老师。此后，只要有新的转校生，那么就会为这个学生专门分配一个老师，因为转校生也喜欢提问题。如果把以上例子中的学生比作客户端，那么老师就是负责进行数据交换的服务端。则该例子可以比作是多进程的方式。</p><p>后来有一天，来了一位具有超能力的老师，这位老师回答问题非常迅速，并且可以应对所有的问题。而这位老师采用的方式是学生提问前必须先举手，确认举手学生后在回答问题。则现在的情况就是IO复用。</p></blockquote><ul><li><strong>IO复用模型的优点</strong>：系统不必创建和维护大量的线程，只使用一个或几个线程来监听select选择器的操作，而一个选择器可同时处理成千上万个连接，大大减少了系统的开销；</li><li><strong>IO复用模型的缺点</strong>：select本质上还是同步阻塞模式；</li></ul><p>&emsp;&emsp;<strong>总结：</strong> 复用IO的基本思路就是通过select或poll、epoll来监控多fd ，来达到不必为每个fd创建一个对应的监控线程，从而减少线程资源创建的目的。<strong>复用IO模型的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</strong></p><br><br><br><h1 id="④-信号驱动IO模型"><a href="#④-信号驱动IO模型" class="headerlink" title="④ 信号驱动IO模型"></a>④ 信号驱动IO模型</h1><ul><li>信号驱动 IO（Signal Driven IO）：可以为 Socket 开启信号驱动 IO 功能，应用进程需向内核注册一个信号处理程序，该操作并立即返回。当内核中有数据准备好，会发送一个信号给应用进程，应用进程便可以在信号处理程序中发起 IO 系统调用，来完成数据读取了。</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75x9qhoc2nk0.webp"                      width="60%"                ><br><br><p>&emsp;&emsp;当进程发起一个IO操作，系统调用sigaction执行一个信号处理函数，该函数向内核注册一个信号处理函数（回调函数），然后进程返回，并且不阻塞当前进程；当内核数据准备好时，内核使用信号（SIGIO）通知应用线程调用recvfrom来读取数据（运行回调函数）。</p><p>&emsp;&emsp;信号驱动IO它也可以看成是一种<strong>异步非阻塞IO</strong></p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1qy5yemvy6rk.webp"                      width="60%"                ><p>&emsp;&emsp;我们说信号驱动IO模型是一种异步非阻塞IO模型，指的是用户线程去内核空间请求数据时，直接注册一个信号处理函数，然后用户线程返回（异步），而内核空间接收到请求后，开始处理（此时并不会阻塞，内核空间可以同时接收多个请求，注册多个信号处理函数）；</p><p>&emsp;&emsp;但是，等到内核空间读取到数据之后，应用线程需要将数据从内核空间拷贝到用户空间，<strong>此时是用户线程是阻塞的；</strong>也就是说：<strong>应用程序将数据从内核态拷贝到用户态的过程是阻塞等待的，这是和异步IO的本质区别；</strong></p><br><br><br><h1 id="⑤-异步IO模型"><a href="#⑤-异步IO模型" class="headerlink" title="⑤ 异步IO模型"></a>⑤ 异步IO模型</h1><ul><li>异步 IO（Asynchronous IO）： 应用进程发起 IO 系统调用后，会立即返回。当内核中数据完全准备后，并且也复制到了用户空间，会产生一个信号来通知应用进程。</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.448rjyvy1va0.webp"                      width="70%"                ><br><br><p>&emsp;&emsp;在前面几种IO模型中，应用线程要获取数据总是先发送请求到内核，然后进行如下处理：</p><blockquote><p>1）<strong>阻塞IO</strong>：应用线程等待内核响应数据，期间什么都不能做</p><p>2）<strong>非阻塞IO</strong>：应用线程立即响应，可以去处理其他事情，但需要不断轮询内核去获取数据</p><p>3）<strong>复用IO</strong>：采用IO复用机制，请求都先交给select函数，由应用线程调用select函数来轮询所有的请求，当有请求需要获取数据时，应用线程再去内核获取数据；</p><p>4）<strong>信号驱动IO</strong>：系统注册一个信号处理函数（回调函数），然后应用线程返回（不阻塞）；当内核中准备好数据后，应用线程需要把内核中的数据拷贝到用户空间，<strong>此时用户线程是阻塞的</strong>；</p></blockquote><p>&emsp;&emsp;在以上4种IO模型中，每次要去读取数据时都是事先发送请求询问内核是否有可读数据，然后再发起真正的读取数据请求；</p><p>&emsp;&emsp;在异步IO模型中，应用只需要向内核发送一个请求，告诉内核它要读取数据后即刻返回；内核收到请求后会建立一个信号联系，当数据准备就绪，<strong>内核会主动把数据从内核复制到用户空间</strong>（而信号驱动是告诉应用程序何时可以开始拷贝数据），异步IO模型真正的做到了完完全全的非阻塞；</p><blockquote><p>Tips：异步IO模型和前面模型最大的区别是：<strong>前4个都是阻塞的</strong>，需要自己把用户准备好的数据，去内核拷贝到用户空间。而全异步不同，用户线程完全不需要关心实际的整个IO操作是如何进行的，只需要先发起一个请求，当接收内核返回的成功信号时表示IO操作已经完成，可以直接去使用数据，它是最理想的模型。</p></blockquote><br><br><br><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp;从上述五种 IO 模型可以看出，应用进程对内核发起 IO 系统调用后，内核会经过两个阶段来完成数据的传输：</p><ul><li>第一阶段：等待数据。即应用进程发起 IO 系统调用后，会一直等待数据；当有数据传入服务器，会将数据放入内核空间，此时数据准备好。</li><li>第二阶段：将数据从内核空间复制到用户空间，并返回给应用程序成功标识。</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i7o657cwvsw.webp"                      width="60%"                ><p>&emsp;&emsp;前四种模型的第二阶段是相同的，都是处于阻塞状态，其主要区别在第一阶段。而异步 IO 模型则不同，应用进程在这两个阶段是完全不阻塞的。</p><table><thead><tr><th align="center">IO 模型</th><th align="center">第一阶段</th><th align="center">第二阶段</th></tr></thead><tbody><tr><td align="center">阻塞式IO</td><td align="center">阻塞</td><td align="center">阻塞</td></tr><tr><td align="center">非阻塞式IO</td><td align="center">非阻塞</td><td align="center">阻塞</td></tr><tr><td align="center">IO多路程复用</td><td align="center">阻塞（Select）</td><td align="center">阻塞</td></tr><tr><td align="center">信号驱动式IO</td><td align="center">异步</td><td align="center">阻塞</td></tr><tr><td align="center">异步IO</td><td align="center">异步</td><td align="center">异步</td></tr></tbody></table><br><br><br><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>segmentfault：<a class="link"   href="https://segmentfault.com/a/1190000039898780" >浅聊Linux的五种IO模型<i class="fas fa-external-link-alt"></i></a></li><li>w3cjava：<a class="link"   href="https://www.w3cjava.com/e-book/operate-system/124699009.html" >五种IO模型：操作系统五种IO模型大全<i class="fas fa-external-link-alt"></i></a></li></ul><br>]]></content>
    
    
      
      
    <summary type="html">&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;网络通信中，最底层的就是内核中的网络 I/O 模型了。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;随着技术的发展，操作系统内核的网络模型衍生出了&lt;strong&gt;五种 I/O 模型&lt;/strong&gt;，《UNIX网络编程》一书将这五种 I/O</summary>
      
    
    
    
    <category term="Operating-Systems" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/"/>
    
    <category term="I/O" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/I-O/"/>
    
    
    <category term="Operating-Systems" scheme="https://ratears.gitee.io/dev.ratears.life/tags/Operating-Systems/"/>
    
    <category term="I/O" scheme="https://ratears.gitee.io/dev.ratears.life/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>浅析 I/O（2）—— I/O分类</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E6%B5%85%E6%9E%90-I-O%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94-I-O%E5%88%86%E7%B1%BB/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E6%B5%85%E6%9E%90-I-O%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94-I-O%E5%88%86%E7%B1%BB/</id>
    <published>2022-09-19T14:05:34.000Z</published>
    <updated>2022-09-19T14:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<br><ul><li>通常用户进程中的一个完整IO分为两阶段：<strong>用户进程空间&lt;- -&gt;内核空间</strong>、**内核空间&lt;- -&gt;设备空间(磁盘、网络等)**。</li></ul><br><br><h1 id="网络IO-amp-磁盘IO"><a href="#网络IO-amp-磁盘IO" class="headerlink" title="网络IO &amp; 磁盘IO"></a>网络IO &amp; 磁盘IO</h1><p>&emsp;&emsp;IO从读取数据的来源分为<strong>内存IO</strong>、 <strong>网络IO</strong>和<strong>磁盘IO</strong>三种，通常我们说的IO指的是后两者(因为内存IO的读写速度比网络IO和磁盘IO快的多)。</p><p>&emsp;&emsp;I/O按照设备来分的话，分为两种：一种是网络I/O，也就是通过网络进行数据的拉取和输出。一种是磁盘I/O，主要是对磁盘进行读写工作。</p><table><thead><tr><th align="center">类型</th><th align="left">概念解释</th></tr></thead><tbody><tr><td align="center">网络IO</td><td align="left">等待网络数据到达网卡→把网卡中的数据读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间</td></tr><tr><td align="center">磁盘IO</td><td align="left">把数据从磁盘中读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间</td></tr></tbody></table><blockquote><p>Tips：<strong>由于CPU和内存的速度远远高于外部设备（网卡，磁盘等）的速度，所以在IO编程中，存在速度严重不匹配的问题。</strong></p></blockquote><br><br><h1 id="同步IO-amp-异步IO"><a href="#同步IO-amp-异步IO" class="headerlink" title="同步IO &amp; 异步IO"></a>同步IO &amp; 异步IO</h1><table><thead><tr><th align="center">类型</th><th align="left">概念解释</th></tr></thead><tbody><tr><td align="center">同步IO</td><td align="left">A调用B，B的处理是同步的，在处理完之前他不会通知A，只有处理完之后才会明确的通知A。<strong>B在没有处理完A的请求时不能处理其他请求；</strong></td></tr><tr><td align="center">异步IO</td><td align="left">A调用B，B的处理是异步的，B在接到请求后先告诉A我已经接到请求了，然后异步去处理，处理完之后通过回调等方式再通知A。<strong>B在处理A请求的同时，也可以接着处理其他人发送过来的请求；</strong></td></tr></tbody></table><p>&emsp;&emsp;同步和异步最大的区别就是被调用方的<strong>执行方式</strong>和<strong>返回时机</strong>。同步指的是被调用方做完事情之后再返回，异步指的是被调用方先返回，然后再做事情，做完之后再想办法通知调用方。</p><br><br><h1 id="阻塞IO-amp-非阻塞IO"><a href="#阻塞IO-amp-非阻塞IO" class="headerlink" title="阻塞IO &amp; 非阻塞IO"></a>阻塞IO &amp; 非阻塞IO</h1><table><thead><tr><th align="center">类型</th><th align="left">概念解释</th></tr></thead><tbody><tr><td align="center">非阻塞IO</td><td align="left">A调用B，A不用一直等着B的返回，先去忙别的事情了。</td></tr><tr><td align="center">阻塞IO</td><td align="left">A调用B，A一直等着B的返回，别的事情什么也不干。</td></tr></tbody></table><p>&emsp;&emsp;阻塞和非阻塞最大的区别就<strong>是在被调用方返回结果之前的这段时间内，调用方是否一直等待</strong>。阻塞指的是调用方一直等待别的事情什么都不做。非阻塞指的是调用方先去忙别的事情。</p><br><blockquote><p><strong><font color="red">Tips：同步IO和异步IO强调的是被调用方（B），阻塞IO和非阻塞IO强调的是调用方（A）；</font></strong></p></blockquote><br><br><br>]]></content>
    
    
      
      
    <summary type="html">&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;通常用户进程中的一个完整IO分为两阶段：&lt;strong&gt;用户进程空间&amp;lt;- -&amp;gt;内核空间&lt;/strong&gt;、**内核空间&amp;lt;- -&amp;gt;设备空间(磁盘、网络等)**。&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h1 id=&quot;网络</summary>
      
    
    
    
    <category term="Operating-Systems" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/"/>
    
    <category term="I/O" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/I-O/"/>
    
    
    <category term="Operating-Systems" scheme="https://ratears.gitee.io/dev.ratears.life/tags/Operating-Systems/"/>
    
    <category term="I/O" scheme="https://ratears.gitee.io/dev.ratears.life/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>浅析 I/O（1）—— 操作系统内存简介</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E6%B5%85%E6%9E%90-I-O%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%80%E4%BB%8B/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E6%B5%85%E6%9E%90-I-O%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%80%E4%BB%8B/</id>
    <published>2022-09-19T13:56:50.000Z</published>
    <updated>2022-09-19T13:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统的应用与内核"><a href="#操作系统的应用与内核" class="headerlink" title="操作系统的应用与内核"></a>操作系统的应用与内核</h1><p>&emsp;&emsp;现代计算机是由硬件和操作系统组成，我们的应用程序要操作硬件（如往磁盘上写数据），就需要先与内核交互，然后再由内核与硬件交互；</p><p>&emsp;&emsp;操作系统可以划分为：<strong>内核</strong>与<strong>应用</strong>两部分；</p><p>&emsp;&emsp;内核提供进程管理、内存管理、网络等底层功能，封装了与硬件交互的接口，通过系统调用提供给上层应用使用。</p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/6a59c5e5-a44b-444d-b5de-22a47319e41a.5r3m1k43n280.webp"                      width="80%"                ><br><br><br><h1 id="内核空间与用户空间"><a href="#内核空间与用户空间" class="headerlink" title="内核空间与用户空间"></a>内核空间与用户空间</h1><p>&emsp;&emsp;现在操作系统都是采用虚拟地址空间，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间（内核空间），也有访问底层硬件设备的所有权限。</p><p>&emsp;&emsp;为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为<strong>内核空间</strong>，一部分为<strong>用户空间</strong>。内核空间是操作系统内核访问的区域，独立于普通的应用程序，是<strong>受保护的内存空间</strong>。用户空间是普通应用程序可访问的内存区域。</p><p>&emsp;&emsp;针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23luuh3fhlwg.webp"                      width="60%"                ><p>&emsp;&emsp;<strong>用户态的程序不能随意操作内核地址空间，即使用户的程序崩溃了，内核也不受影响。这样对操作系统具有一定的安全保护作用。</strong></p><br><br><br><h1 id="CPU指令等级"><a href="#CPU指令等级" class="headerlink" title="CPU指令等级"></a>CPU指令等级</h1><p>&emsp;&emsp;其实早期操作系统是不区分内核空间和用户空间的，但是应用程序能访问任意内存空间，如果程序不稳定常常把系统搞崩溃，比如清除操作系统的内存数据。后来觉得让应用程序随便访问内存太危险了，就按照CPU 指令的重要程度对指令进行了分级；</p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5dnygfmt0ow0.webp"                      width="40%"                ><p>&emsp;&emsp;CPU指令分为四个级别：Ring0~Ring3，linux 只使用了 Ring0 和 Ring3 两个运行级别，进程运行Ring3级别的指令时运行在用户态，指令只访问用户空间，而运行在 Ring0级别时被称为运行在内核态，可以访问任意内存空间。</p><br><br><br><h1 id="进程的内核态和用户态"><a href="#进程的内核态和用户态" class="headerlink" title="进程的内核态和用户态"></a>进程的内核态和用户态</h1><p>&emsp;&emsp;<strong>当进程运行在内核空间时，它就处于内核态；当进程运行在用户空间时，它就处于用户态。</strong></p><ul><li>那什么时候运行再内核空间什么时候运行再用户空间呢？</li></ul><blockquote><p>当我们需要进行IO操作时，如读写硬盘文件、读写网卡数据等，进程需要切换到内核态，否则无法进行这样的操作，无论是从内核态切换到用户态，还是从用户态切换到内核态，都需要进行一次上下文的切换。一般情况下，应用不能直接操作内核空间的数据，需要把内核态的数据拷贝到用户空间才能操作。</p></blockquote><blockquote><p>比如我们 Java 中需要新建一个线程，调用 start() 方法时，基于Hotspot Linux 的JVM 源码实现，最终是调<code>pthread_create</code>系统方法来创建的线程，这里会从用户态切换到内核态完成系统资源的分配，线程的创建。</p></blockquote><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.ymdgdg0666o.webp"                      width="60%"                ><ul><li>当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于内核运行态（内核态）</li></ul><blockquote><p>Tips：除了系统调用可以实现用户态到内核态的切换，软中断和硬中断也会切换用户态和内核态。</p></blockquote><ul><li>在内核态下：进程运行在内核地址空间中，此时 CPU 可以执行任何指令。运行的代码也不受任何的限制，可以自由地访问任何有效地址，也可以直接进行端口的访问。</li><li>在用户态下：进程运行在用户地址空间中，被执行的代码要受到 CPU 的很多检查，比如：进程只能访问映射其地址空间的页表项中规定的在用户态下可访问页面的虚拟地址。</li></ul><br><br><br><h1 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h1><h2 id="核心态-内核态-Kernel-model-和用户态-User-model"><a href="#核心态-内核态-Kernel-model-和用户态-User-model" class="headerlink" title="核心态/内核态(Kernel model)和用户态(User model)"></a>核心态/内核态(Kernel model)和用户态(User model)</h2><p>&emsp;&emsp;核心态(Kernel model)和用户态(User model)，CPU会在两个model之间切换。</p><ul><li>核心态代码拥有完全的底层资源控制权限，可以执行任何CPU指令，访问任何内存地址，其占有的处理机是不允许被抢占的。内核态的指令包括：启动I/O，内存清零，修改程序状态字，设置时钟，允许/终止中断和停机。内核态的程序崩溃会导致PC停机。</li><li>用户态是用户程序能够使用的指令，不能直接访问底层硬件和内存地址。用户态运行的程序必须委托系统调用来访问硬件和内存。用户态的指令包括：控制转移，算数运算，取数指令，访管指令（使用户程序从用户态陷入内核态）。</li></ul><br><br><br><h2 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h2><p>&emsp;&emsp;为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p><blockquote><ol><li>保存处理机上下文，包括程序计数器和其他寄存器。</li><li>更新PCB信息。</li><li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</li><li>选择另一个进程执行，并更新其PCB。</li><li>更新内存管理的数据结构。</li><li>恢复处理机上下文。</li></ol></blockquote><br><br><br><h2 id="文件描述符-fd-File-Descriptor"><a href="#文件描述符-fd-File-Descriptor" class="headerlink" title="文件描述符(fd, File Descriptor)"></a>文件描述符(fd, File Descriptor)</h2><p>&emsp;&emsp;FD用于描述指向文件的引用的抽象化概念。文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p><br><br><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;操作系统的应用与内核&quot;&gt;&lt;a href=&quot;#操作系统的应用与内核&quot; class=&quot;headerlink&quot; title=&quot;操作系统的应用与内核&quot;&gt;&lt;/a&gt;操作系统的应用与内核&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;现代计算机是由硬件和操作系统组成，我们的应用程序要操</summary>
      
    
    
    
    <category term="Operating-Systems" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/"/>
    
    <category term="I/O" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/I-O/"/>
    
    
    <category term="Operating-Systems" scheme="https://ratears.gitee.io/dev.ratears.life/tags/Operating-Systems/"/>
    
    <category term="I/O" scheme="https://ratears.gitee.io/dev.ratears.life/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>Maven核心知识梳理</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/Maven%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/Maven%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</id>
    <published>2022-09-17T12:45:22.000Z</published>
    <updated>2022-09-18T07:10:17.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Maven概述"><a href="#第一章-Maven概述" class="headerlink" title="第一章 Maven概述"></a>第一章 Maven概述</h1><h2 id="Why？为什么要学习-Maven？"><a href="#Why？为什么要学习-Maven？" class="headerlink" title="Why？为什么要学习 Maven？"></a>Why？为什么要学习 Maven？</h2><h3 id="Maven-作为依赖管理工具"><a href="#Maven-作为依赖管理工具" class="headerlink" title="Maven 作为依赖管理工具"></a>Maven 作为依赖管理工具</h3><h4 id="①jar-包的规模"><a href="#①jar-包的规模" class="headerlink" title="①jar 包的规模"></a>①jar 包的规模</h4><ul><li>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的</li><li>比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：<ul><li>Nacos 服务注册发现</li><li>Web 框架环境</li><li>图模板技术 Thymeleaf</li></ul></li></ul><blockquote><p>最终却导入了 106 个 jar 包</p></blockquote><p>而如果使用 Maven 来引入这些 jar 包只需要配置三个『<strong>依赖</strong>』：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Nacos 服务注册发现启动器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- web启动器依赖 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图模板技术 thymeleaf --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②jar-包的来源"><a href="#②jar-包的来源" class="headerlink" title="②jar 包的来源"></a>②jar 包的来源</h4><ul><li>这个jar包所属技术的官网。官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载</li><li>第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题:<ul><li>jar包的名称</li><li>jar包的版本</li><li>jar包内的具体细节</li></ul></li><li>而使用 Maven 后，依赖对应的 jar 包能够<strong>自动下载</strong>，方便、快捷又规范</li></ul><h4 id="③jar-包之间的依赖关系"><a href="#③jar-包之间的依赖关系" class="headerlink" title="③jar 包之间的依赖关系"></a>③jar 包之间的依赖关系</h4><ul><li><p>框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度</p></li><li><p>下面是前面例子中 jar 包之间的依赖关系：</p></li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.mqcmj2wu734.webp"                      width="65%"                 ><br><ul><li>而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助</li><li><strong>使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量</strong></li></ul><br><br><h3 id="Maven-作为构建管理工具"><a href="#Maven-作为构建管理工具" class="headerlink" title="Maven 作为构建管理工具"></a>Maven 作为构建管理工具</h3><h4 id="①你没有注意过的构建"><a href="#①你没有注意过的构建" class="headerlink" title="①你没有注意过的构建"></a>①你没有注意过的构建</h4><ul><li>可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的</li></ul><h4 id="②脱离-IDE-环境仍需构建"><a href="#②脱离-IDE-环境仍需构建" class="headerlink" title="②脱离 IDE 环境仍需构建"></a>②脱离 IDE 环境仍需构建</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1ivp2tn48qw0.webp"                      width="60%"                ><br><br><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li><strong>管理规模庞大的 jar 包，需要专门工具。</strong></li><li><strong>脱离 IDE 环境执行构建操作，需要专门工具。</strong></li></ul><br><br><br><h2 id="What？什么是-Maven？"><a href="#What？什么是-Maven？" class="headerlink" title="What？什么是 Maven？"></a>What？什么是 Maven？</h2><ul><li>Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供<strong>构建</strong>和<strong>依赖</strong>管理支持的工具</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ecian9do5e0.webp"                      width="30%"                ><br><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><blockquote><p>Java 项目开发过程中，构建指的是使用<strong>『原材料生产产品』</strong>的过程</p></blockquote><ul><li>原材料<ul><li>Java 源代码</li><li>基于 HTML 的 Thymeleaf 文件</li><li>图片</li><li>配置文件</li><li>……</li></ul></li><li>产品<ul><li>一个可以在服务器上运行的项目</li></ul></li></ul><ul><li><strong>构建过程包含的主要的环节：</strong></li></ul><blockquote><ul><li>清理：删除上一次构建的结果，为下一次构建做好准备</li><li>编译：Java 源程序编译成 *.class 字节码文件</li><li>测试：运行提前准备好的测试程序</li><li>报告：针对刚才测试的结果生成一个全面的信息</li><li>打包<ul><li>Java工程：jar包</li><li>Web工程：war包</li></ul></li><li>安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库</li><li>部署<ul><li>部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上</li><li>部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</li></ul></li></ul></blockquote><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。例如：<ul><li>junit-4.12 依赖 hamcrest-core-1.3</li><li>thymeleaf-3.0.12.RELEASE 依赖 ognl-3.1.26<ul><li>ognl-3.1.26 依赖 javassist-3.20.0-GA</li></ul></li></ul></li></ul><ul><li>依赖管理中要解决的具体问题：<ul><li>jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</li><li>jar 包之间的依赖：通过依赖的传递性自动完成</li><li>jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入</li></ul></li></ul><h3 id="Maven-的工作机制"><a href="#Maven-的工作机制" class="headerlink" title="Maven 的工作机制"></a>Maven 的工作机制</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6wuv1htwzko0.webp"                      width="60%"                ><br><br><br><h1 id="第二章-Maven-核心程序解压和配置"><a href="#第二章-Maven-核心程序解压和配置" class="headerlink" title="第二章 Maven 核心程序解压和配置"></a>第二章 Maven 核心程序解压和配置</h1><h2 id="Maven核心程序解压与配置"><a href="#Maven核心程序解压与配置" class="headerlink" title="Maven核心程序解压与配置"></a>Maven核心程序解压与配置</h2><ul><li>Maven 官网地址：<a class="link"   href="https://maven.apache.org/" >Maven – Welcome to Apache Maven<i class="fas fa-external-link-alt"></i></a></li></ul><ul><li>解压Maven核心程序<ul><li>核心程序压缩包：apache-maven-3.8.4-bin.zip，解压到<strong>非中文、没有空格</strong>的目录</li><li>在解压目录中，我们需要着重关注 Maven 的核心配置文件：<strong>conf/settings.xml</strong></li></ul></li></ul><ul><li>指定本地仓库<ul><li>建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">| The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置阿里云提供的镜像仓库<ul><li>Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，<strong>访问国内网站</strong>，可以让 Maven 下载 jar 包的时候速度更快。配置的方式是：</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将原有的例子配置注释掉 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">  &lt;id&gt;maven-default-http-blocker&lt;/id&gt;</span></span><br><span class="line"><span class="comment">  &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">  &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">  &lt;url&gt;http://0.0.0.0/&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;blocked&gt;true&lt;/blocked&gt;</span></span><br><span class="line"><span class="comment">&lt;/mirror&gt; --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加入我们的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置 Maven 工程的基础 JDK 版本</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul><li>检查 JAVA_HOME 配置是否正确<ul><li>Maven 是一个用 Java 语言开发的程序，它必须基于 JDK 来运行，需要通过 JAVA_HOME 来找到 JDK 的安装位置</li></ul></li><li>配置 MAVEN_HOME</li><li>配置PATH</li><li>验证</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mvn -v</span><br><span class="line">Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class="line">Maven home: D:\software\apache-maven-3.8.4</span><br><span class="line">Java version: 1.8.0_141, vendor: Oracle Corporation, runtime: D:\software\Java\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: <span class="string">&quot;windows 10&quot;</span>, version: <span class="string">&quot;10.0&quot;</span>, <span class="built_in">arch</span>: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;windows&quot;</span></span><br></pre></td></tr></table></figure><br><br><br><h1 id="第三章-使用-Maven：命令行环境"><a href="#第三章-使用-Maven：命令行环境" class="headerlink" title="第三章 使用 Maven：命令行环境"></a>第三章 使用 Maven：命令行环境</h1><h2 id="实验一：根据坐标创建-Maven-工程"><a href="#实验一：根据坐标创建-Maven-工程" class="headerlink" title="实验一：根据坐标创建 Maven 工程"></a>实验一：根据坐标创建 Maven 工程</h2><h3 id="Maven-核心概念：坐标"><a href="#Maven-核心概念：坐标" class="headerlink" title="Maven 核心概念：坐标"></a>Maven 核心概念：坐标</h3><h4 id="①数学中的坐标"><a href="#①数学中的坐标" class="headerlink" title="①数学中的坐标"></a>①数学中的坐标</h4><ul><li>使用 x、y、z 三个<strong>『向量』</strong>作为空间的坐标系，可以在<strong>『空间』</strong>中唯一的定位到一个<strong>『点』</strong></li></ul><h4 id="②Maven中的坐标"><a href="#②Maven中的坐标" class="headerlink" title="②Maven中的坐标"></a>②Maven中的坐标</h4><p>[1]向量说明</p><ul><li>使用三个<strong>『向量』</strong>在<strong>『Maven的仓库』</strong>中<strong>唯一</strong>的定位到一个<strong>『jar』</strong>包。<ul><li><strong>groupId</strong>：公司或组织的 id</li><li><strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id</li><li><strong>version</strong>：版本号</li></ul></li></ul><p>[2]三个向量的取值方式</p><ul><li>groupId：公司或组织域名的倒序，通常也会加上项目名称<ul><li>例如：com.atguigu.maven</li></ul></li><li>artifactId：模块的名称，将来作为 Maven 工程的工程名</li><li>version：模块的版本号，根据自己的需要设定<ul><li>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本</li><li>例如：RELEASE 表示正式版本</li></ul></li></ul><blockquote><p>举例：</p></blockquote><ul><li>groupId：com.atguigu.maven</li><li>artifactId：pro01-atguigu-maven</li><li>version：1.0-SNAPSHOT</li></ul><h4 id="③坐标和仓库中-jar-包的存储路径之间的对应关系"><a href="#③坐标和仓库中-jar-包的存储路径之间的对应关系" class="headerlink" title="③坐标和仓库中 jar 包的存储路径之间的对应关系"></a>③坐标和仓库中 jar 包的存储路径之间的对应关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 坐标： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上面坐标对应的 jar 包在 Maven 本地仓库中的位置：</span><br><span class="line">Maven本地仓库根目录\javax\servlet\servlet-api\2.5\servlet-api-2.5.jar</span><br></pre></td></tr></table></figure><h3 id="实验操作：使用命令生成Maven工程"><a href="#实验操作：使用命令生成Maven工程" class="headerlink" title="实验操作：使用命令生成Maven工程"></a>实验操作：使用命令生成Maven工程</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.52zgdx8nqpc0.webp"                      width="40%"                ><br><ul><li>运行 <strong>mvn archetype:generate</strong> 命令</li></ul><blockquote><p>TIP</p><p>Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】</p><p>Define value for property ‘groupId’: com.atguigu.maven</p><p>Define value for property ‘artifactId’: pro01-maven-java</p><p>Define value for property ‘version’ 1.0-SNAPSHOT: :【直接回车，使用默认值】</p><p>Define value for property ‘package’ com.atguigu.maven: :【直接回车，使用默认值】</p><p>Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】</p></blockquote><ul><li>调整</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">自动生成的 App.java 和 AppTest.java 可以删除  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖信息配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dependencies复数标签：里面包含dependency单数标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dependency单数标签：配置一个具体的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过坐标来依赖其他jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖的范围 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自动生成的 pom.xml 解读</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 当前Maven工程的坐标 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 当前Maven工程的打包方式，可选值有下面三种： --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- jar：表示这个工程是一个Java工程  --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- war：表示这个工程是一个Web工程 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- pom：表示这个工程是“管理其他工程”的工程 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 工程构建过程中读取源码时使用的字符集 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 当前工程所依赖的jar包 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用dependency配置一个具体的依赖 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- scope标签配置依赖的范围 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="Maven核心概念：POM"><a href="#Maven核心概念：POM" class="headerlink" title="Maven核心概念：POM"></a>Maven核心概念：POM</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><ul><li>POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现</li></ul><h4 id="模型化思想"><a href="#模型化思想" class="headerlink" title="模型化思想"></a>模型化思想</h4><ul><li>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据</li></ul><h4 id="对应的配置文件"><a href="#对应的配置文件" class="headerlink" title="对应的配置文件"></a>对应的配置文件</h4><ul><li>POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。</li></ul><h3 id="Maven核心概念：约定的目录结构"><a href="#Maven核心概念：约定的目录结构" class="headerlink" title="Maven核心概念：约定的目录结构"></a>Maven核心概念：约定的目录结构</h3><h4 id="①各个目录的作用"><a href="#①各个目录的作用" class="headerlink" title="①各个目录的作用"></a>①各个目录的作用</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.178pqbq36pd.webp"                      width="60%"                ><br><ul><li>另外还有一个 target 目录专门存放构建操作输出的结果</li></ul><h4 id="②约定目录结构的意义"><a href="#②约定目录结构的意义" class="headerlink" title="②约定目录结构的意义"></a>②约定目录结构的意义</h4><ul><li>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。</li></ul><h4 id="③约定大于配置"><a href="#③约定大于配置" class="headerlink" title="③约定大于配置"></a>③约定大于配置</h4><ul><li><p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。</p></li><li><p>目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。</p></li></ul><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>maven的工作机制还需要深入熟悉</li></ol></blockquote><br><img src="" width="60%"/><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-Maven概述&quot;&gt;&lt;a href=&quot;#第一章-Maven概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 Maven概述&quot;&gt;&lt;/a&gt;第一章 Maven概述&lt;/h1&gt;&lt;h2 id=&quot;Why？为什么要学习-Maven？&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="maven" scheme="https://ratears.gitee.io/dev.ratears.life/categories/maven/"/>
    
    
    <category term="maven" scheme="https://ratears.gitee.io/dev.ratears.life/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>字符集和字符编码（Charset &amp; Encoding）</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%88Charset-Encoding%EF%BC%89/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%88Charset-Encoding%EF%BC%89/</id>
    <published>2022-09-10T13:03:57.000Z</published>
    <updated>2022-09-10T17:35:45.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><ul><li>复习Java I/O知识的时候，关于转换流有涉及到字符集的知识。于是想深入理解一下字符集和编码。（毕竟，字符编码是计算机技术、编程的基石，包括编程中涉及到的国际化问题，就必须懂得一点字符编码的知识）查阅相关资料后，并做了笔记</li></ul><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// charsetName：指定字符编码 </span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputStreamReader</span><span class="params">(InputStream in, String charsetName)</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OutputStreamWriter</span><span class="params">(OutputStream out, String charsetName)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos, <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><br><br><br><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="编码和解码"><a href="#编码和解码" class="headerlink" title="编码和解码"></a>编码和解码</h2><ul><li>编码：信息按照一定的规则从一种形式或格式转换为另一种形式的过程</li><li>解码：是一个编码的逆转换过程</li></ul><blockquote><p><font color="red">编码解码都是有一套预先规定的方案,无论是在编码过程还是解码过程,都要遵守这套规则来运算</font></p></blockquote><br><br><h2 id="为什要编码解码"><a href="#为什要编码解码" class="headerlink" title="为什要编码解码"></a>为什要编码解码</h2><ul><li>在计算机中，是不能直接存储字符的，计算机中储存的信息都是用二进制数表示的；而我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，如’a’用什么表示，称为”编码”；反之，将存储在计算机中的二进制数解析显示出来，称为”解码”，如同密码学中的加密和解密。在解码过程中，如果使用了错误的解码规则，则导致’a’解析成’b’或者<strong>乱码</strong></li><li>编码解码在不同的场景中具有不同的意义，比如常见的字符编码解码,URL编码解码等</li></ul><blockquote><p>计算机为什么采用二进制：有很多原因.在这里简单的说几点,在技术上易实现,因为我们可以使用双稳态电路来表示1和0,高电平为1,低电平为0.且因为只有1和0,所以在传输和处理的过程中不容易出错.另外二进制的运算规则也相对来说简单.综合各方面因素,最终计算机采用二进制</p></blockquote><br><br><h2 id="字符集（Charset）"><a href="#字符集（Charset）" class="headerlink" title="字符集（Charset）"></a>字符集（Charset）</h2><ul><li>字符集（Charset）是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等</li></ul><br><br><h2 id="字符编码（Character-Encoding）"><a href="#字符编码（Character-Encoding）" class="headerlink" title="字符编码（Character Encoding）"></a>字符编码（Character Encoding）</h2><ul><li>字符编码（Character Encoding）是一套法则，使用该法则能够对自然语言的字符的一个集合（如字母表或音节表），与其他东西的一个集合（如号码或电脉冲）进行配对。即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码（通俗的讲：计算机字符编码就是将 计算机里展示的字符集 和 计算机能理解的二进制数 对应起来）</li></ul><br><br><h2 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h2><ul><li>乱码就是因为使用了不对应的字符集导致部分或所有字符没法被正确阅读。（就比如我告诉你,打开新华字典的xx页的xx行,就是我想对你说的话.结果你拿了本牛津英汉字典,那你当然不能正确获取到我想对你说的话）</li></ul><br><br><h3 id="为什么有时候乱码都是-号"><a href="#为什么有时候乱码都是-号" class="headerlink" title="为什么有时候乱码都是 ? 号"></a>为什么有时候乱码都是 ? 号</h3><ul><li>在 <code>Java</code> 开发中，经常会碰到乱码显示为 <code>?</code> 号，比如下面这个例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;双子孤狼&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] bytes = name.getBytes(StandardCharsets.ISO_8859_1);</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));<span class="comment">//输出：????</span></span><br></pre></td></tr></table></figure><ul><li>这个输出结果的原因是中文无法用 <code>ISO_8859_1</code> 编码进行存储，而示例中却强制用 <code>ISO_8859_1</code> 编码进行解码</li></ul><blockquote><p>在 <code>Java</code> 中提供了一个 <code>ISO_8859_1</code> 类用来解码，解码时当发现当前字符转成十进制之后大于 <code>255</code> 时就会直接不进行解码，转而直接赋一个默认值 <code>63</code>，所以上面的示例中的 <code>byte</code> 数组结果就是 <code>63 63 63 63</code>，而<code>63</code> 在 <code>ASCII</code> 中就恰好就对应了 <code>?</code> 号。</p><p>所以一般我们看到编码出现 <code>?</code> 基本就说明当前是采用 <code>ISO_8859_1</code> 进行的解码，而当前的字符又大于 <code>255</code></p></blockquote><br><br><br><h1 id="常用字符集和字符编码"><a href="#常用字符集和字符编码" class="headerlink" title="常用字符集和字符编码"></a>常用字符集和字符编码</h1><ul><li>常见字符集名称：ASCII字符集、GB2312字符集、BIG5字符集、GB18030字符集、Unicode字符集等。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字</li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/微信图片_20220910225027-(1).2kjjnk2mwyy0.webp"                      width="70%"                ><br><br><br><h2 id="ASCII字符集-amp-编码"><a href="#ASCII字符集-amp-编码" class="headerlink" title="ASCII字符集&amp;编码"></a>ASCII字符集&amp;编码</h2><ul><li>计算机最开始诞生于美国，而且计算机只能识别二进制，所以我们就需要把常用语言和二进制关联起来。美国人把英文里面常用的字符以及一些控制字符转换成了二进制数据，形成了一个编码对应关系表，这就是ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）字符集和ASCII编码</li><li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被Unicode追上的迹象），并等同于国际标准ISO/IEC 646</li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6hglwgjozx80.webp"                      width="70%"                ><br><ul><li><strong>ASCII字符集：</strong>主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）</li><li><strong>ASCII编码：</strong>将ASCII字符集转换为计算机可以接受的数字系统的数的规则</li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qu3exerer80.webp"                      width="60%"                ><br><blockquote><p>使用7位（bits）表示一个字符，共128字符；但是7位编码的字符集只能支持128个字符，为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用8位（bits）表示一个字符，共256字符</p></blockquote><br><ul><li>ASCII编码表</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.632akue1h1s0.webp"                      width="70%"                ><br><ul><li>扩展ASCII编码表</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4selgy9t3da0.webp"                      width="70%"                ><br><blockquote><p><font color="red">ASCII的最大缺点是只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部份西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的苹果电脑已经抛弃ASCII而转用Unicode</font></p></blockquote><br><br><h2 id="GBXXXX字符集-amp-编码"><a href="#GBXXXX字符集-amp-编码" class="headerlink" title="GBXXXX字符集&amp;编码"></a>GBXXXX字符集&amp;编码</h2><ul><li>当天朝也有了计算机之后，ASCII字符集（编码）不够用。为了显示中文，必须设计一套编码规则用于将汉字转换为计算机可以接受的数字系统的数</li><li>天朝专家把那些127号之后的奇异符号们（即EASCII）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了</li></ul><br><br><h3 id="GB2312字符集-amp-编码"><a href="#GB2312字符集-amp-编码" class="headerlink" title="GB2312字符集&amp;编码"></a>GB2312字符集&amp;编码</h3><h4 id="GB2312字符集设计"><a href="#GB2312字符集设计" class="headerlink" title="GB2312字符集设计"></a>GB2312字符集设计</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.376tsyyf9wu0.webp"                      width="70%"                ><br><ul><li>01~09区表示除汉子外的682个字符</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3x9vnc4ax1c0.webp"                      width="70%"                ><br><ul><li><p>10~15区是空白区</p></li><li><p>16~55区收录3755个一级汉字，按拼音排序</p></li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1g8kw6mqnk80.webp"                      width="70%"                ><br><ul><li>56~87区收录了3008个二级汉字，按部首/笔画排序（不太常用的、生僻汉字）</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.x9xgkbmfbhc.webp"                      width="70%"                ><br><br><h4 id="GB2312字符编码设计"><a href="#GB2312字符编码设计" class="headerlink" title="GB2312字符编码设计"></a>GB2312字符编码设计</h4><ul><li>规定如何在计算机中存储</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lyrzte8k8o.webp"                      width="70%"                ><br><blockquote><p>以<code>侃</code>这个字为例，<code>侃</code>这个字的码位是 <code>5709</code>，按前两位和后两位分开（<code>57</code>和<code>09</code>）并将其转化为16进制（<code>0x39</code>和<code>0x09</code>），再分别加上<code>0xA0</code>，得到<code>0xD9</code>和<code>0xA9</code>，再将其组合到一起得到<code>0xD90xA9</code>，<code>0xD90xA9</code>便是<code>侃</code>这个字的GB2312编码值。即计算机使用GB2312编码时，<code>侃</code>这个字在计算机中存储的16进制形式是：<code>D9A9</code></p></blockquote><ul><li>Java获取某个汉字的GB2312编码值</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.46qrewk6ons0.webp"                      width="70%"                ><br><br><h3 id="GB2312字符集扩展"><a href="#GB2312字符集扩展" class="headerlink" title="GB2312字符集扩展"></a>GB2312字符集扩展</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.585csd88dpw0.webp"                      width="70%"                ><br><br><br><h2 id="Unicode字符集-amp-UTF编码"><a href="#Unicode字符集-amp-UTF编码" class="headerlink" title="Unicode字符集&amp;UTF编码"></a>Unicode字符集&amp;UTF编码</h2><ul><li><p>Unicode 只是一个字符集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</p></li><li><p>unicode是一个标准，其包含了对应的字符集和编码规则。UTF-32/ UTF-16/ UTF-8是三种字符编码方案（即：UTF-8 是 Unicode 的实现方式之一）</p></li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6film7n2p0s0.webp"                      width="70%"                ><br><br><h3 id="UTF-8-编码"><a href="#UTF-8-编码" class="headerlink" title="UTF-8 编码"></a>UTF-8 编码</h3><ul><li><p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的<strong>可变长度字符编码（定长码）</strong>，也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用</p></li><li><p>UTF-8编码是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度（每次传送8位数据）</p></li><li><p>UTF-8 的编码规则（存储规范）：</p><ul><li>对于单字节的符号，字节的第一位设为<code>0</code>，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的</li><li>对于<code>n</code>字节的符号（<code>n &gt; 1</code>），第一个字节的前<code>n</code>位都设为<code>1</code>，第<code>n + 1</code>位设为<code>0</code>，后面字节的前两位一律设为<code>10</code>。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码</li></ul></li></ul><table><thead><tr><th align="center">Unicode符号范围（十六进制）</th><th align="left">UTF-8编码方式（二进制）</th></tr></thead><tbody><tr><td align="center">0x0000 0000 - 0x0000 007F</td><td align="left">0xxxxxxx</td></tr><tr><td align="center">0x0000 0080 - 0x0000 07FF</td><td align="left">110xxxxx 10xxxxxx</td></tr><tr><td align="center">0x0000 0800 - 0x0000 FFFF</td><td align="left">1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td align="center">0x0001 0000 - 0x0010 FFFF</td><td align="left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><blockquote><p>跟据上表（字母x表示可用编码的位），解读 UTF-8 编码非常简单。如果一个字节的第一位是<code>0</code>，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则连续有多少个<code>1</code>，就表示当前字符占用多少个字节</p></blockquote><ul><li>以汉字<code>严</code>为例，演示如何实现 UTF-8 编码</li></ul><blockquote><p><code>严</code>的 Unicode 是<code>4E25</code>（<code>100111000100101</code>），根据上表，可以发现<code>4E25</code>处在第三行的范围内（<code>0000 0800 - 0000 FFFF</code>），因此<code>严</code>的 UTF-8 编码需要三个字节，即格式是<code>1110xxxx 10xxxxxx 10xxxxxx</code>。然后，从<code>严</code>的最后一个二进制位开始，依次从后向前填入格式中的<code>x</code>，多出的位补<code>0</code>。这样就得到了，<code>严</code>的 UTF-8 编码是<code>11100100 10111000 10100101</code>，转换成十六进制就是<code>E4B8A5</code>。（即：计算机使用<code>Unicode</code>编码时，<code>严</code>这个字在计算机中存储的16进制形式是：<code>E4B8A5</code>）</p></blockquote><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hiq48s9b7k.webp"                      width="70%"                ><br><h1 id="参考与延伸"><a href="#参考与延伸" class="headerlink" title="参考与延伸"></a>参考与延伸</h1><ul><li>阮一峰博客：<a class="link"   href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" >字符编码笔记：ASCII，Unicode 和 UTF-8<i class="fas fa-external-link-alt"></i></a></li><li>runoob（菜鸟教程）：<a class="link"   href="https://www.runoob.com/w3cnote/charset-encoding.html" >字符集和字符编码<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.cnblogs.com/lonely-wolf/p/14676335.html" >字符集历史<i class="fas fa-external-link-alt"></i></a></li></ul><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;复习Java I/O知识的时候，关于转换流有涉及到字符集的知识。于是想深入理解一下字符集和编码。（毕竟，字符编码是计算机技术、编</summary>
      
    
    
    
    <category term="computer" scheme="https://ratears.gitee.io/dev.ratears.life/categories/computer/"/>
    
    <category term="character encoding" scheme="https://ratears.gitee.io/dev.ratears.life/categories/computer/character-encoding/"/>
    
    
    <category term="computer" scheme="https://ratears.gitee.io/dev.ratears.life/tags/computer/"/>
    
    <category term="character encoding" scheme="https://ratears.gitee.io/dev.ratears.life/tags/character-encoding/"/>
    
  </entry>
  
  <entry>
    <title>Java - I/O 系统</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/Java-I-O-%E7%B3%BB%E7%BB%9F/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/Java-I-O-%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-09-09T16:46:42.000Z</published>
    <updated>2022-09-18T19:06:30.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识I-O流"><a href="#认识I-O流" class="headerlink" title="认识I/O流"></a>认识I/O流</h1><ul><li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4rv75wq98ak0.webp"                      width="60%"                 ><br><br><br><h1 id="Java如何解决I-O问题"><a href="#Java如何解决I-O问题" class="headerlink" title="Java如何解决I/O问题"></a>Java如何解决I/O问题</h1><ul><li>Java将任意数据源或者数据接收端表达为一个具有生成或者接受数据片段能力的对象（以表示“流”的抽象）。Java程序中，对于数据的输入/输出操作以<strong>“流(stream)”</strong> 的方式进行</li><li>流（Stream）是一个抽象的概念，当程序需要读取数据的时候，就会开启一个通向数据源的流，数据源可以是文件，内存，或是网络连接。反过来，当程序需要写入数据的时候，就会开启一个通向目的地的流。</li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5l9vtmu8kk00.webp"                      width="60%"                 ><br><br><ul><li>java.io包下提供了各种“流”类和接口，且使用装饰器模式来解决扩展功能的问题，用以获取不同种类的数据，并通过标准的方法输入或输出数据</li><li>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的（由这四个类派生出来的子类名称都是以其父类名作为子类名后缀）</li></ul><br><table><thead><tr><th align="center">（抽象基类）</th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">InputStream</td><td align="center">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputStream</td><td align="center">Writer</td></tr></tbody></table><br><blockquote><p>Java中所有流流均是由它们派生出来的</p></blockquote><br><br><br><h1 id="Java-I-O-流的历史"><a href="#Java-I-O-流的历史" class="headerlink" title="Java I/O 流的历史"></a>Java I/O 流的历史</h1><ul><li>Java 1.0 I/O库诞生，分为输入和输出两类，面向字节。输入相关的类都继承自InputStream，输出相关的类都继承自OutputStream，且整体使用了装饰器的设计模式</li><li>Java 1.1 对I/O库进行了重大的修改，不但增强了面向字节的类库功能，还新增了面向字符的Reader和Writer，以解决国际化的问题，延续了装饰器的设计模式</li><li>Java 1.4 引入了java.nio(new I/O），使用通道（channel），缓冲区（buffer），选择器（Selector）等措施极大的提升了性能</li><li>Java 1.7/1.8 对难用的文件I/O的操作体验进行了巨大的改进，且新增了Asynchronous IO（AIO），这时nio也有了一个别名，称之为non-blocking I/O</li></ul><blockquote><p><font color="red">Java8 函数式流和 I/O 流之间并无任何关联</font></p></blockquote><br><br><br><h1 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h1><h2 id="数据单元：字节流和字符流"><a href="#数据单元：字节流和字符流" class="headerlink" title="数据单元：字节流和字符流"></a>数据单元：字节流和字符流</h2><ul><li>按操作<font color="red">数据单位</font>不同分为：字节流(8 bit)，字符流(16 bit)</li></ul><br><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">字节流(8 bit)</td><td align="left">以字节为单位获取数据，命名上以<code>Stream</code>结尾的流一般是字节流，如FileInputStream、FileOutputStream。 字节流可以处理任何一切形式的数据源，包括音频，视频，图片，纯文本，Word，Excel等等</td></tr><tr><td align="center">字符流(16 bit)</td><td align="left">以字符为单位获取数据，命名上以<code>Reader/Writer</code>结尾的流一般是字符流，如FileReader、FileWriter。<code> </code>字符流只能处理字符串，纯文本等。Java使用Unicode的统一标准字符集，一个字符占用两个字节</td></tr></tbody></table><br><br><h3 id="字节流（InputStream-和-OutputStream）"><a href="#字节流（InputStream-和-OutputStream）" class="headerlink" title="字节流（InputStream 和 OutputStream）"></a>字节流（InputStream 和 OutputStream）</h3><ul><li>一切的数据在计算机中都可表示为字节</li><li>在不同源之间的字节数据的输入与输出，可形象的表示为“字节的流动”，即字节流</li><li>表示从不同源输入的类：InputStream<ul><li>文件, 字节数组，字符串对象，管道，其他流，网络等…</li></ul></li><li>表示输出到不同源的类：OutputStream</li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.29yhndh0ugys.webp"                      width="80%"                 ><br><br><h3 id="字符流（Reader-和-Writer）"><a href="#字符流（Reader-和-Writer）" class="headerlink" title="字符流（Reader 和 Writer）"></a>字符流（Reader 和 Writer）</h3><ul><li>Java 1.0时代的I/O流类库只能支持8位字节流，无法妥善处理16位Unicode字符</li><li>Reader和Writer类并不是为了取代InputStream和OutputStream，而是提供了字符操作的能力，为了在所有的I/O操作中都支持Unicode</li><li>在需要操作字符的场景中尽量都使用Reader和Writer相关的类，而在需要进行字节操作的场景中，面向字节的InputStream和OutputStream才是正确的选择，比如读取和写入图片文件，java.util.zip库</li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v9r42axexc0.webp"                      width="80%"                 ><br><br><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><ul><li>Unicode(统一码)，它整理和编码了世界上大部分的文字系统，使得电脑可以用更简单的方式呈现和处理文字。它遵循通用字符集 (UCS)并规定了其实现方式，即如何映射为计算机的字节，如何传输等。</li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6edn0pzh88g0.webp"                      width="60%"                 ><br><br><h3 id="Unicode-与-Java"><a href="#Unicode-与-Java" class="headerlink" title="Unicode 与 Java"></a>Unicode 与 Java</h3><ul><li>Java使用Unicode的统一标准字符集</li><li>Java使用UTF-16编码，所以会将字符串表示为一系列16位的单元，如果标准字符集中字符的数值大于16位（超出U+FFFF），则会拆分为两个16位的单元用以表示一个字符。对于能用16位内数字表示的字符，Unicode的字符数值（Code Point）和UTF-16编码后的16位的单元（Code Unit），是一致的。</li></ul><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ab2rmmctv80.webp"                      width="60%"                 ><br><br><h2 id="流的方向：输入流和输出流"><a href="#流的方向：输入流和输出流" class="headerlink" title="流的方向：输入流和输出流"></a>流的方向：输入流和输出流</h2><ul><li>按数据流的<font color="red">流向</font>不同分为：输入流，输出流</li></ul><br><table><thead><tr><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">数据流向是数据源到程序（以InputStream、Reader结尾的流）</td></tr><tr><td align="center">输出流</td><td align="center">数据流向是程序到目的地（以OutputStream、Writer结尾的流）</td></tr></tbody></table><br><br><h2 id="处理对象：节点流和处理流"><a href="#处理对象：节点流和处理流" class="headerlink" title="处理对象：节点流和处理流"></a>处理对象：节点流和处理流</h2><ul><li>按流的<font color="red">角色</font>（处理对象）的不同分为：节点流，处理流</li></ul><br><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">节点流</td><td align="left">可以从或向一个特定的地方（节点）读写数据，如FileInputStream、FileReader、DataInputStream等。 （ 没有节点流，处理流发挥不了任何作用。）</td></tr><tr><td align="center">处理流</td><td align="left">不直接连接到数据源或目的地，是 “处理流的流”。通过对已有的节点流进行包装，通过所封装的流的功能调用实现数据读写，提高性能或提高程序的灵活性。 如BufferedInputStream、BufferedReader等。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。处理流也叫 ”包装流/过滤流“。</td></tr></tbody></table><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7fiok2t2e880.webp"                      width="60%"                 ><br><br><h2 id="I-O类型"><a href="#I-O类型" class="headerlink" title="I/O类型"></a>I/O类型</h2><ul><li>按<font color="red">I/O类型</font>来分类</li></ul><br><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">文件流</td><td align="left">对文件进行读、写操作 ：FileReader、FileWriter、FileInputStream、FileOutputStream</td></tr><tr><td align="center">缓冲流</td><td align="left">在读入或写出时，数据可以基于缓冲批量读写，以减少I/O的次数：BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream</td></tr><tr><td align="center">内存流</td><td align="left">1.从/向内存数组读写数据: CharArrayReader、 CharArrayWriter、ByteArrayInputStream、ByteArrayOutputStream 2.从/向内存字符串读写数据 StringReader、StringWriter、StringBufferInputStream</td></tr><tr><td align="center">转换流</td><td align="left">按照一定的编码/解码标准将字节流转换为字符流，或进行反向转换（Stream到Reader,Writer的转换类）：InputStreamReader、OutputStreamWriter</td></tr><tr><td align="center">对象流</td><td align="left">字节流与对象实例相互转换,实现对象的序列化 ：ObjectInputStream、ObjectOutputStream 注意: 1.读取顺序和写入顺序一定要一致，不然会读取出错。 2.在对象属性前面加<code>transient</code>关键字，则该对象的属性不会被序列化</td></tr><tr><td align="center">打印流</td><td align="left">只有输出,没有输入，在整个IO包中，打印流是输出信息最方便的类,分为 PrintWriter（字符打印流）、PrintStream(字节打印流)</td></tr><tr><td align="center">DataConversion数据流</td><td align="left">按基本数据类型读/写，可以字节流与基本类型数据相互转换：DataInputStream、DataOutputStream</td></tr><tr><td align="center">过滤流</td><td align="left">在数据进行读或写时进行过滤：FilterReader、FilterWriter、FilterInputStream、FilterOutputStream</td></tr><tr><td align="center">合并流</td><td align="left">把多个输入流按顺序连接成一个输入流 ：SequenceInputStream</td></tr><tr><td align="center">操作ZIP包流</td><td align="left">ZipInputStream可以读取zip格式的流，ZipOutputStream可以把多份数据写入zip包</td></tr><tr><td align="center">操作JAR包流</td><td align="left">JarInputStream/JarOutputStream,派生自ZipInputStream/ZipOutputStream，它增加的主要功能是直接读取jar文件里面的MANIFEST.MF文件。因为本质上jar包就是zip包，只是额外附加了一些固定的描述文件。</td></tr><tr><td align="center">管道流</td><td align="left">线程交互的时候使用，管道输出流可以连接到管道输入流，以创建通信管道。管道输出流是管道的发送端。通常数据由某个线程写入管道输出流，并由其他线程从连接的管道输入流读取。注意，管道输出流和输入流需要对接。: PipedReader、PipedWriter、PipedInputStream、PipedOutputStream</td></tr><tr><td align="center">Counting计数</td><td align="left">在读入数据时对行记数 ：LineNumberReader、LineNumberInputStream</td></tr><tr><td align="center">推回输入流</td><td align="left">通过缓存机制，进行预读 ：PushbackReader、PushbackInputStream</td></tr><tr><td align="center">接收和响应客户端请求流</td><td align="left">servletinputstream：用来读取客户端的请求信息的输入流 servletoutputstream:可以将数据返回到客户端</td></tr><tr><td align="center">随机读取写入流</td><td align="left">RandomAccessFile 既可以读取文件内容，也可以向文件输出数据，RandomAccessFile 对象包含一个记录指针，标识当前读写处的位置，可以控制记录指针从IO任何位置读写文件</td></tr><tr><td align="center">加密流</td><td align="left">对流加密/解密 CipherOutputStream 由一个 OutputStream 和一个 Cipher 组成 ,write() 方法在将数据写出到基础 OutputStream 之前先对该数据进行处理(加密或解密) , 同样CipherInputStream是由InputStream和一个Cipher组成,read()方法在读入时,对数据进行加解密操作</td></tr><tr><td align="center">数字签名流</td><td align="left">DigestInputStream : 最大的特点是在读取的数据的时候已经调用MessageDigest实例的update方法，当数据从底层的数据流中读取之后就只可以直接调用MessageDigest实例的digest()方法了，从而完成对输入数据的摘要加密 DigestOutputStream :最大的特点是在向底层的输出流写入数据的时候已经调用MessageDigest实例的update方法，并作为MessageDigest的输入数据，之后就可以直接调用MessageDigest实例的digest()方法完成加密过程；同样的，是否对数据加密也是由该流的on(boolean b)方法进行控制的，如果设置成false，那么在写出数据的过程中便不会将数据传给update方法，那么此时它跟普通的输出流就没有任何区别了</td></tr></tbody></table><br><blockquote><p><em>CipherInputStream和CipherOutputStream与DigestInputStream/DigestOutputStream/类似，只是后者更为彻底，它们不用在显示地调用传入的Cipher对象的update和doFinal方法，加密或解密过程在读写数据的同时已经隐式地完成了</em></p></blockquote><br><br><br><h1 id="I-O-流体系"><a href="#I-O-流体系" class="headerlink" title="I/O 流体系"></a>I/O 流体系</h1><h2 id="I-O流体系图"><a href="#I-O流体系图" class="headerlink" title="I/O流体系图"></a>I/O流体系图</h2><ul><li>下图基于Java 1.8制作，其中需要注意的是<code>StringBufferInputStream</code>和<code>LineNumberInputStream</code>已被废弃</li></ul><blockquote><p><code>StringBufferInputStream</code>: 该类无法准确的将字符转换为字节，推荐用<code>StringReader</code>来取代使用</p><p><code>LineNumberInputStream</code>: 该类错误地认为字节能恰当地表示字符，推荐使用字符流的类来取代，即<code>LineNumberReader</code></p></blockquote><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.fv0bu32iqn4.webp"                      width="80%"                 ><p><br><br></p><h2 id="I-O流体系类库"><a href="#I-O流体系类库" class="headerlink" title="I/O流体系类库"></a>I/O流体系类库</h2><table><thead><tr><th align="center">分类</th><th align="center">字节输入流</th><th align="center">字节输出流</th><th align="center">字符输入流</th><th align="center">字符输出流</th></tr></thead><tbody><tr><td align="center"><em>抽象基类</em></td><td align="center"><em>InputStream</em></td><td align="center"><em>OutputStream</em></td><td align="center"><em>Reader</em></td><td align="center"><em>Writer</em></td></tr><tr><td align="center"><strong>访问文件</strong></td><td align="center"><strong>FileInputStream</strong></td><td align="center"><strong>FileOutputStream</strong></td><td align="center"><strong>FileReader</strong></td><td align="center"><strong>FileWriter</strong></td></tr><tr><td align="center"><strong>访问数组</strong></td><td align="center"><strong>ByteArrayInputStream</strong></td><td align="center"><strong>ByteArrayOutputStream</strong></td><td align="center"><strong>CharArrayReader</strong></td><td align="center"><strong>CharArrayWriter</strong></td></tr><tr><td align="center"><strong>访问管道</strong></td><td align="center"><strong>PipedInputStream</strong></td><td align="center"><strong>PipedOutputStream</strong></td><td align="center"><strong>PipedReader</strong></td><td align="center"><strong>PipedWriter</strong></td></tr><tr><td align="center"><strong>访问字符串</strong></td><td align="center"></td><td align="center"></td><td align="center"><strong>StringReader</strong></td><td align="center"><strong>StringWriter</strong></td></tr><tr><td align="center">缓冲流</td><td align="center">BufferedInputStream</td><td align="center">BufferedOutputStream</td><td align="center">BufferedReader</td><td align="center">BufferedWriter</td></tr><tr><td align="center">转换流</td><td align="center"></td><td align="center"></td><td align="center">InputStreamReader</td><td align="center">OutputStreamWriter</td></tr><tr><td align="center">对象流</td><td align="center">ObjectInputStream</td><td align="center">ObjectOutputStream</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><em>抽象基类</em></td><td align="center"><em>FilterInputStream</em></td><td align="center"><em>FilterOutputStream</em></td><td align="center"><em>FilterReader</em></td><td align="center"><em>FilterWriter</em></td></tr><tr><td align="center">打印流</td><td align="center"></td><td align="center">PrintStream</td><td align="center"></td><td align="center">PrintWriter</td></tr><tr><td align="center">推回输入流</td><td align="center">PushbackInputStream</td><td align="center"></td><td align="center">PushbackReader</td><td align="center"></td></tr><tr><td align="center">特殊流</td><td align="center">DataInputStream</td><td align="center">DataOutputStream</td><td align="center"></td><td align="center"></td></tr></tbody></table><br><blockquote><p>注：表中<strong>粗体</strong>所表示的类代表节点流。<em>斜体</em> 表示的类代表抽象基类，无法直接创建实例。其他的为处理流</p></blockquote><br><br><h2 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h2><ul><li>自成体系，Java输入/输出流体系中功能最丰富的文件内容访问类，既可以读取文件内容，也可以向文件输出数据。</li><li>不支持装饰器，无法与InputStream/OutputStream联合起来用</li><li>与普通的输入/输出流不同的是，RandomAccessFile支持跳到文件任意位置读写数据（支持读写随机文件），可将文件视为在磁盘上的一个大的字节数组，我们能通过数组下标（文件指针）来访问里面的内容</li><li>RandomAccessFile对象包含一个记录指针，标识当前读写处的位置，当程序创建一个新的RandomAccessFile对象时，该对象的文件记录指针对于文件头（也就是0处），当读写n个字节后，文件记录指针将会向后移动n个字节，RandomAccessFile可以通过seek()方法自由移动记录指针</li><li>使用RandomAccessFile就必须知道文件的布局，确定要操作的位置</li><li>优先考虑使用nio的内存映射</li></ul><br><br><h3 id="RandomAccessFile使用"><a href="#RandomAccessFile使用" class="headerlink" title="RandomAccessFile使用"></a>RandomAccessFile使用</h3><ul><li>操作文件记录指针</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回文件记录指针的当前位置</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">getFilePointer</span><span class="params">()</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将文件记录指针定位到pos位置</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">seek</span><span class="params">(<span class="type">long</span> pos)</span></span><br></pre></td></tr></table></figure><br><ul><li>RandomAccessFile类在创建对象时，除了指定文件本身，还需要指定一个<code>mode</code>参数。该参数指定RandomAccessFile的访问模式，该参数有如下四个值：</li></ul><blockquote><ol><li>r：以只读方式打开指定文件。如果试图对该RandomAccessFile指定的文件执行写入方法则会抛出IOException</li><li>rw：以读取、写入方式打开指定文件。如果该文件不存在，则尝试创建文件</li><li>rws：以读取、写入方式打开指定文件。相对于rw模式，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备，默认情形下(rw模式下),是使用buffer的,只有cache满的或者使用RandomAccessFile.close()关闭流的时候儿才真正的写到文件</li><li>rwd：与rws类似，只是仅对文件的内容同步更新到磁盘，而不修改文件的元数据</li></ol></blockquote><br><br><h2 id="I-O流的主要类"><a href="#I-O流的主要类" class="headerlink" title="I/O流的主要类"></a>I/O流的主要类</h2><ul><li>整个Java.io包中最重要的就是5个类和一个接口</li></ul><br><br><h3 id="5个类："><a href="#5个类：" class="headerlink" title="5个类："></a>5个类：</h3><table><thead><tr><th align="center">类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">File</td><td align="center">表示一个文件或者目录,可以获取文件或目录相关属性,以及创建文件或目录</td></tr><tr><td align="center">InputStream</td><td align="center">字节输入流父类，单位为字节，定义了所有字节输入流的基本操作</td></tr><tr><td align="center">OutputStream</td><td align="center">字节输出流父类，单位为字节，定义了所有字节输出流的基本操作</td></tr><tr><td align="center">Reader</td><td align="center">字符输入流父类，单位为字符，定义了所有字符输入流的基本操作</td></tr><tr><td align="center">Writer</td><td align="center">字符输出流父类，单位为字符，定义了所有字符输出流的基本操作</td></tr></tbody></table><br><blockquote><p>Java中所有流均是由它们派生出来的</p><p><strong>jdk 1.4</strong>版本开始引入了新I/O类库，它位于 <code>java.nio</code> 包中，新I/O类库利用通道和缓冲区等来提高I/O操作的效率</p></blockquote><br><br><h3 id="1个接口："><a href="#1个接口：" class="headerlink" title="1个接口："></a>1个接口：</h3><table><thead><tr><th align="center">类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Serializable</td><td align="center">序列化/反序列化对象需要实现 Serializable接口</td></tr></tbody></table><br><br><h2 id="I-O流主要三个部分"><a href="#I-O流主要三个部分" class="headerlink" title="I/O流主要三个部分"></a>I/O流主要三个部分</h2><table><thead><tr><th>部分</th><th align="center">说明</th></tr></thead><tbody><tr><td>流式部分</td><td align="center">I/O的主体部分</td></tr><tr><td>非流式部分</td><td align="center">主要包含一些辅助流式部分的类，如：<code>File</code>类、<code>RandomAccessFile</code>类和<code>FileDescriptor</code>等类。 <code>RandomAccessFile</code>（随机读取和写入流）可以从文件的任意位置进行读写）</td></tr><tr><td>其他类</td><td align="center">文件读取部分的与安全相关的类，如：<code>SerializablePermission</code>类，以及与本地操作系统相关的文件系统的类，如：<code>FileSystem</code>类和<code>Win32FileSystem</code>类和<code>WinNTFileSystem</code>类</td></tr></tbody></table><br><br><h2 id="重要I-O流的解读"><a href="#重要I-O流的解读" class="headerlink" title="重要I/O流的解读"></a>重要I/O流的解读</h2><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><br><h3 id="标准输入、输出流"><a href="#标准输入、输出流" class="headerlink" title="标准输入、输出流"></a>标准输入、输出流</h3><br><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><br><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><br><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><br><h3 id="随机存取文件流"><a href="#随机存取文件流" class="headerlink" title="随机存取文件流"></a>随机存取文件流</h3><br><br><br><h1 id="I-O流API实践"><a href="#I-O流API实践" class="headerlink" title="I/O流API实践"></a>I/O流API实践</h1><h2 id="字符流：FileReader-FileWriter"><a href="#字符流：FileReader-FileWriter" class="headerlink" title="字符流：FileReader - FileWriter"></a>字符流：FileReader - FileWriter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从某个文件的内容写入到另一个文件</span></span><br><span class="line"><span class="comment">     *  1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="comment">     *     read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="comment">     *  2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">     *  3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class="line"><span class="comment">     * 2.</span></span><br><span class="line"><span class="comment">     *          File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class="line"><span class="comment">     *          File对应的硬盘中的文件如果存在：</span></span><br><span class="line"><span class="comment">     *                 如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span></span><br><span class="line"><span class="comment">     *                 如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span></span><br><span class="line"><span class="comment">     *  3. 流的关闭顺序，没有严格顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReaderFileWriter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.File类的实例化</span></span><br><span class="line">            <span class="comment">// 2.流实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello2.txt&quot;</span>),<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span> [] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="comment">// 3.流操作-读入 写出</span></span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fw != <span class="literal">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(fr != <span class="literal">null</span>)</span><br><span class="line">                        fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line"><span class="comment">//            if (null != fw)&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    fw.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (null != fr) &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    fr.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><br><h2 id="字节流：FileInputStream-FileOutputStream"><a href="#字节流：FileInputStream-FileOutputStream" class="headerlink" title="字节流：FileInputStream - FileOutputStream"></a>字节流：FileInputStream - FileOutputStream</h2><ul><li>使用 FileInputStream、FileOutputStream实现文件复制</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//指定路径下文件的复制</span><br><span class="line">// 使用字节流FileInputStream处理文本文件，可能出现乱码。</span><br><span class="line">   public void copyFile(String srcPath,String destPath)&#123;</span><br><span class="line">       FileInputStream fis = null;</span><br><span class="line">       FileOutputStream fos = null;</span><br><span class="line">       try &#123;</span><br><span class="line">           // File 实例化</span><br><span class="line">           File srcFile = new File(srcPath);</span><br><span class="line">           File destFile = new File(destPath);</span><br><span class="line"></span><br><span class="line">           // 造流</span><br><span class="line">           fis = new FileInputStream(srcFile);</span><br><span class="line">           fos = new FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">           // 流操作 - 复制的过程</span><br><span class="line">           byte[] buffer = new byte[1024];</span><br><span class="line">           int len;</span><br><span class="line">           while((len = fis.read(buffer)) != -1)&#123;</span><br><span class="line">               fos.write(buffer,0,len);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           if(fos != null)&#123;</span><br><span class="line">               //</span><br><span class="line">               try &#123;</span><br><span class="line">                   fos.close();</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           if(fis != null)&#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   fis.close();</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br><br><h2 id="缓冲流：BufferedInputStream-BufferedOutputStream"><a href="#缓冲流：BufferedInputStream-BufferedOutputStream" class="headerlink" title="缓冲流：BufferedInputStream - BufferedOutputStream"></a>缓冲流：BufferedInputStream - BufferedOutputStream</h2><ul><li>使用 BufferedInputStream 、BufferedOutputStream实现文件复制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuffered</span> <span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//造文件</span></span><br><span class="line">           <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">           <span class="type">File</span> <span class="variable">distFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello_word.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//造流</span></span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">           <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(distFile);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//造缓冲流</span></span><br><span class="line">           bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">           bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">           <span class="type">byte</span> [] buffered = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">           <span class="type">int</span> len;</span><br><span class="line">           <span class="keyword">while</span> ((len=bis.read(buffered)) != -<span class="number">1</span>)&#123;</span><br><span class="line">               bos.write(buffered,<span class="number">0</span>,len);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//4.资源关闭</span></span><br><span class="line">           <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">           <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line">           <span class="keyword">if</span>(bos != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   bos.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(bis != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   bis.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>用BufferedReader和BufferedWriter实现文本文件的复制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBufferedReaderBufferedWriter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建文件和相应的流</span></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;dbcp.txt&quot;</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;dbcp1.txt&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读写操作</span></span><br><span class="line">            <span class="comment">//方式一：使用char[]数组</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while((len = br.read(cbuf)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//    //            bw.flush();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：使用String</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span>((data = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">//                bw.write(data + &quot;\n&quot;);//data中不包含换行符</span></span><br><span class="line">                <span class="comment">//方法二：</span></span><br><span class="line">                bw.write(data);<span class="comment">//data中不包含换行符</span></span><br><span class="line">                bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><br><h2 id="转换流-1"><a href="#转换流-1" class="headerlink" title="转换流"></a>转换流</h2><ul><li>综合使用InputStreamReader和OutputStreamWriter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//1.造文件、造流</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">       <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;dbcp_gbk.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file1);</span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file2);</span><br><span class="line"></span><br><span class="line">       <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">       <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.读写过程</span></span><br><span class="line">       <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">       <span class="type">int</span> len;</span><br><span class="line">       <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">           osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.关闭资源</span></span><br><span class="line">       isr.close();</span><br><span class="line">       osw.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="参考与延伸"><a href="#参考与延伸" class="headerlink" title="参考与延伸"></a>参考与延伸</h1><ul><li><a class="link"   href="https://string.quest/read/1143888#IO_110" >IO流体系基本概念以及常用操作 - 探索字符串<i class="fas fa-external-link-alt"></i></a></li><li>并发编程网：<a class="link"   href="http://ifeve.com/java-io/" >Java IO教程<i class="fas fa-external-link-alt"></i></a></li></ul><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>本文笔记主要根据 尚硅谷的java体系课程的io部分 梳理的</li><li>后期 应该对io 体系进行一个更大的梳理，包括java的 file path，还有根据 io ，nio bio aio等进行梳理，要明白自己学习的是哪种流，所以要熟悉io历史</li></ol></blockquote><img src="" width="60%" /><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认识I-O流&quot;&gt;&lt;a href=&quot;#认识I-O流&quot; class=&quot;headerlink&quot; title=&quot;认识I/O流&quot;&gt;&lt;/a&gt;认识I/O流&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输</summary>
      
    
    
    
    <category term="Operating-Systems" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/"/>
    
    <category term="I/O" scheme="https://ratears.gitee.io/dev.ratears.life/categories/Operating-Systems/I-O/"/>
    
    
    <category term="java" scheme="https://ratears.gitee.io/dev.ratears.life/tags/java/"/>
    
    <category term="io" scheme="https://ratears.gitee.io/dev.ratears.life/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>Gradle</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/Gradle/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/Gradle/</id>
    <published>2022-09-05T20:46:07.000Z</published>
    <updated>2022-09-05T21:24:51.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle入门"><a href="#Gradle入门" class="headerlink" title="Gradle入门"></a>Gradle入门</h1><h2 id="Gradle简介"><a href="#Gradle简介" class="headerlink" title="Gradle简介"></a>Gradle简介</h2><ul><li><p>Gradle 是一款Google 推出的基于 JVM、通用灵活的项目构建工具，支持 Maven，JCenter 多种第三方仓库;支持传递性依赖管理、废弃了繁杂的xml 文件，转而使用简洁的、支持多种语言(例如：java、groovy 等)的 build 脚本文件。（新一代的项目自动化构建工具）</p></li><li><p>官网地址: <a class="link"   href="https://gradle.org/" >https://gradle.org/<i class="fas fa-external-link-alt"></i></a></p></li><li><p>Gradle与maven进行对比：maven侧重于项目jar包的管理，Gradle侧重于项目的构建</p></li></ul><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>p1 部分笔记还需要补充</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gradle入门&quot;&gt;&lt;a href=&quot;#Gradle入门&quot; class=&quot;headerlink&quot; title=&quot;Gradle入门&quot;&gt;&lt;/a&gt;Gradle入门&lt;/h1&gt;&lt;h2 id=&quot;Gradle简介&quot;&gt;&lt;a href=&quot;#Gradle简介&quot; class=&quot;head</summary>
      
    
    
    
    <category term="gradle" scheme="https://ratears.gitee.io/dev.ratears.life/categories/gradle/"/>
    
    
    <category term="gradle" scheme="https://ratears.gitee.io/dev.ratears.life/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>《Spring Data JPA 原理与实战》study notes</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8ASpring-Data-JPA-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8ASpring-Data-JPA-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/</id>
    <published>2022-09-05T20:08:46.000Z</published>
    <updated>2022-09-05T20:47:52.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Data-JPA基础知识"><a href="#Spring-Data-JPA基础知识" class="headerlink" title="Spring Data JPA基础知识"></a>Spring Data JPA基础知识</h1><h2 id="Spring-Data-JPA优势"><a href="#Spring-Data-JPA优势" class="headerlink" title="Spring Data JPA优势"></a>Spring Data JPA优势</h2><ul><li>某些大公司的大部分项目都在用 Spring Data JPA，究其原因，主要缘于它具有以下 4 点优势</li></ul><h3 id="第一，大势所趋，大厂必备技能"><a href="#第一，大势所趋，大厂必备技能" class="headerlink" title="第一，大势所趋，大厂必备技能"></a>第一，大势所趋，大厂必备技能</h3><blockquote><p>近两年由于 Spring Cloud、Spring Boot 逐渐统一 Java 的框架江湖，而与 Spring Boot 天然集成的 Spring Data JPA 也逐渐走进了 Java 开发者的视野，大量尝鲜者享受到了这门技术带来的便利与功能。JPA 可以使团队在框架约定下进行开发，几乎很难出现有性能瓶颈的 SQL。因此你会发现很多大厂，如阿里、腾讯、抖音等公司，近几年在招聘的时候写明了要熟悉 JPA，这些大厂以及业内很多开源的新项目都在使用 JPA</p></blockquote><br><h3 id="第二，提升开发效率"><a href="#第二，提升开发效率" class="headerlink" title="第二，提升开发效率"></a>第二，提升开发效率</h3><blockquote><p>现在有很多人知道什么是 Spring Data JPA，但是却觉得 JPA 很难用，使用中发现 Bug 不知道原因，本来用 JPA 是为了提升开发效率的，不会使用反倒踩了很多坑，所以我们需要体系化地学习。当你遇到复杂问题，比如平时你可能要花几个小时去想方法名、SQL 逻辑，如果你可以熟练使用 JPA，那么半小时甚至几分钟就可以写好查询方法了；再配合测试用例，你的开发质量也会明显提高很多，系统地学习可以让你少走很多弯路</p></blockquote><br><h3 id="第三，提高技术水平"><a href="#第三，提高技术水平" class="headerlink" title="第三，提高技术水平"></a>第三，提高技术水平</h3><blockquote><p>Spring Data 对数据操作进行了大统一，统一了抽象关系型数据库和非关系型数据的接口、公共的部分，你会发现当掌握了 Spring Data JPA 框架后，你的开发水平几乎可以达到——轻易实现 Redis、MongoDB 等 NoSQL 的操作，因为它们都有统一的 Spring Data Common。如下图所示，从中你可以看到 Spring Data 和 JPA 的全景位置关系，这样一来，你可以清楚地知道 JPA 的重要作用，方便你了解 JPA 的脉络，从而更好地学习</p></blockquote><img                       lazyload                     alt="image"                     data-src="https://git.poker/ratears/image-hosting/blob/main/blog-img-bed/image.55f368bvsmc0.webp?raw=true"                      width="65%"                 ><br><h3 id="第四，求职加分项"><a href="#第四，求职加分项" class="headerlink" title="第四，求职加分项"></a>第四，求职加分项</h3><blockquote><p>如果简历中突出 Spring Data JPA 框架的使用，面试官会眼前一亮。因为掌握了 JPA，就意味着掌握了很多原理，比如 Session 原理、事务原理、PersistenceContext 原理等，而掌握了底层原理对于技术人员来说可以在开发中解决很多问题。因此，公司可以由此更好地过滤和筛选人才，也能从侧面看出求职者是否对技术足够感兴趣、有追求</p></blockquote><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><blockquote><ol><li>第一篇需要动手跟着学习构建</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Data-JPA基础知识&quot;&gt;&lt;a href=&quot;#Spring-Data-JPA基础知识&quot; class=&quot;headerlink&quot; title=&quot;Spring Data JPA基础知识&quot;&gt;&lt;/a&gt;Spring Data JPA基础知识&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="spring" scheme="https://ratears.gitee.io/dev.ratears.life/categories/spring/"/>
    
    <category term="jpa" scheme="https://ratears.gitee.io/dev.ratears.life/categories/spring/jpa/"/>
    
    
    <category term="spring" scheme="https://ratears.gitee.io/dev.ratears.life/tags/spring/"/>
    
    <category term="jpa" scheme="https://ratears.gitee.io/dev.ratears.life/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>KingbaseES KCA study notes</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/KingbaseES-KCA-study-notes/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/KingbaseES-KCA-study-notes/</id>
    <published>2022-09-03T09:19:20.000Z</published>
    <updated>2022-09-27T05:11:41.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kingbase安装与卸载"><a href="#Kingbase安装与卸载" class="headerlink" title="Kingbase安装与卸载"></a>Kingbase安装与卸载</h1><h2 id="KES安装"><a href="#KES安装" class="headerlink" title="KES安装"></a>KES安装</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><table><thead><tr><th align="center">环境</th><th align="center">要求</th></tr></thead><tbody><tr><td align="center">操作系统</td><td align="center">CentOS 7.x</td></tr><tr><td align="center">机器规格 - 内存大小</td><td align="center">3GB 及以上</td></tr><tr><td align="center">机器规格 - 磁盘空间</td><td align="center">20GB 及以上</td></tr><tr><td align="center">KES 安装包版本</td><td align="center">KingbaseES_V008R006C006B0013_Lin64_install.iso</td></tr><tr><td align="center">jdk 版本</td><td align="center">1.8+</td></tr></tbody></table><h3 id="安装前准备工作"><a href="#安装前准备工作" class="headerlink" title="安装前准备工作"></a>安装前准备工作</h3><ol><li>服务器安装jdk1.8+版本并配置环境变量</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum list |grep jdk</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum -y install java-1.8.0-openjdk</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_342&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_342-b07)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.342-b07, mixed mode)</span><br></pre></td></tr></table></figure><ol start="2"><li>创建用于管理Kingbase的用户</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# useradd kingbase</span><br><span class="line">[root@localhost ~]# </span><br><span class="line">[root@localhost ~]# id kingbase</span><br><span class="line">uid=1000(kingbase) gid=1000(kingbase) 组=1000(kingbase)</span><br><span class="line"></span><br><span class="line">[root@localhost install]# passwd kingbase</span><br></pre></td></tr></table></figure><ol start="3"><li>按实施规范创建目录，设置权限</li></ol><ul><li>为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前须做好选项、存储目录规划</li></ul><table><thead><tr><th align="center">选项</th><th align="center">设置</th></tr></thead><tbody><tr><td align="center">目录</td><td align="center">安装软件存储目录：/install<br/>备份目录：/backup<br/>归档目录：/archive<br/>数据存储目录：/data<br/>KES 安装目录：/KingbaseES/V8</td></tr><tr><td align="center">端口</td><td align="center">54321</td></tr><tr><td align="center">SYSTEM 密码</td><td align="center">system</td></tr><tr><td align="center">数据库编码格式</td><td align="center">UTF8</td></tr><tr><td align="center">大小写是否敏感</td><td align="center">ENABLE_CI，默认为 off，表示大小写敏感（根据需求选择）</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 root 用户，创建目录，设置权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建目录</span></span><br><span class="line">[root@localhost ~]# mkdir -p /install /KingbaseES/V8 /backup /data /archive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改目录属组、属主、权限</span></span><br><span class="line">[root@localhost ~]# chown -R kingbase:kingbase /install /KingbaseES /backup /archive /data</span><br><span class="line">[root@localhost ~]# chmod -R 775 /install /KingbaseES /backup /archive</span><br><span class="line">[root@localhost ~]# chmod -R 700 /data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ls -l / |grep kingbase</span><br><span class="line">drwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 archive</span><br><span class="line">drwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 backup</span><br><span class="line">drwx------.   2 kingbase kingbase    6 9月   4 22:39 data</span><br><span class="line">drwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 install</span><br><span class="line">drwxrwxr-x.   3 kingbase kingbase   16 9月   4 22:39 KingbaseES</span><br></pre></td></tr></table></figure><br><h3 id="上传安装包、授权文件、检查-md5、解压"><a href="#上传安装包、授权文件、检查-md5、解压" class="headerlink" title="上传安装包、授权文件、检查 md5、解压"></a>上传安装包、授权文件、检查 md5、解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 root 用户将安装文件上传到/install 下</span></span><br><span class="line">[root@localhost install]# ll</span><br><span class="line">-rw-r--r--. 1 root root 2180431872 9月   4 22:56 KingbaseES_V008R006C006B0013_Lin64_install.iso</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 root 用户将授权文件上传到/install。设置授权文件的属主为kingbase和权限并验证</span></span><br><span class="line">[root@localhost install]# ll</span><br><span class="line">-rw-rw-r--. 1 kingbase kingbase       3534 4月  26 11:51 license_18720_0.dat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查和校验安装文件的 md5 值</span></span><br><span class="line">[root@localhost install]# md5sum KingbaseES_V008R006C006B0013_Lin64_install.iso</span><br><span class="line">c1410ba7062fbaff3308c1453797ce3e  KingbaseES_V008R006C006B0013_Lin64_install.iso</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 root 用户挂载 KES 安装虚拟光盘文件</span></span><br><span class="line">[root@localhost install]# mount -o loop /install/KingbaseES_V008R006C006B0013_Lin64_install.iso /mnt/</span><br><span class="line">mount: /dev/loop0 写保护，将以只读方式挂载</span><br><span class="line">[root@localhost install]# ll /mnt/</span><br><span class="line">总用量 6</span><br><span class="line">dr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup</span><br><span class="line">-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 kingbase 用户复制挂载后的安装文件到/install 下</span></span><br><span class="line">[kingbase@bogon ~]$ ll /mnt/</span><br><span class="line">总用量 6</span><br><span class="line">dr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup</span><br><span class="line">-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh</span><br><span class="line">[kingbase@bogon ~]$ mkdir -p /install/KES_V8R6CB13_INSTALL</span><br><span class="line">[kingbase@bogon ~]$ cp -r /mnt/* /install/KES_V8R6CB13_INSTALL/</span><br><span class="line">[kingbase@bogon ~]$ ll /install/KES_V8R6CB13_INSTALL/</span><br><span class="line">总用量 4</span><br><span class="line">dr-xr-xr-x. 2 kingbase kingbase   54 9月   4 23:14 setup</span><br><span class="line">-r-xr-xr-x. 1 kingbase kingbase 3820 9月   4 23:14 setup.sh</span><br><span class="line"></span><br><span class="line">[kingbase@bogon ~]$ du -sm /mnt/</span><br><span class="line">2080    /mnt/</span><br><span class="line">[kingbase@bogon ~]$ du -sm /install/KES_V8R6CB13_INSTALL/</span><br><span class="line">2080    /install/KES_V8R6CB13_INSTALL/</span><br></pre></td></tr></table></figure><br><h3 id="字符界面安装-KES-程序"><a href="#字符界面安装-KES-程序" class="headerlink" title="字符界面安装 KES 程序"></a>字符界面安装 KES 程序</h3><h4 id="启动字符界面安装向导进入“简介”界面"><a href="#启动字符界面安装向导进入“简介”界面" class="headerlink" title="启动字符界面安装向导进入“简介”界面"></a>启动字符界面安装向导进入“简介”界面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/</span><br><span class="line"></span><br><span class="line">[kingbase@bogon KES_V8R6CB13_INSTALL]$ bash ./setup.sh -i console</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装目录输入: /KingbaseES/V8</span></span><br></pre></td></tr></table></figure><h4 id="创建和初始化数据库集簇"><a href="#创建和初始化数据库集簇" class="headerlink" title="创建和初始化数据库集簇"></a>创建和初始化数据库集簇</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据存储目录输入: /data</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接回车接受参数的默认值或根据规划要求指定参数的值：</span></span><br><span class="line">（1）端口：54321（生产环境可以根据需求，自定义为其它端口）。</span><br><span class="line">（2）输入 SYSTEM 超级管理员的密码（本实验环境密码设置为 system）。</span><br><span class="line">（3）设置数据库编码格式（推荐设置为“UTF8”）。</span><br><span class="line">（4）选择数据库模式（默认为 oracle 模式）</span><br></pre></td></tr></table></figure><h4 id="将-KES-服务注册为-linux-系统服务"><a href="#将-KES-服务注册为-linux-系统服务" class="headerlink" title="将 KES 服务注册为 linux 系统服务"></a>将 KES 服务注册为 linux 系统服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# /KingbaseES/V8/install/script/root.sh</span><br><span class="line">Starting KingbaseES V8:</span><br><span class="line">waiting for server to start.... done</span><br><span class="line">server started</span><br><span class="line">KingbaseES V8 started successfully</span><br></pre></td></tr></table></figure><h4 id="重启-linux-确认-KES-服务自动启动"><a href="#重启-linux-确认-KES-服务自动启动" class="headerlink" title="重启 linux 确认 KES 服务自动启动"></a>重启 linux 确认 KES 服务自动启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i &#x27;kingbase&#x27;</span><br><span class="line">  2116 ?        S      0:00 sshd: kingbase@notty</span><br><span class="line">  2092 ?        S      0:00 sshd: kingbase@pts/1</span><br><span class="line">  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data</span><br><span class="line">  4920 ?        Ss     0:00  \_ kingbase: logger</span><br><span class="line">  4922 ?        Ss     0:00  \_ kingbase: checkpointer</span><br><span class="line">  4923 ?        Ss     0:00  \_ kingbase: background writer</span><br><span class="line">  4924 ?        Ss     0:00  \_ kingbase: walwriter</span><br><span class="line">  4925 ?        Ss     0:00  \_ kingbase: autovacuum launcher</span><br><span class="line">  4926 ?        Ss     0:00  \_ kingbase: stats collector</span><br><span class="line">  4927 ?        Ss     0:00  \_ kingbase: ksh writer</span><br><span class="line">  4928 ?        Ss     0:00  \_ kingbase: ksh collector</span><br><span class="line">  4929 ?        Ss     0:00  \_ kingbase: kwr collector</span><br><span class="line">  4930 ?        Ss     0:00  \_ kingbase: logical replication launcher</span><br></pre></td></tr></table></figure><br><h2 id="确认-KES-是否已正确安装"><a href="#确认-KES-是否已正确安装" class="headerlink" title="确认 KES 是否已正确安装"></a>确认 KES 是否已正确安装</h2><ul><li>可以使用以下几个角度确认 KES 是否已正确安装或启动</li></ul><ol><li>查看安装过程日志，确认没有错误记录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/</span><br><span class="line"></span><br><span class="line">[kingbase@bogon KES_V8R6CB13_INSTALL]$ ls -al *.log</span><br><span class="line">ls: 无法访问*.log: 没有那个文件或目录</span><br></pre></td></tr></table></figure><ol start="2"><li>查看开始菜单中是否已成功安装相关程序</li></ol><ol start="3"><li>查看相关进程是否启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i &#x27;kingbase&#x27;</span><br><span class="line">  2116 ?        S      0:00 sshd: kingbase@notty</span><br><span class="line">  2092 ?        S      0:00 sshd: kingbase@pts/1</span><br><span class="line">  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data</span><br><span class="line">  4920 ?        Ss     0:00  \_ kingbase: logger</span><br><span class="line">  4922 ?        Ss     0:00  \_ kingbase: checkpointer</span><br><span class="line">  4923 ?        Ss     0:00  \_ kingbase: background writer</span><br><span class="line">  4924 ?        Ss     0:00  \_ kingbase: walwriter</span><br><span class="line">  4925 ?        Ss     0:00  \_ kingbase: autovacuum launcher</span><br><span class="line">  4926 ?        Ss     0:00  \_ kingbase: stats collector</span><br><span class="line">  4927 ?        Ss     0:00  \_ kingbase: ksh writer</span><br><span class="line">  4928 ?        Ss     0:00  \_ kingbase: ksh collector</span><br><span class="line">  4929 ?        Ss     0:00  \_ kingbase: kwr collector</span><br><span class="line">  4930 ?        Ss     0:00  \_ kingbase: logical replication launcher</span><br></pre></td></tr></table></figure><ol start="4"><li>验证数据库连接是否正常</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用 ksql 工具测试能否连接到数据库</span></span><br><span class="line">[kingbase@bogon ~]$ /KingbaseES/V8/Server/bin/ksql test system</span><br><span class="line">ksql (V8.0)</span><br><span class="line">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class="line"></span><br><span class="line">test=#</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在桌面环境中启动“数据库对象管理工具”测试能否连接数据库</span></span><br></pre></td></tr></table></figure><ol start="5"><li>查看服务是否已设为开机自启</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon ~]$ systemctl list-dependencies |grep kingbase</span><br><span class="line">● ├─kingbase8d.service</span><br><span class="line">[kingbase@bogon ~]$ chkconfig --list |grep kingbase</span><br><span class="line"></span><br><span class="line">注：该输出结果只显示 SysV 服务，并不包含</span><br><span class="line">原生 systemd 服务。SysV 配置数据</span><br><span class="line">可能被原生 systemd 配置覆盖。</span><br><span class="line"></span><br><span class="line">      要列出 systemd 服务，请执行 &#x27;systemctl list-unit-files&#x27;。</span><br><span class="line">      查看在具体 target 启用的服务请执行</span><br><span class="line">      &#x27;systemctl list-dependencies [target]&#x27;。</span><br><span class="line"></span><br><span class="line">kingbase8d      0:关    1:关    2:开    3:开    4:开    5:开    6:关</span><br></pre></td></tr></table></figure><br><h2 id="启停-KES-服务"><a href="#启停-KES-服务" class="headerlink" title="启停 KES 服务"></a>启停 KES 服务</h2><h3 id="root用户管理KES服务"><a href="#root用户管理KES服务" class="headerlink" title="root用户管理KES服务"></a>root用户管理KES服务</h3><ul><li>以 root 用户身份登录</li></ul><h4 id="root-用户将-KES-注册为-linux-开机自启服务"><a href="#root-用户将-KES-注册为-linux-开机自启服务" class="headerlink" title="root 用户将 KES 注册为 linux 开机自启服务"></a>root 用户将 KES 注册为 linux 开机自启服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh 来注册系统服务，这样开机时会自己启动 KES 数据库服务</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# /KingbaseES/V8/install/script/root.sh</span><br><span class="line">Starting KingbaseES V8:</span><br><span class="line">waiting for server to start.... done</span><br><span class="line">server started</span><br><span class="line">KingbaseES V8 started successfully</span><br></pre></td></tr></table></figure><br><h4 id="systemctl-管理-KES-服务"><a href="#systemctl-管理-KES-服务" class="headerlink" title="systemctl 管理 KES 服务"></a>systemctl 管理 KES 服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root 用户使用 systemctl 管理 KES 服务</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、确认 KES 服务状态。</span></span><br><span class="line">systemctl status kingbase8d.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、停止 KES 服务。</span></span><br><span class="line">systemctl status kingbase8d.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、启动 KES 服务。</span></span><br><span class="line">systemctl start kingbase8d.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、重启 KES 服务。</span></span><br><span class="line">systemctl restart kingbase8d.service</span><br></pre></td></tr></table></figure><br><h4 id="service-管理-KES-服务"><a href="#service-管理-KES-服务" class="headerlink" title="service 管理 KES 服务"></a>service 管理 KES 服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root 用户使用 service 管理 KES 服务</span></span><br><span class="line"></span><br><span class="line">service kingbase8d status</span><br><span class="line"></span><br><span class="line">service kingbase8d start</span><br><span class="line"></span><br><span class="line">service kingbase8d restart</span><br><span class="line"></span><br><span class="line">service kingbase8d stop</span><br></pre></td></tr></table></figure><br><h3 id="kingbase用户管理KES服务"><a href="#kingbase用户管理KES服务" class="headerlink" title="kingbase用户管理KES服务"></a>kingbase用户管理KES服务</h3><ul><li>使用 kingbase 用户登录后执行 sys_ctl 命令</li></ul><h4 id="使用金仓-sys-ctl-命令管理-KES-服务"><a href="#使用金仓-sys-ctl-命令管理-KES-服务" class="headerlink" title="使用金仓 sys_ctl 命令管理 KES 服务"></a>使用金仓 sys_ctl 命令管理 KES 服务</h4><h5 id="sys-ctl-长命令格式"><a href="#sys-ctl-长命令格式" class="headerlink" title="sys_ctl 长命令格式"></a>sys_ctl 长命令格式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/KingbaseES/V8/Server/bin/sys_ctl status -D /data</span><br><span class="line"></span><br><span class="line">/KingbaseES/V8/Server/bin/sys_ctl stop -D /data</span><br><span class="line"></span><br><span class="line">/KingbaseES/V8/Server/bin/sys_ctl start -D /data</span><br><span class="line"></span><br><span class="line">/KingbaseES/V8/Server/bin/sys_ctl restart -D /data</span><br></pre></td></tr></table></figure><br><h5 id="sys-ctl-语法大纲"><a href="#sys-ctl-语法大纲" class="headerlink" title="sys_ctl 语法大纲"></a>sys_ctl 语法大纲</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sys_ctl start [-D DATADIR] [-l FILENAME] [-W] [-t SECS] [-s]</span><br><span class="line">[-o OPTIONS] [-p PATH] [-c]</span><br><span class="line"></span><br><span class="line">sys_ctl stop [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]</span><br><span class="line"></span><br><span class="line">sys_ctl restart [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]</span><br><span class="line">[-o OPTIONS] [-c]</span><br><span class="line"></span><br><span class="line">sys_ctl reload [-D DATADIR] [-s]</span><br><span class="line"></span><br><span class="line">sys_ctl status [-D DATADIR]</span><br><span class="line"></span><br><span class="line">sys_ctl promote [-D DATADIR] [-W] [-t SECS] [-s]</span><br><span class="line"></span><br><span class="line">sys_ctl logrotate [-D DATADIR] [-s]</span><br><span class="line"></span><br><span class="line">sys_ctl kill SIGNALNAME PID</span><br></pre></td></tr></table></figure><br><h4 id="使用-kingbase-命令启动-KES-服务"><a href="#使用-kingbase-命令启动-KES-服务" class="headerlink" title="使用 kingbase 命令启动 KES 服务"></a>使用 kingbase 命令启动 KES 服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/KingbaseES/V8/Server/bin/kingbase -D /data &gt;log1 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><br><h2 id="环境变量对相关命令的影响"><a href="#环境变量对相关命令的影响" class="headerlink" title="环境变量对相关命令的影响"></a>环境变量对相关命令的影响</h2><ol><li>定位金仓 sys_ctl 的路径</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon bin]$ find /KingbaseES/ -name sys_ctl</span><br><span class="line">/KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/sys_ctl</span><br></pre></td></tr></table></figure><ol start="2"><li>定位主数据目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon bin]$ ps -ef|grep &#x27;\ -D\ &#x27;</span><br><span class="line">kingbase   6723   2093  0 00:27 pts/1    00:00:00 /KingbaseES/V8/Server/bin/kingbase -D /data</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# find / -name kingbase.conf</span><br><span class="line">/data/kingbase.conf</span><br></pre></td></tr></table></figure><ol start="3"><li>修改环境变量</li></ol><p>（1）KINGBASE_DATA 变量</p><ul><li>该环境变量指向 KES 主数据目录，此变量名是金仓程序员指定的命名，不要修改</li><li>未指定该变量时，sys_ctl 工具在执行时需要加-D 参数来给定主数据目录位置</li></ul><p>（2）修改 shell 的 profile</p><ul><li>把【/KingbaseES/V8/Server/bin】加到$PATH 变量里面</li><li> 把/data 赋值给$KINGBASE_DATA</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 kingbase 的环境变量文件，添加相应路径</span></span><br><span class="line">vi /home/kingbase/.bashrc</span><br><span class="line"></span><br><span class="line">export PATH=/KingbaseES/V8/Server/bin:$PATH</span><br><span class="line">export KINGBASE_DATA=/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让环境变量生效</span></span><br><span class="line">source /home/kingbase/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置变量后命令行比较简捷</span></span><br><span class="line">sys_ctl stop -D $KINGBASE_DATA </span><br><span class="line">kingbase -D /data &gt;log1 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><br><h2 id="授权文件license-dat"><a href="#授权文件license-dat" class="headerlink" title="授权文件license.dat"></a>授权文件license.dat</h2><h3 id="查看license有效天数"><a href="#查看license有效天数" class="headerlink" title="查看license有效天数"></a>查看license有效天数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test=# select get_license_validdays();</span><br><span class="line"> get_license_validdays</span><br><span class="line">-----------------------</span><br><span class="line">                    89</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br><span class="line">test=#</span><br></pre></td></tr></table></figure><br><h3 id="license过期后的故障现象"><a href="#license过期后的故障现象" class="headerlink" title="license过期后的故障现象"></a>license过期后的故障现象</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41abq8t29n80.webp"                                      ><br><h3 id="license过期故障解决"><a href="#license过期故障解决" class="headerlink" title="license过期故障解决"></a>license过期故障解决</h3><ul><li>使用 kingbase 用户登录，上传新的 lincense.dat 到 kingbase的安装目录 <code>/KingbaseES/V8</code>下——替换原旧的 license.dat。然后重新加载数据库（或者重新启动）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意 lincese.dat 的 属组和属组 必须是 kingbase，授权文件名称 必须是 lincese.dat</span></span><br><span class="line"></span><br><span class="line">[kingbase@bogon ~]$ sys_ctl reload -D $KINGBASE_DATA</span><br><span class="line">server signaled</span><br></pre></td></tr></table></figure><br><h2 id="KES卸载"><a href="#KES卸载" class="headerlink" title="KES卸载"></a>KES卸载</h2><ol><li>使用 root 用户执行 rootuninstall.sh 脚本移除 KES 开机自启服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - root</span><br><span class="line"></span><br><span class="line">/KingbaseES/V8/install/script/rootuninstall.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>以 kingbase 用户执行 bash /KingbaseES/V8/Uninstall/Uninstaller -i console</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon ~]$ bash /KingbaseES/V8/Uninstall/Uninstaller -i console</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载完后，执行`<span class="built_in">echo</span> $?`的 结果为 0，则 Uninstaller -i console 执行成功</span></span><br></pre></td></tr></table></figure><ol start="3"><li>清除安装目录下残留文件</li></ol><ul><li>方法一：执行 <code>rm –fr /KingbaseES/V8</code> 直接删除安装目录</li><li>方法二：执行 <code>mv /KingbaseES/V8 /KingbaseES/V8.bak</code> 将安装目录改名</li></ul><br><h1 id="数据库对象管理工具"><a href="#数据库对象管理工具" class="headerlink" title="数据库对象管理工具"></a>数据库对象管理工具</h1><ul><li>参考培训文档，做实验，以及做好记录</li></ul><br><h1 id="命令行工具KSQL"><a href="#命令行工具KSQL" class="headerlink" title="命令行工具KSQL"></a>命令行工具KSQL</h1><h2 id="KSQL简介"><a href="#KSQL简介" class="headerlink" title="KSQL简介"></a>KSQL简介</h2><ul><li>KSQL 是金仓提供给 DBA 的与 KES 数据库交互的命令行客户端程序（部分工作场景是无法使用图形界面工具来工作的；还有部分场景使用SQL效率更高）。熟练使用 KSQL 工具可以帮助 DBA 快速的操作和维护数据库</li></ul><h3 id="查看-KSQL-工具的帮助"><a href="#查看-KSQL-工具的帮助" class="headerlink" title="查看 KSQL 工具的帮助"></a>查看 KSQL 工具的帮助</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon ~]$ ksql --help</span><br></pre></td></tr></table></figure><ul><li>部分参数解析</li></ul><ol><li>连接参数</li></ol><table><thead><tr><th align="center">参数</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">-h</td><td align="center">连接服务器的监听 IP 或主机名(-h 缺省时为 localhost 方式登录)</td></tr><tr><td align="center">-p</td><td align="center">连接服务器的监听端口号<br>当为端口号为默认值 54321 时可缺省-p<br/>设置了 KINGBASE_PORT 环境变量时也可缺省-p</td></tr><tr><td align="center">-U</td><td align="center">连接服务器的用户名</td></tr><tr><td align="center">-W</td><td align="center">强制输入密码</td></tr></tbody></table><ol start="2"><li>通用参数</li></ol><table><thead><tr><th align="center">参数</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">指定连接数据库后执行的单行命令，执行完成后自动退出数据库连接</td></tr><tr><td align="center">-d</td><td align="center">指定连接时登录的数据库</td></tr><tr><td align="center">-f</td><td align="center">指定连接数据库时执行的脚本，执行完成后自动退出数据库连接</td></tr><tr><td align="center">-l</td><td align="center">打印数据库列表</td></tr><tr><td align="center">-V</td><td align="center">打印数据库版本信息</td></tr><tr><td align="center">-?</td><td align="center">打印 ksql 命令的帮助信息</td></tr></tbody></table><ol start="3"><li>输入输出参数</li></ol><table><thead><tr><th align="center">参数</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">-H</td><td align="center">以 html 格式展示输出结果</td></tr><tr><td align="center">-E</td><td align="center">展示元命令所执行的 sql</td></tr><tr><td align="center">-t</td><td align="center">不输出字段名</td></tr><tr><td align="center">-x</td><td align="center">调整查询结果为纵向展示</td></tr><tr><td align="center">-q</td><td align="center">不输出登录提示信息</td></tr><tr><td align="center">-o</td><td align="center">将命令输出结果保存到指定的文件中</td></tr></tbody></table><br><h3 id="查看标准-SQL-命令的帮助"><a href="#查看标准-SQL-命令的帮助" class="headerlink" title="查看标准 SQL 命令的帮助"></a>查看标准 SQL 命令的帮助</h3><ol><li>使用 <code>\h</code> 列出所有的 SQL 命令清单</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test<span class="operator">=</span># \h</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <code>\h &lt;sql 命令&gt;</code> 列出某个 SQL 命令的语法大纲</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test<span class="operator">=</span># \h <span class="keyword">delete</span></span><br><span class="line">Command:     <span class="keyword">DELETE</span></span><br><span class="line">Description: 删除数据表中的数据列</span><br><span class="line">Syntax:</span><br><span class="line">[ <span class="keyword">WITH</span> [ <span class="keyword">RECURSIVE</span> ] <span class="keyword">with</span>查询语句(with_query) [, ...] ]</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> [ <span class="keyword">ONLY</span> ] 表名 [ <span class="operator">*</span> ] [ [ <span class="keyword">AS</span> ] 别名 ]</span><br><span class="line">    [ <span class="keyword">USING</span> <span class="keyword">USING</span>列表(using_list) ]</span><br><span class="line">    [ <span class="keyword">WHERE</span> 条件 <span class="operator">|</span> <span class="keyword">WHERE</span> <span class="keyword">CURRENT</span> <span class="keyword">OF</span> 游标名称 ]</span><br><span class="line">    [ RETURNING <span class="operator">*</span> <span class="operator">|</span> 输出表达式 [ [ <span class="keyword">AS</span> ] 输出名称 ] [, ...] ]</span><br></pre></td></tr></table></figure><br><h3 id="查看-KSQL-元命令的帮助"><a href="#查看-KSQL-元命令的帮助" class="headerlink" title="查看 KSQL 元命令的帮助"></a>查看 KSQL 元命令的帮助</h3><ol><li>元命令介绍</li></ol><blockquote><p>（1）ksql 提供了一组以“\”开头的快捷命令，称之为 ksql 元命令。<br>（2）搭配通配符“*”或“?”提高查询效率。<br>（3）使用选项“S”显示系统对象。<br>（4）使用选项“+”显示更加丰富的信息。</p></blockquote><ol start="2"><li>常用元命令介绍</li></ol><table><thead><tr><th align="center">参数</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">\d[S+]</td><td align="center">列出表,视图和序列,其中 S 表示包含系统对象，+表示列出详细信息</td></tr><tr><td align="center">\d[S+] 名称</td><td align="center">描述表，视图，序列，或索引</td></tr><tr><td align="center">\db[+] [模式]</td><td align="center">列出表空间</td></tr><tr><td align="center">\di[S+] [模式]</td><td align="center">列出索引</td></tr><tr><td align="center">\dp [模式]</td><td align="center">列出表，视图和序列的访问权限(\z 和相同)</td></tr><tr><td align="center">\ds[S+] [模式]</td><td align="center">列出序列</td></tr><tr><td align="center">\du[+]</td><td align="center">列出角色</td></tr><tr><td align="center">\l[+]</td><td align="center">列出所有的数据库</td></tr></tbody></table><h3 id="KSQL-连接到数据库"><a href="#KSQL-连接到数据库" class="headerlink" title="KSQL 连接到数据库"></a>KSQL 连接到数据库</h3><h4 id="使用-SOCKET-方式登录数据库"><a href="#使用-SOCKET-方式登录数据库" class="headerlink" title="使用 SOCKET 方式登录数据库"></a>使用 SOCKET 方式登录数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@localhost ~]$ ksql -U system -d test</span><br><span class="line">ksql (V8.0)</span><br><span class="line">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class="line"></span><br><span class="line">test=# </span><br></pre></td></tr></table></figure><h4 id="使用-TCP-IP-方式登录数据库"><a href="#使用-TCP-IP-方式登录数据库" class="headerlink" title="使用 TCP/IP 方式登录数据库"></a>使用 TCP/IP 方式登录数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@localhost ~]$ ksql -h 192.168.146.129 -p 54321 -U system -d test</span><br><span class="line">用户 system 的口令：</span><br><span class="line">ksql (V8.0)</span><br><span class="line">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class="line"></span><br><span class="line">test=# </span><br></pre></td></tr></table></figure><h4 id="在-KSQL-中切换登录用户和数据库"><a href="#在-KSQL-中切换登录用户和数据库" class="headerlink" title="在 KSQL 中切换登录用户和数据库"></a>在 KSQL 中切换登录用户和数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon ~]$ ksql -Usystem -d test</span><br><span class="line">ksql (V8.0)</span><br><span class="line">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class="line"></span><br><span class="line">test=# \c tfsdb</span><br><span class="line">您现在已经连接到数据库 &quot;tfsdb&quot;,用户 &quot;system&quot;.</span><br><span class="line"></span><br><span class="line">tfsdb=# \c - tfsdb</span><br><span class="line">您现在已经连接到数据库 &quot;tfsdb&quot;,用户 &quot;tfsdb&quot;.</span><br><span class="line"></span><br><span class="line">tfsdb=# \c test system</span><br><span class="line">您现在已经连接到数据库 &quot;test&quot;,用户 &quot;system&quot;.</span><br></pre></td></tr></table></figure><h4 id="KSQL-引用环境变量进行快速登录"><a href="#KSQL-引用环境变量进行快速登录" class="headerlink" title="KSQL 引用环境变量进行快速登录"></a>KSQL 引用环境变量进行快速登录</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3xiqo6d2q3g0.webp"                      width="60%"                ><br><h3 id="执行-SQL-的几种方式"><a href="#执行-SQL-的几种方式" class="headerlink" title="执行 SQL 的几种方式"></a>执行 SQL 的几种方式</h3><ol><li>交互方式执行 SQL</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录ksql</span></span><br><span class="line">tfsdb=# select * from pa_user;</span><br></pre></td></tr></table></figure><ol start="2"><li>非交互方式执行 SQL (单条 SQL 语句)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用“-c”选项登录 tfsdb 数据库查看</span></span><br><span class="line"></span><br><span class="line">[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -c &#x27;select * from pa_user;&#x27;</span><br></pre></td></tr></table></figure><ol start="3"><li>非交互方式执行 SQL (成批的 SQL 语句、SQL文件)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[kingbase@bogon ~]$ ll</span><br><span class="line">总用量 8</span><br><span class="line">-rw-rw-r--  1 kingbase kingbase  23 9月   9 18:00 demo.sql</span><br><span class="line">-rw-------. 1 kingbase kingbase 712 8月  20 19:13 restart.log</span><br><span class="line"></span><br><span class="line">[kingbase@bogon ~]$ cat demo.sql</span><br><span class="line">select * from pa_user;</span><br><span class="line"></span><br><span class="line">[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -f /home/kingbase/demo.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="KSQL-元命令介绍"><a href="#KSQL-元命令介绍" class="headerlink" title="KSQL 元命令介绍"></a>KSQL 元命令介绍</h3><ul><li>略（查看官网）</li></ul><h3 id="使用元命令实现异构数据库数据交换"><a href="#使用元命令实现异构数据库数据交换" class="headerlink" title="使用元命令实现异构数据库数据交换"></a>使用元命令实现异构数据库数据交换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出表数据库到 csv 文件</span></span><br><span class="line">tfsdb=# \copy tfsdb.pa_user to /home/kingbase/pa_user.csv csv</span><br><span class="line">COPY 16</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 csv</span></span><br><span class="line">tfsdb=# \! cat /home/kingbase/pa_user.csv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 csv 文件导入数据库表中</span></span><br><span class="line">tfsdb=# \copy tfsdb.pa_user from /home/kingbase/pa_user.csv csv</span><br><span class="line">COPY 16</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="用户与角色"><a href="#用户与角色" class="headerlink" title="用户与角色"></a>用户与角色</h1><ul><li>用户和角色是数据库管理的基础</li><li>本章主要介绍如何在 KES 数据库中创建用户和角色，以及利用“角色”对多个用户批量授权，使 KES 管理体系更加清晰、简单</li></ul><h2 id="数据库用户"><a href="#数据库用户" class="headerlink" title="数据库用户"></a>数据库用户</h2><h3 id="用户管理概述"><a href="#用户管理概述" class="headerlink" title="用户管理概述"></a>用户管理概述</h3><ol><li>数据库用户代表数据库的使用者</li><li>应该为每个使用者创建用户</li><li>尽量避免多人使用同一个数据库用户</li></ol><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul><li><p>增删改查 略（参考官网）</p></li><li><p>当待删除用户是部分对象的拥有者时，因对象依赖会导致删除用户失败</p></li></ul><h2 id="数据库角色"><a href="#数据库角色" class="headerlink" title="数据库角色"></a>数据库角色</h2><h3 id="角色的概念"><a href="#角色的概念" class="headerlink" title="角色的概念"></a>角色的概念</h3><ol><li>将一组具有相同权限的用户组织在一起，这一组具有相同权限的用户就称为角色（Role）</li><li>角色在生产系统中一般被视作用户组，利用角色对用户执行批量授权</li></ol><h3 id="角色管理"><a href="#角色管理" class="headerlink" title="角色管理"></a>角色管理</h3><ul><li>增删改查 略（参考官网）</li><li>当待删除角色是部分对象的拥有者时，因对象依赖会导致删除角色失败</li><li>当待删除角色被显式授予对象权限时，因权限依赖会导致删除角色失败</li></ul><h1 id="对象的访问权限入门"><a href="#对象的访问权限入门" class="headerlink" title="对象的访问权限入门"></a>对象的访问权限入门</h1><ul><li>数据库的表、索引、视图、图表、缺省值、规则、触发器、语法等等，在数据库中的一切，都称为数据库对象，对象分为如下两类：</li></ul><ol><li>模式（SCHEMA）对象：可视为一个表的集合，可以理解为一个存储目录，包含视图、索引、数据类型、函数和操作符等</li><li>非模式对象：其他的数据库对象，如数据库、表空间、用户、权限。</li></ol><ul><li>用户或角色访问模式对象或非模式对象的能力称之为对象权限</li></ul><br><br><br><h1 id="简单巡检"><a href="#简单巡检" class="headerlink" title="简单巡检"></a>简单巡检</h1><h2 id="查看-KES-版本信息"><a href="#查看-KES-版本信息" class="headerlink" title="查看 KES 版本信息"></a>查看 KES 版本信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 sys_ctl 查看版本</span></span><br><span class="line">[kingbase@localhost ~]$ sys_ctl -V</span><br><span class="line">sys_ctl (Kingbase) 12.1</span><br><span class="line">[kingbase@localhost ~]$ sys_ctl --version</span><br><span class="line">sys_ctl (Kingbase) 12.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 version 函数查看版本</span></span><br><span class="line">test=# select version();</span><br><span class="line">                                                       version</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> KingbaseES V008R006C006B0013 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-46), 64-bit</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><br><h2 id="查看-license-有效期"><a href="#查看-license-有效期" class="headerlink" title="查看 license 有效期"></a>查看 license 有效期</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test=# select get_license_validdays();</span><br><span class="line"> get_license_validdays</span><br><span class="line">-----------------------</span><br><span class="line">                    66</span><br><span class="line">(1 行记录)</span><br></pre></td></tr></table></figure><br><br><h2 id="查看-KES-实例启动时间和运行时长"><a href="#查看-KES-实例启动时间和运行时长" class="headerlink" title="查看 KES 实例启动时间和运行时长"></a>查看 KES 实例启动时间和运行时长</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看数据库实例启动时间</span></span><br><span class="line">test=# select sys_postmaster_start_time();</span><br><span class="line">   sys_postmaster_start_time</span><br><span class="line">-------------------------------</span><br><span class="line"> 2022-09-25 08:04:56.261041+08</span><br><span class="line">(1 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 KES 无故障运行时长</span></span><br><span class="line">test=# select date_trunc(&#x27;second&#x27;,current_timestamp - sys_postmaster_start_time()) as uptime;</span><br><span class="line">         uptime</span><br><span class="line">------------------------</span><br><span class="line"> 2 days 16:28:15.000000</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><br><h2 id="查看数据库列表"><a href="#查看数据库列表" class="headerlink" title="查看数据库列表"></a>查看数据库列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 ksql 的-l 参数或元命令\l</span></span><br><span class="line">[kingbase@localhost ~]$ ksql -Usystem -d test -l</span><br><span class="line">                                           数据库列表</span><br><span class="line">    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限</span><br><span class="line">-------------+-------------+----------+----------+-------------+--------------------------------</span><br><span class="line"> security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class="line"> template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class="line">             |             |          |          |             | system=CTc/system</span><br><span class="line"> template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class="line">             |             |          |          |             | system=CTc/system</span><br><span class="line"> test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class="line"> xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +</span><br><span class="line">             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test</span><br><span class="line">(5 行记录)</span><br><span class="line"></span><br><span class="line">test=# \l</span><br><span class="line">                                           数据库列表</span><br><span class="line">    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限</span><br><span class="line">-------------+-------------+----------+----------+-------------+--------------------------------</span><br><span class="line"> security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class="line"> template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class="line">             |             |          |          |             | system=CTc/system</span><br><span class="line"> template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class="line">             |             |          |          |             | system=CTc/system</span><br><span class="line"> test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class="line"> xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +</span><br><span class="line">             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test</span><br><span class="line">(5 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用数据字典</span></span><br><span class="line">test=# select datname from sys_database;</span><br><span class="line">   datname</span><br><span class="line">-------------</span><br><span class="line"> test</span><br><span class="line"> security</span><br><span class="line"> template1</span><br><span class="line"> template0</span><br><span class="line"> xjnxdb_test</span><br><span class="line">(5 行记录)</span><br></pre></td></tr></table></figure><br><br><h2 id="查看数据库占用的磁盘空间"><a href="#查看数据库占用的磁盘空间" class="headerlink" title="查看数据库占用的磁盘空间"></a>查看数据库占用的磁盘空间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计当前数据库占用的磁盘空间</span></span><br><span class="line">test=# select sys_database_size(current_database())/1024/1024 || &#x27;MB&#x27; MB;</span><br><span class="line">  MB</span><br><span class="line">------</span><br><span class="line"> 12MB</span><br><span class="line">(1 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计所有数据库占用的磁盘空间总量</span></span><br><span class="line">xjnxdb_test=# select (sum(sys_database_size(datname))/1024/1024) || &#x27;MB&#x27; MB from sys_database;</span><br><span class="line">           MB</span><br><span class="line">------------------------</span><br><span class="line"> 234.1652364730834961MB</span><br><span class="line">(1 行记录)</span><br></pre></td></tr></table></figure><br><br><h2 id="查看表和索引的大小"><a href="#查看表和索引的大小" class="headerlink" title="查看表和索引的大小"></a>查看表和索引的大小</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计表的空间占用</span></span><br><span class="line">xjnxdb_test=# select sys_relation_size(&#x27;xjnxdb_test.pa_user&#x27;)/1024 || &#x27;KB&#x27; KB;</span><br><span class="line">  KB</span><br><span class="line">------</span><br><span class="line"> 48KB</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br><span class="line">xjnxdb_test=# select sys_size_pretty(sys_relation_size(&#x27;xjnxdb_test.pa_user&#x27;));</span><br><span class="line"> sys_size_pretty</span><br><span class="line">-----------------</span><br><span class="line"> 48 kB</span><br><span class="line">(1 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计表和与表关联的索引占用空间总量</span></span><br><span class="line">xjnxdb_test=# select sys_total_relation_size(&#x27;xjnxdb_test.pa_user&#x27;)/1024 || &#x27;KB&#x27; KB;</span><br><span class="line">  KB</span><br><span class="line">------</span><br><span class="line"> 88KB</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br><span class="line">xjnxdb_test=# select sys_size_pretty(sys_total_relation_size(&#x27;xjnxdb_test.pa_user&#x27;));</span><br><span class="line"> sys_size_pretty</span><br><span class="line">-----------------</span><br><span class="line"> 88 kB</span><br><span class="line">(1 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计表的记录数</span></span><br><span class="line">xjnxdb_test=# select count(*) || &#x27; rows&#x27; &quot;rows&quot; from xjnxdb_test.pa_user;</span><br><span class="line">   rows</span><br><span class="line">----------</span><br><span class="line"> 145 rows</span><br><span class="line">(1 行记录)</span><br></pre></td></tr></table></figure><br><br><h2 id="查看时区和时间"><a href="#查看时区和时间" class="headerlink" title="查看时区和时间"></a>查看时区和时间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看最近一次加载参数文件的时间</span></span><br><span class="line">xjnxdb_test=# select sys_conf_load_time();</span><br><span class="line">      sys_conf_load_time</span><br><span class="line">-------------------------------</span><br><span class="line"> 2022-09-25 08:04:55.822231+08</span><br><span class="line">(1 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看时区</span></span><br><span class="line">xjnxdb_test=# show timezone;</span><br><span class="line">   TimeZone</span><br><span class="line">---------------</span><br><span class="line"> Asia/Shanghai</span><br><span class="line">(1 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前日期或时间</span></span><br><span class="line">xjnxdb_test=# select now();</span><br><span class="line">              now</span><br><span class="line">-------------------------------</span><br><span class="line"> 2022-09-28 05:43:22.416126+08</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br><span class="line">xjnxdb_test=# select current_timestamp;</span><br><span class="line">       current_timestamp</span><br><span class="line">-------------------------------</span><br><span class="line"> 2022-09-28 05:43:45.124372+08</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br><span class="line">xjnxdb_test=# select sysdate;</span><br><span class="line">       sysdate</span><br><span class="line">---------------------</span><br><span class="line"> 2022-09-28 05:44:16</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br><span class="line">xjnxdb_test=# select current_date;</span><br><span class="line"> current_date</span><br><span class="line">--------------</span><br><span class="line"> 2022-09-28</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><br><h2 id="查看当前登录数据库的名称"><a href="#查看当前登录数据库的名称" class="headerlink" title="查看当前登录数据库的名称"></a>查看当前登录数据库的名称</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xjnxdb_test=# select current_catalog;</span><br><span class="line"> current_catalog</span><br><span class="line">-----------------</span><br><span class="line"> xjnxdb_test</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br><span class="line">xjnxdb_test=# select current_database();</span><br><span class="line"> current_database</span><br><span class="line">------------------</span><br><span class="line"> xjnxdb_test</span><br><span class="line">(1 行记录)</span><br></pre></td></tr></table></figure><br><br><h2 id="查看当前会话信息"><a href="#查看当前会话信息" class="headerlink" title="查看当前会话信息"></a>查看当前会话信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前会话的客户端 IP 和端口。</span></span><br><span class="line">test=# select inet_client_addr(),inet_client_port();</span><br><span class="line"> inet_client_addr | inet_client_port</span><br><span class="line">------------------+------------------</span><br><span class="line"> 10.114.200.15    |            52665</span><br><span class="line">(1 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务器的 IP 和端口。</span></span><br><span class="line">test=# select inet_server_addr(),inet_server_port();</span><br><span class="line"> inet_server_addr | inet_server_port</span><br><span class="line">------------------+------------------</span><br><span class="line"> 10.114.12.66     |            54321</span><br><span class="line">(1 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前会话的后台进程 ID。</span></span><br><span class="line">test=# select sys_backend_pid();</span><br><span class="line"> sys_backend_pid</span><br><span class="line">-----------------</span><br><span class="line">          341129</span><br><span class="line">(1 行记录)</span><br></pre></td></tr></table></figure><br><br><h2 id="查看数据库中的连接信息"><a href="#查看数据库中的连接信息" class="headerlink" title="查看数据库中的连接信息"></a>查看数据库中的连接信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test=# select datname,usename,client_addr,client_port  from sys_stat_activity;</span><br><span class="line">   datname    |   usename    |  client_addr   | client_port</span><br><span class="line">--------------+--------------+----------------+-------------</span><br><span class="line">              |              |                |</span><br><span class="line">              | system       |                |</span><br><span class="line">              | system       |                |</span><br><span class="line"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45560</span><br><span class="line"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45584</span><br><span class="line"> xjnxdb_test2 | xjnxdb_test2 | 10.114.12.67   |       45624</span><br><span class="line"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630</span><br></pre></td></tr></table></figure><br><br><h2 id="查看会话执行的-SQL-信息"><a href="#查看会话执行的-SQL-信息" class="headerlink" title="查看会话执行的 SQL 信息"></a>查看会话执行的 SQL 信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（1）设置参数 track_activities 为 on。</span></span><br><span class="line">test=# show track_activities;</span><br><span class="line"> track_activities</span><br><span class="line">------------------</span><br><span class="line"> on</span><br><span class="line">(1 行记录)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有会话执行的 SQL 信息</span></span><br><span class="line">test=# select datname,usename,client_addr,client_port  from sys_stat_activity;</span><br><span class="line">   datname    |   usename    |  client_addr   | client_port</span><br><span class="line">--------------+--------------+----------------+-------------</span><br><span class="line">              |              |                |</span><br><span class="line">              | system       |                |</span><br><span class="line">              | system       |                |</span><br><span class="line"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45654</span><br><span class="line"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45694</span><br><span class="line"> tfsdb        | tfsdb        | 10.43.1.113    |       55971</span><br><span class="line"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630</span><br><span class="line"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45684</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只看正在运行的 SQL 信息</span></span><br><span class="line">test=# select datname,usename,client_addr,client_port  from sys_stat_activity where state not like &#x27;idle%&#x27;;</span><br><span class="line">   datname   |   usename   |  client_addr   | client_port</span><br><span class="line">-------------+-------------+----------------+-------------</span><br><span class="line"> xjnxdb_test | xjnxdb_test | 10.114.12.67   |       45706</span><br><span class="line"> xjnxdb      | xjnxdb      | 10.114.200.108 |       54113</span><br><span class="line"> test        | system      | 10.114.200.15  |       56839</span><br><span class="line">(3 行记录)</span><br></pre></td></tr></table></figure><br><br><h2 id="查看耗时较长的-SQL"><a href="#查看耗时较长的-SQL" class="headerlink" title="查看耗时较长的 SQL"></a>查看耗时较长的 SQL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tfsdb=# select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != &#x27;idle&#x27; order by 1 desc;</span><br><span class="line">-[ RECORD 1 ]----------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">runtime | 00:00:00.000000</span><br><span class="line">datname | tfsdb</span><br><span class="line">usename | system</span><br><span class="line">pid     | 341563</span><br><span class="line">query   | select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != &#x27;idle&#x27; order by 1 desc;</span><br></pre></td></tr></table></figure><br><br><h2 id="事务阻塞会话的简单处理"><a href="#事务阻塞会话的简单处理" class="headerlink" title="事务阻塞会话的简单处理"></a>事务阻塞会话的简单处理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会话 1—关闭自动提交后删除记录</span></span><br></pre></td></tr></table></figure><br><br><br><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">熟悉语义 /KingbaseES/V8/Server/bin/kingbase -D /data &gt;log1 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">systemctl , sys_ctl service各个命令的隔离性？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">几种关闭模式需要详细了解和实验记录，需要自己动手做实验</span><br><span class="line"></span><br><span class="line">sql 的元命令 需要详细了解一下呢</span><br><span class="line"></span><br><span class="line">copy 和 \copy</span><br><span class="line"></span><br><span class="line">事务阻塞会话的简单处理 这一块还需要了解一下</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kingbase安装与卸载&quot;&gt;&lt;a href=&quot;#Kingbase安装与卸载&quot; class=&quot;headerlink&quot; title=&quot;Kingbase安装与卸载&quot;&gt;&lt;/a&gt;Kingbase安装与卸载&lt;/h1&gt;&lt;h2 id=&quot;KES安装&quot;&gt;&lt;a href=&quot;#KES安</summary>
      
    
    
    
    <category term="database" scheme="https://ratears.gitee.io/dev.ratears.life/categories/database/"/>
    
    <category term="kingbase" scheme="https://ratears.gitee.io/dev.ratears.life/categories/database/kingbase/"/>
    
    
    <category term="database" scheme="https://ratears.gitee.io/dev.ratears.life/tags/database/"/>
    
    <category term="kingbase" scheme="https://ratears.gitee.io/dev.ratears.life/tags/kingbase/"/>
    
  </entry>
  
  <entry>
    <title>《一站式学习Redis-从入门到高可用分布式实践》study notes</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0Redis-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E8%B7%B5%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0Redis-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E8%B7%B5%E3%80%8Bstudy-notes/</id>
    <published>2022-08-30T18:12:50.000Z</published>
    <updated>2022-09-27T19:05:21.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis初识"><a href="#Redis初识" class="headerlink" title="Redis初识"></a>Redis初识</h1><h2 id="Redis是什么"><a href="#Redis是什么" class="headerlink" title="Redis是什么"></a>Redis是什么</h2><ul><li>开源</li><li>基于键值的存储服务系统</li><li>多种数据结构</li><li>高性能、功能丰富</li></ul><br><h2 id="Redis的特性"><a href="#Redis的特性" class="headerlink" title="Redis的特性"></a>Redis的特性</h2><ul><li>速度快（10w OPS）<ul><li>数据存储在内存（速度快的主要原因）</li><li>使用C语言编写</li><li>单线程</li></ul></li><li>持久化<ul><li>Redis的所有数据保存在内存中，对数据的更新异步的保存在磁盘上</li></ul></li><li>多种数据结构<ul><li>5中主要类型</li></ul></li><li>支持多种编程语言<ul><li>主流编程语言都支持Redis</li></ul></li><li>功能丰富<ul><li>发布订阅</li><li>事物</li><li>lua脚本</li><li>pipeline</li></ul></li><li>简单<ul><li>早期代码23000行</li><li>不依赖外部库</li><li>单线程模型</li></ul></li><li>主从复制</li><li>高可用、分布式</li></ul><br><h2 id="Redis典型使用场景"><a href="#Redis典型使用场景" class="headerlink" title="Redis典型使用场景"></a>Redis典型使用场景</h2><ul><li>缓存系统</li><li>计数器</li><li>消息队列系统</li><li>排行榜</li><li>社交网络</li><li>事实系统</li></ul><br><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><ul><li>安装前环境准备</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ kernel-devel</span><br></pre></td></tr></table></figure><ul><li>下载安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /install</span><br><span class="line"></span><br><span class="line">[root@localhost install]# wget https://github.com/redis/redis/archive/7.0.4.tar.gz</span><br><span class="line">[root@localhost install]# tar -zxvf redis-7.0.4.tar.gz</span><br><span class="line">[root@localhost install]# mv redis-7.0.4 /usr/local/</span><br><span class="line">[root@localhost install]# cd /usr/local/</span><br><span class="line"></span><br><span class="line">[root@localhost local]# ln -s redis-7.0.4/ redis</span><br><span class="line">[root@localhost local]# cd redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接 make 会失败报错 原因：建立redis时系统默认使用jemalloc作为内存管理工具，但是当前无可用jemalloc，切换为标准内存管理工具libc问题解决</span></span><br><span class="line">[root@localhost redis]# make MALLOC=libc</span><br><span class="line">[root@localhost redis]# make install</span><br></pre></td></tr></table></figure><br><h2 id="Redis三种启动方式"><a href="#Redis三种启动方式" class="headerlink" title="Redis三种启动方式"></a>Redis三种启动方式</h2><ul><li>最简启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用默认配置启动</span></span><br><span class="line">redis-server</span><br></pre></td></tr></table></figure><ul><li>动态参数启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server --port 6380</span><br></pre></td></tr></table></figure><ul><li>配置文件启动（推荐）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server configPath</span><br></pre></td></tr></table></figure><ul><li>启动方式比较</li></ul><blockquote><p>生产环境选择配置启动</p><p>单机多实例配置文件可以用端口区分开来</p></blockquote><br><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep redis</span><br><span class="line"></span><br><span class="line">netstat -antpl |grep redis</span><br><span class="line"></span><br><span class="line">redis-cli -h [ip] -p [port] ping </span><br></pre></td></tr></table></figure><br><h2 id="Redis可执行文件说明"><a href="#Redis可执行文件说明" class="headerlink" title="Redis可执行文件说明"></a>Redis可执行文件说明</h2><ul><li>redis-server    -    redis服务器</li><li>redis-cli    -    redis命令行客户端</li><li>redis-benchmark    -    redis性能测试工具</li><li>redis-check-aof    -    AOF文件修复工具</li><li>redis-check-dump    -    RDB文件检查工具</li><li>redis-sentinel    -    Sentinel服务器（2.8之后）</li></ul><br><h2 id="Redis常用配置"><a href="#Redis常用配置" class="headerlink" title="Redis常用配置"></a>Redis常用配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否以守护进程方式启动 [<span class="built_in">yes</span>|no]</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis 对外端口</span></span><br><span class="line">port 6380</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置日志名称</span></span><br><span class="line">logfile &quot;6380.log&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis 工作目录（包括日志文件、持久化文件存储位置）</span></span><br><span class="line">dir &quot;/usr/local/redis/data/&quot;</span><br></pre></td></tr></table></figure><br><h1 id="API的理解和使用"><a href="#API的理解和使用" class="headerlink" title="API的理解和使用"></a>API的理解和使用</h1><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遍历所有的key，可以使用通配符</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复杂度 O(n) ，不建议在生产环境使用，除非数量特别小</span></span><br><span class="line">keys *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内置的对键值 统计的计数器</span></span><br><span class="line">dbsize</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查key是否存在，返回 1 或 0</span></span><br><span class="line">exists</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定 key-value，返回 1 或 0</span></span><br><span class="line">del key [key...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 key 在 seconds 秒后过期</span></span><br><span class="line">expire key seconds</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询key 还有多长时间过期，不过期则返回 -1</span></span><br><span class="line">ttl key</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">去除过期时间，</span></span><br><span class="line">persist key</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不存在则返回 none</span></span><br><span class="line">type key</span><br></pre></td></tr></table></figure><br><h2 id="数据结构和内部编码"><a href="#数据结构和内部编码" class="headerlink" title="数据结构和内部编码"></a>数据结构和内部编码</h2><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3scu9pvrtk80.webp"                      width="75%"                 ><br><ul><li>redisObject</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69a05a18h8s0.webp"                      width="75%"                ><br><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><h3 id="单线程为什么这么快"><a href="#单线程为什么这么快" class="headerlink" title="单线程为什么这么快"></a>单线程为什么这么快</h3><ul><li>纯内存（主要原因）</li><li>阻塞IO</li><li>避免线程切换和竞态消耗</li></ul><br><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>一次只运行一条命令</p></li><li><p>拒绝长（慢）命命令：<code>kesy</code> <code>flushall</code> <code>flushdb</code> <code>slow lua script</code> <code>mutil/exec</code> <code>operate big value(collection)</code></p></li><li><p>其实不是单线程：<code>fysnc file descriptor</code> <code>close file descriptor</code></p></li></ol><br><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>可以是真的字符串，同时也可以是数字，二进制数字等等。大小限制 512MB</li></ul><img src ="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c36c4ac53ae6df147284b21e0fa921.lo8tp31mfhs.webp" width="70%" /><br><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>缓存</li><li>计数器</li><li>分布式锁</li><li>……</li></ul><br><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><table><thead><tr><th align="center">命令</th><th align="center">举例</th><th align="center">时间复杂度</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">set</td><td align="center">set hello word</td><td align="center">O(1)</td><td align="center">不管key是否存在，都设置。成功返回ok</td></tr><tr><td align="center">setnx</td><td align="center">setnx k v</td><td align="center">O(1)</td><td align="center">key不存在才设置</td></tr><tr><td align="center">set xx</td><td align="center">set k v xx</td><td align="center">O(1)</td><td align="center">key存在才设置。不存在返回nil</td></tr><tr><td align="center">mset</td><td align="center">mset k1 v1 k2 v2</td><td align="center">O(n)</td><td align="center">批量设置key-value，原子操作</td></tr><tr><td align="center">del</td><td align="center">del hello</td><td align="center">O(1)</td><td align="center">成功返回1,失败返回0</td></tr><tr><td align="center">get</td><td align="center">get hello</td><td align="center">O(1)</td><td align="center">成功返回的value，失败返回nil</td></tr><tr><td align="center">mget</td><td align="center">mget k1 k2</td><td align="center">O(n)</td><td align="center">批量获取key-value，原子操作</td></tr><tr><td align="center">incr</td><td align="center">incr counter</td><td align="center">O(1)</td><td align="center">自增1，并返回自增后的value值。如果key不存在，自增后get(key) = 1</td></tr><tr><td align="center">decr</td><td align="center">decr counter</td><td align="center">O(1)</td><td align="center">自减1，并返回自减后的value值。如果key不存在，自减后get(key) = -1</td></tr><tr><td align="center">incrby</td><td align="center">incrby view k</td><td align="center">O(1)</td><td align="center">自增k，并返回自增k后的value值。如果key不存在，自增后get(key) = k</td></tr><tr><td align="center">decrby</td><td align="center">decrby view k</td><td align="center">O(1)</td><td align="center">自减k，并返回自减后的value值。如果key不存在，自减后get(key) = -k</td></tr><tr><td align="center">getset</td><td align="center">getset k newvalue</td><td align="center">O(1)</td><td align="center">set key newValue，并返回旧的value</td></tr><tr><td align="center">apend</td><td align="center">apend k v</td><td align="center">O(1)</td><td align="center">将value追加到旧的value</td></tr><tr><td align="center">strlen</td><td align="center">strlen k</td><td align="center">O(1)</td><td align="center">返回字符串的长度[字节]（utf-8 中文占 2个字节）</td></tr><tr><td align="center">incrbyfloat</td><td align="center">incrbyfloat k v</td><td align="center">O(1)</td><td align="center">增加指定的浮点数</td></tr><tr><td align="center">getrange</td><td align="center">getrange k start end</td><td align="center">O(1)</td><td align="center">获取字符串指定下标所有的值</td></tr><tr><td align="center">setrange</td><td align="center">setrange k index value</td><td align="center">O(1)</td><td align="center">设置指定下标对应的值</td></tr></tbody></table><br><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><ol><li>记录网站每个用户的个人主页访问量</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单线程：无竞争（并发不会出现计错数的情况）</span></span><br><span class="line">incr userId:pageView</span><br></pre></td></tr></table></figure><ol start="2"><li>缓存视频的基本信息（数据源在MySQL中）</li></ol><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2nspuoc7ly60.webp"                      width="70%"                 ><br><ol start="3"><li>分布式id生成器</li></ol><br><h3 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1d121aa9afdb06c7451e0fb8bb2d560.kias448eqho.webp"                      width="70%"                 ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c1ea9bb24f88ec70a3aacc637a9183.4xykrj7thuw0.webp"                      width="70%"                 ><h2 id="hash（哈希）"><a href="#hash（哈希）" class="headerlink" title="hash（哈希）"></a>hash（哈希）</h2><br><h1 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h1><h2 id="Java客户端Jedis"><a href="#Java客户端Jedis" class="headerlink" title="Java客户端Jedis"></a>Java客户端Jedis</h2><h3 id="Jedis简单使用"><a href="#Jedis简单使用" class="headerlink" title="Jedis简单使用"></a>Jedis简单使用</h3><ul><li>maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Jedis直连</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1l6p9hnls4rk.webp"                      width="70%"                ><br><h3 id="JedisPool简单使用"><a href="#JedisPool简单使用" class="headerlink" title="JedisPool简单使用"></a>JedisPool简单使用</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ehexcty0j20.webp"                      width = "70%"                ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3r9cudbxdi00.webp"                      width = "70%"                ><br><h3 id="Jedis-与-JedisPool比较"><a href="#Jedis-与-JedisPool比较" class="headerlink" title="Jedis 与 JedisPool比较"></a>Jedis 与 JedisPool比较</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/97b459332ea53d7e42b90bd2743dcda.396pfset03e0.webp"                      width="60%"                 ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/7e5d97f719abbfe9b363126e682f86d.3g21qh3ltu20.webp"                      width="60%"                 ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/41e863e25d7ae1dc0c3cebe8444b9c5.2tj6g97vyck.webp"                      width="60%"                 ><br><h3 id="Jedis配置优化"><a href="#Jedis配置优化" class="headerlink" title="Jedis配置优化"></a>Jedis配置优化</h3><h4 id="pool配置-资源数控制"><a href="#pool配置-资源数控制" class="headerlink" title="pool配置 - 资源数控制"></a>pool配置 - 资源数控制</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.21oqgp1jyxnk.webp"                      width="60%"                 ><br><h4 id="pool配置-借还参数"><a href="#pool配置-借还参数" class="headerlink" title="pool配置 - 借还参数"></a>pool配置 - 借还参数</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7cwnd55qd1s0.webp"                      width="70%"                 ><br><h4 id="适合的-maxTotal"><a href="#适合的-maxTotal" class="headerlink" title="适合的 maxTotal"></a>适合的 maxTotal</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2mma31ou5nw0.webp"                      width="60%"                 ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6sejm8evfwc.webp"                      width="60%"                 ><br><h4 id="适合的maxIdle和minIdle"><a href="#适合的maxIdle和minIdle" class="headerlink" title="适合的maxIdle和minIdle"></a>适合的maxIdle和minIdle</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6lhcm72l9bo0.webp"                      width="60%"                 ><br><h3 id="常见问题和解决思路"><a href="#常见问题和解决思路" class="headerlink" title="常见问题和解决思路"></a>常见问题和解决思路</h3><ul><li>常见问题</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75d32k2l47g0.webp"                      width="60%"                 ><br><ul><li>解决思路</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41af9urqt6a0.webp"                      width="60%"                 ><br><ul><li>错误示例</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.31pwe9jqbig0.webp"                      width="60%"                 ><br><ul><li>推荐写法</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69xc8p0s24o0.webp"                      width="60%"                 ><br><h1 id="Redis其他功能"><a href="#Redis其他功能" class="headerlink" title="Redis其他功能"></a>Redis其他功能</h1><h2 id="slowlog（慢查询）"><a href="#slowlog（慢查询）" class="headerlink" title="slowlog（慢查询）"></a>slowlog（慢查询）</h2><h3 id="命令生命周期"><a href="#命令生命周期" class="headerlink" title="命令生命周期"></a>命令生命周期</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.76jbqyv85l80.webp"                      width="70%"                 ><br><ul><li><strong>（1）慢查询发生在第3阶段</strong></li><li><strong>（2）客户端超时不一定是慢查询，但慢查询是客户端超时的一个可能因素</strong></li></ul><br><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="slowlog-max-len"><a href="#slowlog-max-len" class="headerlink" title="slowlog-max-len"></a>slowlog-max-len</h4><ol start="0"><li><p><code>slowlog-max-len</code> 表示慢查询队列长度</p></li><li><p>慢查询是一个先进先出的队列；如果在第3步执行过程中，被列入慢查询的范围内，就会进入一个队列（用redis的列表实现的）</p></li><li><p>慢查询队列是固定长度的</p></li><li><p>慢查询队列数据保存在内存中</p></li></ol><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.44yrctjcttc0.webp"                      width="70%"                 ><br><h4 id="slowlog-log-slower-than"><a href="#slowlog-log-slower-than" class="headerlink" title="slowlog-log-slower-than"></a>slowlog-log-slower-than</h4><ol><li><code>slowlog-log-slower-than</code> 表示慢查询命令执行时间阈值（单位：微秒，1ms=1000微秒），超过阈值会被加入慢查询队列中</li><li><code>slowlog-log-slower-than = 0</code> ，记录所有命令</li><li><code>slowlog-log-slower-than &lt; 0</code> ，不记录任何命令</li></ol><br><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; config get slowlog-max-len</span><br><span class="line">1) &quot;slowlog-max-len&quot;</span><br><span class="line">2) &quot;128&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">10000微秒 =》 10ms</span></span><br><span class="line">127.0.0.1:6380&gt; config get slowlog-log-slower-than</span><br><span class="line">1) &quot;slowlog-log-slower-than&quot;</span><br><span class="line">2) &quot;10000&quot;</span><br></pre></td></tr></table></figure><br><h4 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h4><ol><li><p>方法一：修改配置文件重启（一般在第一次启动redis前进行配置。但如果redis正在运行中，不推荐此方式）</p></li><li><p>方法二：动态配置</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config set slowlog-max-len 1000</span><br><span class="line"></span><br><span class="line">config set slowlog-log-slower-than 1000</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">操作示例</span></span><br><span class="line">127.0.0.1:6380&gt; config set slowlog-max-len 1000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; config set slowlog-log-slower-than 1000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; config get slowlog-max-len</span><br><span class="line">1) &quot;slowlog-max-len&quot;</span><br><span class="line">2) &quot;1000&quot;</span><br><span class="line">127.0.0.1:6380&gt; config get slowlog-log-slower-than</span><br><span class="line">1) &quot;slowlog-log-slower-than&quot;</span><br><span class="line">2) &quot;1000&quot;</span><br><span class="line">127.0.0.1:6380&gt;</span><br></pre></td></tr></table></figure><br><h3 id="慢查询命令"><a href="#慢查询命令" class="headerlink" title="慢查询命令"></a>慢查询命令</h3><table><thead><tr><th align="center">慢查询命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">slowlog get [n]</td><td align="center">获取慢查询队列指定条数</td></tr><tr><td align="center">slowlog len</td><td align="center">获取慢查询队列长度</td></tr><tr><td align="center">slowlog reset</td><td align="center">清空慢查询队列</td></tr></tbody></table><br><h3 id="运维经验"><a href="#运维经验" class="headerlink" title="运维经验"></a>运维经验</h3><ol><li>slowlog-max-len不要设置过大。默认10ms，通常设置1ms（实际情况要根据QPS来决定阈值大小，有可能1ms就已经对我们的QPS产生影响了）</li><li>slowlog-log-slower-than不要设置过小，通常设置1000左右</li><li>理解命令生命周期，理解慢查询处于命令生命周期的位置。便于我们排错和优化（慢查询、阻塞、网络都可能成为客户端超时的原因）</li><li><strong>定期持久化查询（因为慢查询是存在内存中的，且当慢查询数量逐步增多，早前的慢查询就会丢掉。做好持久化，可以分析历史的慢查询问题）。可以通过其它手段或开源软件实现这个功能</strong></li></ol><br><h2 id="pipeline（流水线）"><a href="#pipeline（流水线）" class="headerlink" title="pipeline（流水线）"></a>pipeline（流水线）</h2><h3 id="网络命令通信模型"><a href="#网络命令通信模型" class="headerlink" title="网络命令通信模型"></a>网络命令通信模型</h3><h4 id="1次网络命令通信模型"><a href="#1次网络命令通信模型" class="headerlink" title="1次网络命令通信模型"></a>1次网络命令通信模型</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.10peiok08sk0.webp"                      width="60%"                 ><br><h4 id="批量网络命令通信模型"><a href="#批量网络命令通信模型" class="headerlink" title="批量网络命令通信模型"></a>批量网络命令通信模型</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yo8sxod81o0.webp"                      width="60%"                 ><br><h3 id="什么是pipeline（流水线）"><a href="#什么是pipeline（流水线）" class="headerlink" title="什么是pipeline（流水线）"></a>什么是pipeline（流水线）</h3><ul><li>我们知道redis的命令执行是很快的，但是网络时间却不一定。使用pipeline可以帮我们节约大量网络时间</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.v0w62a1vlc0.webp"                      width="60%"                 ><br><h3 id="pipeline的作用"><a href="#pipeline的作用" class="headerlink" title="pipeline的作用"></a>pipeline的作用</h3><table><thead><tr><th align="center">命令</th><th align="center">N个命令操作</th><th align="center">1次pipeline（N个命令）</th></tr></thead><tbody><tr><td align="center">时间</td><td align="center">n次网络+n次命令</td><td align="center">1次网络时间+n次命令</td></tr><tr><td align="center">数量</td><td align="center">1条命令</td><td align="center">n条命令</td></tr></tbody></table><ul><li>注意</li></ul><ol><li>Redis的命令时间是微秒级别</li><li>pipeline每次条数要控制（网络）</li></ol><ul><li>举例</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2sv2n6wunz20.webp"                      width="60%"                 ><br><h3 id="pipeline的jedis实现"><a href="#pipeline的jedis实现" class="headerlink" title="pipeline的jedis实现"></a>pipeline的jedis实现</h3><ul><li>添加maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>没有pipe-line</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2cxbniglxcys.webp"                      width="70%"                 ><br><ul><li>使用pipeline</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41hpky36m4a0.webp"                      width="60%"                 ><br><h3 id="pipeline与mget-mset操作的对比"><a href="#pipeline与mget-mset操作的对比" class="headerlink" title="pipeline与mget/mset操作的对比"></a>pipeline与mget/mset操作的对比</h3><ul><li>原生M操作</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6m3lpwqzxqs0.webp"                      width="60%"                 ><br><ul><li>pipeline</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7b0lz2zro400.webp"                      width="60%"                 ><br><p><strong>pipeline命令可拆分</strong></p><br><h3 id="pipeline使用建议"><a href="#pipeline使用建议" class="headerlink" title="pipeline使用建议"></a>pipeline使用建议</h3><ul><li><strong>注意每次pipeline携带数量</strong></li><li><strong>pipeline每次只能作用在一个Redis节点上</strong></li><li><strong>注意pipeline与M操作的区别</strong></li></ul><h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><ul><li>发布者（publisher）</li><li>订阅者（subscriber）</li><li>频道（channel）</li></ul><br><h3 id="发布订阅模型"><a href="#发布订阅模型" class="headerlink" title="发布订阅模型"></a>发布订阅模型</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5skel4tjk0.webp"                      width="60%"                 ><br><ul><li><strong>新的订阅者订阅了一个频道，是无法收到之前的消息</strong>（因为无法做消息堆积，因为redis不是一个真正的消息队列这样一个工具）</li></ul><br><h3 id="发布订阅API"><a href="#发布订阅API" class="headerlink" title="发布订阅API"></a>发布订阅API</h3><h4 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向频道发布消息</span></span><br><span class="line">PUBLISH [channel_name] [message]</span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; publish sohu:tv &quot;hello world&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6380&gt; publish sohu:auto &quot;taxi&quot;</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><br><h4 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">订阅一个或多个频道</span></span><br><span class="line">SUBSCRIBE [channel_name]...</span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; subscribe sohu:tv</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;sohu:tv&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><br><h4 id="unsubscribe"><a href="#unsubscribe" class="headerlink" title="unsubscribe"></a>unsubscribe</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">订阅一个或多个频道</span></span><br><span class="line">UNSUBSCRIBE [channel_name]...</span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; UNSUBSCRIBE sohu:tv</span><br><span class="line">1) &quot;unsubscribe&quot;</span><br><span class="line">2) &quot;sohu:tv&quot;</span><br><span class="line">3) (integer) 0</span><br></pre></td></tr></table></figure><br><h4 id="其它API"><a href="#其它API" class="headerlink" title="其它API"></a>其它API</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.j7q4w7w0f5c.webp"                       width="65%"                ><br><h4 id="发布订阅与消息队列"><a href="#发布订阅与消息队列" class="headerlink" title="发布订阅与消息队列"></a>发布订阅与消息队列</h4><ul><li>Redis可以实现消息队列，消息队列是抢的模式</li><li>注意二者的区别与使用场景</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.33zfet508q00.webp"                      width="65%"                 ><br><h2 id="BItmap（位图）"><a href="#BItmap（位图）" class="headerlink" title="BItmap（位图）"></a>BItmap（位图）</h2><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><ul><li>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的（基于HyperLogLog算法：极小空间完成独立数量统计）</li><li>本质还是字符串</li></ul><br><h3 id="API（命令）"><a href="#API（命令）" class="headerlink" title="API（命令）"></a>API（命令）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pfadd 命令将所有元素参数添加到 HyperLogLog 数据结构中</span></span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD key element [element ...]</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PFCOUNT mykey</span><br><span class="line">(integer) 10</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pfcount 命令返回给定 HyperLogLog 的基数估算值</span></span><br><span class="line">redis 127.0.0.1:6379&gt; PFCOUNT key [key ...]</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD hll foo bar zap</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD hll zap zap zap</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD hll foo bar</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; PFCOUNT hll</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD some-other-hll 1 2 3</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PFCOUNT hll some-other-hll</span><br><span class="line">(integer) 6</span><br><span class="line"><span class="meta prompt_">redis&gt; </span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> PFMERGE 命令将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的</span></span><br><span class="line">PFMERGE destkey sourcekey [sourcekey ...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">PFADD hll1 foo bar zap a</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">PFADD hll2 a b c foo</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">PFMERGE hll3 hll1 hll2</span></span><br><span class="line">&quot;OK&quot;</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">PFCOUNT hll3</span></span><br><span class="line">(integer) 6</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash"> </span></span><br></pre></td></tr></table></figure><br><h3 id="示例（百万独立用户-内存消耗）"><a href="#示例（百万独立用户-内存消耗）" class="headerlink" title="示例（百万独立用户-内存消耗）"></a>示例（百万独立用户-内存消耗）</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.540yx2nmmgw0.webp"                      width="60%"                 ><br><h3 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h3><ul><li>是否能容忍错误？（错误率：0.81%）</li><li>是否需要单条数据？</li></ul><br><h1 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h1><ul><li>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作（存储经纬度，计算两地距离，范围计算等）</li><li>底层使用 zset 实现</li></ul><br><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>类似微信摇一摇（计算指定范围类的用户）</li><li>根据距离计算周围的酒店餐馆等</li></ul><br><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul><li>geoadd：添加地理位置的坐标。</li><li>geopos：获取地理位置的坐标。</li><li>geodist：计算两个位置之间的距离。</li><li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li><li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li><li>geohash：返回一个或多个位置对象的 geohash 值。</li></ul><br><h1 id="Redis持久化的取舍和选择"><a href="#Redis持久化的取舍和选择" class="headerlink" title="Redis持久化的取舍和选择"></a>Redis持久化的取舍和选择</h1><h2 id="持久化的作用"><a href="#持久化的作用" class="headerlink" title="持久化的作用"></a>持久化的作用</h2><ol><li>什么是持久化</li></ol><blockquote><p>redis所有的数据保存在内存中，对数据的更新将异步的保存在磁盘上</p></blockquote><p>内存 =》（持久化）=》磁盘</p><p>内存 《=（恢复）《= 磁盘</p><ol start="2"><li>持久化的方式</li></ol><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.urjf6b58j5c.webp"                      width="60%"                 ><br><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><h3 id="什么是RDB"><a href="#什么是RDB" class="headerlink" title="什么是RDB"></a>什么是RDB</h3><ul><li>RDB：在不同的时间点，将 redis 存储的数据生成快照并存储到磁盘等介质上</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.xtthna1x3gg.webp"                      width="60%"                 ><br><h3 id="RDB触发机制的三种方式"><a href="#RDB触发机制的三种方式" class="headerlink" title="RDB触发机制的三种方式"></a>RDB触发机制的三种方式</h3><h4 id="save（同步）"><a href="#save（同步）" class="headerlink" title="save（同步）"></a>save（同步）</h4><ul><li>可能会造成阻塞</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1mmseu4fo9og.webp"                      width="60%"                 ><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt;  save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件</li><li>复杂度：O(n)</li></ul><br><h4 id="bgsave（异步）"><a href="#bgsave（异步）" class="headerlink" title="bgsave（异步）"></a>bgsave（异步）</h4><ul><li>客户端执行 <code>bgsave</code> redis会使用linux的 <code>fork()</code> 函数生成一个redis的子进程，由该子进程生成RDB文件</li><li>一般情况下， <code>bgsave</code> 不会阻塞到redis</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nkd5mhwgzcw.webp"                      width="60%"                 ><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; bgsave</span><br><span class="line">Background saving started</span><br></pre></td></tr></table></figure><ul><li>文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件</li><li>复杂度：O(n)</li></ul><br><h4 id="save-与-bgsave比较"><a href="#save-与-bgsave比较" class="headerlink" title="save 与 bgsave比较"></a>save 与 bgsave比较</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7z4y2ta7f2w.webp"                      width="65%"                 ><br><h4 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.42jf7bw3rfe0.webp"                      width="70%"                 ><br><ul><li>说明：在 60s 中改变了10000 条数据（set，del），会自动做rdb的生成</li></ul><br><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>数据写入量无法控制，生成规则无法控制。如果文件非常大，或很频繁的做这样的操作，会对硬盘造成一定压力</li></ul><br><h5 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### 快照  #################################</span></span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Save the DB on disk:保存数据库到磁盘</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  save &lt;秒&gt; &lt;更新&gt;</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  如果指定的秒数和数据库写操作次数都满足了就将数据库保存。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  下面是保存操作的实例：</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  注释：注释掉“save”这一行配置项就可以让保存数据库功能失效。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  你也可以通过增加一个只有一个空字符串的配置项（如下面的实例）来去掉前面的“save”配置。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  save <span class="string">&quot;&quot;</span></span>  </span><br><span class="line">  </span><br><span class="line">save 900 1  </span><br><span class="line">save 300 10  </span><br><span class="line">save 60 10000  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在默认情况下，如果RDB快照持久化操作被激活（至少一个条件被激活）并且持久化操作失败，Redis则会停止接受更新操作。</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这样会让用户了解到数据没有被正确的存储到磁盘上。否则没人会注意到这个问题，可能会造成灾难。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果后台存储（持久化）操作进程再次工作，Redis会自动允许更新操作。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然而，如果你已经恰当的配置了对Redis服务器的监视和备份，你也许想关掉这项功能。</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如此一来即使后台保存操作出错,redis也仍然可以继续像平常一样工作。</span>  </span><br><span class="line">stop-writes-on-bgsave-error yes  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否在导出.rdb数据库文件的时候采用LZF压缩字符串和对象？</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认情况下总是设置成‘<span class="built_in">yes</span>’， 他看起来是一把双刃剑。</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果你想在存储的子进程中节省一些CPU就设置成<span class="string">&#x27;no&#x27;</span>，</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">但是这样如果你的kye/value是可压缩的，你的到处数据接就会很大。</span>  </span><br><span class="line">rdbcompression yes  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从版本RDB版本5开始，一个CRC64的校验就被放在了文件末尾。</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这会让格式更加耐攻击，但是当存储或者加载rbd文件的时候会有一个10%左右的性能下降，</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">所以，为了达到性能的最大化，你可以关掉这个配置项。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">没有校验的RDB文件会有一个0校验位，来告诉加载代码跳过校验检查。</span>  </span><br><span class="line">rdbchecksum yes  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出数据库的文件名称</span>  </span><br><span class="line">dbfilename dump.rdb  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作目录</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出的数据库会被写入这个目录，文件名就是上面<span class="string">&#x27;dbfilename&#x27;</span>配置项指定的文件名。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只增的文件也会在这个目录创建（这句话没看明白）</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意你一定要在这个配置一个工作目录，而不是文件名称。</span>  </span><br><span class="line">dir ./  </span><br></pre></td></tr></table></figure><br><h5 id="最佳配置"><a href="#最佳配置" class="headerlink" title="最佳配置"></a>最佳配置</h5><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23rdcl2poqrk.webp"                      width="70%"                 ><br><ul><li>关闭自动配置</li></ul><h3 id="触发机制-不容忽略方式"><a href="#触发机制-不容忽略方式" class="headerlink" title="触发机制 - 不容忽略方式"></a>触发机制 - 不容忽略方式</h3><ol><li>全量复制（主从复制时候，主会自动生成RDB）</li><li>debug reload（相当于不会将内存清空的重启，也会生成RDB）</li><li>shutdown</li></ol><br><h3 id="RDB现存问题"><a href="#RDB现存问题" class="headerlink" title="RDB现存问题"></a>RDB现存问题</h3><ul><li>耗时耗性能</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.b2ax18993q0.webp"                      width="50%"                 ><br><ul><li>不可控，丢失数据</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hq85j7f4ni0.webp"                      width="50%"                 ><br><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><ul><li>将 redis 执行过的所有写指令记录下来（它的写入是实时的），在下次 redis 重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了</li></ul><h3 id="AOF运行原理"><a href="#AOF运行原理" class="headerlink" title="AOF运行原理"></a>AOF运行原理</h3><ul><li>创建</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i410l2830jk.webp"                      width="50%"                 ><br><ul><li>恢复</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2ode8n5q6b80.webp"                      width="60%"                 ><br><h3 id="AOF的三种策略"><a href="#AOF的三种策略" class="headerlink" title="AOF的三种策略"></a>AOF的三种策略</h3><h4 id="always"><a href="#always" class="headerlink" title="always"></a>always</h4><ul><li>写入数据不会丢失</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nz1bf5i1ojk.webp"                      width="50%"                 ><br><h4 id="everysec"><a href="#everysec" class="headerlink" title="everysec"></a>everysec</h4><ul><li>是redis的配置默认值</li><li>可能会丢失1s的数据</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5uvzghtr78s0.webp"                      width="50%"                 ><br><h4 id="no"><a href="#no" class="headerlink" title="no"></a>no</h4><ul><li>根据操作系统决定</li></ul><br><h3 id="AOF的三种策略对比"><a href="#AOF的三种策略对比" class="headerlink" title="AOF的三种策略对比"></a>AOF的三种策略对比</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7ezkvv0o0bg0.webp"                      width="50%"                 ><br><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><ul><li>减少磁盘占用量</li><li>加速恢复速度</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3hr6crymmo0.webp"                      width="50%"                 ><br><h4 id="AOF重写的两种方式"><a href="#AOF重写的两种方式" class="headerlink" title="AOF重写的两种方式"></a>AOF重写的两种方式</h4><ul><li>BGREWRITEAOF （类似rdb的bgsave）<ul><li>将Redis中的数据进行回溯， 回溯成AOF文件</li></ul></li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5j30ijjpor40.webp"                      width="50%"                 ><br><ul><li>AOF重写配置</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.72n439aom900.webp"                      width="50%"                 ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5wl4pwfy7ds0.webp"                      width="50%"                 ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yskrqzxtakw.webp"                      width="50%"                 ><br><h4 id="AOF重写流程"><a href="#AOF重写流程" class="headerlink" title="AOF重写流程"></a>AOF重写流程</h4><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2b1z2py9ols0.webp"                      width="50%"                 ><br><h2 id="RDB与AOF的抉择"><a href="#RDB与AOF的抉择" class="headerlink" title="RDB与AOF的抉择"></a>RDB与AOF的抉择</h2><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2got5zb1qs20.webp"                      width="50%"                 ><br><h3 id="RDB最佳策略"><a href="#RDB最佳策略" class="headerlink" title="RDB最佳策略"></a>RDB最佳策略</h3><ul><li>RDB</li></ul><ol><li>”关闭“</li><li>集中管理</li><li>主从，从开</li></ol><h3 id="AOF最佳策略"><a href="#AOF最佳策略" class="headerlink" title="AOF最佳策略"></a>AOF最佳策略</h3><ol><li>”开“：缓存和存储</li><li>AOF集中管理</li><li>everysec</li></ol><h3 id="最佳策略"><a href="#最佳策略" class="headerlink" title="最佳策略"></a>最佳策略</h3><ol><li>小分片</li><li>缓存或存储</li><li>监控（硬盘、内存、负载、网络）</li><li>足够的内存</li></ol><br><h1 id="常见的持久化开发运维问题"><a href="#常见的持久化开发运维问题" class="headerlink" title="常见的持久化开发运维问题"></a>常见的持久化开发运维问题</h1><h2 id="fork操作"><a href="#fork操作" class="headerlink" title="fork操作"></a>fork操作</h2><ul><li></li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ofn5wyto2w0.webp"                      width="50%"                 ><br><ul><li>fork改善</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.25vvl1tdwgu8.webp"                      width="50%"                 ><br><h2 id="子进程开销和优化"><a href="#子进程开销和优化" class="headerlink" title="子进程开销和优化"></a>子进程开销和优化</h2><ul><li></li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5w40mtg9s0.webp"                      width="50%"                 ><br><h2 id="硬盘优化"><a href="#硬盘优化" class="headerlink" title="硬盘优化"></a>硬盘优化</h2><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lnrmjt1hw40.webp"                      width="50%"                 ><br><h2 id="AOF追加阻塞"><a href="#AOF追加阻塞" class="headerlink" title="AOF追加阻塞"></a>AOF追加阻塞</h2><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v89xx5ytl00.webp"                      width="50%"                 ><br><h2 id="AOF阻塞定位"><a href="#AOF阻塞定位" class="headerlink" title="AOF阻塞定位"></a>AOF阻塞定位</h2><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3t06d4zqkpo0.webp"                      width="50%"                 ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qdujdqyup60.webp"                      width="50%"                 ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.60mk8wrt4lk0.webp"                      width="50%"                 ><br><h1 id="Redis复制的原理与优化"><a href="#Redis复制的原理与优化" class="headerlink" title="Redis复制的原理与优化"></a>Redis复制的原理与优化</h1><h2 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制"></a>什么是主从复制</h2><ul><li>一个master可以有多个slave，但一个slave只能有一个master</li><li>数据流向必须是单向的。master -&gt; slave</li><li>变成从节点前会把数据清楚</li></ul><h2 id="主从复制作用"><a href="#主从复制作用" class="headerlink" title="主从复制作用"></a>主从复制作用</h2><ul><li>一个数据提供了多个副本（成为高可用、分布式的基础）</li><li>扩展读性能（读写分离）</li></ul><h2 id="主从复制实现"><a href="#主从复制实现" class="headerlink" title="主从复制实现"></a>主从复制实现</h2><h3 id="slaveof-命令"><a href="#slaveof-命令" class="headerlink" title="slaveof 命令"></a>slaveof 命令</h3><ul><li>复制（slaveof 这个命令是异步的）</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pa32y5jfz80.webp"                      width="60%"                ><br><ul><li>取消复制</li></ul><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7jnus8oq23k0.webp"                      width="60%"                ><br><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slaveof ip port</span><br><span class="line">slave-read-only yes</span><br></pre></td></tr></table></figure><h3 id="主从复制-命令和配置的比较"><a href="#主从复制-命令和配置的比较" class="headerlink" title="主从复制-命令和配置的比较"></a>主从复制-命令和配置的比较</h3><table><thead><tr><th align="center">方式</th><th align="center">命令</th><th align="center">配置</th></tr></thead><tbody><tr><td align="center">优点</td><td align="center">无需重启</td><td align="center">统一配置</td></tr><tr><td align="center">缺点</td><td align="center">不便于管理</td><td align="center">需要管理</td></tr></tbody></table><h3 id="主从配置操作"><a href="#主从配置操作" class="headerlink" title="主从配置操作"></a>主从配置操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure><h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><h3 id="全量复制过程原理"><a href="#全量复制过程原理" class="headerlink" title="全量复制过程原理"></a>全量复制过程原理</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.312gr8tguvm0.webp"                      width="50%"                 ><br><h3 id="全量复制开销"><a href="#全量复制开销" class="headerlink" title="全量复制开销"></a>全量复制开销</h3><ol><li>bgsave时间</li><li>RDB文件网络传输时间</li><li>从节点清空数据时间</li><li>从节点加载RDB时间</li><li>可能的AOF重写时间</li></ol><h3 id="部分复制过程原理"><a href="#部分复制过程原理" class="headerlink" title="部分复制过程原理"></a>部分复制过程原理</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3vhs1nc1dzi0.webp"                      width="50%"                 ><br><h2 id="主从复制中的故障处理与常见问题"><a href="#主从复制中的故障处理与常见问题" class="headerlink" title="主从复制中的故障处理与常见问题"></a>主从复制中的故障处理与常见问题</h2><ul><li>故障不可避免</li><li>自动故障转移</li><li>故障分为master故障和slave故障</li></ul><h3 id="读写分离问题"><a href="#读写分离问题" class="headerlink" title="读写分离问题"></a>读写分离问题</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.a738ve0k3y8.webp"                      width="50%"                 ><br><h3 id="配置不一致"><a href="#配置不一致" class="headerlink" title="配置不一致"></a>配置不一致</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.nl2kmy53a0w.webp"                      width="50%"                 ><br><h3 id="规避全量复制"><a href="#规避全量复制" class="headerlink" title="规避全量复制"></a>规避全量复制</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6pe5jkk3nm80.webp"                      width="50%"                 ><br><h3 id="规避复制风暴"><a href="#规避复制风暴" class="headerlink" title="规避复制风暴"></a>规避复制风暴</h3><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.361o49e7h2i0.webp"                      width="50%"                 ><br><h1 id="Redis-Sentinel"><a href="#Redis-Sentinel" class="headerlink" title="Redis Sentinel"></a>Redis Sentinel</h1><h1 id="第9章-初识Redis-Cluster"><a href="#第9章-初识Redis-Cluster" class="headerlink" title="第9章 初识Redis Cluster"></a>第9章 初识Redis Cluster</h1><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>jedis 需要熟悉,有些代码还要手动过一遍才是</li><li>生产环境普通用户后台启动redis</li><li>部分图片内容是否应该转化为代码呢？</li><li>bitmap不太懂，还需要深入理解。还包括 hyperloglog、geo</li><li>RDB和AOF的恢复原理和过程是怎么样子的？</li><li>主从复制操作虽然简单，但是最好是实践一下</li></ol></blockquote><img src="" width="50%" /><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis初识&quot;&gt;&lt;a href=&quot;#Redis初识&quot; class=&quot;headerlink&quot; title=&quot;Redis初识&quot;&gt;&lt;/a&gt;Redis初识&lt;/h1&gt;&lt;h2 id=&quot;Redis是什么&quot;&gt;&lt;a href=&quot;#Redis是什么&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="database" scheme="https://ratears.gitee.io/dev.ratears.life/categories/database/"/>
    
    <category term="redis" scheme="https://ratears.gitee.io/dev.ratears.life/categories/database/redis/"/>
    
    <category term="nosql" scheme="https://ratears.gitee.io/dev.ratears.life/categories/nosql/"/>
    
    <category term="redis" scheme="https://ratears.gitee.io/dev.ratears.life/categories/nosql/redis/"/>
    
    
    <category term="database" scheme="https://ratears.gitee.io/dev.ratears.life/tags/database/"/>
    
    <category term="redis" scheme="https://ratears.gitee.io/dev.ratears.life/tags/redis/"/>
    
    <category term="nosql" scheme="https://ratears.gitee.io/dev.ratears.life/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/MyBatis/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/MyBatis/</id>
    <published>2022-08-28T15:40:58.000Z</published>
    <updated>2022-08-29T04:09:12.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h1><h2 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h2><ul><li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁<br>移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于<br>2013年11月迁移到Github。</li><li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架<br>包括SQL Maps和Data Access Objects（DAO）。</li></ul><br><h2 id="MyBatis特性"><a href="#MyBatis特性" class="headerlink" title="MyBatis特性"></a>MyBatis特性</h2><ol><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java<br>Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ol><br><h2 id="MyBatis下载"><a href="#MyBatis下载" class="headerlink" title="MyBatis下载"></a>MyBatis下载</h2><p>MyBatis下载地址：<a class="link"   href="https://github.com/mybatis/mybatis-3" >https://github.com/mybatis/mybatis-3<i class="fas fa-external-link-alt"></i></a></p><br><h2 id="和其它持久化层技术对比"><a href="#和其它持久化层技术对比" class="headerlink" title="和其它持久化层技术对比"></a>和其它持久化层技术对比</h2><ul><li>JDBC<ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><br><h2 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h2><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li>IDE：idea</li><li>构建工具：maven</li><li>MySQL版本：MySQL 8</li><li>MyBatis版本：MyBatis 3.5.7</li></ul><blockquote><p>MySQL不同版本的注意事项<br>1、驱动类driver-class-name<br>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver<br>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p><p>2、连接地址url<br>MySQL 5版本的url：<br>jdbc:mysql://localhost:3306/ssm<br>MySQL 8版本的url：<br>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<br>否则运行测试用例报告如下错误：<br>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more</p></blockquote><br><h3 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h3><ol><li>打包方式：jar</li><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建MyBatis的核心配置文件</li></ol><blockquote><ul><li>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴</li><li>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</li><li>核心配置文件存放的位置是src/main/resources目录下</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        typeAlias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名</span></span><br><span class="line"><span class="comment">        且不区分大小写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.study.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Happy2022&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot; /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.study.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h3><ul><li>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要<br>提供实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加用户信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h3><ul><li>相关概念：ORM（Object Relationship Mapping）对象关系映射<ul><li>对象：Java的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ul></li></ul><table><thead><tr><th align="center">Java概念</th><th align="center">数据库概念</th></tr></thead><tbody><tr><td align="center">类</td><td align="center">表</td></tr><tr><td align="center">属性</td><td align="center">字段/列</td></tr><tr><td align="center">对象</td><td align="center">记录/行</td></tr></tbody></table><ol><li>映射文件的命名规则：</li></ol><blockquote><p>表所对应的实体类的类名+Mapper.xml</p><p>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p><p>因此一个映射文件对应一个实体类，对应一张表的操作</p><p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p><p>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</p></blockquote><ol start="2"><li>MyBatis中可以面向接口操作数据，要保证两个一致：</li></ol><blockquote><ul><li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line"><span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span></span><br><span class="line">映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqlSession.commit();</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;结果：&quot;</span>+result);</span><br></pre></td></tr></table></figure><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</li></ul><br><h3 id="加入log4j日志功能"><a href="#加入log4j日志功能" class="headerlink" title="加入log4j日志功能"></a>加入log4j日志功能</h3><ol><li>加入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>加入log4j的配置文件</li></ol><ul><li>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;%m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>日志的级别:</li></ul><blockquote><p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</p><p>从左到右打印的内容越来越详细</p></blockquote><br><h2 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    MyBatis核心配置文件中，标签的顺序：</span></span><br><span class="line"><span class="comment">    properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class="line"><span class="comment">    objectFactory?,objectWrapperFactory?,reflectorFactory?,</span></span><br><span class="line"><span class="comment">    plugins?,environments?,databaseIdProvider?,mappers?</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置类型别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        typeAlias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名</span></span><br><span class="line"><span class="comment">        且不区分大小写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：配置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">environment：配置某个具体的环境</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">id：表示连接数据库的环境的唯一标识，不能重复</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事</span></span><br><span class="line"><span class="comment">            务的提交或回滚需要手动处理</span></span><br><span class="line"><span class="comment">            MANAGED：被管理，例如Spring</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            dataSource：配置数据源</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            type：设置数据源的类型</span></span><br><span class="line"><span class="comment">            type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">            POOLED：表示使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">            UNPOOLED：表示不使用数据库连接池</span></span><br><span class="line"><span class="comment">            JNDI：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssmserverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位引入映射文件</span></span><br><span class="line"><span class="comment">        要求：</span></span><br><span class="line"><span class="comment">        1、mapper接口所在的包要和映射文件所在的包一致</span></span><br><span class="line"><span class="comment">        2、mapper接口要和映射文件的名字一致</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis简介&quot;&gt;&lt;a href=&quot;#MyBatis简介&quot; class=&quot;headerlink&quot; title=&quot;MyBatis简介&quot;&gt;&lt;/a&gt;MyBatis简介&lt;/h1&gt;&lt;h2 id=&quot;MyBatis历史&quot;&gt;&lt;a href=&quot;#MyBatis历史&quot; class</summary>
      
    
    
    
    <category term="mybatis" scheme="https://ratears.gitee.io/dev.ratears.life/categories/mybatis/"/>
    
    
    <category term="mybatis" scheme="https://ratears.gitee.io/dev.ratears.life/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>《Linux 实战技能 100 讲》study notes</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8ALinux-%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD-100-%E8%AE%B2%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8ALinux-%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD-100-%E8%AE%B2%E3%80%8Bstudy-notes/</id>
    <published>2022-08-21T14:37:16.000Z</published>
    <updated>2022-10-16T21:13:02.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-基础介绍"><a href="#linux-基础介绍" class="headerlink" title="linux 基础介绍"></a>linux 基础介绍</h1><ul><li><p>linux有两种含义</p><ul><li>一种是linus编写的开源操作系统内核</li><li>另一种是广义的操作系统</li></ul></li><li><p>linux内核版本（分为三个部分）</p><ul><li>主版本号、次版本号、末版本号</li><li>次版本号是奇数为开发版本，偶数为稳定版</li></ul></li></ul><br><br><h2 id="linux-常见目录介绍"><a href="#linux-常见目录介绍" class="headerlink" title="linux 常见目录介绍"></a>linux 常见目录介绍</h2><ul><li>/ 根目录</li><li>/root root用户家目录</li><li>/home/username 普通用户的家目录</li><li>/etc 配置文件目录</li><li>/bin 命令目录</li><li>/sbin 管理命令目录</li><li>/usr/bin /usr/sbin 系统预装的其它命令</li></ul><br><br><h2 id="linux-关机-重启-命令"><a href="#linux-关机-重启-命令" class="headerlink" title="linux 关机/重启 命令"></a>linux 关机/重启 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关机</span></span><br><span class="line">init 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延时关机 19:30关机</span></span><br><span class="line">shutdown -h 19:30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延时30分钟关机</span></span><br><span class="line">shutdown -h 30 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止延时关闭</span></span><br><span class="line">shutdown -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><br><br><br><h1 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">man是manual的缩写</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">演示</span></span><br><span class="line">man ls</span><br></pre></td></tr></table></figure><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><ul><li>shell 自带的命令称为内部命令，其它的是外部命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内部命令使用 <span class="built_in">help</span> 帮助</span></span><br><span class="line">help cd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">外部命令使用 <span class="built_in">help</span> 帮助</span></span><br><span class="line">ls --help</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">区分内部、外部命令 演示</span></span><br><span class="line">type cd</span><br></pre></td></tr></table></figure><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><ul><li>info 帮助比 help 更详细，作为 help 的补充</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info ls</span><br></pre></td></tr></table></figure><br><br><h2 id="文件-目录-增删改查"><a href="#文件-目录-增删改查" class="headerlink" title="文件/目录 - 增删改查"></a>文件/目录 - 增删改查</h2><ul><li>linux 操作系统中，一切皆文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建非空目录</span> </span><br><span class="line">mkdir [parameter]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 递归创建目录</span></span><br><span class="line">mkdir -p [parameter]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除非空目录</span></span><br><span class="line">rm [parameter]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归删除目录（包括目录下的所有文件）</span></span><br><span class="line">rm -r [parameter]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不提示，无需确认，递归删除目录</span></span><br><span class="line">rm -rf [parameter]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅仅复制文件</span></span><br><span class="line">cp [] []</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制文件 or 目录</span></span><br><span class="line">cp -r [] []</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主</span></span><br><span class="line">cp -vpa [] []</span><br><span class="line"></span><br><span class="line">cd [parameter]</span><br><span class="line">cd -</span><br><span class="line">cd ~</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动文件</span></span><br><span class="line">mv [参数] [源文件] [目标文件/目录]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名</span></span><br><span class="line">mv [] []</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前目录下的文件</span></span><br><span class="line">ls [选项...]...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-l 长格式显示文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a 显示隐藏文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-r 逆序显示</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t 按照时间顺序显示</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-R 递归显示</span></span><br><span class="line"></span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line">pwd</span><br></pre></td></tr></table></figure><br><br><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ul><li>定义：shell 内建的符号</li><li>用途：操作多个相似（有规律）的文件</li><li>常用通配符<ul><li>* 匹配任意字符串</li><li>? 匹配一个字符串</li><li>[xyz] 匹配xyz任意一个字符</li><li>[a-z] 匹配一个范围</li><li>[!xyz] 或 [^xyz] 不匹配</li></ul></li></ul><br><br><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch [file_name]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文本内容显示到终端</span></span><br><span class="line">cat [text_file_name]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行</span></span><br><span class="line">head -5 []</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新</span></span><br><span class="line">tail -20 -f []</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计文件内容信息</span></span><br><span class="line">wc []</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件行数</span></span><br><span class="line">wc -l []</span><br><span class="line"></span><br><span class="line">more [filename]</span><br><span class="line">less [filename]</span><br></pre></td></tr></table></figure><br><br><h2 id="打包-压缩"><a href="#打包-压缩" class="headerlink" title="打包 / 压缩"></a>打包 / 压缩</h2><ul><li>打包/压缩</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar cf /tmp/etc.tar /etc</span><br><span class="line"></span><br><span class="line">tar czf /tmp/etc.tar.gz /etc</span><br><span class="line">tar cjf /tmp/etc.tar.bz2 /etc</span><br></pre></td></tr></table></figure><ul><li>解包/解压缩</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar xf /tmp/etc.tar -C /bak</span><br><span class="line"></span><br><span class="line">tar zxf /tmp/etc.tar.gz -C /bak</span><br><span class="line">tar jxf /tmp/etc.tar.bz2 -C /bak</span><br></pre></td></tr></table></figure><br><br><h2 id="文本编辑器-vi-vim"><a href="#文本编辑器-vi-vim" class="headerlink" title="文本编辑器/vi/vim"></a>文本编辑器/vi/vim</h2><h3 id="四种模式"><a href="#四种模式" class="headerlink" title="四种模式"></a>四种模式</h3><ul><li>正常模式</li><li>插入模式</li><li>命令模式</li><li>可视模式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入插入模式 i I o O a A</span></span><br><span class="line">i 进入插入模式，光标不移动</span><br><span class="line">I 进入插入模式，光标移动到当前行的首字符</span><br><span class="line">a 进入插入模式，光标移动到下一个字符</span><br><span class="line">A 进入插入模式，光标移动到当前行的末尾</span><br><span class="line">o 进入插入模式，光标移动到当前行的下一行（新建一行）</span><br><span class="line">O 进入插入模式，光标移动到当前行的上一行（新建一行）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入可视 模式 v</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动光标 h j k l</span> </span><br><span class="line"></span><br><span class="line">yy 复制当前行</span><br><span class="line">p 粘贴</span><br><span class="line"></span><br><span class="line">3yy 复制3行</span><br><span class="line"><span class="meta prompt_">y$ </span><span class="language-bash">复制光标位置到当前行文本结尾</span></span><br><span class="line"></span><br><span class="line">dd 剪切当前行</span><br><span class="line"><span class="meta prompt_">d$ </span><span class="language-bash">剪切光标位置到当前行文本结尾</span></span><br><span class="line"></span><br><span class="line">u 撤销</span><br><span class="line">ctrl + r 对撤销的内容重做</span><br><span class="line"></span><br><span class="line">x 单个字符删除</span><br><span class="line">r + [新字符] 替换</span><br><span class="line"></span><br><span class="line">:set nu 显示行号</span><br><span class="line">:set nonu 不显示行号</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置每次打开vim都显示行号</span></span><br><span class="line">vim /etc/vimrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在最后一行添加</span></span><br><span class="line">set nu</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出后便生效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11+shift+g 11+G    光标移动到11行</span><br><span class="line">gg 移动到第一行</span><br><span class="line">G 移动到最后一行</span><br><span class="line"></span><br><span class="line">shift+^ 移动到行首</span><br><span class="line">shift+$ 移动到行尾</span><br><span class="line"></span><br><span class="line">:w 保存</span><br><span class="line">:q 退出</span><br><span class="line">:wq 保存并退出</span><br><span class="line"></span><br><span class="line">:q! 不保存退出</span><br><span class="line"></span><br><span class="line">:! ll /etc/ 临时执行命令</span><br><span class="line"></span><br><span class="line">/x 查找x，按n匹配下一个，shift+n 匹配上一个字符</span><br><span class="line"></span><br><span class="line">:%s/x/X 全局替换查找到的第一个字符 （单次替换）</span><br><span class="line">:s/x/X 光标所在行替换，替换查找到的第一个字符 （单次替换）</span><br><span class="line"></span><br><span class="line">:%s/x/X/g 全局替换查找到的所有字符 </span><br><span class="line">:s/x/X/g 光标所在行替换，替换查找到的当前行的所有字符 </span><br><span class="line"></span><br><span class="line">:3,5s/x/X/g 第三行到第五行之间替换</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">v 字符可视化</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">V 行可视</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ctrl+v 块可视</span></span><br></pre></td></tr></table></figure><br><br><h2 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会创建同名的用户组</span></span><br><span class="line">useradd [user_name]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不加 -r 会保留用户的家目录，加 -r 会在删除用户的同时删除其家目录</span></span><br><span class="line">userdel -r [user_name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改用户属性</span></span><br><span class="line">usermod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改用户家目录</span></span><br><span class="line">usermod -d /wilson wilson</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改用户组</span></span><br><span class="line">usermod -g group1 wilson</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改用户属性（生命周期，密码修改周期等）</span></span><br><span class="line">chage</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户信息会被记录到 /etc/passwd 文件中 /etc/shadow 这个是密码相关的文件</span></span><br><span class="line"></span><br><span class="line">groupadd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建用户并直接指定组</span></span><br><span class="line">useradd -g group1 lily</span><br><span class="line"></span><br><span class="line">groupdel</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换用户并切换home目录</span></span><br><span class="line">su - wilson</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以其它用户身份执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">visudo 设置需要使用sudo的用户组</span></span><br><span class="line">sudo </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">visudo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予Wilson 执行如下命令的权限</span></span><br><span class="line">wilson ALL=/sbin/shutdown -c</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><br><h2 id="文件与目录权限"><a href="#文件与目录权限" class="headerlink" title="文件与目录权限"></a>文件与目录权限</h2><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3v78rhmj4va0.webp"                      width="65%"                ><br><ul><li>权限的前三个字符，表示所属用户对该文件的权限</li><li>中间三个字符，表示所属用户组对该文件的权限</li><li>最后三个字符表示其他人对该文件有什么权限</li></ul><br><br><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>• - 普通⽂文件<br>• d ⽬目录⽂文件<br>• b 块特殊⽂文件<br>• c 字符特殊⽂文件<br>• l 符号链接<br>• f 命名管道<br>• s 套接字⽂文件</p><br><br><br><h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><ul><li>linux下的打包 压缩还需深入理解 和操作</li><li>vim</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux-基础介绍&quot;&gt;&lt;a href=&quot;#linux-基础介绍&quot; class=&quot;headerlink&quot; title=&quot;linux 基础介绍&quot;&gt;&lt;/a&gt;linux 基础介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;linux有两种含义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种是li</summary>
      
    
    
    
    <category term="linux" scheme="https://ratears.gitee.io/dev.ratears.life/categories/linux/"/>
    
    
    <category term="linux" scheme="https://ratears.gitee.io/dev.ratears.life/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>《玩转Java并发工具，精通JUC》 study notes</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8A%E7%8E%A9%E8%BD%ACJava%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%B2%BE%E9%80%9AJUC%E3%80%8B-study-notes/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/%E3%80%8A%E7%8E%A9%E8%BD%ACJava%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%B2%BE%E9%80%9AJUC%E3%80%8B-study-notes/</id>
    <published>2022-08-14T12:37:26.000Z</published>
    <updated>2022-08-14T12:37:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>线程池的重要性：</li></ul><blockquote><ol><li><p>很多问题是没有用好线程池导致的</p></li><li><p>线程池是面试中的高频考点，问题层层递进</p></li></ol></blockquote><ul><li>为什么要使用线程池</li></ul><blockquote><ol><li>反复创建线程开销大</li><li>过多的线程会占用太多内存</li></ol></blockquote><ul><li>线程池的好处</li></ul><blockquote><ol><li>加快响应速度（不需要反复创建和销毁线程；消除了线程创建带来的延迟，增强用户体验）</li><li>合理利用CPU和内存。控制资源总量（每一个Java程序中的线程，会直接对应到操作系统中的线程）（统筹资源，不至于线程过多，内存溢出，也不至于线程过少，浪费CPU资源。达到平衡——效率最高点）</li><li>复用线程（解决线程反复创建销毁带来的开销问题）</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="java" scheme="https://ratears.gitee.io/dev.ratears.life/categories/java/"/>
    
    <category term="concurrent" scheme="https://ratears.gitee.io/dev.ratears.life/categories/java/concurrent/"/>
    
    
    <category term="concurrent" scheme="https://ratears.gitee.io/dev.ratears.life/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://ratears.gitee.io/dev.ratears.life/2022/Spring/"/>
    <id>https://ratears.gitee.io/dev.ratears.life/2022/Spring/</id>
    <published>2022-07-16T13:42:14.000Z</published>
    <updated>2022-07-24T21:16:02.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-概览"><a href="#Spring-概览" class="headerlink" title="Spring 概览"></a>Spring 概览</h1><ul><li>Spring IoC</li></ul><table><thead><tr><th align="center">内容</th><th align="center">说明</th><th align="center">重要程度</th></tr></thead><tbody><tr><td align="center">Spring 框架介绍</td><td align="center">Spring IoC、DI 和 AOP 等核心概念</td><td align="center">※※※※※</td></tr><tr><td align="center">Spring IoC 容器</td><td align="center">Spring 实例化与管理对象</td><td align="center">※※※※※</td></tr><tr><td align="center">集合对象注入</td><td align="center">注入List、Set、Map集合对象</td><td align="center">※※※※※</td></tr><tr><td align="center">底层原理</td><td align="center">Spring Bean 的生命周期</td><td align="center">※※※※※</td></tr><tr><td align="center">注解与Java Config</td><td align="center">Spring 注解分类和常用注解应用</td><td align="center">※※※※※</td></tr></tbody></table><br/><p>Spring AOP</p><table><thead><tr><th align="center">内容</th><th align="center">说明</th><th align="center">重要程度</th></tr></thead><tbody><tr><td align="center">理解 AOP 及名词</td><td align="center">Spring AOP 开发与配置流程</td><td align="center">※※※※</td></tr><tr><td align="center">五种通知类型</td><td align="center">Spring 五种通知类型与应用场景</td><td align="center">※※※</td></tr><tr><td align="center">切点表达式</td><td align="center">PointCut 切点表达式的语法规则及应用</td><td align="center">※※</td></tr><tr><td align="center">代理模式</td><td align="center">JDK 动态代理和 CGLib代理的执行过程</td><td align="center">※※※※</td></tr></tbody></table><br/><ul><li>Spring JDBC 与声明式事物</li></ul><table><thead><tr><th align="center">内容</th><th align="center">说明</th><th align="center">重要程度</th></tr></thead><tbody><tr><td align="center">Spring JDBC</td><td align="center">Spring JDBC 的环境配置</td><td align="center">※※※※</td></tr><tr><td align="center">RestTemplate</td><td align="center">基于 RestTemplate 实现 SQL 处理</td><td align="center">※※※</td></tr><tr><td align="center">配置声明式事物</td><td align="center">声明式事物的配置过程</td><td align="center">※※※※※</td></tr><tr><td align="center">事物传播行为介绍</td><td align="center">讲解常用事物传播行为的用途</td><td align="center">※※※</td></tr><tr><td align="center">声明式事物注解形式</td><td align="center">基于注解使用声明式事物</td><td align="center">※※※※※</td></tr></tbody></table><br/><h2 id="Spring-的含义"><a href="#Spring-的含义" class="headerlink" title="Spring 的含义"></a>Spring 的含义</h2><ul><li>Spring 可以从狭义与广义两个角度看待</li><li>狭义的 Spring 是指 Spring 框架（Spring Framework）</li><li>广义的 Spring 是指 Spring 生态体系</li></ul><h3 id="狭义的-Spring-框架"><a href="#狭义的-Spring-框架" class="headerlink" title="狭义的 Spring 框架"></a>狭义的 Spring 框架</h3><ul><li>Spring 框架是企业开发复杂性的一站式解决方案</li><li>Spring 框架的核心是 IoC 容器与 AOP 面向切面编程</li><li>Spring IoC 负责创建与管理系统对象，并在此基础上扩展功能</li></ul><h3 id="广义的-Spring-生态体系"><a href="#广义的-Spring-生态体系" class="headerlink" title="广义的 Spring 生态体系"></a>广义的 Spring 生态体系</h3><img                       lazyload                     alt="image"                     data-src="https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.ueqlwks019s.webp?raw=true"                       width="80%"                ><br/><h2 id="IoC-控制反转"><a href="#IoC-控制反转" class="headerlink" title="IoC 控制反转"></a>IoC 控制反转</h2><ul><li>IoC 控制反转，全称 Inverse of Control ，是一种设计理念</li><li>由代理人来创建与管理对象，消费者通过代理人来获取对象</li><li>IoC 的目的是降低对象之间直接耦合，加入 IoC 容器将对象统一管理，让对象关联变为弱耦合</li></ul><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><ul><li>IoC 是设计理念，是现代程序设计遵循的标准，是宏伟目标</li><li>DI （Dependency Injection）是具体技术实现，是微观实现</li><li>DI 在 Java 中利用反射技术实现对象注入（Injection）</li></ul><h2 id="Spring框架组成模块"><a href="#Spring框架组成模块" class="headerlink" title="Spring框架组成模块"></a>Spring框架组成模块</h2><img                       lazyload                     alt="image"                     data-src="https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.55c4tw9371o0.webp?raw=true"                      width="70%"                 ><br/><h1 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h1><h2 id="传统开发方式"><a href="#传统开发方式" class="headerlink" title="传统开发方式"></a>传统开发方式</h2><ul><li>对象直接饮用，导致对象硬性关联，程序难以扩展维护</li></ul><img                       lazyload                     alt="image"                     data-src="https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.58jxehmqgy80.webp?raw=true"                       width="80%"                ><br/><h2 id="Spring-IoC-容器"><a href="#Spring-IoC-容器" class="headerlink" title="Spring IoC 容器"></a>Spring IoC 容器</h2><ul><li>IoC 容器是 Spring 生态的地基，用于统一创建与管理对象依赖</li></ul><img                       lazyload                     alt="image"                     data-src="https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.4lxmp6457ng0.webp?raw=true"                       width="80%"                ><br/><h2 id="Spring-IoC-容器职责"><a href="#Spring-IoC-容器职责" class="headerlink" title="Spring IoC 容器职责"></a>Spring IoC 容器职责</h2><ul><li>对象的控制权交由第三方统一管理（IoC 控制反转）</li><li>利用 Java 反射技术实现运行时对象创建与关联（DI 依赖注入）</li><li>基于配置提高应用程序的可维护性与可扩展性</li></ul><h2 id="配置-bean-的三种方式"><a href="#配置-bean-的三种方式" class="headerlink" title="配置 bean 的三种方式"></a>配置 bean 的三种方式</h2><ul><li>基于XML配置bean</li><li>基于注解配置bean</li><li>基于Java代码配置bean</li></ul><h3 id="XML实例化Bean的配置方式"><a href="#XML实例化Bean的配置方式" class="headerlink" title="XML实例化Bean的配置方式"></a>XML实例化Bean的配置方式</h3><h4 id="（1）基于构造方法实例化对象"><a href="#（1）基于构造方法实例化对象" class="headerlink" title="（1）基于构造方法实例化对象"></a>（1）基于构造方法实例化对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过默认构造方法创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;lily&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.study.spring.entity.Person&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过有参构造方法创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;andy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.study.spring.entity.Person&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 没有constructor-arg 则代表调用默认构造方法实例化        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;nickName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;andy&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过有参构造方法创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;nacos&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.study.spring.entity.Person&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 利用构造方法参数位置实现对象实例化        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nacos&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（2）基于静态工厂实例化对象"><a href="#（2）基于静态工厂实例化对象" class="headerlink" title="（2）基于静态工厂实例化对象"></a>（2）基于静态工厂实例化对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用静态工厂方法创建对象，隐藏创建对象的细节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonStaticFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title function_">createPerson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setAge(<span class="number">19</span>);</span><br><span class="line">        person.setNickName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用静态工厂方法创建对象，隐藏创建对象的细节&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--利用静态工厂实例化对象    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;personStaticFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.study.spring.factory.PersonStaticFactory&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">factory-method</span>=<span class="string">&quot;createPerson&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（3）基于工厂实例方法实例化对象"><a href="#（3）基于工厂实例方法实例化对象" class="headerlink" title="（3）基于工厂实例方法实例化对象"></a>（3）基于工厂实例方法实例化对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂实例方法创建对象是指IoC容器对工厂类进行实例化并调用对应的实例方法创建对象的过程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonFactoryInstance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  Person <span class="title function_">createPerson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setAge(<span class="number">19</span>);</span><br><span class="line">        person.setNickName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用工厂实例方法创建对象，隐藏创建对象的细节&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--利用工厂实例方法实例化bean --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;personFactoryInstance&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.study.spring.factory.PersonFactoryInstance&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;wangwu&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;personFactoryInstance&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createPerson&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="从Spring-IoC-容器获取bean"><a href="#从Spring-IoC-容器获取bean" class="headerlink" title="从Spring IoC 容器获取bean"></a>从Spring IoC 容器获取bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建IoC容器并根据配置文件创建对象（初始化IoC容器并实例化对象）</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;andy&quot;</span>, Person.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> (Person) ac.getBean(<span class="string">&quot;nacos&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="xml-方式中-id-与-name属性相同点"><a href="#xml-方式中-id-与-name属性相同点" class="headerlink" title="xml 方式中 id 与 name属性相同点"></a>xml 方式中 id 与 name属性相同点</h3><ul><li>bean id 与 name 都是设置对象在 ioc 容器中唯一标识</li><li>两者在同一配置文件中都不允许出现重复</li><li>两者允许在多个配置文件中出现重复，新对象 覆盖旧对象</li></ul><h3 id="xml-方式中-id-与-name-属性区别"><a href="#xml-方式中-id-与-name-属性区别" class="headerlink" title="xml 方式中 id 与 name 属性区别"></a>xml 方式中 id 与 name 属性区别</h3><ul><li>id 要求更为严格，一次只能定义一个对象标识（推荐）</li><li>name 更为宽松，一次允许定义多个对象标识</li><li>tips：id 与 name 的命名要求有意义。按驼峰命名书写</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有 id 与 name，默认使用类全名 作为 bean 标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.study.spring.entity.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;nickName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;andy2&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;118&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) ac.getBean(<span class="string">&quot;com.study.spring.entity.Person&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Spring-配置文件，配置路径表达式"><a href="#Spring-配置文件，配置路径表达式" class="headerlink" title="Spring 配置文件，配置路径表达式"></a>Spring 配置文件，配置路径表达式</h3><img                       lazyload                     alt="image"                     data-src="https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1i297kdcvls0.webp?raw=true"                      width="70%"                ><h3 id="加载Spring-的配置文件"><a href="#加载Spring-的配置文件" class="headerlink" title="加载Spring 的配置文件"></a>加载Spring 的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 加载单个配置文件</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载多个配置文件</span></span><br><span class="line">String [] config = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;classpath:applicationContext.xml&quot;</span>,<span class="string">&quot;classpath:applicationContext-2.xml&quot;</span>&#125;;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(config);</span><br></pre></td></tr></table></figure><h2 id="对象依赖注入"><a href="#对象依赖注入" class="headerlink" title="对象依赖注入"></a>对象依赖注入</h2><ul><li>依赖注入是指运行时将容器内对象利用反射赋给其它对象的操作</li></ul><h3 id="基于setter方法注入对象"><a href="#基于setter方法注入对象" class="headerlink" title="基于setter方法注入对象"></a>基于setter方法注入对象</h3><ul><li>利用setter对象实现静态数值注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ioc 容器自动利用反射机制运行时调用 setXXX方法为属性赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;guog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.study.spring.entity.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nickName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;guod&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;55&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>利用setter对象实现对象注入</li></ul><h3 id="基于构造方法注入对象"><a href="#基于构造方法注入对象" class="headerlink" title="基于构造方法注入对象"></a>基于构造方法注入对象</h3><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-概览&quot;&gt;&lt;a href=&quot;#Spring-概览&quot; class=&quot;headerlink&quot; title=&quot;Spring 概览&quot;&gt;&lt;/a&gt;Spring 概览&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Spring IoC&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead</summary>
      
    
    
    
    
    <category term="spring" scheme="https://ratears.gitee.io/dev.ratears.life/tags/spring/"/>
    
  </entry>
  
</feed>

{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/code-block.js","path":"js/code-block.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/post-helper.js","path":"js/post-helper.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/bg.jpg","path":"images/bg.jpg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/upyun.png","path":"images/upyun.png","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/css/brands.min.css","path":"fontawesome/css/brands.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/css/regular.min.css","path":"fontawesome/css/regular.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/css/solid.min.css","path":"fontawesome/css/solid.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/css/fontawesome.min.css","path":"fontawesome/css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/webfonts/fa-brands-400.ttf","path":"fontawesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/webfonts/fa-brands-400.woff2","path":"fontawesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/webfonts/fa-regular-400.ttf","path":"fontawesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/webfonts/fa-regular-400.woff2","path":"fontawesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/webfonts/fa-solid-900.ttf","path":"fontawesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/webfonts/fa-solid-900.woff2","path":"fontawesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/webfonts/fa-v4compatibility.ttf","path":"fontawesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/fontawesome/webfonts/fa-v4compatibility.woff2","path":"fontawesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/code-block/code-block.styl","path":"css/common/code-block/code-block.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/code-block/code-theme.styl","path":"css/common/code-block/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/code-block/highlight.styl","path":"css/common/code-block/highlight.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"92b03e7737fc334e53c64a85a40696f111cfe634","modified":1669554123449},{"_id":"source/_drafts/《Java-并发编程实战》study-notes.md","hash":"c7500d397de7704f5fa2fc7a51e089bc92960458","modified":1669495898450},{"_id":"source/_drafts/《Nginx入门到实践－Nginx中间件》study-notes.md","hash":"c0cb7ab3ff8f4188eadba0bd730bc50893f417c1","modified":1655087056698},{"_id":"source/_drafts/姜承尧-MySQL-DBA实战-study-notes.md","hash":"9584bb444dba588c14099bcde9b8ec5ec3e5597b","modified":1668547830789},{"_id":"source/_drafts/《heima-Mysql高级（4天）》study-notes.md","hash":"69ff002a9d987d30c8cf0c6d96d2021dd7d3500f","modified":1666653947037},{"_id":"source/about/index.md","hash":"36e9b0a3244f2e0b04c5f96ae3b9d85064fefc71","modified":1669826681195},{"_id":"source/categories/index.md","hash":"0f010b716c10373c127ab485993d408209ae9530","modified":1669827668374},{"_id":"source/tags/index.md","hash":"f6649a677fea724d6df93a1ffc3ddf7ea1317400","modified":1669827568017},{"_id":"source/links/index.md","hash":"6678115ff33cfe3d636fa03baab1f49736242db5","modified":1669827352046},{"_id":"source/_posts/2022/Git.md","hash":"965fa60afaaef3c7c5262ff8b310be6f2f1bc797","modified":1657757078503},{"_id":"source/_posts/2022/Gradle.md","hash":"7adff1bc23bf547b003aa31f83de7f86c0160e91","modified":1662413091125},{"_id":"source/_posts/2022/Java-I-O-系统.md","hash":"822322a9a7a25c48cbe77e801e5c753496e989e3","modified":1663527990665},{"_id":"source/_posts/2022/KingbaseES-KCA-study-notes.md","hash":"23cf731209cd570c8ac5aabbefcf4044a578a8fe","modified":1664255501535},{"_id":"source/_posts/2022/Java-Collection-Framework.md","hash":"ba23d4fe9dc0d69e4f3980f938dd91e6124cbf5a","modified":1660129547827},{"_id":"source/_posts/2022/Maven核心知识梳理.md","hash":"50b24d7c0e05e042c0ad751eebd4d916bb1ca13e","modified":1663485017549},{"_id":"source/_posts/2022/MyBatis.md","hash":"c59c51fc609bc1d32d3b53c6fa3886e86ae319d6","modified":1661746152383},{"_id":"source/_posts/2022/Nexus搭建Maven私服.md","hash":"9b47a947facfe04d221868840d4a341aaff83a6d","modified":1664430298478},{"_id":"source/_posts/2022/kingbase.md","hash":"c5bdc258f213a3cfa20027d203e94b6bd2ff0653","modified":1662225474800},{"_id":"source/_posts/2022/Spring.md","hash":"5001aa6f1e624030d11e828d00954de5fc390084","modified":1658697362276},{"_id":"source/_posts/2022/Redis-hm.md","hash":"506f7f79f7408add2996275d355772d1c3d1a14b","modified":1658857007747},{"_id":"source/_posts/2022/linux实战技能.md","hash":"0902d2f958675f74151635854243e696f1ef2b4a","modified":1654049808399},{"_id":"source/_posts/2022/《Java-并发编程实战》study-notes.md","hash":"c7500d397de7704f5fa2fc7a51e089bc92960458","modified":1669519066889},{"_id":"source/_posts/2022/《Kafka-核心技术与实战》study-notes.md","hash":"954a2ec3450780601dfaa327e5807b8415286d3c","modified":1669718023580},{"_id":"source/_posts/2022/《Kafka多维度系统精讲，从入门到熟练掌握》study-notes.md","hash":"85ba7420ae78f7050dfb5701cb1ce25f5b61c8f8","modified":1669731069151},{"_id":"source/_posts/2022/《Linux-实战技能-100-讲》study-notes.md","hash":"417835491d99ad9e5daca0cfec33f8b5107c893a","modified":1665954782185},{"_id":"source/_posts/2022/《MySQL-8-0详解与实战》study-notes.md","hash":"984723c4924e25d15f79ee4f7002a02f97289a34","modified":1668033128391},{"_id":"source/_posts/2022/《MySQL-必知必会》study-notes.md","hash":"e4f10d3f9be82d27a6fe409502ad8f7ddeeb1809","modified":1666230969144},{"_id":"source/_posts/2022/《Nginx-核心知识-150-讲》study-notes.md","hash":"3dac18e3f1eec68153aefcbac5de0edc6620a8e5","modified":1665318492884},{"_id":"source/_posts/2022/《Spring-Data-JPA-原理与实战》study-notes.md","hash":"f69cbe0ba6f298e55fd11e5d013990cfa3e9a3fb","modified":1662410872227},{"_id":"source/_posts/2022/《Nginx体系化深度精讲》study-notes.md","hash":"f6bdabf293fbe4ed29945ba9efea08f5dc8e4bdf","modified":1667725217650},{"_id":"source/_posts/2022/《Web-协议详解与抓包实战》study-notes.md","hash":"c1443b946c3bc36029838664b97986c9cf0d9187","modified":1665318498637},{"_id":"source/_posts/2022/《一站式学习Redis-从入门到高可用分布式实践》study-notes.md","hash":"77d1afe1909ae30d826fe6c7178815083ab3198a","modified":1664305521497},{"_id":"source/_posts/2022/《扛得住的MySQL数据库架构》study-notes.md","hash":"d0c7752e4e278fad372b99889a69202fcb5e633f","modified":1666063106189},{"_id":"source/_posts/2022/《快速上手Linux-玩转典型应用》study-notes.md","hash":"9fd5f6386eea455cb585430c29d58b6a7768f897","modified":1657462994802},{"_id":"source/_posts/2022/《深入拆解-Java-虚拟机》study-notes.md","hash":"1b49e3d90dbeddb9f458d15aeca3ede2cf4fde70","modified":1669817007598},{"_id":"source/_posts/2022/《玩转Java并发工具，精通JUC》-study-notes.md","hash":"84292c2abc89afa595695f2df6a10f06425e419e","modified":1660482833134},{"_id":"source/_posts/2022/《理论-实战-构建完整JVM知识体系》study-notes.md","hash":"16dc2b4fe7835762f5fb481195f5d5156870df40","modified":1657136109725},{"_id":"source/_posts/2022/《透视-HTTP-协议》study-notes.md","hash":"dfba82af53a31318b82d483c9d77acbb98a1e746","modified":1655078688547},{"_id":"source/_posts/2022/浅析-I-O（1）——-操作系统内存简介.md","hash":"1a003869acfabf45cf34f4f16cfc6d54d12118ad","modified":1663597045612},{"_id":"source/_posts/2022/字符集和字符编码（Charset-Encoding）.md","hash":"9cd410e516de62305b3d081438887cb27de0cb1c","modified":1662831345093},{"_id":"source/_posts/2022/浅析-I-O（3）——-I-O模型.md","hash":"c754892e44c784c0b80334c00cb7d186fcd550b1","modified":1663612148394},{"_id":"source/_posts/2022/浅析-I-O（2）——-I-O分类.md","hash":"f1e24ad9ae03b701962ecd2ca337b0290222cf69","modified":1663597241119},{"_id":"source/_posts/2022/浅析-——-同步异步-阻塞非阻塞.md","hash":"9df6ee2c994dbc506b2aa7f91617fcbf3bdaad96","modified":1663596981421},{"_id":"themes/keep/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1669531462978},{"_id":"themes/keep/.gitignore","hash":"c4cd17a16e43203c7ae1ad41079a671e98ea52d5","modified":1669531462979},{"_id":"themes/keep/.npmignore","hash":"8f07e69cb919faaa11933b2663407ed68c87a06c","modified":1669531462979},{"_id":"themes/keep/.prettierrc","hash":"459178a4dff70a0885b6f5a49eb6a6265eea3083","modified":1669531462980},{"_id":"themes/keep/.stylelintrc.js","hash":"63ce9d43e8675a8cb771332c81c89ba7a60b5516","modified":1669531462980},{"_id":"themes/keep/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1669531462980},{"_id":"themes/keep/package.json","hash":"01fcf666bbf68b4e756929aea87594cefde6a652","modified":1669531462993},{"_id":"themes/keep/docs/README_zh-TW.md","hash":"1421f2df70409360e940dc97e45e434ab1ecf794","modified":1669531462982},{"_id":"themes/keep/README.md","hash":"cbd2b70b7d09144bf687cb6e4440399835f1c488","modified":1669531462981},{"_id":"themes/keep/docs/README_zh-CN.md","hash":"97c61781dd5964c9d76253475efefd948a818a36","modified":1669531462981},{"_id":"themes/keep/_config.yml","hash":"7e18199c98d532a07cc0e6bff5752d2409b93e67","modified":1669832598932},{"_id":"themes/keep/languages/en.yml","hash":"e525d9ac5cdea9ea9d597a423d8963572e10099a","modified":1669531462982},{"_id":"themes/keep/languages/zh-TW.yml","hash":"5b713d02be9357b5b88674de8f26f88409d2e2fb","modified":1669531462983},{"_id":"themes/keep/layout/archive-content.ejs","hash":"cfa8f29b8863534f407136ea3deb18a4b2ff722c","modified":1669531462990},{"_id":"themes/keep/languages/zh-CN.yml","hash":"e881c312d8e42d0b0230ddefcf33b49958a2eb93","modified":1669531462982},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1669531462990},{"_id":"themes/keep/layout/article-content.ejs","hash":"2686beb461eebd59fa20f3d4a6cbe4467787a687","modified":1669531462990},{"_id":"themes/keep/layout/category-list.ejs","hash":"a9390b25238332417fd554d32563a4d9999db90f","modified":1669531462991},{"_id":"themes/keep/layout/category-content.ejs","hash":"aef0c90a395f909be7d2c358eb41d5558a10406f","modified":1669531462991},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1669531462991},{"_id":"themes/keep/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1669531462991},{"_id":"themes/keep/layout/home-content.ejs","hash":"a93a12e6e1ef5dea5040ad9e6d4a5ff54ce59d34","modified":1669531462991},{"_id":"themes/keep/layout/layout.ejs","hash":"da9dbeba541ad19fed35c41fe187f4016e41f0db","modified":1669531462992},{"_id":"themes/keep/layout/page.ejs","hash":"12e4a259b150550df0b5d755445eb66279fd070b","modified":1669531462992},{"_id":"themes/keep/layout/tag-content.ejs","hash":"ce4c8192a4ccd6a626af412a7ba258d1edbc0b95","modified":1669531462992},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1669531462992},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1669531462992},{"_id":"themes/keep/scripts/use-source-data.js","hash":"b29e05a8a9ba823cce7c6f6d8b1482aad5ff0d78","modified":1669531462996},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"7c33e49286d54824cd8f3483e30de5579951edc6","modified":1669531462983},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"bf5e4bf03d6f6d9005b5df40ed32d4da55731d0a","modified":1669531462984},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"02517e621cfca341e4302515254b9b093e59096d","modified":1669531462984},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"02b8c87fd2efb2c7f119c5d39df8ca2ece8090e2","modified":1669531462986},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"70d1460da87c19ecca2bde7522cd648a45d525fe","modified":1669531462986},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"fe35aa6dabeb31bc677270062eed569f37472c2c","modified":1669531462986},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"d7e7c69f35803eda54d382c9d6dd18e07fe59151","modified":1669531462987},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"a80101a0bc1e9d169eb6635cd4e25fc70a9d6ed8","modified":1669531462986},{"_id":"themes/keep/layout/_partial/home-article-meta-info.ejs","hash":"a931a16b593c7e7c3e1529c3d8492f170e18ee36","modified":1669531462987},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"18207b298e413fc6b89efc07aa63e8c95a06e56c","modified":1669531462987},{"_id":"themes/keep/layout/_partial/image-viewer.ejs","hash":"e785b4ca258ce378354216038ef544ca6ef4af51","modified":1669531462987},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"cfd4d9a30bd20ee0750b79226cb94562439013bf","modified":1669531462988},{"_id":"themes/keep/layout/_partial/page-template.ejs","hash":"867ad77ad0316b16368ad9ed15216278b6787142","modified":1669531462988},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"ed9cc028221623ee70ec036be7a339e535a96282","modified":1669531462989},{"_id":"themes/keep/layout/_partial/post-tools.ejs","hash":"b694e79dafb0353c52d95ceb6d6d3125bdff2bbb","modified":1669531462988},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"c02154a6ff23ed86029a97d87ee9e32f138f86e9","modified":1669531462989},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"4f8d78d8f2fb77b1a8362f5b4b8cb332bc44e0e3","modified":1669531462989},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"5968618b53a029922f2255b0c76bf8a9f11712ff","modified":1669531462989},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"a4677037bb85ecf001d75f89c24d56012d5ed713","modified":1669531462990},{"_id":"themes/keep/scripts/filters/lazyload-handle.js","hash":"d2bad37e2d3fa4eb68b84b27c6b1469b283958bb","modified":1669531462993},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"3922499210660e0288a6609bd9a1e615f8bb456f","modified":1669531462995},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"37a157254ba77fc365c8d9a365cd794cede49394","modified":1669531462993},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"b26b7ef5533f0b821e8b67c7f19736b94f47b8d0","modified":1669532547602},{"_id":"themes/keep/source/css/style.styl","hash":"835ad066434da1b4aa01b3ed85d297fad8bb335c","modified":1669531463011},{"_id":"themes/keep/source/js/back2top.js","hash":"29844919b56731cb8e5f004dd0bbf60d7f35ffa2","modified":1669531463021},{"_id":"themes/keep/source/js/code-block.js","hash":"2a8ec5a390a22b241d0530f1bc2b31099e2c8b98","modified":1669531463022},{"_id":"themes/keep/source/js/header-shrink.js","hash":"eee93fda3976ed7b9bebfe2f22b13d0cd085d1b1","modified":1669531463022},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"8917d0a55490f38ddeb22ddcd2bb299e1efc0a03","modified":1669531463022},{"_id":"themes/keep/source/js/lazyload.js","hash":"d0e0878947b429ba59b0f952a498a05d6d77d0fa","modified":1669531463023},{"_id":"themes/keep/source/js/local-search.js","hash":"752f9a59729f14d10a57df1694edca12db312565","modified":1669531463024},{"_id":"themes/keep/source/js/main.js","hash":"444d930270ca4dcac83db08b6e9ec88972d5a7ce","modified":1669531463024},{"_id":"themes/keep/source/js/toc.js","hash":"4ecdb3a10ffb72d47166ae05afca1dca7921ea18","modified":1669531463025},{"_id":"themes/keep/source/js/post-helper.js","hash":"ee358e1bb4c5dea490c90a8db7fab5c09baa2453","modified":1669531463024},{"_id":"themes/keep/source/js/utils.js","hash":"da4ae091ddf412d7e6afe9897102affdc6bff166","modified":1669531463025},{"_id":"themes/keep/source/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1669531463020},{"_id":"themes/keep/source/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1669531463020},{"_id":"themes/keep/source/images/upyun.png","hash":"adc49ed7419d2da34294519e62812b8fd93615ee","modified":1669531463021},{"_id":"themes/keep/source/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1669531463021},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"5cb7b276a1690942d89abdbe96256a7d56997cee","modified":1669531462984},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"3a313914e3798ee41b21c8a1a27cf954e5f9cf35","modified":1669531462985},{"_id":"themes/keep/layout/_partial/comment/twikoo.ejs","hash":"ade54480d4a6b5b29ff4d49c96b5c10f77bd8e13","modified":1669531462985},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"2296d6c2d4c0c89e0ed2f9653d8ad6b47888c648","modified":1669531462985},{"_id":"themes/keep/layout/_partial/comment/waline.ejs","hash":"ccc31caba2b087dd4b60ae19ce38219ac2d3b815","modified":1669531462985},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"949d3fdd4bd215cd7d0c95152c4be630ce227e16","modified":1669531462988},{"_id":"themes/keep/source/css/common/animated.styl","hash":"1b1cbce1030843b0d8db76ca54a16570939c3518","modified":1669531462997},{"_id":"themes/keep/source/css/common/basic.styl","hash":"22def69b5d034d63f66f3dd4b77f4f69f280957a","modified":1669531462998},{"_id":"themes/keep/source/css/common/keep-theme.styl","hash":"63c4d5d18d0e7ea31fb31cfeff5dffd700990c1b","modified":1669531463001},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"a376fa3f9bb12031ecca449ad3899497dfa22723","modified":1669531463001},{"_id":"themes/keep/source/css/common/variables.styl","hash":"ae72511c8e24176c34d428c5c6c78f2ed980c30c","modified":1669531463002},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"f9e5b3f42edf8acee239b0e2852d2fa46e9027fd","modified":1669531463009},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"b032dae85f0049baa3d7a2b3e8b9aa7f0e35440f","modified":1669531463009},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"220d03f95fdc742ca02006f6d73c477d2472913e","modified":1669531463010},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"175732fde377c35deab38baea5f2b84630404075","modified":1669531463010},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"4646c2409eab7a62b66116d776485fd270f1da11","modified":1669531463010},{"_id":"themes/keep/source/css/layout/page.styl","hash":"102e3659e58e5c7a4e9559b4600d23fac7d1b9f2","modified":1669531463011},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"bcbf91ada5ba27a1a3465c7f2b0dd11fffe27b81","modified":1669531463011},{"_id":"themes/keep/source/fontawesome/css/brands.min.css","hash":"bb325aa1de092336cbce1281b36663b7fa198023","modified":1669531463012},{"_id":"themes/keep/source/fontawesome/css/regular.min.css","hash":"58d2ff307db72217d6628940a3c07f9e982a3eea","modified":1669531463013},{"_id":"themes/keep/source/fontawesome/css/solid.min.css","hash":"f588237d4d8957093e2837c965ac78d059230f78","modified":1669531463013},{"_id":"themes/keep/source/fontawesome/webfonts/fa-regular-400.ttf","hash":"9262ea1d0711b658bb75d5cbe9345e080c7dea90","modified":1669531463016},{"_id":"themes/keep/source/fontawesome/webfonts/fa-regular-400.woff2","hash":"56be4c28de7c67747b0fe3dd606be8b319f6d4f4","modified":1669531463016},{"_id":"themes/keep/source/fontawesome/webfonts/fa-v4compatibility.ttf","hash":"b12c2b515fb62c370de1af4ca99635b00aabfe58","modified":1669531463019},{"_id":"themes/keep/source/fontawesome/webfonts/fa-v4compatibility.woff2","hash":"9e1f957bf329bd280aba89e578420301b312403d","modified":1669531463020},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1669531463023},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1669531463023},{"_id":"themes/keep/source/css/common/code-block/code-block.styl","hash":"56d3453a414a10a93a72e7b252f26d5089f7becb","modified":1669531462998},{"_id":"themes/keep/source/css/common/code-block/code-theme.styl","hash":"abbe5cd155deeda2cb60a46f55ba484ff62d5f04","modified":1669531462998},{"_id":"themes/keep/source/css/common/code-block/highlight.styl","hash":"c28de7e1471b5f00950e94114539038b2e7c0822","modified":1669531463001},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"4b2f8f1e2c800f0466c5cb3750f59db4bc8b8d7a","modified":1669531463002},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"13d41aa4d13cf03e940c4f5c12cc3f70e0ecb350","modified":1669531463002},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"f0633d845a41311f3cee8e65d6f1051820558534","modified":1669531463003},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"229ad3cb2d90b8649fbc2ae5e70be226efc2051a","modified":1669531463006},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"f1c2cbd7ffbc5ea0a029ecf6b890112d16ec135a","modified":1669531463006},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"2f74bb36adefa08b816d86c64d880a460bab0795","modified":1669531463006},{"_id":"themes/keep/source/css/layout/_partial/image-viewer.styl","hash":"d3fb3d4beb0e8f3558d3010b7d28298600c2ae8f","modified":1669531463007},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"ba965eb5230054feab9aad37c7668daf10281e3f","modified":1669531463007},{"_id":"themes/keep/source/css/layout/_partial/page-template.styl","hash":"cd41dcf44aa780e649379d6315c60472c36583cb","modified":1669531463007},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"da05f5e854e87d5f6b9a32c25ba8fce6198d7896","modified":1669531463007},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"004f03e06116caedbb8726ddf62d1508df0fe279","modified":1669531463008},{"_id":"themes/keep/source/css/layout/_partial/post-tools.styl","hash":"919dda64b34d03db6f18568f784e93d86d75c84e","modified":1669531463008},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"d44fd728256fa9156bf3e915c930b9aa12ccf716","modified":1669531463009},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"0bc1cd82840a1d99effc764781f3c79767e15fd1","modified":1669531463008},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"e1be679e4d097e711177c34136d23be53761d3a6","modified":1669531463009},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"6344eabedc352463b3ae25e2ee28024c70bd31a2","modified":1669531463003},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"df0b0cf4a778d1e1fbcade3d226ced1a74fdb38f","modified":1669531463004},{"_id":"themes/keep/source/css/layout/_partial/comment/waline.styl","hash":"c125cadea4680ec3f08aa32ddabe3b2fed935dbe","modified":1669531463005},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"71ef4b5b22a63d567e48f76ccfaacc79ee40e7bc","modified":1669531463005},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"46e9995d972e1a7813ea42b01c86b5136bc9885a","modified":1669531463003},{"_id":"themes/keep/source/fontawesome/css/fontawesome.min.css","hash":"f2c5219fb9f58c2baee6dbd965741975cbc8ae71","modified":1669531463012},{"_id":"themes/keep/source/fontawesome/webfonts/fa-brands-400.woff2","hash":"380bea4e9eb484d835d89cc608f2af7c3179e8a4","modified":1669531463015},{"_id":"themes/keep/source/fontawesome/webfonts/fa-brands-400.ttf","hash":"42350ed503d66ae23a9c68d38966f25bc3007319","modified":1669531463015},{"_id":"themes/keep/source/fontawesome/webfonts/fa-solid-900.woff2","hash":"a7fca574d24e9ffa5ee0e0589ffe17277ae4ec27","modified":1669531463019},{"_id":"themes/keep/source/images/bg.jpg","hash":"1b3c9746242aeefb272af47e03d083849cc77aee","modified":1662565700567},{"_id":"themes/keep/source/fontawesome/webfonts/fa-solid-900.ttf","hash":"d2caaf5ce75d0da13ace325e24f7aa7079ef1891","modified":1669531463019},{"_id":"public/atom.xml","hash":"7010dd2e341fe33ae72cad103dbc090c7e06c48e","modified":1669832973308},{"_id":"public/search.json","hash":"1f2905ec549599d696a80cf770a035cb1619f742","modified":1669832973308},{"_id":"public/links/index.html","hash":"06808a836217361c207952ba19ab1249fe53dabf","modified":1669832973308},{"_id":"public/tags/index.html","hash":"75de5c63d4314e5bea06fa5dcecd7817c37112a0","modified":1669832973308},{"_id":"public/categories/java/index.html","hash":"447f1db608ee230e33cabc86f4f80f85bdc42df9","modified":1669832973308},{"_id":"public/categories/git/index.html","hash":"e821c0bc89f2f5d0b26857a301d05f4a047159ab","modified":1669832973308},{"_id":"public/categories/gradle/index.html","hash":"8ed83533fadc9375afdb0d30385868bd560d5f7e","modified":1669832973308},{"_id":"public/categories/java/concurrent/index.html","hash":"beb198f8a58afd0ab045377f6989f67b371afb3f","modified":1669832973308},{"_id":"public/categories/java/collection/index.html","hash":"16fbc5ffd88359f5d4df572d9a8ace71f6985b86","modified":1669832973308},{"_id":"public/categories/maven/index.html","hash":"1a19a8a7b816fb9dd0ef56524f43088afd3f10fe","modified":1669832973308},{"_id":"public/categories/mybatis/index.html","hash":"a17d5ae1e12b11dcc1b1999ec4f4936f11bd1c8b","modified":1669832973308},{"_id":"public/categories/database/MySQL/index.html","hash":"aacb3dd879077d96edb8941f418af866ee94962b","modified":1669832973308},{"_id":"public/categories/Maven/index.html","hash":"d3897619fe0627c4a014c3cc830164b3b223193b","modified":1669832973308},{"_id":"public/categories/MQ/index.html","hash":"99520089ea46542a88dcb92854b78ab6e37af8c6","modified":1669832973308},{"_id":"public/categories/database/kingbase/index.html","hash":"47bedd46f6e15add965632dfa2d9989151b7c337","modified":1669832973308},{"_id":"public/categories/linux/index.html","hash":"8019a1d67ee84b446d3727678b8e2be1a6317d6d","modified":1669832973308},{"_id":"public/categories/Nginx/index.html","hash":"7cf337be4999ceeb267ec4998a02d7592fd3f40b","modified":1669832973308},{"_id":"public/categories/spring/index.html","hash":"7d8e4622dfe6ffdb8e1c47e82259e1f4f0581f44","modified":1669832973308},{"_id":"public/categories/network/index.html","hash":"8872b57ca0718e2774f4644c5ff4ac265cd97968","modified":1669832973308},{"_id":"public/categories/Java/index.html","hash":"28dac36df6b579a6d6bcedeb6928051d8b068d2e","modified":1669832973308},{"_id":"public/categories/java/jvm/index.html","hash":"e1c8016db3ee527cbbb35a6319342a50e977db09","modified":1669832973308},{"_id":"public/categories/Maven/Nexus/index.html","hash":"0c90e7714c56ef733f81fbac26052b09dddd1808","modified":1669832973308},{"_id":"public/categories/Operating-Systems/index.html","hash":"f30042158478a328e1eea63d2a4aeac622516cc8","modified":1669832973308},{"_id":"public/categories/MQ/Kafka/index.html","hash":"dd41fb7aa336cb888822b4aa16d3b4b08876819d","modified":1669832973308},{"_id":"public/categories/computer/index.html","hash":"940542303fb8d411fe707a99136d8657f6d2be8f","modified":1669832973308},{"_id":"public/categories/spring/jpa/index.html","hash":"33340862a594f0ec15d72cd5be4803b7aeebd156","modified":1669832973308},{"_id":"public/categories/Java/jvm/index.html","hash":"6113893499f68262c5cf59efdcbf0ee628aceeb0","modified":1669832973308},{"_id":"public/categories/network/http/index.html","hash":"169732f49707e66fdcea92e881ee088a06bacd0c","modified":1669832973308},{"_id":"public/categories/computer/character-encoding/index.html","hash":"4a4ce7f1cedb951f740c6415b40381c91b4fa87d","modified":1669832973308},{"_id":"public/categories/Operating-Systems/I-O/index.html","hash":"2b7b910b40ce624ca80faa12cb70b642c5a5b1e9","modified":1669832973308},{"_id":"public/categories/nginx/index.html","hash":"0cff509333f83a13f0344c006378a88ece3138f7","modified":1669832973308},{"_id":"public/categories/database/mysql/index.html","hash":"ed6ab204830a6a6763dd233d956c87184cf1f101","modified":1669832973308},{"_id":"public/categories/database/redis/index.html","hash":"3f9521d660612a92422eb3e686db773ee4d2d5ff","modified":1669832973308},{"_id":"public/categories/nosql/index.html","hash":"3e16a18a6a1b3ebccd5e7aea43c037d366de0cbc","modified":1669832973308},{"_id":"public/categories/nosql/redis/index.html","hash":"285ef9c9e343c5e6b5e31efad723caa75c39b5de","modified":1669832973308},{"_id":"public/tags/concurrent/index.html","hash":"6ef2be0956415b52f356f28a9e608d734aab8152","modified":1669832973308},{"_id":"public/tags/java/index.html","hash":"ffe08b26ff00d71965b4502d1abad660a67dc709","modified":1669832973308},{"_id":"public/categories/index.html","hash":"a717688121a52fa1b7ae493190fcb46ba5433510","modified":1669832973308},{"_id":"public/about/index.html","hash":"296d4716d70baa8f8efdac439efd694296907c19","modified":1669832973308},{"_id":"public/《深入拆解-Java-虚拟机》study-notes/index.html","hash":"0f7918711462c1ac08e193abeaf7f01b70de787a","modified":1669832973308},{"_id":"public/《Kafka多维度系统精讲，从入门到熟练掌握》study-notes/index.html","hash":"15529829b454b5be6ce7dd5e471bff0ef0728efb","modified":1669832973308},{"_id":"public/《Kafka-核心技术与实战》study-notes/index.html","hash":"e086cc278437adcceb6ac9d9a404bfd72fe0d5e8","modified":1669832973308},{"_id":"public/《heima-Mysql高级（4天）》study-notes/index.html","hash":"5e900e08025ca29e739e7e7b6fc448d06ed1f846","modified":1669832973308},{"_id":"public/《MySQL-8-0详解与实战》study-notes/index.html","hash":"dee13c65d66951564a8c216cd99df68886a8ecdb","modified":1669832973308},{"_id":"public/《扛得住的MySQL数据库架构》study-notes/index.html","hash":"f97cdd170da4845c236f6c49338aca538d72a42f","modified":1669832973308},{"_id":"public/《Nginx-核心知识-150-讲》study-notes/index.html","hash":"f7f4c99d42c3dc52b6318f85031158f5399aed25","modified":1669832973308},{"_id":"public/Nexus搭建Maven私服/index.html","hash":"b193e2362380c9d60baf1233eebf75d375eba6e9","modified":1669832973308},{"_id":"public/浅析-——-同步异步-阻塞非阻塞/index.html","hash":"84400d0c3b62d38db7ef17607e260f574f2af5b7","modified":1669832973308},{"_id":"public/浅析-I-O（3）——-I-O模型/index.html","hash":"0cf507712196d9b9cce8ba1aa57c9cfe5cbbbedb","modified":1669832973308},{"_id":"public/浅析-I-O（2）——-I-O分类/index.html","hash":"cf4888a2c7ea4fdc927c07933efebbd1a87add4e","modified":1669832973308},{"_id":"public/浅析-I-O（1）——-操作系统内存简介/index.html","hash":"7b73d446e9e4a07f9143f850880af9f29565b8a1","modified":1669832973308},{"_id":"public/Maven核心知识梳理/index.html","hash":"27852507939e814285c91d37ca4070218e74839a","modified":1669832973308},{"_id":"public/字符集和字符编码（Charset-Encoding）/index.html","hash":"78c45d7269510cbac5735c50d0b6744060f93aa6","modified":1669832973308},{"_id":"public/Java-I-O-系统/index.html","hash":"509fb54b65df15e339211c61d93544974667d297","modified":1669832973308},{"_id":"public/Gradle/index.html","hash":"a97dc8870283afcdfe1656ad6cbbb2aac69a6018","modified":1669832973308},{"_id":"public/《Spring-Data-JPA-原理与实战》study-notes/index.html","hash":"63609e1d881509cf30050411b91a17ff7e3df536","modified":1669832973308},{"_id":"public/KingbaseES-KCA-study-notes/index.html","hash":"51ff7f75c7de75c727faf226e5afb720874d8b48","modified":1669832973308},{"_id":"public/《一站式学习Redis-从入门到高可用分布式实践》study-notes/index.html","hash":"60a9630955eb34eb180cf53cd56e8267d2426190","modified":1669832973308},{"_id":"public/MyBatis/index.html","hash":"4250389af1600a396a38e692cd6e1100b3672120","modified":1669832973308},{"_id":"public/《Linux-实战技能-100-讲》study-notes/index.html","hash":"a7a9e94ce067b17982a623e3d9433eb6b8d5b0b1","modified":1669832973308},{"_id":"public/Spring/index.html","hash":"ba82c0deceaecf26e47b72c7dd74cd594d489dbb","modified":1669832973308},{"_id":"public/《玩转Java并发工具，精通JUC》-study-notes/index.html","hash":"b0429541cb236d14e417e2ca26d017f3cdd3526a","modified":1669832973308},{"_id":"public/《快速上手Linux-玩转典型应用》study-notes/index.html","hash":"06b49108251edc0596391a40fd8a6c85ca18ca54","modified":1669832973308},{"_id":"public/《理论-实战-构建完整JVM知识体系》study-notes/index.html","hash":"215080bcb9f432c134d82fbc413f4982aeb8776d","modified":1669832973308},{"_id":"public/Redis-hm/index.html","hash":"f958968d01d8a45071a456c7017679d44c5604e3","modified":1669832973308},{"_id":"public/Git/index.html","hash":"591c29353713df31f8e6c1be8114a1aa2c41a5f6","modified":1669832973308},{"_id":"public/Java-Collection-Framework/index.html","hash":"20bfbf2fd8e3376e86eb124cf30b71aabff654fd","modified":1669832973308},{"_id":"public/《Web-协议详解与抓包实战》study-notes/index.html","hash":"ca483cdbda693568fd4a0cabd873babfc751c654","modified":1669832973308},{"_id":"public/《透视-HTTP-协议》study-notes/index.html","hash":"3269e096b0ca22f95fd74c1eca23d03681cccb84","modified":1669832973308},{"_id":"public/linux实战技能/index.html","hash":"9fc3e443e6bab89d8ea59b887851192f6d251f9f","modified":1669832973308},{"_id":"public/《MySQL-必知必会》study-notes/index.html","hash":"c95b66add320f0f9722c1157c61260bd4f583ee7","modified":1669832973308},{"_id":"public/姜承尧-MySQL-DBA实战-study-notes/index.html","hash":"fb9c610d27ba3395f93bff4267ad0d6b2d82d642","modified":1669832973308},{"_id":"public/《Java-并发编程实战》study-notes/index.html","hash":"35b1119d43d6da2e4df7415d3a948f273ba40349","modified":1669832973308},{"_id":"public/《Nginx入门到实践－Nginx中间件》study-notes/index.html","hash":"ecc1edf895097ce5ea646e9b9663e2f6db4c19c9","modified":1669832973308},{"_id":"public/kingbase/index.html","hash":"e69a1393fdfe0d58e45c07082f9d6786584bc045","modified":1669832973308},{"_id":"public/《Nginx体系化深度精讲》study-notes/index.html","hash":"4e7db488c117320af3baefe6a169812bfdb5580f","modified":1669832973308},{"_id":"public/archives/index.html","hash":"a54250c976a2e2e1b1d5efddcf317a0c3b33191a","modified":1669832973308},{"_id":"public/archives/page/2/index.html","hash":"03d85ac9ce2c3be23eb6700da1ad3b9f615a3756","modified":1669832973308},{"_id":"public/archives/page/3/index.html","hash":"03d85ac9ce2c3be23eb6700da1ad3b9f615a3756","modified":1669832973308},{"_id":"public/archives/page/4/index.html","hash":"03d85ac9ce2c3be23eb6700da1ad3b9f615a3756","modified":1669832973308},{"_id":"public/archives/2019/index.html","hash":"dd3beb5fc7d9577b63aef5bdde7087ca0c878675","modified":1669832973308},{"_id":"public/archives/2019/05/index.html","hash":"6ce6a8ac8ca6442eab615651ef98cc5da2372f6f","modified":1669832973308},{"_id":"public/archives/2022/index.html","hash":"98b06d3bb44c9aa557c9dfb719864f9edda1d073","modified":1669832973308},{"_id":"public/archives/2022/page/2/index.html","hash":"0a8c02f338b8d958d3696ac1d789901ce3e0d18b","modified":1669832973308},{"_id":"public/archives/2022/page/3/index.html","hash":"0a8c02f338b8d958d3696ac1d789901ce3e0d18b","modified":1669832973308},{"_id":"public/archives/2022/page/4/index.html","hash":"0a8c02f338b8d958d3696ac1d789901ce3e0d18b","modified":1669832973308},{"_id":"public/archives/2022/05/index.html","hash":"4817de666df519d6f902e261f6db1f682e261d56","modified":1669832973308},{"_id":"public/archives/2022/06/index.html","hash":"569712961314c6e99dd7756c4d9070153b77e8eb","modified":1669832973308},{"_id":"public/archives/2022/07/index.html","hash":"38c65f7a3e7efb3d8dc07af86384b9651b582ecb","modified":1669832973308},{"_id":"public/archives/2022/08/index.html","hash":"c7808549e4326b079075edf3409ab2f30c135ab4","modified":1669832973308},{"_id":"public/archives/2022/09/index.html","hash":"b8b6b4aaeb752e70c0849b44b65fe65128f8b8d5","modified":1669832973308},{"_id":"public/archives/2022/09/page/2/index.html","hash":"cd172e6f71b280729d72c53bf4776b8a69a9429a","modified":1669832973308},{"_id":"public/archives/2022/10/index.html","hash":"f0595e75e74de53d980b451868483f361c95875f","modified":1669832973308},{"_id":"public/archives/2022/11/index.html","hash":"89172c434b0fc920932426b04d6afe0e2c2adb78","modified":1669832973308},{"_id":"public/categories/database/index.html","hash":"a2a98941acbc86702798eac071e1af5fec78bb26","modified":1669832973308},{"_id":"public/index.html","hash":"40b2dbc900977c08d99871e11a897df98073ba21","modified":1669832973308},{"_id":"public/page/2/index.html","hash":"3bd2279266608b2c6fcd6098274be183c4bd429a","modified":1669832973308},{"_id":"public/page/3/index.html","hash":"7c7e072a40a6f26d14e7546ebf6919cc973411da","modified":1669832973308},{"_id":"public/page/4/index.html","hash":"c0973b1dc9db0f07da5644c3a686afe537acfd9a","modified":1669832973308},{"_id":"public/tags/MySQL/index.html","hash":"94afb0f24f222904dda94c76c0f308a53d11e253","modified":1669832973308},{"_id":"public/tags/gradle/index.html","hash":"c6e4f16cfc11dc9f671f99e02bd36dfe79431b8a","modified":1669832973308},{"_id":"public/tags/git/index.html","hash":"d7dc692bd4411788509a5139722afe750437c40e","modified":1669832973308},{"_id":"public/tags/collection/index.html","hash":"90c257f610ba73b1aaa7c0936009ecead2ab13a1","modified":1669832973308},{"_id":"public/tags/maven/index.html","hash":"c73e69ca8e2d73666c8792d305c0f9f985b77a56","modified":1669832973308},{"_id":"public/tags/mybatis/index.html","hash":"27b3bb26de186dd57ab3607a3c04be8016172ade","modified":1669832973308},{"_id":"public/tags/Nexus/index.html","hash":"c410a93a4a7146e4ef0fd03b795446ea17d4a780","modified":1669832973308},{"_id":"public/tags/kingbase/index.html","hash":"4f03ccf070eeb29d68cc0abed9195ac861075997","modified":1669832973308},{"_id":"public/tags/Maven/index.html","hash":"65392abc71fe4de699fc037a4dce409a4f18c281","modified":1669832973308},{"_id":"public/tags/spring/index.html","hash":"63e707982298ff04f5e50908d99d6d09a3d5d8a1","modified":1669832973308},{"_id":"public/tags/linux/index.html","hash":"664a21e3569ed8b8f5c53b381f4ea0cf22a0e8a7","modified":1669832973308},{"_id":"public/tags/Kafka/index.html","hash":"71bc171bc6f674e16c7e162754c0258ca24e3284","modified":1669832973308},{"_id":"public/tags/study-notes/index.html","hash":"24a743dc80b218e0cd3a9381a2d4fb6d679edaa6","modified":1669832973308},{"_id":"public/tags/Nginx/index.html","hash":"e308664981c3cba6abcad4977ae8147a35139db4","modified":1669832973308},{"_id":"public/tags/jpa/index.html","hash":"950f8e9e78752453d4fc971d0042fdc46fe52909","modified":1669832973308},{"_id":"public/tags/wireshark/index.html","hash":"87d22a53ae821c9ff8a55b707af87879e03a8c59","modified":1669832973308},{"_id":"public/tags/network/index.html","hash":"567ad928e0a780deb5895012c5bbf63a03e1d97d","modified":1669832973308},{"_id":"public/tags/jvm/index.html","hash":"b8acc69ed35d3552e227a246b39970e61543d07c","modified":1669832973308},{"_id":"public/tags/http/index.html","hash":"f698f26fa7c55dc6002eb5d2d7e35951f7ce0cf8","modified":1669832973308},{"_id":"public/tags/Operating-Systems/index.html","hash":"2ffeff8dbc4956b817c1ae543cd953547de8b520","modified":1669832973308},{"_id":"public/tags/I-O/index.html","hash":"55972ee18ebedce5321f4f67c1f19ee631b6ef9e","modified":1669832973308},{"_id":"public/tags/computer/index.html","hash":"592fea5bc6b0d6b7c423ece35c401a4f7caa11aa","modified":1669832973308},{"_id":"public/tags/nginx/index.html","hash":"9582f45b1257f1fe60a92c2d593ada1e80e415ce","modified":1669832973308},{"_id":"public/tags/communication-mechanism/index.html","hash":"242415cb4101daa172c34405e6a8a347fc85060c","modified":1669832973308},{"_id":"public/tags/character-encoding/index.html","hash":"f1829df2df1939acbc0100f487ed210a31a9802d","modified":1669832973308},{"_id":"public/tags/mysql/index.html","hash":"19779a888d2a72bc2693627da1c6aef967020bbc","modified":1669832973308},{"_id":"public/tags/io/index.html","hash":"0d841b15b33dcc18338cdc038663277cad1d22da","modified":1669832973308},{"_id":"public/tags/redis/index.html","hash":"2a00acbd2efd3640d6a7a831cd46058f9e5a0a86","modified":1669832973308},{"_id":"public/tags/nosql/index.html","hash":"61b35f9d92efafc044b7ef1d030683e43dc11758","modified":1669832973308},{"_id":"public/tags/database/index.html","hash":"75c2a01e0239e5a7c966802985f5c378c7ea6533","modified":1669832973308},{"_id":"public/CNAME","hash":"92b03e7737fc334e53c64a85a40696f111cfe634","modified":1669832973308},{"_id":"public/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1669832973308},{"_id":"public/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1669832973308},{"_id":"public/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1669832973308},{"_id":"public/images/upyun.png","hash":"adc49ed7419d2da34294519e62812b8fd93615ee","modified":1669832973308},{"_id":"public/fontawesome/webfonts/fa-regular-400.woff2","hash":"56be4c28de7c67747b0fe3dd606be8b319f6d4f4","modified":1669832973308},{"_id":"public/fontawesome/webfonts/fa-regular-400.ttf","hash":"9262ea1d0711b658bb75d5cbe9345e080c7dea90","modified":1669832973308},{"_id":"public/fontawesome/webfonts/fa-v4compatibility.ttf","hash":"b12c2b515fb62c370de1af4ca99635b00aabfe58","modified":1669832973308},{"_id":"public/fontawesome/webfonts/fa-v4compatibility.woff2","hash":"9e1f957bf329bd280aba89e578420301b312403d","modified":1669832973308},{"_id":"public/fontawesome/webfonts/fa-brands-400.woff2","hash":"380bea4e9eb484d835d89cc608f2af7c3179e8a4","modified":1669832973308},{"_id":"public/js/code-block.js","hash":"2a8ec5a390a22b241d0530f1bc2b31099e2c8b98","modified":1669832973308},{"_id":"public/js/dark-light-toggle.js","hash":"8917d0a55490f38ddeb22ddcd2bb299e1efc0a03","modified":1669832973308},{"_id":"public/js/back2top.js","hash":"29844919b56731cb8e5f004dd0bbf60d7f35ffa2","modified":1669832973308},{"_id":"public/js/lazyload.js","hash":"d0e0878947b429ba59b0f952a498a05d6d77d0fa","modified":1669832973308},{"_id":"public/js/toc.js","hash":"4ecdb3a10ffb72d47166ae05afca1dca7921ea18","modified":1669832973308},{"_id":"public/js/main.js","hash":"444d930270ca4dcac83db08b6e9ec88972d5a7ce","modified":1669832973308},{"_id":"public/js/header-shrink.js","hash":"eee93fda3976ed7b9bebfe2f22b13d0cd085d1b1","modified":1669832973308},{"_id":"public/js/post-helper.js","hash":"ee358e1bb4c5dea490c90a8db7fab5c09baa2453","modified":1669832973308},{"_id":"public/js/utils.js","hash":"da4ae091ddf412d7e6afe9897102affdc6bff166","modified":1669832973308},{"_id":"public/js/local-search.js","hash":"752f9a59729f14d10a57df1694edca12db312565","modified":1669832973308},{"_id":"public/css/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669832973308},{"_id":"public/css/common/basic.css","hash":"f31142237b73b0bd63add0225ad26818dbd9d9e5","modified":1669832973308},{"_id":"public/css/style.css","hash":"d795fc6507c14906aba99cd90007ed1969ed495a","modified":1669832973308},{"_id":"public/fontawesome/webfonts/fa-brands-400.ttf","hash":"42350ed503d66ae23a9c68d38966f25bc3007319","modified":1669832973308},{"_id":"public/css/common/animated.css","hash":"83d342af1e02db87521e34f0f3e602c44768bb2b","modified":1669832973308},{"_id":"public/css/common/variables.css","hash":"ea8af6cfd1924105c93a83a534a63b4876f5b2ea","modified":1669832973308},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669832973308},{"_id":"public/css/layout/category-list.css","hash":"155b4f3365887498c895c23b84b40f261e5ba38c","modified":1669832973308},{"_id":"public/css/layout/category-content.css","hash":"df65b3a34670a5e6ac2a69b2a0c9afd7ac2d8b69","modified":1669832973308},{"_id":"public/css/common/markdown.css","hash":"71445ad16f6492e8c64f9bda41de5d1d8f60c360","modified":1669832973308},{"_id":"public/css/layout/home-content.css","hash":"bd53544a91de497ddc8821573456048ac5462c47","modified":1669832973308},{"_id":"public/css/layout/page.css","hash":"8b77b9743ff99d1b0aa4eae68e70e0c1e992ad0a","modified":1669832973308},{"_id":"public/css/layout/article-content.css","hash":"f4b545f5bb75250dbe78b325745b92fdd3a67ac6","modified":1669832973308},{"_id":"public/css/layout/tag-content.css","hash":"fa1b1a5d975e5ba9661b673f7810c2707430418b","modified":1669832973308},{"_id":"public/fontawesome/css/regular.min.css","hash":"58d2ff307db72217d6628940a3c07f9e982a3eea","modified":1669832973308},{"_id":"public/fontawesome/css/solid.min.css","hash":"f588237d4d8957093e2837c965ac78d059230f78","modified":1669832973308},{"_id":"public/css/common/code-block/highlight.css","hash":"f0080d3209f6f8a5c0e0087e41657cc1b973a471","modified":1669832973308},{"_id":"public/css/common/code-block/code-block.css","hash":"1467ca423a58507832cededf6c9b3e454037df7e","modified":1669832973308},{"_id":"public/css/common/code-block/code-theme.css","hash":"f6484fbe0dad9e15a947d71ad49d91af73a7b1ab","modified":1669832973308},{"_id":"public/fontawesome/webfonts/fa-solid-900.woff2","hash":"a7fca574d24e9ffa5ee0e0589ffe17277ae4ec27","modified":1669832973308},{"_id":"public/fontawesome/css/brands.min.css","hash":"bb325aa1de092336cbce1281b36663b7fa198023","modified":1669832973308},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1669832973308},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1669832973308},{"_id":"public/fontawesome/css/fontawesome.min.css","hash":"f2c5219fb9f58c2baee6dbd965741975cbc8ae71","modified":1669832973308},{"_id":"public/images/bg.jpg","hash":"1b3c9746242aeefb272af47e03d083849cc77aee","modified":1669832973308},{"_id":"public/fontawesome/webfonts/fa-solid-900.ttf","hash":"d2caaf5ce75d0da13ace325e24f7aa7079ef1891","modified":1669832973308}],"Category":[{"name":"java","_id":"clb3zfsn10007dctactahctx2"},{"name":"database","_id":"clb3zfsn3000cdcta3j53dbci"},{"name":"git","_id":"clb3zfsn5000gdctadnzmcc8x"},{"name":"gradle","_id":"clb3zfsn7000mdcta18bo7aup"},{"name":"concurrent","parent":"clb3zfsn10007dctactahctx2","_id":"clb3zfsnb000sdcta4s0ae6se"},{"name":"collection","parent":"clb3zfsn10007dctactahctx2","_id":"clb3zfsnf000zdctaf78kaczk"},{"name":"maven","_id":"clb3zfsnh0016dctaduzaffv7"},{"name":"MySQL","parent":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsnj001fdctabbs8eawv"},{"name":"mybatis","_id":"clb3zfsnl001odcta343pcnli"},{"name":"Maven","_id":"clb3zfsnn001wdcta1wi9bu2f"},{"name":"kingbase","parent":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsnp0024dcta0zga1hzt"},{"name":"MQ","_id":"clb3zfsns002bdctahpo7ay3l"},{"name":"linux","_id":"clb3zfsnw002kdcta5bac12hf"},{"name":"Nginx","_id":"clb3zfsnx002sdcta4y5b1k2w"},{"name":"spring","_id":"clb3zfsny002wdcta5rhqf1fq"},{"name":"network","_id":"clb3zfsny0031dcta89t50n4b"},{"name":"Java","_id":"clb3zfso10038dcta7mnm8i27"},{"name":"jvm","parent":"clb3zfsn10007dctactahctx2","_id":"clb3zfso1003bdctaary620f6"},{"name":"Nexus","parent":"clb3zfsnn001wdcta1wi9bu2f","_id":"clb3zfso3003idcta6kfm8a6w"},{"name":"Operating-Systems","_id":"clb3zfso4003odcta2jnt2tsp"},{"name":"computer","_id":"clb3zfso4003qdcta658j8bd2"},{"name":"Kafka","parent":"clb3zfsns002bdctahpo7ay3l","_id":"clb3zfso70045dcta3m8ag205"},{"name":"jpa","parent":"clb3zfsny002wdcta5rhqf1fq","_id":"clb3zfso80048dctad0m83j4p"},{"name":"jvm","parent":"clb3zfso10038dcta7mnm8i27","_id":"clb3zfso9004adcta0vfnckdj"},{"name":"http","parent":"clb3zfsny0031dcta89t50n4b","_id":"clb3zfso9004gdcta1j5s7vio"},{"name":"I/O","parent":"clb3zfso4003odcta2jnt2tsp","_id":"clb3zfsoa004kdcta5e1x7zaz"},{"name":"character encoding","parent":"clb3zfso4003qdcta658j8bd2","_id":"clb3zfsob004qdctab645072e"},{"name":"nginx","_id":"clb3zfsot005mdcta7mw9bbvk"},{"name":"mysql","parent":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsov005rdctaecqo78t6"},{"name":"redis","parent":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsoz005ydctadzo79jpb"},{"name":"nosql","_id":"clb3zfsp7006edcta1di54vgy"},{"name":"redis","parent":"clb3zfsp7006edcta1di54vgy","_id":"clb3zfsp8006mdctaesbx82vs"}],"Data":[],"Page":[{"title":"categories","date":"2022-11-30T17:01:08.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-12-01 01:01:08\n---\n","updated":"2022-11-30T17:01:08.374Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clb3zfsmr0000dcta1vafb15z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-11-11T06:59:53.000Z","comment":true,"_content":"\n\n\n## Hi, I'm ratears\n\n- Software Development Engineer\n\n\n\n<br>\n\n- github：\t[<font color=#f0534e>ratears</font>](https://github.com/ratears)\n- email：\t[<font color=#f0534e>ratears.life@outlook.com</font>](mailto:ratears.life@outlook.com)\n- writing：  [<font color=#f0534e>art.ratears.life</font>](https://art.ratears.life)\n- music：\t[<font color=#f0534e>music.ratears.life</font>](https://music.ratears.life)\n- WeChat：\t[<font color=#f0534e>ratears</font>](https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3u54ymlsqn40.webp)","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-11-11 14:59:53\ncomment: true\n---\n\n\n\n## Hi, I'm ratears\n\n- Software Development Engineer\n\n\n\n<br>\n\n- github：\t[<font color=#f0534e>ratears</font>](https://github.com/ratears)\n- email：\t[<font color=#f0534e>ratears.life@outlook.com</font>](mailto:ratears.life@outlook.com)\n- writing：  [<font color=#f0534e>art.ratears.life</font>](https://art.ratears.life)\n- music：\t[<font color=#f0534e>music.ratears.life</font>](https://music.ratears.life)\n- WeChat：\t[<font color=#f0534e>ratears</font>](https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3u54ymlsqn40.webp)","updated":"2022-11-30T16:44:41.195Z","path":"about/index.html","comments":1,"layout":"page","_id":"clb3zfsmv0002dcta5hyqezfo","content":"<h2 id=\"Hi-I’m-ratears\"><a href=\"#Hi-I’m-ratears\" class=\"headerlink\" title=\"Hi, I’m ratears\"></a>Hi, I’m ratears</h2><ul>\n<li>Software Development Engineer</li>\n</ul>\n<br>\n\n<ul>\n<li>github：    <a href=\"https://github.com/ratears\"><font color=#f0534e>ratears</font></a></li>\n<li>email：    <a href=\"mailto:ratears.life@outlook.com\"><font color=#f0534e>ratears.life@outlook.com</font></a></li>\n<li>writing：  <a href=\"https://art.ratears.life/\"><font color=#f0534e>art.ratears.life</font></a></li>\n<li>music：    <a href=\"https://music.ratears.life/\"><font color=#f0534e>music.ratears.life</font></a></li>\n<li>WeChat：    <a href=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3u54ymlsqn40.webp\"><font color=#f0534e>ratears</font></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hi-I’m-ratears\"><a href=\"#Hi-I’m-ratears\" class=\"headerlink\" title=\"Hi, I’m ratears\"></a>Hi, I’m ratears</h2><ul>\n<li>Software Development Engineer</li>\n</ul>\n<br>\n\n<ul>\n<li>github：    <a href=\"https://github.com/ratears\"><font color=#f0534e>ratears</font></a></li>\n<li>email：    <a href=\"mailto:ratears.life@outlook.com\"><font color=#f0534e>ratears.life@outlook.com</font></a></li>\n<li>writing：  <a href=\"https://art.ratears.life/\"><font color=#f0534e>art.ratears.life</font></a></li>\n<li>music：    <a href=\"https://music.ratears.life/\"><font color=#f0534e>music.ratears.life</font></a></li>\n<li>WeChat：    <a href=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3u54ymlsqn40.webp\"><font color=#f0534e>ratears</font></a></li>\n</ul>\n"},{"title":"links","date":"2019-11-30T16:52:55.000Z","_content":"\n\n\n- [<font color=#f0534e>阅读、思考、写作</font>](https://art.ratears.life)","source":"links/index.md","raw":"---\ntitle: links\ndate: 2019-12-01 00:52:55\n---\n\n\n\n- [<font color=#f0534e>阅读、思考、写作</font>](https://art.ratears.life)","updated":"2022-11-30T16:55:52.046Z","path":"links/index.html","comments":1,"layout":"page","_id":"clb3zfsmz0005dctahtn66hf1","content":"<ul>\n<li><a href=\"https://art.ratears.life/\"><font color=#f0534e>阅读、思考、写作</font></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://art.ratears.life/\"><font color=#f0534e>阅读、思考、写作</font></a></li>\n</ul>\n"},{"title":"tags","date":"2022-11-30T16:59:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-12-01 00:59:27\n---\n","updated":"2022-11-30T16:59:28.017Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clb3zfsn10008dctabibre71u","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"《Java 并发编程实战》study notes","author":"sonzonzy","date":"2022-05-29T17:19:06.000Z","updated":"2022-05-29T17:19:06.000Z","_content":"\n# 前言\n\n\n\n# 开篇词 | 你为什么需要学习并发编程？\n\n- 近几年，并发编程已经慢慢成为一项必备技能\n\n<br/>\n\n# 学习攻略 | 如何才能学好并发编程？\n\n## 跳出来，看全景\n\n- **首要之事就是你建立起一张全景图**\n- 并发编程领域可以抽象成**三个核心问题：分工、同步和互斥**\n\n<br/>\n\n### 分工\n\n- Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是一种分工方法\n- 并发编程领域总结出设计模式：生产者 - 消费者、Thread-Per-Message、Worker Thread 模式等都是用来指导你如何分工的\n\n> 学习这部分内容，最佳的方式就是和现实世界做对比。例如生产者 - 消费者模式，可以类比一下餐馆里的大厨和服务员，大厨就是生产者，负责做菜，做完放到出菜口，而服务员就是消费者，把做好的菜给你端过来。不过，我们经常会发现，出菜口有时候一下子出了好几个菜，服务员是可以把这一批菜同时端给你的。其实这就是生产者 - 消费者模式的一个优点，生产者一个一个地生产数据，而消费者可以批处理，这样就提高了性能\n\n<br/>\n\n### 同步\n\n- 在并发编程领域里的同步，主要指的就是线程间的协作。**一个线程执行完了一个任务，如何通知执行后续任务的线程开工**\n- 协作一般是和分工相关的。Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是分工方法，但同时也能解决线程协作的问题\n\n> 例如，用 Future 可以发起一个异步调用，当主线程通过 get() 方法取结果时，主线程就会等待，当异步执行的结果返回时，get() 方法就自动返回了。主线程和异步线程之间的协作，Future 工具类已经帮我们解决了\n\n- 线程协作问题，基本上都可以描述为：**当某个条件不满足时，线程需要等待，当某个条件满足时，线程需要被唤醒执行**\n\n> 例如，在生产者 - 消费者模型里：当队列满时，生产者线程等待，当队列不满时，生产者线程需要被唤醒执行；当队列空时，消费者线程等待，当队列不空时，消费者线程需要被唤醒执行\n\n- 在 Java 并发编程领域，解决协作问题的核心技术是**管程**，**管程是解决并发问题的万能钥匙**。（解决线程协作问题、互斥问题）\n\n> 这部分内容的学习，关键是理解管程模型，学好它就可以解决所有问题。其次是了解 Java SDK 并发包提供的几个线程协作的工具类的应用场景，用好它们可以妥妥地提高你的工作效率\n\n<br/>\n\n### 互斥\n\n> 分工、同步主要强调的是性能，但并发程序里还有一部分是关于正确性的，用专业术语叫“**线程安全**”。并发程序里，当多个线程同时访问同一个共享变量的时候，结果是不确定的。不确定，则意味着可能正确，也可能错误，事先是不知道的。而导致不确定的主要源头是可见性问题、有序性问题和原子性问题，为了解决这三个问题，Java 语言引入了内存模型，内存模型提供了一系列的规则，利用这些规则，我们可以避免可见性问题、有序性问题，但是还不足以完全解决线程安全问题。**解决线程安全问题的核心方案还是互斥**。\n\n- **互斥，指的是同一时刻，只允许一个线程访问共享变量**\n\n- 实现互斥的核心技术就是锁\n\n> 锁解决了安全性问题，但同时也带来了性能问题，那如何保证安全性的同时又尽量提高性能呢？可以分场景优化，Java SDK 里提供的 ReadWriteLock、StampedLock 就可以优化读多写少场景下锁的性能。还可以使用无锁的数据结构，例如 Java SDK 里提供的原子类都是基于无锁技术实现的。\n>\n> 除此之外，还有一些其他的方案，原理是不共享变量或者变量只允许读。这方面，Java 提供了 Thread Local 和 final 关键字，还有一种 Copy-on-write 的模式。\n>\n> 使用锁除了要注意性能问题外，还需要注意死锁问题。\n\n> 这部分内容比较复杂，往往还是跨领域的，例如要理解可见性，就需要了解一些 CPU 和缓存的知识；要理解原子性，就需要理解一些操作系统的知识；很多无锁算法的实现往往也需要理解 CPU 缓存。这部分内容的学习，需要博览群书，在大脑里建立起 CPU、内存、I/O 执行的模拟器。这样遇到问题就能得心应手了。\n\n![并发编程全景图之思维导图](https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2nti7fz31g60.webp)\n\n<br/>\n\n## 钻进去，看本质\n\n- 光跳出来还不够，还需要下一步，就是在某个问题上钻进去，深入理解，找到本质\n- **工程上的解决方案，一定要有理论做基础**\n\n> 探索它背后的理论是什么。分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的\n\n<br/>\n\n# 总结\n\n- 要让自己的知识成体系，一定要挖掘 Java SDK 并发包背后的设计理念\n- 分工、同步和互斥的全景图，是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识\n- 对于某个具体的技术，我建议你探索它背后的理论本质\n- 探求理论本质，既能加深对技术本身的理解，也能拓展知识深度和广度，这是个一举多得的方法\n\n<br/>\n\n# 第一部分：并发理论基础\n\n## 01 | 可见性、原子性和有序性问题：并发编程Bug的源头\n\n### 并发程序幕后的故事\n\n- **核心矛盾一直存在，就是这三者（CPU、内存、I/O 设备）的速度差异**\n- 为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：\n\n> 1. CPU 增加了缓存，以均衡与内存的速度差异；\n> 2. 操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；\n> 3. 编译程序优化指令执行次序，使得缓存能够得到更加合理地利用\n\n### 源头之一：缓存导致的可见性问题\n\n\n\n\n\n### 源头之二：线程切换带来的原子性问题\n\n\n\n\n\n### 源头之三：编译优化带来的有序性问题\n\n\n\n### 总结\n\n\n\n### 课后思考\n\n\n\n\n\n# 备注\n","source":"_drafts/《Java-并发编程实战》study-notes.md","raw":"---\ntitle: 《Java 并发编程实战》study notes\nauthor: sonzonzy\ndate: 2022-05-30 01:19:06\nupdated: 2022-05-30 01:19:06\ncategories:\n  - [java,concurrent]\ntags:\n  - concurrent\n  - java \n---\n\n# 前言\n\n\n\n# 开篇词 | 你为什么需要学习并发编程？\n\n- 近几年，并发编程已经慢慢成为一项必备技能\n\n<br/>\n\n# 学习攻略 | 如何才能学好并发编程？\n\n## 跳出来，看全景\n\n- **首要之事就是你建立起一张全景图**\n- 并发编程领域可以抽象成**三个核心问题：分工、同步和互斥**\n\n<br/>\n\n### 分工\n\n- Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是一种分工方法\n- 并发编程领域总结出设计模式：生产者 - 消费者、Thread-Per-Message、Worker Thread 模式等都是用来指导你如何分工的\n\n> 学习这部分内容，最佳的方式就是和现实世界做对比。例如生产者 - 消费者模式，可以类比一下餐馆里的大厨和服务员，大厨就是生产者，负责做菜，做完放到出菜口，而服务员就是消费者，把做好的菜给你端过来。不过，我们经常会发现，出菜口有时候一下子出了好几个菜，服务员是可以把这一批菜同时端给你的。其实这就是生产者 - 消费者模式的一个优点，生产者一个一个地生产数据，而消费者可以批处理，这样就提高了性能\n\n<br/>\n\n### 同步\n\n- 在并发编程领域里的同步，主要指的就是线程间的协作。**一个线程执行完了一个任务，如何通知执行后续任务的线程开工**\n- 协作一般是和分工相关的。Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是分工方法，但同时也能解决线程协作的问题\n\n> 例如，用 Future 可以发起一个异步调用，当主线程通过 get() 方法取结果时，主线程就会等待，当异步执行的结果返回时，get() 方法就自动返回了。主线程和异步线程之间的协作，Future 工具类已经帮我们解决了\n\n- 线程协作问题，基本上都可以描述为：**当某个条件不满足时，线程需要等待，当某个条件满足时，线程需要被唤醒执行**\n\n> 例如，在生产者 - 消费者模型里：当队列满时，生产者线程等待，当队列不满时，生产者线程需要被唤醒执行；当队列空时，消费者线程等待，当队列不空时，消费者线程需要被唤醒执行\n\n- 在 Java 并发编程领域，解决协作问题的核心技术是**管程**，**管程是解决并发问题的万能钥匙**。（解决线程协作问题、互斥问题）\n\n> 这部分内容的学习，关键是理解管程模型，学好它就可以解决所有问题。其次是了解 Java SDK 并发包提供的几个线程协作的工具类的应用场景，用好它们可以妥妥地提高你的工作效率\n\n<br/>\n\n### 互斥\n\n> 分工、同步主要强调的是性能，但并发程序里还有一部分是关于正确性的，用专业术语叫“**线程安全**”。并发程序里，当多个线程同时访问同一个共享变量的时候，结果是不确定的。不确定，则意味着可能正确，也可能错误，事先是不知道的。而导致不确定的主要源头是可见性问题、有序性问题和原子性问题，为了解决这三个问题，Java 语言引入了内存模型，内存模型提供了一系列的规则，利用这些规则，我们可以避免可见性问题、有序性问题，但是还不足以完全解决线程安全问题。**解决线程安全问题的核心方案还是互斥**。\n\n- **互斥，指的是同一时刻，只允许一个线程访问共享变量**\n\n- 实现互斥的核心技术就是锁\n\n> 锁解决了安全性问题，但同时也带来了性能问题，那如何保证安全性的同时又尽量提高性能呢？可以分场景优化，Java SDK 里提供的 ReadWriteLock、StampedLock 就可以优化读多写少场景下锁的性能。还可以使用无锁的数据结构，例如 Java SDK 里提供的原子类都是基于无锁技术实现的。\n>\n> 除此之外，还有一些其他的方案，原理是不共享变量或者变量只允许读。这方面，Java 提供了 Thread Local 和 final 关键字，还有一种 Copy-on-write 的模式。\n>\n> 使用锁除了要注意性能问题外，还需要注意死锁问题。\n\n> 这部分内容比较复杂，往往还是跨领域的，例如要理解可见性，就需要了解一些 CPU 和缓存的知识；要理解原子性，就需要理解一些操作系统的知识；很多无锁算法的实现往往也需要理解 CPU 缓存。这部分内容的学习，需要博览群书，在大脑里建立起 CPU、内存、I/O 执行的模拟器。这样遇到问题就能得心应手了。\n\n![并发编程全景图之思维导图](https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2nti7fz31g60.webp)\n\n<br/>\n\n## 钻进去，看本质\n\n- 光跳出来还不够，还需要下一步，就是在某个问题上钻进去，深入理解，找到本质\n- **工程上的解决方案，一定要有理论做基础**\n\n> 探索它背后的理论是什么。分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的\n\n<br/>\n\n# 总结\n\n- 要让自己的知识成体系，一定要挖掘 Java SDK 并发包背后的设计理念\n- 分工、同步和互斥的全景图，是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识\n- 对于某个具体的技术，我建议你探索它背后的理论本质\n- 探求理论本质，既能加深对技术本身的理解，也能拓展知识深度和广度，这是个一举多得的方法\n\n<br/>\n\n# 第一部分：并发理论基础\n\n## 01 | 可见性、原子性和有序性问题：并发编程Bug的源头\n\n### 并发程序幕后的故事\n\n- **核心矛盾一直存在，就是这三者（CPU、内存、I/O 设备）的速度差异**\n- 为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：\n\n> 1. CPU 增加了缓存，以均衡与内存的速度差异；\n> 2. 操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；\n> 3. 编译程序优化指令执行次序，使得缓存能够得到更加合理地利用\n\n### 源头之一：缓存导致的可见性问题\n\n\n\n\n\n### 源头之二：线程切换带来的原子性问题\n\n\n\n\n\n### 源头之三：编译优化带来的有序性问题\n\n\n\n### 总结\n\n\n\n### 课后思考\n\n\n\n\n\n# 备注\n","slug":"《Java-并发编程实战》study-notes","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsmt0001dcta7hh79art","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h1 id=\"开篇词-你为什么需要学习并发编程？\"><a href=\"#开篇词-你为什么需要学习并发编程？\" class=\"headerlink\" title=\"开篇词 | 你为什么需要学习并发编程？\"></a>开篇词 | 你为什么需要学习并发编程？</h1><ul>\n<li>近几年，并发编程已经慢慢成为一项必备技能</li>\n</ul>\n<br/>\n\n<h1 id=\"学习攻略-如何才能学好并发编程？\"><a href=\"#学习攻略-如何才能学好并发编程？\" class=\"headerlink\" title=\"学习攻略 | 如何才能学好并发编程？\"></a>学习攻略 | 如何才能学好并发编程？</h1><h2 id=\"跳出来，看全景\"><a href=\"#跳出来，看全景\" class=\"headerlink\" title=\"跳出来，看全景\"></a>跳出来，看全景</h2><ul>\n<li><strong>首要之事就是你建立起一张全景图</strong></li>\n<li>并发编程领域可以抽象成<strong>三个核心问题：分工、同步和互斥</strong></li>\n</ul>\n<br/>\n\n<h3 id=\"分工\"><a href=\"#分工\" class=\"headerlink\" title=\"分工\"></a>分工</h3><ul>\n<li>Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是一种分工方法</li>\n<li>并发编程领域总结出设计模式：生产者 - 消费者、Thread-Per-Message、Worker Thread 模式等都是用来指导你如何分工的</li>\n</ul>\n<blockquote>\n<p>学习这部分内容，最佳的方式就是和现实世界做对比。例如生产者 - 消费者模式，可以类比一下餐馆里的大厨和服务员，大厨就是生产者，负责做菜，做完放到出菜口，而服务员就是消费者，把做好的菜给你端过来。不过，我们经常会发现，出菜口有时候一下子出了好几个菜，服务员是可以把这一批菜同时端给你的。其实这就是生产者 - 消费者模式的一个优点，生产者一个一个地生产数据，而消费者可以批处理，这样就提高了性能</p>\n</blockquote>\n<br/>\n\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><ul>\n<li>在并发编程领域里的同步，主要指的就是线程间的协作。<strong>一个线程执行完了一个任务，如何通知执行后续任务的线程开工</strong></li>\n<li>协作一般是和分工相关的。Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是分工方法，但同时也能解决线程协作的问题</li>\n</ul>\n<blockquote>\n<p>例如，用 Future 可以发起一个异步调用，当主线程通过 get() 方法取结果时，主线程就会等待，当异步执行的结果返回时，get() 方法就自动返回了。主线程和异步线程之间的协作，Future 工具类已经帮我们解决了</p>\n</blockquote>\n<ul>\n<li>线程协作问题，基本上都可以描述为：<strong>当某个条件不满足时，线程需要等待，当某个条件满足时，线程需要被唤醒执行</strong></li>\n</ul>\n<blockquote>\n<p>例如，在生产者 - 消费者模型里：当队列满时，生产者线程等待，当队列不满时，生产者线程需要被唤醒执行；当队列空时，消费者线程等待，当队列不空时，消费者线程需要被唤醒执行</p>\n</blockquote>\n<ul>\n<li>在 Java 并发编程领域，解决协作问题的核心技术是<strong>管程</strong>，<strong>管程是解决并发问题的万能钥匙</strong>。（解决线程协作问题、互斥问题）</li>\n</ul>\n<blockquote>\n<p>这部分内容的学习，关键是理解管程模型，学好它就可以解决所有问题。其次是了解 Java SDK 并发包提供的几个线程协作的工具类的应用场景，用好它们可以妥妥地提高你的工作效率</p>\n</blockquote>\n<br/>\n\n<h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a>互斥</h3><blockquote>\n<p>分工、同步主要强调的是性能，但并发程序里还有一部分是关于正确性的，用专业术语叫“<strong>线程安全</strong>”。并发程序里，当多个线程同时访问同一个共享变量的时候，结果是不确定的。不确定，则意味着可能正确，也可能错误，事先是不知道的。而导致不确定的主要源头是可见性问题、有序性问题和原子性问题，为了解决这三个问题，Java 语言引入了内存模型，内存模型提供了一系列的规则，利用这些规则，我们可以避免可见性问题、有序性问题，但是还不足以完全解决线程安全问题。<strong>解决线程安全问题的核心方案还是互斥</strong>。</p>\n</blockquote>\n<ul>\n<li><p><strong>互斥，指的是同一时刻，只允许一个线程访问共享变量</strong></p>\n</li>\n<li><p>实现互斥的核心技术就是锁</p>\n</li>\n</ul>\n<blockquote>\n<p>锁解决了安全性问题，但同时也带来了性能问题，那如何保证安全性的同时又尽量提高性能呢？可以分场景优化，Java SDK 里提供的 ReadWriteLock、StampedLock 就可以优化读多写少场景下锁的性能。还可以使用无锁的数据结构，例如 Java SDK 里提供的原子类都是基于无锁技术实现的。</p>\n<p>除此之外，还有一些其他的方案，原理是不共享变量或者变量只允许读。这方面，Java 提供了 Thread Local 和 final 关键字，还有一种 Copy-on-write 的模式。</p>\n<p>使用锁除了要注意性能问题外，还需要注意死锁问题。</p>\n</blockquote>\n<blockquote>\n<p>这部分内容比较复杂，往往还是跨领域的，例如要理解可见性，就需要了解一些 CPU 和缓存的知识；要理解原子性，就需要理解一些操作系统的知识；很多无锁算法的实现往往也需要理解 CPU 缓存。这部分内容的学习，需要博览群书，在大脑里建立起 CPU、内存、I/O 执行的模拟器。这样遇到问题就能得心应手了。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2nti7fz31g60.webp\" alt=\"并发编程全景图之思维导图\"></p>\n<br/>\n\n<h2 id=\"钻进去，看本质\"><a href=\"#钻进去，看本质\" class=\"headerlink\" title=\"钻进去，看本质\"></a>钻进去，看本质</h2><ul>\n<li>光跳出来还不够，还需要下一步，就是在某个问题上钻进去，深入理解，找到本质</li>\n<li><strong>工程上的解决方案，一定要有理论做基础</strong></li>\n</ul>\n<blockquote>\n<p>探索它背后的理论是什么。分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的</p>\n</blockquote>\n<br/>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>要让自己的知识成体系，一定要挖掘 Java SDK 并发包背后的设计理念</li>\n<li>分工、同步和互斥的全景图，是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识</li>\n<li>对于某个具体的技术，我建议你探索它背后的理论本质</li>\n<li>探求理论本质，既能加深对技术本身的理解，也能拓展知识深度和广度，这是个一举多得的方法</li>\n</ul>\n<br/>\n\n<h1 id=\"第一部分：并发理论基础\"><a href=\"#第一部分：并发理论基础\" class=\"headerlink\" title=\"第一部分：并发理论基础\"></a>第一部分：并发理论基础</h1><h2 id=\"01-可见性、原子性和有序性问题：并发编程Bug的源头\"><a href=\"#01-可见性、原子性和有序性问题：并发编程Bug的源头\" class=\"headerlink\" title=\"01 | 可见性、原子性和有序性问题：并发编程Bug的源头\"></a>01 | 可见性、原子性和有序性问题：并发编程Bug的源头</h2><h3 id=\"并发程序幕后的故事\"><a href=\"#并发程序幕后的故事\" class=\"headerlink\" title=\"并发程序幕后的故事\"></a>并发程序幕后的故事</h3><ul>\n<li><strong>核心矛盾一直存在，就是这三者（CPU、内存、I/O 设备）的速度差异</strong></li>\n<li>为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：</li>\n</ul>\n<blockquote>\n<ol>\n<li>CPU 增加了缓存，以均衡与内存的速度差异；</li>\n<li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；</li>\n<li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用</li>\n</ol>\n</blockquote>\n<h3 id=\"源头之一：缓存导致的可见性问题\"><a href=\"#源头之一：缓存导致的可见性问题\" class=\"headerlink\" title=\"源头之一：缓存导致的可见性问题\"></a>源头之一：缓存导致的可见性问题</h3><h3 id=\"源头之二：线程切换带来的原子性问题\"><a href=\"#源头之二：线程切换带来的原子性问题\" class=\"headerlink\" title=\"源头之二：线程切换带来的原子性问题\"></a>源头之二：线程切换带来的原子性问题</h3><h3 id=\"源头之三：编译优化带来的有序性问题\"><a href=\"#源头之三：编译优化带来的有序性问题\" class=\"headerlink\" title=\"源头之三：编译优化带来的有序性问题\"></a>源头之三：编译优化带来的有序性问题</h3><h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h1 id=\"开篇词-你为什么需要学习并发编程？\"><a href=\"#开篇词-你为什么需要学习并发编程？\" class=\"headerlink\" title=\"开篇词 | 你为什么需要学习并发编程？\"></a>开篇词 | 你为什么需要学习并发编程？</h1><ul>\n<li>近几年，并发编程已经慢慢成为一项必备技能</li>\n</ul>\n<br/>\n\n<h1 id=\"学习攻略-如何才能学好并发编程？\"><a href=\"#学习攻略-如何才能学好并发编程？\" class=\"headerlink\" title=\"学习攻略 | 如何才能学好并发编程？\"></a>学习攻略 | 如何才能学好并发编程？</h1><h2 id=\"跳出来，看全景\"><a href=\"#跳出来，看全景\" class=\"headerlink\" title=\"跳出来，看全景\"></a>跳出来，看全景</h2><ul>\n<li><strong>首要之事就是你建立起一张全景图</strong></li>\n<li>并发编程领域可以抽象成<strong>三个核心问题：分工、同步和互斥</strong></li>\n</ul>\n<br/>\n\n<h3 id=\"分工\"><a href=\"#分工\" class=\"headerlink\" title=\"分工\"></a>分工</h3><ul>\n<li>Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是一种分工方法</li>\n<li>并发编程领域总结出设计模式：生产者 - 消费者、Thread-Per-Message、Worker Thread 模式等都是用来指导你如何分工的</li>\n</ul>\n<blockquote>\n<p>学习这部分内容，最佳的方式就是和现实世界做对比。例如生产者 - 消费者模式，可以类比一下餐馆里的大厨和服务员，大厨就是生产者，负责做菜，做完放到出菜口，而服务员就是消费者，把做好的菜给你端过来。不过，我们经常会发现，出菜口有时候一下子出了好几个菜，服务员是可以把这一批菜同时端给你的。其实这就是生产者 - 消费者模式的一个优点，生产者一个一个地生产数据，而消费者可以批处理，这样就提高了性能</p>\n</blockquote>\n<br/>\n\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><ul>\n<li>在并发编程领域里的同步，主要指的就是线程间的协作。<strong>一个线程执行完了一个任务，如何通知执行后续任务的线程开工</strong></li>\n<li>协作一般是和分工相关的。Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是分工方法，但同时也能解决线程协作的问题</li>\n</ul>\n<blockquote>\n<p>例如，用 Future 可以发起一个异步调用，当主线程通过 get() 方法取结果时，主线程就会等待，当异步执行的结果返回时，get() 方法就自动返回了。主线程和异步线程之间的协作，Future 工具类已经帮我们解决了</p>\n</blockquote>\n<ul>\n<li>线程协作问题，基本上都可以描述为：<strong>当某个条件不满足时，线程需要等待，当某个条件满足时，线程需要被唤醒执行</strong></li>\n</ul>\n<blockquote>\n<p>例如，在生产者 - 消费者模型里：当队列满时，生产者线程等待，当队列不满时，生产者线程需要被唤醒执行；当队列空时，消费者线程等待，当队列不空时，消费者线程需要被唤醒执行</p>\n</blockquote>\n<ul>\n<li>在 Java 并发编程领域，解决协作问题的核心技术是<strong>管程</strong>，<strong>管程是解决并发问题的万能钥匙</strong>。（解决线程协作问题、互斥问题）</li>\n</ul>\n<blockquote>\n<p>这部分内容的学习，关键是理解管程模型，学好它就可以解决所有问题。其次是了解 Java SDK 并发包提供的几个线程协作的工具类的应用场景，用好它们可以妥妥地提高你的工作效率</p>\n</blockquote>\n<br/>\n\n<h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a>互斥</h3><blockquote>\n<p>分工、同步主要强调的是性能，但并发程序里还有一部分是关于正确性的，用专业术语叫“<strong>线程安全</strong>”。并发程序里，当多个线程同时访问同一个共享变量的时候，结果是不确定的。不确定，则意味着可能正确，也可能错误，事先是不知道的。而导致不确定的主要源头是可见性问题、有序性问题和原子性问题，为了解决这三个问题，Java 语言引入了内存模型，内存模型提供了一系列的规则，利用这些规则，我们可以避免可见性问题、有序性问题，但是还不足以完全解决线程安全问题。<strong>解决线程安全问题的核心方案还是互斥</strong>。</p>\n</blockquote>\n<ul>\n<li><p><strong>互斥，指的是同一时刻，只允许一个线程访问共享变量</strong></p>\n</li>\n<li><p>实现互斥的核心技术就是锁</p>\n</li>\n</ul>\n<blockquote>\n<p>锁解决了安全性问题，但同时也带来了性能问题，那如何保证安全性的同时又尽量提高性能呢？可以分场景优化，Java SDK 里提供的 ReadWriteLock、StampedLock 就可以优化读多写少场景下锁的性能。还可以使用无锁的数据结构，例如 Java SDK 里提供的原子类都是基于无锁技术实现的。</p>\n<p>除此之外，还有一些其他的方案，原理是不共享变量或者变量只允许读。这方面，Java 提供了 Thread Local 和 final 关键字，还有一种 Copy-on-write 的模式。</p>\n<p>使用锁除了要注意性能问题外，还需要注意死锁问题。</p>\n</blockquote>\n<blockquote>\n<p>这部分内容比较复杂，往往还是跨领域的，例如要理解可见性，就需要了解一些 CPU 和缓存的知识；要理解原子性，就需要理解一些操作系统的知识；很多无锁算法的实现往往也需要理解 CPU 缓存。这部分内容的学习，需要博览群书，在大脑里建立起 CPU、内存、I/O 执行的模拟器。这样遇到问题就能得心应手了。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2nti7fz31g60.webp\" alt=\"并发编程全景图之思维导图\"></p>\n<br/>\n\n<h2 id=\"钻进去，看本质\"><a href=\"#钻进去，看本质\" class=\"headerlink\" title=\"钻进去，看本质\"></a>钻进去，看本质</h2><ul>\n<li>光跳出来还不够，还需要下一步，就是在某个问题上钻进去，深入理解，找到本质</li>\n<li><strong>工程上的解决方案，一定要有理论做基础</strong></li>\n</ul>\n<blockquote>\n<p>探索它背后的理论是什么。分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的</p>\n</blockquote>\n<br/>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>要让自己的知识成体系，一定要挖掘 Java SDK 并发包背后的设计理念</li>\n<li>分工、同步和互斥的全景图，是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识</li>\n<li>对于某个具体的技术，我建议你探索它背后的理论本质</li>\n<li>探求理论本质，既能加深对技术本身的理解，也能拓展知识深度和广度，这是个一举多得的方法</li>\n</ul>\n<br/>\n\n<h1 id=\"第一部分：并发理论基础\"><a href=\"#第一部分：并发理论基础\" class=\"headerlink\" title=\"第一部分：并发理论基础\"></a>第一部分：并发理论基础</h1><h2 id=\"01-可见性、原子性和有序性问题：并发编程Bug的源头\"><a href=\"#01-可见性、原子性和有序性问题：并发编程Bug的源头\" class=\"headerlink\" title=\"01 | 可见性、原子性和有序性问题：并发编程Bug的源头\"></a>01 | 可见性、原子性和有序性问题：并发编程Bug的源头</h2><h3 id=\"并发程序幕后的故事\"><a href=\"#并发程序幕后的故事\" class=\"headerlink\" title=\"并发程序幕后的故事\"></a>并发程序幕后的故事</h3><ul>\n<li><strong>核心矛盾一直存在，就是这三者（CPU、内存、I/O 设备）的速度差异</strong></li>\n<li>为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：</li>\n</ul>\n<blockquote>\n<ol>\n<li>CPU 增加了缓存，以均衡与内存的速度差异；</li>\n<li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；</li>\n<li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用</li>\n</ol>\n</blockquote>\n<h3 id=\"源头之一：缓存导致的可见性问题\"><a href=\"#源头之一：缓存导致的可见性问题\" class=\"headerlink\" title=\"源头之一：缓存导致的可见性问题\"></a>源头之一：缓存导致的可见性问题</h3><h3 id=\"源头之二：线程切换带来的原子性问题\"><a href=\"#源头之二：线程切换带来的原子性问题\" class=\"headerlink\" title=\"源头之二：线程切换带来的原子性问题\"></a>源头之二：线程切换带来的原子性问题</h3><h3 id=\"源头之三：编译优化带来的有序性问题\"><a href=\"#源头之三：编译优化带来的有序性问题\" class=\"headerlink\" title=\"源头之三：编译优化带来的有序性问题\"></a>源头之三：编译优化带来的有序性问题</h3><h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1>"},{"title":"《heima-Mysql高级（4天）》study notes","author":"ratears","date":"2022-10-24T06:29:42.000Z","updated":"2022-10-24T06:29:42.000Z","_content":"\n\n\n# MySQL高级课程简介\n\n| 序号 | Day01              | Day02       | Day03          | Day04          |\n| :--: | ------------------ | ----------- | -------------- | -------------- |\n|  1   | Linux系统安装MySQL | 体系结构    | 应用优化       | MySQL 常用工具 |\n|  2   | 索引               | 存储引擎    | 查询缓存优化   | MySQL 日志     |\n|  3   | 视图               | 优化SQL步骤 | 内存管理及优化 | MySQL 主从复制 |\n|  4   | 存储过程和函数     | 索引使用    | MySQL锁问题    | 综合案例       |\n|  5   | 触发器             | SQL优化     | 常用SQL技巧    |                |\n\n<br>\n\n<br>\n\n<br>\n\n# Mysql高级-day01\n\n## 安装MySQL 5.6（rpm方式）\n\n```shell\n#\t1). 卸载 centos 中预安装的 mysql/mariadb,并删除相关文件\nrpm -qa | grep -i mysql\nrpm -e mysql-libs-5.1.71-1.el6.x86_64 --nodeps\n\n#\t2). 下载 mysql 的安装包\nwget https://cdn.mysql.com/archives/mysql-5.6/MySQL-5.6.22-1.el7.x86_64.rpm-bundle.tar\n\n#\t3). 解压 mysql 的安装包\ntar -xvf MySQL-5.6.22-1.el7.x86_64.rpm-bundle.tar\n\n#\t4). 安装依赖包\nyum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6 libncurses.so.5 --setopt=protected_multilib=false autoconf net-tools\nyum update libstdc++-4.4.7-4.el6.x86_64\n\n#\t5). 安装 mysql-client\nrpm -ivh MySQL-client-5.6.22-1.el7.x86_64.rpm\n\n\n#\t6). 安装 mysql-server\nrpm -ivh MySQL-server-5.6.22-1.el7.x86_64.rpm\n\n# 如果安装过程中缺少依赖则安装相关依赖。若安装失败，可以卸载后，删除mysql有关的文件，再重新安装\n```\n\n<br>\n\n<br>\n\n### 启动 MySQL 服务\n\n```shell\nservice mysql start\nservice mysql stop\nservice mysql status\nservice mysql restart\n```\n\n<br>\n\n<br>\n\n### 登录MySQL\n\n```shell\n# mysql 安装完成之后, 会自动生成一个随机的密码, 并且保存在一个密码文件中 : /root/.mysql_secret\n\n# 登录之后, 修改密码 :\nset password = password('root');\n\n# 授权远程访问 :\ngrant all privileges on *.* to 'root' @'%' identified by 'root';\nflush privileges;\n```\n\n<br>\n\n<br>\n\n<br>\n\n## 索引\n\n### 索引概述\n\n- MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6iks54eq7940.webp\" width=\"80%\">\n\n<br>\n\n> 左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。\n\n> 一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具\n\n<br>\n\n<br>\n\n### 索引优势劣势\n\n- 优势\n  - 1） 类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本\n  - 2） 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗\n- 劣势\n  - 1） 实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间\n  - 2） 虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。\n\n<br>\n\n<br>\n\n### 索引结构\n\n- 索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：\n  - BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引\n  - HASH 索引：只有Memory引擎支持 ， 使用场景简单\n  - R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少\n  - Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引\n\n\n\n- **MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持**\n\n|    索引     |   InnoDB引擎    | MyISAM引擎 | Memory引擎 |\n| :---------: | :-------------: | :--------: | :--------: |\n|  BTREE索引  |      支持       |    支持    |    支持    |\n|  HASH 索引  |     不支持      |   不支持   |    支持    |\n| R-tree 索引 |     不支持      |    支持    |   不支持   |\n|  Full-text  | 5.6版本之后支持 |    支持    |   不支持   |\n\n- 我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。\n\n<br>\n\n#### BTREE 结构\n\n- BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：\n  - 树中每个节点最多包含m个孩子\n  - 除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子\n  - 若根节点不是叶子节点，则至少有两个孩子\n  - 所有的叶子节点都在同一层\n  - 每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] <= n <= m-1\n\n> 以5叉BTree为例，key的数量：公式推导[ceil(m/2)-1] <= n <= m-1。所以 2 <= n <=4 。当n>4时，中间节点分裂到父节点，两边节点分裂\n\n> BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快\n\n<br>\n\n#### B+TREE 结构\n\n- B+Tree为BTree的变种，B+Tree与BTree的区别为：\n  - 1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key\n  - 2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列\n  - 3). 所有的非叶子节点都可以看作是key的索引部分\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6jme7w6ntz40.webp\" width=\"80%\">\n\n<br>\n\n- 由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定\n\n<br>\n\n### MySQL中的B+Tree\n\n- MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能\n\n\n\n- MySQL中的 B+Tree 索引结构示意图:\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7bv4u1b5wk40.webp\" width=\"100%\">\n\n<br>\n\n<br>\n\n### 索引分类\n\n- 1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引\n- 2） 唯一索引 ：索引列的值必须唯一，但允许有空值\n- 3） 复合索引 ：即一个索引包含多个列\n\n<br>\n\n<br>\n\n### 索引语法\n\n- 索引在创建表的时候，可以同时创建， 也可以随时增加新的索引\n\n准备环境:\n\n```mysql\ncreate databse demo_01 default charset=uft8mb4;\n\nuse demo_01;\n\ncreate table `city` (\n\t`city_id` int(11) not null auto_increment,\n    `city_name` varchar(50) not null,\n    `country_id` int(11) not null,\n\n)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","source":"_drafts/《heima-Mysql高级（4天）》study-notes.md","raw":"---\ntitle: 《heima-Mysql高级（4天）》study notes\nauthor: ratears\ncategories:\n  - [database,MySQL]\ntags:\n  - MySQL\n  - database\ndate: 2022-10-24 14:29:42\nupdated: 2022-10-24 14:29:42\n---\n\n\n\n# MySQL高级课程简介\n\n| 序号 | Day01              | Day02       | Day03          | Day04          |\n| :--: | ------------------ | ----------- | -------------- | -------------- |\n|  1   | Linux系统安装MySQL | 体系结构    | 应用优化       | MySQL 常用工具 |\n|  2   | 索引               | 存储引擎    | 查询缓存优化   | MySQL 日志     |\n|  3   | 视图               | 优化SQL步骤 | 内存管理及优化 | MySQL 主从复制 |\n|  4   | 存储过程和函数     | 索引使用    | MySQL锁问题    | 综合案例       |\n|  5   | 触发器             | SQL优化     | 常用SQL技巧    |                |\n\n<br>\n\n<br>\n\n<br>\n\n# Mysql高级-day01\n\n## 安装MySQL 5.6（rpm方式）\n\n```shell\n#\t1). 卸载 centos 中预安装的 mysql/mariadb,并删除相关文件\nrpm -qa | grep -i mysql\nrpm -e mysql-libs-5.1.71-1.el6.x86_64 --nodeps\n\n#\t2). 下载 mysql 的安装包\nwget https://cdn.mysql.com/archives/mysql-5.6/MySQL-5.6.22-1.el7.x86_64.rpm-bundle.tar\n\n#\t3). 解压 mysql 的安装包\ntar -xvf MySQL-5.6.22-1.el7.x86_64.rpm-bundle.tar\n\n#\t4). 安装依赖包\nyum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6 libncurses.so.5 --setopt=protected_multilib=false autoconf net-tools\nyum update libstdc++-4.4.7-4.el6.x86_64\n\n#\t5). 安装 mysql-client\nrpm -ivh MySQL-client-5.6.22-1.el7.x86_64.rpm\n\n\n#\t6). 安装 mysql-server\nrpm -ivh MySQL-server-5.6.22-1.el7.x86_64.rpm\n\n# 如果安装过程中缺少依赖则安装相关依赖。若安装失败，可以卸载后，删除mysql有关的文件，再重新安装\n```\n\n<br>\n\n<br>\n\n### 启动 MySQL 服务\n\n```shell\nservice mysql start\nservice mysql stop\nservice mysql status\nservice mysql restart\n```\n\n<br>\n\n<br>\n\n### 登录MySQL\n\n```shell\n# mysql 安装完成之后, 会自动生成一个随机的密码, 并且保存在一个密码文件中 : /root/.mysql_secret\n\n# 登录之后, 修改密码 :\nset password = password('root');\n\n# 授权远程访问 :\ngrant all privileges on *.* to 'root' @'%' identified by 'root';\nflush privileges;\n```\n\n<br>\n\n<br>\n\n<br>\n\n## 索引\n\n### 索引概述\n\n- MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6iks54eq7940.webp\" width=\"80%\">\n\n<br>\n\n> 左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。\n\n> 一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具\n\n<br>\n\n<br>\n\n### 索引优势劣势\n\n- 优势\n  - 1） 类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本\n  - 2） 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗\n- 劣势\n  - 1） 实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间\n  - 2） 虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。\n\n<br>\n\n<br>\n\n### 索引结构\n\n- 索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：\n  - BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引\n  - HASH 索引：只有Memory引擎支持 ， 使用场景简单\n  - R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少\n  - Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引\n\n\n\n- **MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持**\n\n|    索引     |   InnoDB引擎    | MyISAM引擎 | Memory引擎 |\n| :---------: | :-------------: | :--------: | :--------: |\n|  BTREE索引  |      支持       |    支持    |    支持    |\n|  HASH 索引  |     不支持      |   不支持   |    支持    |\n| R-tree 索引 |     不支持      |    支持    |   不支持   |\n|  Full-text  | 5.6版本之后支持 |    支持    |   不支持   |\n\n- 我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。\n\n<br>\n\n#### BTREE 结构\n\n- BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：\n  - 树中每个节点最多包含m个孩子\n  - 除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子\n  - 若根节点不是叶子节点，则至少有两个孩子\n  - 所有的叶子节点都在同一层\n  - 每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] <= n <= m-1\n\n> 以5叉BTree为例，key的数量：公式推导[ceil(m/2)-1] <= n <= m-1。所以 2 <= n <=4 。当n>4时，中间节点分裂到父节点，两边节点分裂\n\n> BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快\n\n<br>\n\n#### B+TREE 结构\n\n- B+Tree为BTree的变种，B+Tree与BTree的区别为：\n  - 1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key\n  - 2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列\n  - 3). 所有的非叶子节点都可以看作是key的索引部分\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6jme7w6ntz40.webp\" width=\"80%\">\n\n<br>\n\n- 由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定\n\n<br>\n\n### MySQL中的B+Tree\n\n- MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能\n\n\n\n- MySQL中的 B+Tree 索引结构示意图:\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7bv4u1b5wk40.webp\" width=\"100%\">\n\n<br>\n\n<br>\n\n### 索引分类\n\n- 1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引\n- 2） 唯一索引 ：索引列的值必须唯一，但允许有空值\n- 3） 复合索引 ：即一个索引包含多个列\n\n<br>\n\n<br>\n\n### 索引语法\n\n- 索引在创建表的时候，可以同时创建， 也可以随时增加新的索引\n\n准备环境:\n\n```mysql\ncreate databse demo_01 default charset=uft8mb4;\n\nuse demo_01;\n\ncreate table `city` (\n\t`city_id` int(11) not null auto_increment,\n    `city_name` varchar(50) not null,\n    `country_id` int(11) not null,\n\n)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","slug":"《heima-Mysql高级（4天）》study-notes","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsmv0003dcta5u5gclmq","content":"<h1 id=\"MySQL高级课程简介\"><a href=\"#MySQL高级课程简介\" class=\"headerlink\" title=\"MySQL高级课程简介\"></a>MySQL高级课程简介</h1><table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th>Day01</th>\n<th>Day02</th>\n<th>Day03</th>\n<th>Day04</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td>Linux系统安装MySQL</td>\n<td>体系结构</td>\n<td>应用优化</td>\n<td>MySQL 常用工具</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td>索引</td>\n<td>存储引擎</td>\n<td>查询缓存优化</td>\n<td>MySQL 日志</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td>视图</td>\n<td>优化SQL步骤</td>\n<td>内存管理及优化</td>\n<td>MySQL 主从复制</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td>存储过程和函数</td>\n<td>索引使用</td>\n<td>MySQL锁问题</td>\n<td>综合案例</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td>触发器</td>\n<td>SQL优化</td>\n<td>常用SQL技巧</td>\n<td></td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Mysql高级-day01\"><a href=\"#Mysql高级-day01\" class=\"headerlink\" title=\"Mysql高级-day01\"></a>Mysql高级-day01</h1><h2 id=\"安装MySQL-5-6（rpm方式）\"><a href=\"#安装MySQL-5-6（rpm方式）\" class=\"headerlink\" title=\"安装MySQL 5.6（rpm方式）\"></a>安装MySQL 5.6（rpm方式）</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t1). 卸载 centos 中预安装的 mysql/mariadb,并删除相关文件</span></span><br><span class=\"line\">rpm -qa | grep -i mysql</span><br><span class=\"line\">rpm -e mysql-libs-5.1.71-1.el6.x86_64 --nodeps</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t2). 下载 mysql 的安装包</span></span><br><span class=\"line\">wget https://cdn.mysql.com/archives/mysql-5.6/MySQL-5.6.22-1.el7.x86_64.rpm-bundle.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t3). 解压 mysql 的安装包</span></span><br><span class=\"line\">tar -xvf MySQL-5.6.22-1.el7.x86_64.rpm-bundle.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t4). 安装依赖包</span></span><br><span class=\"line\">yum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6 libncurses.so.5 --setopt=protected_multilib=false autoconf net-tools</span><br><span class=\"line\">yum update libstdc++-4.4.7-4.el6.x86_64</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t5). 安装 mysql-client</span></span><br><span class=\"line\">rpm -ivh MySQL-client-5.6.22-1.el7.x86_64.rpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t6). 安装 mysql-server</span></span><br><span class=\"line\">rpm -ivh MySQL-server-5.6.22-1.el7.x86_64.rpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果安装过程中缺少依赖则安装相关依赖。若安装失败，可以卸载后，删除mysql有关的文件，再重新安装</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"启动-MySQL-服务\"><a href=\"#启动-MySQL-服务\" class=\"headerlink\" title=\"启动 MySQL 服务\"></a>启动 MySQL 服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql start</span><br><span class=\"line\">service mysql stop</span><br><span class=\"line\">service mysql status</span><br><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql 安装完成之后, 会自动生成一个随机的密码, 并且保存在一个密码文件中 : /root/.mysql_secret</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录之后, 修改密码 :</span></span><br><span class=\"line\">set password = password(&#x27;root&#x27;);</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">授权远程访问 :</span></span><br><span class=\"line\">grant all privileges on *.* to &#x27;root&#x27; @&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"索引概述\"><a href=\"#索引概述\" class=\"headerlink\" title=\"索引概述\"></a>索引概述</h3><ul>\n<li>MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6iks54eq7940.webp\" width=\"80%\">\n\n<br>\n\n<blockquote>\n<p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。</p>\n</blockquote>\n<blockquote>\n<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"索引优势劣势\"><a href=\"#索引优势劣势\" class=\"headerlink\" title=\"索引优势劣势\"></a>索引优势劣势</h3><ul>\n<li>优势<ul>\n<li>1） 类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本</li>\n<li>2） 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>\n</ul>\n</li>\n<li>劣势<ul>\n<li>1） 实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间</li>\n<li>2） 虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"索引结构\"><a href=\"#索引结构\" class=\"headerlink\" title=\"索引结构\"></a>索引结构</h3><ul>\n<li>索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：<ul>\n<li>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引</li>\n<li>HASH 索引：只有Memory引擎支持 ， 使用场景简单</li>\n<li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</li>\n<li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">索引</th>\n<th align=\"center\">InnoDB引擎</th>\n<th align=\"center\">MyISAM引擎</th>\n<th align=\"center\">Memory引擎</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">BTREE索引</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">HASH 索引</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">R-tree 索引</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">Full-text</td>\n<td align=\"center\">5.6版本之后支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n</tbody></table>\n<ul>\n<li>我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。</li>\n</ul>\n<br>\n\n<h4 id=\"BTREE-结构\"><a href=\"#BTREE-结构\" class=\"headerlink\" title=\"BTREE 结构\"></a>BTREE 结构</h4><ul>\n<li>BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：<ul>\n<li>树中每个节点最多包含m个孩子</li>\n<li>除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子</li>\n<li>若根节点不是叶子节点，则至少有两个孩子</li>\n<li>所有的叶子节点都在同一层</li>\n<li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>以5叉BTree为例，key的数量：公式推导[ceil(m/2)-1] &lt;= n &lt;= m-1。所以 2 &lt;= n &lt;=4 。当n&gt;4时，中间节点分裂到父节点，两边节点分裂</p>\n</blockquote>\n<blockquote>\n<p>BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快</p>\n</blockquote>\n<br>\n\n<h4 id=\"B-TREE-结构\"><a href=\"#B-TREE-结构\" class=\"headerlink\" title=\"B+TREE 结构\"></a>B+TREE 结构</h4><ul>\n<li>B+Tree为BTree的变种，B+Tree与BTree的区别为：<ul>\n<li>1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key</li>\n<li>2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列</li>\n<li>3). 所有的非叶子节点都可以看作是key的索引部分</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6jme7w6ntz40.webp\" width=\"80%\">\n\n<br>\n\n<ul>\n<li>由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定</li>\n</ul>\n<br>\n\n<h3 id=\"MySQL中的B-Tree\"><a href=\"#MySQL中的B-Tree\" class=\"headerlink\" title=\"MySQL中的B+Tree\"></a>MySQL中的B+Tree</h3><ul>\n<li>MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能</li>\n</ul>\n<ul>\n<li>MySQL中的 B+Tree 索引结构示意图:</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7bv4u1b5wk40.webp\" width=\"100%\">\n\n<br>\n\n<br>\n\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><ul>\n<li>1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引</li>\n<li>2） 唯一索引 ：索引列的值必须唯一，但允许有空值</li>\n<li>3） 复合索引 ：即一个索引包含多个列</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"索引语法\"><a href=\"#索引语法\" class=\"headerlink\" title=\"索引语法\"></a>索引语法</h3><ul>\n<li>索引在创建表的时候，可以同时创建， 也可以随时增加新的索引</li>\n</ul>\n<p>准备环境:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create databse demo_01 default charset=uft8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\">use demo_01;</span><br><span class=\"line\"></span><br><span class=\"line\">create table `city` (</span><br><span class=\"line\">\t`city_id` int(11) not null auto_increment,</span><br><span class=\"line\">    `city_name` varchar(50) not null,</span><br><span class=\"line\">    `country_id` int(11) not null,</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL高级课程简介\"><a href=\"#MySQL高级课程简介\" class=\"headerlink\" title=\"MySQL高级课程简介\"></a>MySQL高级课程简介</h1><table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th>Day01</th>\n<th>Day02</th>\n<th>Day03</th>\n<th>Day04</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td>Linux系统安装MySQL</td>\n<td>体系结构</td>\n<td>应用优化</td>\n<td>MySQL 常用工具</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td>索引</td>\n<td>存储引擎</td>\n<td>查询缓存优化</td>\n<td>MySQL 日志</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td>视图</td>\n<td>优化SQL步骤</td>\n<td>内存管理及优化</td>\n<td>MySQL 主从复制</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td>存储过程和函数</td>\n<td>索引使用</td>\n<td>MySQL锁问题</td>\n<td>综合案例</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td>触发器</td>\n<td>SQL优化</td>\n<td>常用SQL技巧</td>\n<td></td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Mysql高级-day01\"><a href=\"#Mysql高级-day01\" class=\"headerlink\" title=\"Mysql高级-day01\"></a>Mysql高级-day01</h1><h2 id=\"安装MySQL-5-6（rpm方式）\"><a href=\"#安装MySQL-5-6（rpm方式）\" class=\"headerlink\" title=\"安装MySQL 5.6（rpm方式）\"></a>安装MySQL 5.6（rpm方式）</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t1). 卸载 centos 中预安装的 mysql/mariadb,并删除相关文件</span></span><br><span class=\"line\">rpm -qa | grep -i mysql</span><br><span class=\"line\">rpm -e mysql-libs-5.1.71-1.el6.x86_64 --nodeps</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t2). 下载 mysql 的安装包</span></span><br><span class=\"line\">wget https://cdn.mysql.com/archives/mysql-5.6/MySQL-5.6.22-1.el7.x86_64.rpm-bundle.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t3). 解压 mysql 的安装包</span></span><br><span class=\"line\">tar -xvf MySQL-5.6.22-1.el7.x86_64.rpm-bundle.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t4). 安装依赖包</span></span><br><span class=\"line\">yum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6 libncurses.so.5 --setopt=protected_multilib=false autoconf net-tools</span><br><span class=\"line\">yum update libstdc++-4.4.7-4.el6.x86_64</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t5). 安装 mysql-client</span></span><br><span class=\"line\">rpm -ivh MySQL-client-5.6.22-1.el7.x86_64.rpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">\t6). 安装 mysql-server</span></span><br><span class=\"line\">rpm -ivh MySQL-server-5.6.22-1.el7.x86_64.rpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果安装过程中缺少依赖则安装相关依赖。若安装失败，可以卸载后，删除mysql有关的文件，再重新安装</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"启动-MySQL-服务\"><a href=\"#启动-MySQL-服务\" class=\"headerlink\" title=\"启动 MySQL 服务\"></a>启动 MySQL 服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql start</span><br><span class=\"line\">service mysql stop</span><br><span class=\"line\">service mysql status</span><br><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql 安装完成之后, 会自动生成一个随机的密码, 并且保存在一个密码文件中 : /root/.mysql_secret</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录之后, 修改密码 :</span></span><br><span class=\"line\">set password = password(&#x27;root&#x27;);</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">授权远程访问 :</span></span><br><span class=\"line\">grant all privileges on *.* to &#x27;root&#x27; @&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"索引概述\"><a href=\"#索引概述\" class=\"headerlink\" title=\"索引概述\"></a>索引概述</h3><ul>\n<li>MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6iks54eq7940.webp\" width=\"80%\">\n\n<br>\n\n<blockquote>\n<p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。</p>\n</blockquote>\n<blockquote>\n<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"索引优势劣势\"><a href=\"#索引优势劣势\" class=\"headerlink\" title=\"索引优势劣势\"></a>索引优势劣势</h3><ul>\n<li>优势<ul>\n<li>1） 类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本</li>\n<li>2） 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>\n</ul>\n</li>\n<li>劣势<ul>\n<li>1） 实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间</li>\n<li>2） 虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"索引结构\"><a href=\"#索引结构\" class=\"headerlink\" title=\"索引结构\"></a>索引结构</h3><ul>\n<li>索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：<ul>\n<li>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引</li>\n<li>HASH 索引：只有Memory引擎支持 ， 使用场景简单</li>\n<li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</li>\n<li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">索引</th>\n<th align=\"center\">InnoDB引擎</th>\n<th align=\"center\">MyISAM引擎</th>\n<th align=\"center\">Memory引擎</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">BTREE索引</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">HASH 索引</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">R-tree 索引</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">Full-text</td>\n<td align=\"center\">5.6版本之后支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n</tbody></table>\n<ul>\n<li>我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。</li>\n</ul>\n<br>\n\n<h4 id=\"BTREE-结构\"><a href=\"#BTREE-结构\" class=\"headerlink\" title=\"BTREE 结构\"></a>BTREE 结构</h4><ul>\n<li>BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：<ul>\n<li>树中每个节点最多包含m个孩子</li>\n<li>除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子</li>\n<li>若根节点不是叶子节点，则至少有两个孩子</li>\n<li>所有的叶子节点都在同一层</li>\n<li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>以5叉BTree为例，key的数量：公式推导[ceil(m/2)-1] &lt;= n &lt;= m-1。所以 2 &lt;= n &lt;=4 。当n&gt;4时，中间节点分裂到父节点，两边节点分裂</p>\n</blockquote>\n<blockquote>\n<p>BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快</p>\n</blockquote>\n<br>\n\n<h4 id=\"B-TREE-结构\"><a href=\"#B-TREE-结构\" class=\"headerlink\" title=\"B+TREE 结构\"></a>B+TREE 结构</h4><ul>\n<li>B+Tree为BTree的变种，B+Tree与BTree的区别为：<ul>\n<li>1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key</li>\n<li>2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列</li>\n<li>3). 所有的非叶子节点都可以看作是key的索引部分</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6jme7w6ntz40.webp\" width=\"80%\">\n\n<br>\n\n<ul>\n<li>由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定</li>\n</ul>\n<br>\n\n<h3 id=\"MySQL中的B-Tree\"><a href=\"#MySQL中的B-Tree\" class=\"headerlink\" title=\"MySQL中的B+Tree\"></a>MySQL中的B+Tree</h3><ul>\n<li>MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能</li>\n</ul>\n<ul>\n<li>MySQL中的 B+Tree 索引结构示意图:</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7bv4u1b5wk40.webp\" width=\"100%\">\n\n<br>\n\n<br>\n\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><ul>\n<li>1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引</li>\n<li>2） 唯一索引 ：索引列的值必须唯一，但允许有空值</li>\n<li>3） 复合索引 ：即一个索引包含多个列</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"索引语法\"><a href=\"#索引语法\" class=\"headerlink\" title=\"索引语法\"></a>索引语法</h3><ul>\n<li>索引在创建表的时候，可以同时创建， 也可以随时增加新的索引</li>\n</ul>\n<p>准备环境:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create databse demo_01 default charset=uft8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\">use demo_01;</span><br><span class=\"line\"></span><br><span class=\"line\">create table `city` (</span><br><span class=\"line\">\t`city_id` int(11) not null auto_increment,</span><br><span class=\"line\">    `city_name` varchar(50) not null,</span><br><span class=\"line\">    `country_id` int(11) not null,</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>"},{"title":"Git","author":"sonzonzy","date":"2022-06-21T16:36:47.000Z","updated":"2022-06-21T16:36:47.000Z","_content":"\n# 学习备注\n\n> 1、要清楚执行每个git命令后 提示信息表达的意思，不会的单词要记忆，写在这个文档里面\n\n# 版本控制系统\n\n## 什么是版本控制系统\n\n- 版本控制系统是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统\n\n## 为什么要使用版本控制\n\n- 软件开发中采用版本控制系统是个明智的选择\n- 有了它你就可以将某个文件回溯到之前的状态,甚至将整个项目都回退到过去某个时间点的状态\n- 就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子\n- 你可以比较文件的变化细节,查出最后是谁修改了哪个地方,从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等\n- 但额外增加的工作量却微乎其微\n\n## 版本管理的演变\n\n- VCS 出现前\n  - 用目录拷贝区别不不同版本\n  - 公共文件容易易被覆盖\n  - 成员沟通成本很高，代码集成效率低下\n- 集中式 VCS\n  - 有集中的版本管理服务器\n  - 具备文件版本管理和分支管理能力\n  - 集成效率有明显地提高\n  - 客户端必须时刻和服务器相连\n- 分布式 VCS\n  - 服务端和客户端都有完整的版本库\n  - 脱离服务端，客户端照样可以管理理版本\n  - 查看历史和版本比较等多数操作，都不不需要访问服务器器，比集中式 VCS 更更能提⾼高版本管理理效率\n\n## 版本控制系统的分类\n\n### 集中化的版本控制系统\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp\" width=\"60%\" >\n\n> 集中化的版本控制系统诸如CVS, SVN 以及Perforce 等，都有一个单一的集中管理的服务器,保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器,取出最新的文件或者提交更新。多年以来,这已成为版本控制系统的标准做法,这种做法带来了许多好处,现在,每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统;要远比在各个客户端上维护本地数据库来得轻松容易。\n>\n> 事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的**单点故障**。如果服务器宕机一小时，那么在这一小时内， 谁都无法提交更新，也就无法协同工作\n\n\n\n### 分布式的版本控制系统\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp\" width=\"60%\" >\n\n- 由于上面集中化版本控制系统的那些缺点，于是分布式版本控制系统面世了\n- 在这类系统中，像Git, BitKeeper 等,**客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来**\n- 许多这类系统都可以指定和**若干不同的远端代码仓库进行交互**。这样，你就可以在同一个项目中分别和不同工作小组的人相互协作\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.2ip2z3escfc0.webp\" width=\"65%\" >\n\n- 分布式的版本控制系统在管理项目时存放的不是项目版本与版本之间的差异.它存的是索引(所需磁盘空间很少所以每个客户端都可以放下整个\n  项目的历史记录)\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.55w0uw51yhs0.webp\" width=\"65%\" >\n\n## 版本控制系统的存储方式\n\n- 世界上的版本控制总共有两种存储方式，一种是存储差异，另一种是存储快照\n- 存储差异：存储base文件，以后每次存储base文件的更改，SVN就是这种方式\n- 存储快照：每次更改都存储一个新文件，Git是这种方式\n\n# Git 基础\n\n## 概念\n\n- Git是一个<font color=#008000>免费的</font>、<font color=#008000>开源的</font><font color=#008000>**分布式**</font><font color=red>版本控制系统</font>，可以快速高效地管理从小型到大型的项目\n\n## Git 简史\n\n- Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。\n\n- 到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标\n\n## Git 的使命 / 目标\n\nGit在设计之初就是为了搞定linux内核这种巨无霸而设计的，所以制定了自己的使命\n\n- 速度\n- 简单的设计\n- 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）\n- 完全分布式\n- 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）\n\n## Git 的优点 / 特点\n\n- 快、非凡的性能\n- 本地仓库\n- 轻量级分支\n- 分布式\n- 各种工作流\n- 最优的存储能力\n- 开源的\n- 很容易易做备份\n- 支持离线操作\n- 很容易易定制工作流程\n\n## Git 的结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.1756qy15ac5c.webp\" width=\"60%\" >\n\n## Git 的交互方式\n\n### 代码托管中心是干嘛的\n\n- 我们已经有了本地库，本地库可以帮我们进行版本控制，为什么还需要代码托管中心呢？\n  它的任务是帮我们维护远程库\n\n### 本地库和远程库的交互方式\n\n#### 团队内部协作\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6ia1ri43p640.webp\" >\n\n#### 跨团队协作\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.n89r9sjz3gw.webp\" >\n\n### 托管中心种类\n\n- 局域网环境下：可以搭建 GitLab服务器作为代码托管中心，GitLab可以自己去搭建\n- 外网环境下：可以由GitHub或者Gitee作为代码托管中心，GitHub或者Gitee是现成的托管中心，不用自己去搭建 \n\n## Git 的下载安装 / 基本设置\n\n- 下载安装略（官网下载，一般情况傻瓜式安装即可）\n- 查看git安装版本（是否安装成功）\n\n```bash\ngit --version\n```\n\n### 基本设置\n\n- 配置`user.name`和`user.email`\n\n```bash\ngit config --global  user.name 'sonzonzy'\ngit config --global  user.email 'sonzonzy@gmail.com'\n```\n\n### config 的三个作用域\n\n- 缺省等同于 local\n- 优先级：local > global > system\n\n```bash\n# local只对当前仓库有效\ngit config --local\n\n# global 对当前登录用户所有仓库有效\ngit config --global\n\n# system 对系统的所有用户有效\ngit config --system\n```\n\n### 显示 config 的配置\n\n```bash\ngit config --list --local\ngit config --list --global\ngit config --list --system\n```\n\n### 信息设置与清除\n\n- 设置\t缺省等同于 local\n\n```bash\ngit config --local user.name \"ratears\"\ngit config --global user.name \"ratears\"\ngit config --system user.name \"ratears\"\n```\n\n- 清除\t--unset\n\n```bash\ngit config --unset --local user.name\ngit config --unset --global user.name\ngit config --unset --system user.name\n```\n\n# Git 常用命令 & 操作\n\n## init / 初始化本地仓库\n\n```bash\n# 在git终端进入到本地的文件夹 （例如 $ cd D:\\dev\\git_ws\\git_demo） 执行如下命令\n#初始化本地仓库，只能初始化本地仓库\ngit init\n```\n\n## add / 添加到暂存区\n\n```bash\ngit add .\n```\n\n## commit / 提交到本地仓库\n\n```bash\n# 把暂存区的 文件提交到本地仓库。-m\"message\" 后的双引号 填写该次提交的说明信息\ngit commit -m\"add test1.txt\"\n```\n\n- 注意事项\n\n  - 不放在本地仓库中的文件，git是不进行管理\n\n  - 即使放在本地仓库的文件，git也不管理，必须通过add,commit命令操作才可以将内容提交到本地库\n\n## status / 查看工作区和暂存区的状态\n\n```bash\ngit status\n```\n\n## mv / 重命名暂存区的文件\n\n- 方式一\n\n```bash\nmv readme readme.md\ngit rm readme\ngit add readme.md\ngit commit -m\"rename file\"\n```\n\n- 方式二\n\n```bash\ngit mv readme readme.md\ngit commit -m'file name'\n```\n\n## log / 查看提交日志\n\n```bash\n# 可以让我们查看提交的，显示从最近到最远的日志\ngit log -n[number] --graph --online --all/[branch_name]\n# -n 指定查看条数\n# --graph 图形化查看\n# --online 简单显示\n# --all 显示所有分支，不加则显示当前分支\n# branch_name 指定分支\n\ngit log --pretty=oneline\n\ngit reflog\n# 多了信息：HEAD@{数字} 这个数字的含义：指针回到当前这个历史版本需要走多少步\n\n```\n\n```bash\n# 在浏览器打开git log 的帮助文档\ngit help --web log\n```\n\n## gitk / git 的gui界面\n\n```bash\n# 打开git的gui界面\ngitk\n```\n\n## rest / 前进或者后退历史版本\n\n### hard 参数\n\n```bash\n# 本地库的指针移动的同时，重置暂存区，重置工作区\ngit reset --hard [索引]\n```\n\n### mixed参数\n\n```bash\n# 本地库的指针移动的同时，重置暂存区，但是工作区不动\ngit reset --mixed [索引]\n```\n\n### soft参数\n\n```bash\n# 本地库的指针移动的时候，暂存区，工作区都不动\ngit reset --soft [索引]\n```\n\n## diff \n\n```bash\n# 将工作区中的文件和暂存区中文件进行比较 \ngit diff [文件名]  \n\n# 比较工作区中和暂存区中 所有文件的差异\ngit diff\n\n# 比较暂存区和工作区中内容\ngit diff [历史版本] [文件名] \n```\n\n# 分支\n\n","source":"_posts/2022/Git.md","raw":"---\ntitle: Git\nauthor: sonzonzy\ndate: 2022-06-22 00:36:47\nupdated: 2022-06-22 00:36:47\ncategories:\n  - git\ntags:\n  - git\n---\n\n# 学习备注\n\n> 1、要清楚执行每个git命令后 提示信息表达的意思，不会的单词要记忆，写在这个文档里面\n\n# 版本控制系统\n\n## 什么是版本控制系统\n\n- 版本控制系统是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统\n\n## 为什么要使用版本控制\n\n- 软件开发中采用版本控制系统是个明智的选择\n- 有了它你就可以将某个文件回溯到之前的状态,甚至将整个项目都回退到过去某个时间点的状态\n- 就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子\n- 你可以比较文件的变化细节,查出最后是谁修改了哪个地方,从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等\n- 但额外增加的工作量却微乎其微\n\n## 版本管理的演变\n\n- VCS 出现前\n  - 用目录拷贝区别不不同版本\n  - 公共文件容易易被覆盖\n  - 成员沟通成本很高，代码集成效率低下\n- 集中式 VCS\n  - 有集中的版本管理服务器\n  - 具备文件版本管理和分支管理能力\n  - 集成效率有明显地提高\n  - 客户端必须时刻和服务器相连\n- 分布式 VCS\n  - 服务端和客户端都有完整的版本库\n  - 脱离服务端，客户端照样可以管理理版本\n  - 查看历史和版本比较等多数操作，都不不需要访问服务器器，比集中式 VCS 更更能提⾼高版本管理理效率\n\n## 版本控制系统的分类\n\n### 集中化的版本控制系统\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp\" width=\"60%\" >\n\n> 集中化的版本控制系统诸如CVS, SVN 以及Perforce 等，都有一个单一的集中管理的服务器,保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器,取出最新的文件或者提交更新。多年以来,这已成为版本控制系统的标准做法,这种做法带来了许多好处,现在,每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统;要远比在各个客户端上维护本地数据库来得轻松容易。\n>\n> 事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的**单点故障**。如果服务器宕机一小时，那么在这一小时内， 谁都无法提交更新，也就无法协同工作\n\n\n\n### 分布式的版本控制系统\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp\" width=\"60%\" >\n\n- 由于上面集中化版本控制系统的那些缺点，于是分布式版本控制系统面世了\n- 在这类系统中，像Git, BitKeeper 等,**客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来**\n- 许多这类系统都可以指定和**若干不同的远端代码仓库进行交互**。这样，你就可以在同一个项目中分别和不同工作小组的人相互协作\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.2ip2z3escfc0.webp\" width=\"65%\" >\n\n- 分布式的版本控制系统在管理项目时存放的不是项目版本与版本之间的差异.它存的是索引(所需磁盘空间很少所以每个客户端都可以放下整个\n  项目的历史记录)\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.55w0uw51yhs0.webp\" width=\"65%\" >\n\n## 版本控制系统的存储方式\n\n- 世界上的版本控制总共有两种存储方式，一种是存储差异，另一种是存储快照\n- 存储差异：存储base文件，以后每次存储base文件的更改，SVN就是这种方式\n- 存储快照：每次更改都存储一个新文件，Git是这种方式\n\n# Git 基础\n\n## 概念\n\n- Git是一个<font color=#008000>免费的</font>、<font color=#008000>开源的</font><font color=#008000>**分布式**</font><font color=red>版本控制系统</font>，可以快速高效地管理从小型到大型的项目\n\n## Git 简史\n\n- Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。\n\n- 到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标\n\n## Git 的使命 / 目标\n\nGit在设计之初就是为了搞定linux内核这种巨无霸而设计的，所以制定了自己的使命\n\n- 速度\n- 简单的设计\n- 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）\n- 完全分布式\n- 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）\n\n## Git 的优点 / 特点\n\n- 快、非凡的性能\n- 本地仓库\n- 轻量级分支\n- 分布式\n- 各种工作流\n- 最优的存储能力\n- 开源的\n- 很容易易做备份\n- 支持离线操作\n- 很容易易定制工作流程\n\n## Git 的结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.1756qy15ac5c.webp\" width=\"60%\" >\n\n## Git 的交互方式\n\n### 代码托管中心是干嘛的\n\n- 我们已经有了本地库，本地库可以帮我们进行版本控制，为什么还需要代码托管中心呢？\n  它的任务是帮我们维护远程库\n\n### 本地库和远程库的交互方式\n\n#### 团队内部协作\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6ia1ri43p640.webp\" >\n\n#### 跨团队协作\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.n89r9sjz3gw.webp\" >\n\n### 托管中心种类\n\n- 局域网环境下：可以搭建 GitLab服务器作为代码托管中心，GitLab可以自己去搭建\n- 外网环境下：可以由GitHub或者Gitee作为代码托管中心，GitHub或者Gitee是现成的托管中心，不用自己去搭建 \n\n## Git 的下载安装 / 基本设置\n\n- 下载安装略（官网下载，一般情况傻瓜式安装即可）\n- 查看git安装版本（是否安装成功）\n\n```bash\ngit --version\n```\n\n### 基本设置\n\n- 配置`user.name`和`user.email`\n\n```bash\ngit config --global  user.name 'sonzonzy'\ngit config --global  user.email 'sonzonzy@gmail.com'\n```\n\n### config 的三个作用域\n\n- 缺省等同于 local\n- 优先级：local > global > system\n\n```bash\n# local只对当前仓库有效\ngit config --local\n\n# global 对当前登录用户所有仓库有效\ngit config --global\n\n# system 对系统的所有用户有效\ngit config --system\n```\n\n### 显示 config 的配置\n\n```bash\ngit config --list --local\ngit config --list --global\ngit config --list --system\n```\n\n### 信息设置与清除\n\n- 设置\t缺省等同于 local\n\n```bash\ngit config --local user.name \"ratears\"\ngit config --global user.name \"ratears\"\ngit config --system user.name \"ratears\"\n```\n\n- 清除\t--unset\n\n```bash\ngit config --unset --local user.name\ngit config --unset --global user.name\ngit config --unset --system user.name\n```\n\n# Git 常用命令 & 操作\n\n## init / 初始化本地仓库\n\n```bash\n# 在git终端进入到本地的文件夹 （例如 $ cd D:\\dev\\git_ws\\git_demo） 执行如下命令\n#初始化本地仓库，只能初始化本地仓库\ngit init\n```\n\n## add / 添加到暂存区\n\n```bash\ngit add .\n```\n\n## commit / 提交到本地仓库\n\n```bash\n# 把暂存区的 文件提交到本地仓库。-m\"message\" 后的双引号 填写该次提交的说明信息\ngit commit -m\"add test1.txt\"\n```\n\n- 注意事项\n\n  - 不放在本地仓库中的文件，git是不进行管理\n\n  - 即使放在本地仓库的文件，git也不管理，必须通过add,commit命令操作才可以将内容提交到本地库\n\n## status / 查看工作区和暂存区的状态\n\n```bash\ngit status\n```\n\n## mv / 重命名暂存区的文件\n\n- 方式一\n\n```bash\nmv readme readme.md\ngit rm readme\ngit add readme.md\ngit commit -m\"rename file\"\n```\n\n- 方式二\n\n```bash\ngit mv readme readme.md\ngit commit -m'file name'\n```\n\n## log / 查看提交日志\n\n```bash\n# 可以让我们查看提交的，显示从最近到最远的日志\ngit log -n[number] --graph --online --all/[branch_name]\n# -n 指定查看条数\n# --graph 图形化查看\n# --online 简单显示\n# --all 显示所有分支，不加则显示当前分支\n# branch_name 指定分支\n\ngit log --pretty=oneline\n\ngit reflog\n# 多了信息：HEAD@{数字} 这个数字的含义：指针回到当前这个历史版本需要走多少步\n\n```\n\n```bash\n# 在浏览器打开git log 的帮助文档\ngit help --web log\n```\n\n## gitk / git 的gui界面\n\n```bash\n# 打开git的gui界面\ngitk\n```\n\n## rest / 前进或者后退历史版本\n\n### hard 参数\n\n```bash\n# 本地库的指针移动的同时，重置暂存区，重置工作区\ngit reset --hard [索引]\n```\n\n### mixed参数\n\n```bash\n# 本地库的指针移动的同时，重置暂存区，但是工作区不动\ngit reset --mixed [索引]\n```\n\n### soft参数\n\n```bash\n# 本地库的指针移动的时候，暂存区，工作区都不动\ngit reset --soft [索引]\n```\n\n## diff \n\n```bash\n# 将工作区中的文件和暂存区中文件进行比较 \ngit diff [文件名]  \n\n# 比较工作区中和暂存区中 所有文件的差异\ngit diff\n\n# 比较暂存区和工作区中内容\ngit diff [历史版本] [文件名] \n```\n\n# 分支\n\n","slug":"Git","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsn00006dcta8apj6zxx","content":"<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1、要清楚执行每个git命令后 提示信息表达的意思，不会的单词要记忆，写在这个文档里面</p>\n</blockquote>\n<h1 id=\"版本控制系统\"><a href=\"#版本控制系统\" class=\"headerlink\" title=\"版本控制系统\"></a>版本控制系统</h1><h2 id=\"什么是版本控制系统\"><a href=\"#什么是版本控制系统\" class=\"headerlink\" title=\"什么是版本控制系统\"></a>什么是版本控制系统</h2><ul>\n<li>版本控制系统是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统</li>\n</ul>\n<h2 id=\"为什么要使用版本控制\"><a href=\"#为什么要使用版本控制\" class=\"headerlink\" title=\"为什么要使用版本控制\"></a>为什么要使用版本控制</h2><ul>\n<li>软件开发中采用版本控制系统是个明智的选择</li>\n<li>有了它你就可以将某个文件回溯到之前的状态,甚至将整个项目都回退到过去某个时间点的状态</li>\n<li>就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子</li>\n<li>你可以比较文件的变化细节,查出最后是谁修改了哪个地方,从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等</li>\n<li>但额外增加的工作量却微乎其微</li>\n</ul>\n<h2 id=\"版本管理的演变\"><a href=\"#版本管理的演变\" class=\"headerlink\" title=\"版本管理的演变\"></a>版本管理的演变</h2><ul>\n<li>VCS 出现前<ul>\n<li>用目录拷贝区别不不同版本</li>\n<li>公共文件容易易被覆盖</li>\n<li>成员沟通成本很高，代码集成效率低下</li>\n</ul>\n</li>\n<li>集中式 VCS<ul>\n<li>有集中的版本管理服务器</li>\n<li>具备文件版本管理和分支管理能力</li>\n<li>集成效率有明显地提高</li>\n<li>客户端必须时刻和服务器相连</li>\n</ul>\n</li>\n<li>分布式 VCS<ul>\n<li>服务端和客户端都有完整的版本库</li>\n<li>脱离服务端，客户端照样可以管理理版本</li>\n<li>查看历史和版本比较等多数操作，都不不需要访问服务器器，比集中式 VCS 更更能提⾼高版本管理理效率</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"版本控制系统的分类\"><a href=\"#版本控制系统的分类\" class=\"headerlink\" title=\"版本控制系统的分类\"></a>版本控制系统的分类</h2><h3 id=\"集中化的版本控制系统\"><a href=\"#集中化的版本控制系统\" class=\"headerlink\" title=\"集中化的版本控制系统\"></a>集中化的版本控制系统</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp\" width=\"60%\" >\n\n<blockquote>\n<p>集中化的版本控制系统诸如CVS, SVN 以及Perforce 等，都有一个单一的集中管理的服务器,保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器,取出最新的文件或者提交更新。多年以来,这已成为版本控制系统的标准做法,这种做法带来了许多好处,现在,每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统;要远比在各个客户端上维护本地数据库来得轻松容易。</p>\n<p>事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的<strong>单点故障</strong>。如果服务器宕机一小时，那么在这一小时内， 谁都无法提交更新，也就无法协同工作</p>\n</blockquote>\n<h3 id=\"分布式的版本控制系统\"><a href=\"#分布式的版本控制系统\" class=\"headerlink\" title=\"分布式的版本控制系统\"></a>分布式的版本控制系统</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp\" width=\"60%\" >\n\n<ul>\n<li>由于上面集中化版本控制系统的那些缺点，于是分布式版本控制系统面世了</li>\n<li>在这类系统中，像Git, BitKeeper 等,<strong>客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来</strong></li>\n<li>许多这类系统都可以指定和<strong>若干不同的远端代码仓库进行交互</strong>。这样，你就可以在同一个项目中分别和不同工作小组的人相互协作</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.2ip2z3escfc0.webp\" width=\"65%\" >\n\n<ul>\n<li>分布式的版本控制系统在管理项目时存放的不是项目版本与版本之间的差异.它存的是索引(所需磁盘空间很少所以每个客户端都可以放下整个<br>项目的历史记录)</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.55w0uw51yhs0.webp\" width=\"65%\" >\n\n<h2 id=\"版本控制系统的存储方式\"><a href=\"#版本控制系统的存储方式\" class=\"headerlink\" title=\"版本控制系统的存储方式\"></a>版本控制系统的存储方式</h2><ul>\n<li>世界上的版本控制总共有两种存储方式，一种是存储差异，另一种是存储快照</li>\n<li>存储差异：存储base文件，以后每次存储base文件的更改，SVN就是这种方式</li>\n<li>存储快照：每次更改都存储一个新文件，Git是这种方式</li>\n</ul>\n<h1 id=\"Git-基础\"><a href=\"#Git-基础\" class=\"headerlink\" title=\"Git 基础\"></a>Git 基础</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>Git是一个<font color=#008000>免费的</font>、<font color=#008000>开源的</font><font color=#008000><strong>分布式</strong></font><font color=red>版本控制系统</font>，可以快速高效地管理从小型到大型的项目</li>\n</ul>\n<h2 id=\"Git-简史\"><a href=\"#Git-简史\" class=\"headerlink\" title=\"Git 简史\"></a>Git 简史</h2><ul>\n<li><p>Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p>\n</li>\n<li><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标</p>\n</li>\n</ul>\n<h2 id=\"Git-的使命-目标\"><a href=\"#Git-的使命-目标\" class=\"headerlink\" title=\"Git 的使命 / 目标\"></a>Git 的使命 / 目标</h2><p>Git在设计之初就是为了搞定linux内核这种巨无霸而设计的，所以制定了自己的使命</p>\n<ul>\n<li>速度</li>\n<li>简单的设计</li>\n<li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li>\n<li>完全分布式</li>\n<li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li>\n</ul>\n<h2 id=\"Git-的优点-特点\"><a href=\"#Git-的优点-特点\" class=\"headerlink\" title=\"Git 的优点 / 特点\"></a>Git 的优点 / 特点</h2><ul>\n<li>快、非凡的性能</li>\n<li>本地仓库</li>\n<li>轻量级分支</li>\n<li>分布式</li>\n<li>各种工作流</li>\n<li>最优的存储能力</li>\n<li>开源的</li>\n<li>很容易易做备份</li>\n<li>支持离线操作</li>\n<li>很容易易定制工作流程</li>\n</ul>\n<h2 id=\"Git-的结构\"><a href=\"#Git-的结构\" class=\"headerlink\" title=\"Git 的结构\"></a>Git 的结构</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.1756qy15ac5c.webp\" width=\"60%\" >\n\n<h2 id=\"Git-的交互方式\"><a href=\"#Git-的交互方式\" class=\"headerlink\" title=\"Git 的交互方式\"></a>Git 的交互方式</h2><h3 id=\"代码托管中心是干嘛的\"><a href=\"#代码托管中心是干嘛的\" class=\"headerlink\" title=\"代码托管中心是干嘛的\"></a>代码托管中心是干嘛的</h3><ul>\n<li>我们已经有了本地库，本地库可以帮我们进行版本控制，为什么还需要代码托管中心呢？<br>它的任务是帮我们维护远程库</li>\n</ul>\n<h3 id=\"本地库和远程库的交互方式\"><a href=\"#本地库和远程库的交互方式\" class=\"headerlink\" title=\"本地库和远程库的交互方式\"></a>本地库和远程库的交互方式</h3><h4 id=\"团队内部协作\"><a href=\"#团队内部协作\" class=\"headerlink\" title=\"团队内部协作\"></a>团队内部协作</h4><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6ia1ri43p640.webp\" >\n\n<h4 id=\"跨团队协作\"><a href=\"#跨团队协作\" class=\"headerlink\" title=\"跨团队协作\"></a>跨团队协作</h4><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.n89r9sjz3gw.webp\" >\n\n<h3 id=\"托管中心种类\"><a href=\"#托管中心种类\" class=\"headerlink\" title=\"托管中心种类\"></a>托管中心种类</h3><ul>\n<li>局域网环境下：可以搭建 GitLab服务器作为代码托管中心，GitLab可以自己去搭建</li>\n<li>外网环境下：可以由GitHub或者Gitee作为代码托管中心，GitHub或者Gitee是现成的托管中心，不用自己去搭建 </li>\n</ul>\n<h2 id=\"Git-的下载安装-基本设置\"><a href=\"#Git-的下载安装-基本设置\" class=\"headerlink\" title=\"Git 的下载安装 / 基本设置\"></a>Git 的下载安装 / 基本设置</h2><ul>\n<li>下载安装略（官网下载，一般情况傻瓜式安装即可）</li>\n<li>查看git安装版本（是否安装成功）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h3><ul>\n<li>配置<code>user.name</code>和<code>user.email</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global  user.name <span class=\"string\">&#x27;sonzonzy&#x27;</span></span><br><span class=\"line\">git config --global  user.email <span class=\"string\">&#x27;sonzonzy@gmail.com&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"config-的三个作用域\"><a href=\"#config-的三个作用域\" class=\"headerlink\" title=\"config 的三个作用域\"></a>config 的三个作用域</h3><ul>\n<li>缺省等同于 local</li>\n<li>优先级：local &gt; global &gt; system</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># local只对当前仓库有效</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># global 对当前登录用户所有仓库有效</span></span><br><span class=\"line\">git config --global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># system 对系统的所有用户有效</span></span><br><span class=\"line\">git config --system</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显示-config-的配置\"><a href=\"#显示-config-的配置\" class=\"headerlink\" title=\"显示 config 的配置\"></a>显示 config 的配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --<span class=\"built_in\">local</span></span><br><span class=\"line\">git config --list --global</span><br><span class=\"line\">git config --list --system</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"信息设置与清除\"><a href=\"#信息设置与清除\" class=\"headerlink\" title=\"信息设置与清除\"></a>信息设置与清除</h3><ul>\n<li>设置    缺省等同于 local</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">local</span> user.name <span class=\"string\">&quot;ratears&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;ratears&quot;</span></span><br><span class=\"line\">git config --system user.name <span class=\"string\">&quot;ratears&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清除    –unset</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">unset</span> --<span class=\"built_in\">local</span> user.name</span><br><span class=\"line\">git config --<span class=\"built_in\">unset</span> --global user.name</span><br><span class=\"line\">git config --<span class=\"built_in\">unset</span> --system user.name</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Git-常用命令-amp-操作\"><a href=\"#Git-常用命令-amp-操作\" class=\"headerlink\" title=\"Git 常用命令 &amp; 操作\"></a>Git 常用命令 &amp; 操作</h1><h2 id=\"init-初始化本地仓库\"><a href=\"#init-初始化本地仓库\" class=\"headerlink\" title=\"init / 初始化本地仓库\"></a>init / 初始化本地仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在git终端进入到本地的文件夹 （例如 $ cd D:\\dev\\git_ws\\git_demo） 执行如下命令</span></span><br><span class=\"line\"><span class=\"comment\">#初始化本地仓库，只能初始化本地仓库</span></span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"add-添加到暂存区\"><a href=\"#add-添加到暂存区\" class=\"headerlink\" title=\"add / 添加到暂存区\"></a>add / 添加到暂存区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"commit-提交到本地仓库\"><a href=\"#commit-提交到本地仓库\" class=\"headerlink\" title=\"commit / 提交到本地仓库\"></a>commit / 提交到本地仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把暂存区的 文件提交到本地仓库。-m&quot;message&quot; 后的双引号 填写该次提交的说明信息</span></span><br><span class=\"line\">git commit -m<span class=\"string\">&quot;add test1.txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>注意事项</p>\n<ul>\n<li><p>不放在本地仓库中的文件，git是不进行管理</p>\n</li>\n<li><p>即使放在本地仓库的文件，git也不管理，必须通过add,commit命令操作才可以将内容提交到本地库</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"status-查看工作区和暂存区的状态\"><a href=\"#status-查看工作区和暂存区的状态\" class=\"headerlink\" title=\"status / 查看工作区和暂存区的状态\"></a>status / 查看工作区和暂存区的状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mv-重命名暂存区的文件\"><a href=\"#mv-重命名暂存区的文件\" class=\"headerlink\" title=\"mv / 重命名暂存区的文件\"></a>mv / 重命名暂存区的文件</h2><ul>\n<li>方式一</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> readme readme.md</span><br><span class=\"line\">git <span class=\"built_in\">rm</span> readme</span><br><span class=\"line\">git add readme.md</span><br><span class=\"line\">git commit -m<span class=\"string\">&quot;rename file&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式二</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> readme readme.md</span><br><span class=\"line\">git commit -m<span class=\"string\">&#x27;file name&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"log-查看提交日志\"><a href=\"#log-查看提交日志\" class=\"headerlink\" title=\"log / 查看提交日志\"></a>log / 查看提交日志</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以让我们查看提交的，显示从最近到最远的日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -n[number] --graph --online --all/[branch_name]</span><br><span class=\"line\"><span class=\"comment\"># -n 指定查看条数</span></span><br><span class=\"line\"><span class=\"comment\"># --graph 图形化查看</span></span><br><span class=\"line\"><span class=\"comment\"># --online 简单显示</span></span><br><span class=\"line\"><span class=\"comment\"># --all 显示所有分支，不加则显示当前分支</span></span><br><span class=\"line\"><span class=\"comment\"># branch_name 指定分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\"></span><br><span class=\"line\">git reflog</span><br><span class=\"line\"><span class=\"comment\"># 多了信息：HEAD@&#123;数字&#125; 这个数字的含义：指针回到当前这个历史版本需要走多少步</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在浏览器打开git log 的帮助文档</span></span><br><span class=\"line\">git <span class=\"built_in\">help</span> --web <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gitk-git-的gui界面\"><a href=\"#gitk-git-的gui界面\" class=\"headerlink\" title=\"gitk / git 的gui界面\"></a>gitk / git 的gui界面</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开git的gui界面</span></span><br><span class=\"line\">gitk</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rest-前进或者后退历史版本\"><a href=\"#rest-前进或者后退历史版本\" class=\"headerlink\" title=\"rest / 前进或者后退历史版本\"></a>rest / 前进或者后退历史版本</h2><h3 id=\"hard-参数\"><a href=\"#hard-参数\" class=\"headerlink\" title=\"hard 参数\"></a>hard 参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地库的指针移动的同时，重置暂存区，重置工作区</span></span><br><span class=\"line\">git reset --hard [索引]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mixed参数\"><a href=\"#mixed参数\" class=\"headerlink\" title=\"mixed参数\"></a>mixed参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地库的指针移动的同时，重置暂存区，但是工作区不动</span></span><br><span class=\"line\">git reset --mixed [索引]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"soft参数\"><a href=\"#soft参数\" class=\"headerlink\" title=\"soft参数\"></a>soft参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地库的指针移动的时候，暂存区，工作区都不动</span></span><br><span class=\"line\">git reset --soft [索引]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将工作区中的文件和暂存区中文件进行比较 </span></span><br><span class=\"line\">git diff [文件名]  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较工作区中和暂存区中 所有文件的差异</span></span><br><span class=\"line\">git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较暂存区和工作区中内容</span></span><br><span class=\"line\">git diff [历史版本] [文件名] </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1、要清楚执行每个git命令后 提示信息表达的意思，不会的单词要记忆，写在这个文档里面</p>\n</blockquote>\n<h1 id=\"版本控制系统\"><a href=\"#版本控制系统\" class=\"headerlink\" title=\"版本控制系统\"></a>版本控制系统</h1><h2 id=\"什么是版本控制系统\"><a href=\"#什么是版本控制系统\" class=\"headerlink\" title=\"什么是版本控制系统\"></a>什么是版本控制系统</h2><ul>\n<li>版本控制系统是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统</li>\n</ul>\n<h2 id=\"为什么要使用版本控制\"><a href=\"#为什么要使用版本控制\" class=\"headerlink\" title=\"为什么要使用版本控制\"></a>为什么要使用版本控制</h2><ul>\n<li>软件开发中采用版本控制系统是个明智的选择</li>\n<li>有了它你就可以将某个文件回溯到之前的状态,甚至将整个项目都回退到过去某个时间点的状态</li>\n<li>就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子</li>\n<li>你可以比较文件的变化细节,查出最后是谁修改了哪个地方,从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等</li>\n<li>但额外增加的工作量却微乎其微</li>\n</ul>\n<h2 id=\"版本管理的演变\"><a href=\"#版本管理的演变\" class=\"headerlink\" title=\"版本管理的演变\"></a>版本管理的演变</h2><ul>\n<li>VCS 出现前<ul>\n<li>用目录拷贝区别不不同版本</li>\n<li>公共文件容易易被覆盖</li>\n<li>成员沟通成本很高，代码集成效率低下</li>\n</ul>\n</li>\n<li>集中式 VCS<ul>\n<li>有集中的版本管理服务器</li>\n<li>具备文件版本管理和分支管理能力</li>\n<li>集成效率有明显地提高</li>\n<li>客户端必须时刻和服务器相连</li>\n</ul>\n</li>\n<li>分布式 VCS<ul>\n<li>服务端和客户端都有完整的版本库</li>\n<li>脱离服务端，客户端照样可以管理理版本</li>\n<li>查看历史和版本比较等多数操作，都不不需要访问服务器器，比集中式 VCS 更更能提⾼高版本管理理效率</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"版本控制系统的分类\"><a href=\"#版本控制系统的分类\" class=\"headerlink\" title=\"版本控制系统的分类\"></a>版本控制系统的分类</h2><h3 id=\"集中化的版本控制系统\"><a href=\"#集中化的版本控制系统\" class=\"headerlink\" title=\"集中化的版本控制系统\"></a>集中化的版本控制系统</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp\" width=\"60%\" >\n\n<blockquote>\n<p>集中化的版本控制系统诸如CVS, SVN 以及Perforce 等，都有一个单一的集中管理的服务器,保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器,取出最新的文件或者提交更新。多年以来,这已成为版本控制系统的标准做法,这种做法带来了许多好处,现在,每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统;要远比在各个客户端上维护本地数据库来得轻松容易。</p>\n<p>事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的<strong>单点故障</strong>。如果服务器宕机一小时，那么在这一小时内， 谁都无法提交更新，也就无法协同工作</p>\n</blockquote>\n<h3 id=\"分布式的版本控制系统\"><a href=\"#分布式的版本控制系统\" class=\"headerlink\" title=\"分布式的版本控制系统\"></a>分布式的版本控制系统</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4l3axedwasg0.webp\" width=\"60%\" >\n\n<ul>\n<li>由于上面集中化版本控制系统的那些缺点，于是分布式版本控制系统面世了</li>\n<li>在这类系统中，像Git, BitKeeper 等,<strong>客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来</strong></li>\n<li>许多这类系统都可以指定和<strong>若干不同的远端代码仓库进行交互</strong>。这样，你就可以在同一个项目中分别和不同工作小组的人相互协作</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.2ip2z3escfc0.webp\" width=\"65%\" >\n\n<ul>\n<li>分布式的版本控制系统在管理项目时存放的不是项目版本与版本之间的差异.它存的是索引(所需磁盘空间很少所以每个客户端都可以放下整个<br>项目的历史记录)</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.55w0uw51yhs0.webp\" width=\"65%\" >\n\n<h2 id=\"版本控制系统的存储方式\"><a href=\"#版本控制系统的存储方式\" class=\"headerlink\" title=\"版本控制系统的存储方式\"></a>版本控制系统的存储方式</h2><ul>\n<li>世界上的版本控制总共有两种存储方式，一种是存储差异，另一种是存储快照</li>\n<li>存储差异：存储base文件，以后每次存储base文件的更改，SVN就是这种方式</li>\n<li>存储快照：每次更改都存储一个新文件，Git是这种方式</li>\n</ul>\n<h1 id=\"Git-基础\"><a href=\"#Git-基础\" class=\"headerlink\" title=\"Git 基础\"></a>Git 基础</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>Git是一个<font color=#008000>免费的</font>、<font color=#008000>开源的</font><font color=#008000><strong>分布式</strong></font><font color=red>版本控制系统</font>，可以快速高效地管理从小型到大型的项目</li>\n</ul>\n<h2 id=\"Git-简史\"><a href=\"#Git-简史\" class=\"headerlink\" title=\"Git 简史\"></a>Git 简史</h2><ul>\n<li><p>Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p>\n</li>\n<li><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标</p>\n</li>\n</ul>\n<h2 id=\"Git-的使命-目标\"><a href=\"#Git-的使命-目标\" class=\"headerlink\" title=\"Git 的使命 / 目标\"></a>Git 的使命 / 目标</h2><p>Git在设计之初就是为了搞定linux内核这种巨无霸而设计的，所以制定了自己的使命</p>\n<ul>\n<li>速度</li>\n<li>简单的设计</li>\n<li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li>\n<li>完全分布式</li>\n<li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li>\n</ul>\n<h2 id=\"Git-的优点-特点\"><a href=\"#Git-的优点-特点\" class=\"headerlink\" title=\"Git 的优点 / 特点\"></a>Git 的优点 / 特点</h2><ul>\n<li>快、非凡的性能</li>\n<li>本地仓库</li>\n<li>轻量级分支</li>\n<li>分布式</li>\n<li>各种工作流</li>\n<li>最优的存储能力</li>\n<li>开源的</li>\n<li>很容易易做备份</li>\n<li>支持离线操作</li>\n<li>很容易易定制工作流程</li>\n</ul>\n<h2 id=\"Git-的结构\"><a href=\"#Git-的结构\" class=\"headerlink\" title=\"Git 的结构\"></a>Git 的结构</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.1756qy15ac5c.webp\" width=\"60%\" >\n\n<h2 id=\"Git-的交互方式\"><a href=\"#Git-的交互方式\" class=\"headerlink\" title=\"Git 的交互方式\"></a>Git 的交互方式</h2><h3 id=\"代码托管中心是干嘛的\"><a href=\"#代码托管中心是干嘛的\" class=\"headerlink\" title=\"代码托管中心是干嘛的\"></a>代码托管中心是干嘛的</h3><ul>\n<li>我们已经有了本地库，本地库可以帮我们进行版本控制，为什么还需要代码托管中心呢？<br>它的任务是帮我们维护远程库</li>\n</ul>\n<h3 id=\"本地库和远程库的交互方式\"><a href=\"#本地库和远程库的交互方式\" class=\"headerlink\" title=\"本地库和远程库的交互方式\"></a>本地库和远程库的交互方式</h3><h4 id=\"团队内部协作\"><a href=\"#团队内部协作\" class=\"headerlink\" title=\"团队内部协作\"></a>团队内部协作</h4><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6ia1ri43p640.webp\" >\n\n<h4 id=\"跨团队协作\"><a href=\"#跨团队协作\" class=\"headerlink\" title=\"跨团队协作\"></a>跨团队协作</h4><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.n89r9sjz3gw.webp\" >\n\n<h3 id=\"托管中心种类\"><a href=\"#托管中心种类\" class=\"headerlink\" title=\"托管中心种类\"></a>托管中心种类</h3><ul>\n<li>局域网环境下：可以搭建 GitLab服务器作为代码托管中心，GitLab可以自己去搭建</li>\n<li>外网环境下：可以由GitHub或者Gitee作为代码托管中心，GitHub或者Gitee是现成的托管中心，不用自己去搭建 </li>\n</ul>\n<h2 id=\"Git-的下载安装-基本设置\"><a href=\"#Git-的下载安装-基本设置\" class=\"headerlink\" title=\"Git 的下载安装 / 基本设置\"></a>Git 的下载安装 / 基本设置</h2><ul>\n<li>下载安装略（官网下载，一般情况傻瓜式安装即可）</li>\n<li>查看git安装版本（是否安装成功）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h3><ul>\n<li>配置<code>user.name</code>和<code>user.email</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global  user.name <span class=\"string\">&#x27;sonzonzy&#x27;</span></span><br><span class=\"line\">git config --global  user.email <span class=\"string\">&#x27;sonzonzy@gmail.com&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"config-的三个作用域\"><a href=\"#config-的三个作用域\" class=\"headerlink\" title=\"config 的三个作用域\"></a>config 的三个作用域</h3><ul>\n<li>缺省等同于 local</li>\n<li>优先级：local &gt; global &gt; system</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># local只对当前仓库有效</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># global 对当前登录用户所有仓库有效</span></span><br><span class=\"line\">git config --global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># system 对系统的所有用户有效</span></span><br><span class=\"line\">git config --system</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显示-config-的配置\"><a href=\"#显示-config-的配置\" class=\"headerlink\" title=\"显示 config 的配置\"></a>显示 config 的配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --<span class=\"built_in\">local</span></span><br><span class=\"line\">git config --list --global</span><br><span class=\"line\">git config --list --system</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"信息设置与清除\"><a href=\"#信息设置与清除\" class=\"headerlink\" title=\"信息设置与清除\"></a>信息设置与清除</h3><ul>\n<li>设置    缺省等同于 local</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">local</span> user.name <span class=\"string\">&quot;ratears&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;ratears&quot;</span></span><br><span class=\"line\">git config --system user.name <span class=\"string\">&quot;ratears&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清除    –unset</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">unset</span> --<span class=\"built_in\">local</span> user.name</span><br><span class=\"line\">git config --<span class=\"built_in\">unset</span> --global user.name</span><br><span class=\"line\">git config --<span class=\"built_in\">unset</span> --system user.name</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Git-常用命令-amp-操作\"><a href=\"#Git-常用命令-amp-操作\" class=\"headerlink\" title=\"Git 常用命令 &amp; 操作\"></a>Git 常用命令 &amp; 操作</h1><h2 id=\"init-初始化本地仓库\"><a href=\"#init-初始化本地仓库\" class=\"headerlink\" title=\"init / 初始化本地仓库\"></a>init / 初始化本地仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在git终端进入到本地的文件夹 （例如 $ cd D:\\dev\\git_ws\\git_demo） 执行如下命令</span></span><br><span class=\"line\"><span class=\"comment\">#初始化本地仓库，只能初始化本地仓库</span></span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"add-添加到暂存区\"><a href=\"#add-添加到暂存区\" class=\"headerlink\" title=\"add / 添加到暂存区\"></a>add / 添加到暂存区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"commit-提交到本地仓库\"><a href=\"#commit-提交到本地仓库\" class=\"headerlink\" title=\"commit / 提交到本地仓库\"></a>commit / 提交到本地仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把暂存区的 文件提交到本地仓库。-m&quot;message&quot; 后的双引号 填写该次提交的说明信息</span></span><br><span class=\"line\">git commit -m<span class=\"string\">&quot;add test1.txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>注意事项</p>\n<ul>\n<li><p>不放在本地仓库中的文件，git是不进行管理</p>\n</li>\n<li><p>即使放在本地仓库的文件，git也不管理，必须通过add,commit命令操作才可以将内容提交到本地库</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"status-查看工作区和暂存区的状态\"><a href=\"#status-查看工作区和暂存区的状态\" class=\"headerlink\" title=\"status / 查看工作区和暂存区的状态\"></a>status / 查看工作区和暂存区的状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mv-重命名暂存区的文件\"><a href=\"#mv-重命名暂存区的文件\" class=\"headerlink\" title=\"mv / 重命名暂存区的文件\"></a>mv / 重命名暂存区的文件</h2><ul>\n<li>方式一</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> readme readme.md</span><br><span class=\"line\">git <span class=\"built_in\">rm</span> readme</span><br><span class=\"line\">git add readme.md</span><br><span class=\"line\">git commit -m<span class=\"string\">&quot;rename file&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式二</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> readme readme.md</span><br><span class=\"line\">git commit -m<span class=\"string\">&#x27;file name&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"log-查看提交日志\"><a href=\"#log-查看提交日志\" class=\"headerlink\" title=\"log / 查看提交日志\"></a>log / 查看提交日志</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以让我们查看提交的，显示从最近到最远的日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -n[number] --graph --online --all/[branch_name]</span><br><span class=\"line\"><span class=\"comment\"># -n 指定查看条数</span></span><br><span class=\"line\"><span class=\"comment\"># --graph 图形化查看</span></span><br><span class=\"line\"><span class=\"comment\"># --online 简单显示</span></span><br><span class=\"line\"><span class=\"comment\"># --all 显示所有分支，不加则显示当前分支</span></span><br><span class=\"line\"><span class=\"comment\"># branch_name 指定分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\"></span><br><span class=\"line\">git reflog</span><br><span class=\"line\"><span class=\"comment\"># 多了信息：HEAD@&#123;数字&#125; 这个数字的含义：指针回到当前这个历史版本需要走多少步</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在浏览器打开git log 的帮助文档</span></span><br><span class=\"line\">git <span class=\"built_in\">help</span> --web <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gitk-git-的gui界面\"><a href=\"#gitk-git-的gui界面\" class=\"headerlink\" title=\"gitk / git 的gui界面\"></a>gitk / git 的gui界面</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开git的gui界面</span></span><br><span class=\"line\">gitk</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rest-前进或者后退历史版本\"><a href=\"#rest-前进或者后退历史版本\" class=\"headerlink\" title=\"rest / 前进或者后退历史版本\"></a>rest / 前进或者后退历史版本</h2><h3 id=\"hard-参数\"><a href=\"#hard-参数\" class=\"headerlink\" title=\"hard 参数\"></a>hard 参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地库的指针移动的同时，重置暂存区，重置工作区</span></span><br><span class=\"line\">git reset --hard [索引]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mixed参数\"><a href=\"#mixed参数\" class=\"headerlink\" title=\"mixed参数\"></a>mixed参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地库的指针移动的同时，重置暂存区，但是工作区不动</span></span><br><span class=\"line\">git reset --mixed [索引]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"soft参数\"><a href=\"#soft参数\" class=\"headerlink\" title=\"soft参数\"></a>soft参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地库的指针移动的时候，暂存区，工作区都不动</span></span><br><span class=\"line\">git reset --soft [索引]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将工作区中的文件和暂存区中文件进行比较 </span></span><br><span class=\"line\">git diff [文件名]  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较工作区中和暂存区中 所有文件的差异</span></span><br><span class=\"line\">git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较暂存区和工作区中内容</span></span><br><span class=\"line\">git diff [历史版本] [文件名] </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1>"},{"title":"Gradle","auth":"ratears","date":"2022-09-05T20:46:07.000Z","update":"2022-09-05T20:46:07.000Z","_content":"\n\n\n# Gradle入门\n\n## Gradle简介\n\n- Gradle 是一款Google 推出的基于 JVM、通用灵活的项目构建工具，支持 Maven，JCenter 多种第三方仓库;支持传递性依赖管理、废弃了繁杂的xml 文件，转而使用简洁的、支持多种语言(例如：java、groovy 等)的 build 脚本文件。（新一代的项目自动化构建工具）\n\n- 官网地址: https://gradle.org/\n- Gradle与maven进行对比：maven侧重于项目jar包的管理，Gradle侧重于项目的构建\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 学习备注\n\n> 1. p1 部分笔记还需要补充","source":"_posts/2022/Gradle.md","raw":"---\ntitle: Gradle\nauth: ratears\ndate: 2022-09-06 04:46:07\nupdate: 2022-09-06 04:46:07\ncategories:\n\t- gradle\ntags:\n\t- gradle\n---\n\n\n\n# Gradle入门\n\n## Gradle简介\n\n- Gradle 是一款Google 推出的基于 JVM、通用灵活的项目构建工具，支持 Maven，JCenter 多种第三方仓库;支持传递性依赖管理、废弃了繁杂的xml 文件，转而使用简洁的、支持多种语言(例如：java、groovy 等)的 build 脚本文件。（新一代的项目自动化构建工具）\n\n- 官网地址: https://gradle.org/\n- Gradle与maven进行对比：maven侧重于项目jar包的管理，Gradle侧重于项目的构建\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 学习备注\n\n> 1. p1 部分笔记还需要补充","slug":"Gradle","published":1,"updated":"2022-09-05T21:24:51.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsn20009dcta928d1pzc","content":"<h1 id=\"Gradle入门\"><a href=\"#Gradle入门\" class=\"headerlink\" title=\"Gradle入门\"></a>Gradle入门</h1><h2 id=\"Gradle简介\"><a href=\"#Gradle简介\" class=\"headerlink\" title=\"Gradle简介\"></a>Gradle简介</h2><ul>\n<li><p>Gradle 是一款Google 推出的基于 JVM、通用灵活的项目构建工具，支持 Maven，JCenter 多种第三方仓库;支持传递性依赖管理、废弃了繁杂的xml 文件，转而使用简洁的、支持多种语言(例如：java、groovy 等)的 build 脚本文件。（新一代的项目自动化构建工具）</p>\n</li>\n<li><p>官网地址: <a class=\"link\"   href=\"https://gradle.org/\" >https://gradle.org/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n<li><p>Gradle与maven进行对比：maven侧重于项目jar包的管理，Gradle侧重于项目的构建</p>\n</li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>p1 部分笔记还需要补充</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Gradle入门\"><a href=\"#Gradle入门\" class=\"headerlink\" title=\"Gradle入门\"></a>Gradle入门</h1><h2 id=\"Gradle简介\"><a href=\"#Gradle简介\" class=\"headerlink\" title=\"Gradle简介\"></a>Gradle简介</h2><ul>\n<li><p>Gradle 是一款Google 推出的基于 JVM、通用灵活的项目构建工具，支持 Maven，JCenter 多种第三方仓库;支持传递性依赖管理、废弃了繁杂的xml 文件，转而使用简洁的、支持多种语言(例如：java、groovy 等)的 build 脚本文件。（新一代的项目自动化构建工具）</p>\n</li>\n<li><p>官网地址: <a class=\"link\"   href=\"https://gradle.org/\" >https://gradle.org/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n<li><p>Gradle与maven进行对比：maven侧重于项目jar包的管理，Gradle侧重于项目的构建</p>\n</li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>p1 部分笔记还需要补充</li>\n</ol>\n</blockquote>\n"},{"title":"Java - Collection Framework","author":"ratears","date":"2022-06-21T16:36:47.000Z","updated":"2022-06-21T16:36:47.000Z","_content":"\n\n\n# Collection\n\n- 容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表\n\n- Collection 接口常用方法\n\n```java\nboolean\tadd(E e)\nboolean\taddAll(Collection<? extends E> c)\n\nvoid\tclear()\nboolean\tremove(Object o)\n    \nIterator<E>\titerator()\nint\tsize()\n    \nboolean\tcontains(Object o)\nboolean\tequals(Object o) \nboolean\tisEmpty()\n```\n\n- 集合只能存放引用数据类型，不能存放基本数据类型","source":"_posts/2022/Java-Collection-Framework.md","raw":"---\ntitle: Java - Collection Framework\nauthor: ratears\ndate: 2022-06-22 00:36:47\nupdated: 2022-06-22 00:36:47\ncategories:\n  - [java,collection]\ntags:\n  - collection\n---\n\n\n\n# Collection\n\n- 容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表\n\n- Collection 接口常用方法\n\n```java\nboolean\tadd(E e)\nboolean\taddAll(Collection<? extends E> c)\n\nvoid\tclear()\nboolean\tremove(Object o)\n    \nIterator<E>\titerator()\nint\tsize()\n    \nboolean\tcontains(Object o)\nboolean\tequals(Object o) \nboolean\tisEmpty()\n```\n\n- 集合只能存放引用数据类型，不能存放基本数据类型","slug":"Java-Collection-Framework","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsn2000adcta2fpi6dqf","content":"<h1 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h1><ul>\n<li><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表</p>\n</li>\n<li><p>Collection 接口常用方法</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">add</span><span class=\"params\">(E e)</span></span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span>\t<span class=\"title function_\">clear</span><span class=\"params\">()</span></span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">remove</span><span class=\"params\">(Object o)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">Iterator&lt;E&gt;\t<span class=\"title function_\">iterator</span><span class=\"params\">()</span></span><br><span class=\"line\"><span class=\"type\">int</span>\t<span class=\"title function_\">size</span><span class=\"params\">()</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">contains</span><span class=\"params\">(Object o)</span></span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> </span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">isEmpty</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>集合只能存放引用数据类型，不能存放基本数据类型</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h1><ul>\n<li><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表</p>\n</li>\n<li><p>Collection 接口常用方法</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">add</span><span class=\"params\">(E e)</span></span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span>\t<span class=\"title function_\">clear</span><span class=\"params\">()</span></span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">remove</span><span class=\"params\">(Object o)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">Iterator&lt;E&gt;\t<span class=\"title function_\">iterator</span><span class=\"params\">()</span></span><br><span class=\"line\"><span class=\"type\">int</span>\t<span class=\"title function_\">size</span><span class=\"params\">()</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">contains</span><span class=\"params\">(Object o)</span></span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> </span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">isEmpty</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>集合只能存放引用数据类型，不能存放基本数据类型</li>\n</ul>\n"},{"title":"Maven核心知识梳理","date":"2022-09-17T12:45:22.000Z","_content":"\n\n\n# 第一章 Maven概述\n\n## Why？为什么要学习 Maven？\n\n### Maven 作为依赖管理工具\n\n#### ①jar 包的规模\n\n- 随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的\n- 比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：\n  - Nacos 服务注册发现\n  - Web 框架环境\n  - 图模板技术 Thymeleaf\n\n> 最终却导入了 106 个 jar 包\n\n\n\n而如果使用 Maven 来引入这些 jar 包只需要配置三个『**依赖**』：\n\n```xml\n\t<!-- Nacos 服务注册发现启动器 -->\n    <dependency>\n        <groupId>com.alibaba.cloud</groupId>\n        <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n    </dependency>\n\n    <!-- web启动器依赖 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <!-- 视图模板技术 thymeleaf -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n```\n\n\n\n#### ②jar 包的来源\n\n- 这个jar包所属技术的官网。官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载\n- 第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题:\n  - jar包的名称\n  - jar包的版本\n  - jar包内的具体细节\n- 而使用 Maven 后，依赖对应的 jar 包能够**自动下载**，方便、快捷又规范\n\n\n\n#### ③jar 包之间的依赖关系\n\n- 框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度\n\n- 下面是前面例子中 jar 包之间的依赖关系：\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.mqcmj2wu734.webp\" width=\"65%\" />\n\n<br>\n\n- 而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助\n- **使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量**\n\n<br>\n\n<br>\n\n### Maven 作为构建管理工具\n\n#### ①你没有注意过的构建\n\n- 可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的\n\n\n\n#### ②脱离 IDE 环境仍需构建\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1ivp2tn48qw0.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n### 结论\n\n- **管理规模庞大的 jar 包，需要专门工具。**\n- **脱离 IDE 环境执行构建操作，需要专门工具。**\n\n<br>\n\n<br>\n\n<br>\n\n## What？什么是 Maven？\n\n- Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供**构建**和**依赖**管理支持的工具\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ecian9do5e0.webp\" width=\"30%\"/>\n\n<br>\n\n### 构建\n\n> Java 项目开发过程中，构建指的是使用**『原材料生产产品』**的过程\n\n- 原材料\n  - Java 源代码\n  - 基于 HTML 的 Thymeleaf 文件\n  - 图片\n  - 配置文件\n  - ......\n- 产品\n  - 一个可以在服务器上运行的项目\n\n\n\n- **构建过程包含的主要的环节：**\n\n> - 清理：删除上一次构建的结果，为下一次构建做好准备\n> - 编译：Java 源程序编译成 *.class 字节码文件\n> - 测试：运行提前准备好的测试程序\n> - 报告：针对刚才测试的结果生成一个全面的信息\n> - 打包\n>   - Java工程：jar包\n>   - Web工程：war包\n> - 安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库\n> - 部署\n>   - 部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上\n>   - 部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上\n\n\n\n### 依赖\n\n- 如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。例如：\n  - junit-4.12 依赖 hamcrest-core-1.3\n  - thymeleaf-3.0.12.RELEASE 依赖 ognl-3.1.26\n    - ognl-3.1.26 依赖 javassist-3.20.0-GA\n\n\n\n- 依赖管理中要解决的具体问题：\n  - jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地\n  - jar 包之间的依赖：通过依赖的传递性自动完成\n  - jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入\n\n\n\n### Maven 的工作机制\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6wuv1htwzko0.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n# 第二章 Maven 核心程序解压和配置\n\n## Maven核心程序解压与配置\n\n- Maven 官网地址：[Maven – Welcome to Apache Maven](https://maven.apache.org/)\n\n\n\n- 解压Maven核心程序\n  - 核心程序压缩包：apache-maven-3.8.4-bin.zip，解压到**非中文、没有空格**的目录\n  - 在解压目录中，我们需要着重关注 Maven 的核心配置文件：**conf/settings.xml**\n\n\n\n- 指定本地仓库\n  - 建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：\n\n```xml\n<!-- localRepository\n| The path to the local repository maven will use to store artifacts.\n|\n| Default: ${user.home}/.m2/repository\n<localRepository>/path/to/local/repo</localRepository>\n-->\n<localRepository>D:\\maven-repository</localRepository>\n```\n\n\n\n- 配置阿里云提供的镜像仓库\n  - Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，**访问国内网站**，可以让 Maven 下载 jar 包的时候速度更快。配置的方式是：\n\n```xml\n<!--将原有的例子配置注释掉 -->\n<!-- <mirror>\n  <id>maven-default-http-blocker</id>\n  <mirrorOf>external:http:*</mirrorOf>\n  <name>Pseudo repository to mirror external repositories initially using HTTP.</name>\n  <url>http://0.0.0.0/</url>\n  <blocked>true</blocked>\n</mirror> -->\n```\n\n```xml\n\t<!--加入我们的配置 -->\n\t<mirror>\n\t\t<id>nexus-aliyun</id>\n\t\t<mirrorOf>central</mirrorOf>\n\t\t<name>Nexus aliyun</name>\n\t\t<url>http://maven.aliyun.com/nexus/content/groups/public</url>\n\t</mirror>\n```\n\n\n\n- 配置 Maven 工程的基础 JDK 版本\n\n```xml\n\t<profile>\n\t  <id>jdk-1.8</id>\n\t  <activation>\n\t\t<activeByDefault>true</activeByDefault>\n\t\t<jdk>1.8</jdk>\n\t  </activation>\n\t  <properties>\n\t\t<maven.compiler.source>1.8</maven.compiler.source>\n\t\t<maven.compiler.target>1.8</maven.compiler.target>\n\t\t<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n\t  </properties>\n\t</profile>\n```\n\n<br>\n\n<br>\n\n## 配置环境变量\n\n- 检查 JAVA_HOME 配置是否正确\n  - Maven 是一个用 Java 语言开发的程序，它必须基于 JDK 来运行，需要通过 JAVA_HOME 来找到 JDK 的安装位置\n- 配置 MAVEN_HOME\n- 配置PATH\n- 验证\n\n```bash\nC:\\Users\\Administrator>mvn -v\nApache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)\nMaven home: D:\\software\\apache-maven-3.8.4\nJava version: 1.8.0_141, vendor: Oracle Corporation, runtime: D:\\software\\Java\\jre\nDefault locale: zh_CN, platform encoding: GBK\nOS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 第三章 使用 Maven：命令行环境\n\n## 实验一：根据坐标创建 Maven 工程\n\n### Maven 核心概念：坐标\n\n#### ①数学中的坐标\n\n- 使用 x、y、z 三个**『向量』**作为空间的坐标系，可以在**『空间』**中唯一的定位到一个**『点』**\n\n\n\n#### ②Maven中的坐标\n\n[1]向量说明\n\n- 使用三个**『向量』**在**『Maven的仓库』**中**唯一**的定位到一个**『jar』**包。\n  - **groupId**：公司或组织的 id\n  - **artifactId**：一个项目或者是项目中的一个模块的 id\n  - **version**：版本号\n\n\n\n[2]三个向量的取值方式\n\n- groupId：公司或组织域名的倒序，通常也会加上项目名称\n  - 例如：com.atguigu.maven\n- artifactId：模块的名称，将来作为 Maven 工程的工程名\n- version：模块的版本号，根据自己的需要设定\n  - 例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本\n  - 例如：RELEASE 表示正式版本\n\n\n\n> 举例：\n\n- groupId：com.atguigu.maven\n- artifactId：pro01-atguigu-maven\n- version：1.0-SNAPSHOT\n\n\n\n#### ③坐标和仓库中 jar 包的存储路径之间的对应关系\n\n```xml\n  <!-- 坐标： -->\n  <groupId>javax.servlet</groupId>\n  <artifactId>servlet-api</artifactId>\n  <version>2.5</version>\n```\n\n```text\n上面坐标对应的 jar 包在 Maven 本地仓库中的位置：\nMaven本地仓库根目录\\javax\\servlet\\servlet-api\\2.5\\servlet-api-2.5.jar\n```\n\n\n\n### 实验操作：使用命令生成Maven工程\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.52zgdx8nqpc0.webp\" width=\"40%\"/>\n\n<br>\n\n- 运行 **mvn archetype:generate** 命令\n\n> TIP\n>\n> Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】\n>\n> Define value for property 'groupId': com.atguigu.maven\n>\n> Define value for property 'artifactId': pro01-maven-java\n>\n> Define value for property 'version' 1.0-SNAPSHOT: :【直接回车，使用默认值】\n>\n> Define value for property 'package' com.atguigu.maven: :【直接回车，使用默认值】\n>\n> Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】\n\n\n\n- 调整\n\n```xml\n<!-- Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。\n\n自动生成的 App.java 和 AppTest.java 可以删除  -->\n\n<!-- 依赖信息配置 -->\n<!-- dependencies复数标签：里面包含dependency单数标签 -->\n<dependencies>\n\t<!-- dependency单数标签：配置一个具体的依赖 -->\n\t<dependency>\n\t\t<!-- 通过坐标来依赖其他jar包 -->\n\t\t<groupId>junit</groupId>\n\t\t<artifactId>junit</artifactId>\n\t\t<version>4.12</version>\n\t\t\n\t\t<!-- 依赖的范围 -->\n\t\t<scope>test</scope>\n\t</dependency>\n</dependencies>\n```\n\n\n\n- 自动生成的 pom.xml 解读\n\n```xml\n  <!-- 当前Maven工程的坐标 -->\n  <groupId>com.atguigu.maven</groupId>\n  <artifactId>pro01-maven-java</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  \n  <!-- 当前Maven工程的打包方式，可选值有下面三种： -->\n  <!-- jar：表示这个工程是一个Java工程  -->\n  <!-- war：表示这个工程是一个Web工程 -->\n  <!-- pom：表示这个工程是“管理其他工程”的工程 -->\n  <packaging>jar</packaging>\n\n  <name>pro01-maven-java</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n\t<!-- 工程构建过程中读取源码时使用的字符集 -->\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <!-- 当前工程所依赖的jar包 -->\n  <dependencies>\n\t<!-- 使用dependency配置一个具体的依赖 -->\n    <dependency>\n\t\n\t  <!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 -->\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n\t  \n\t  <!-- scope标签配置依赖的范围 -->\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n```\n\n<br>\n\n### Maven核心概念：POM\n\n#### 含义\n\n- POM：**P**roject **O**bject **M**odel，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现\n\n\n\n#### 模型化思想\n\n- POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据\n\n\n\n#### 对应的配置文件\n\n- POM 理念集中体现在 Maven 工程根目录下 **pom.xml** 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。\n\n\n\n### Maven核心概念：约定的目录结构\n\n#### ①各个目录的作用\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.178pqbq36pd.webp\" width=\"60%\"/>\n\n<br>\n\n- 另外还有一个 target 目录专门存放构建操作输出的结果\n\n\n\n#### ②约定目录结构的意义\n\n- Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。\n\n\n\n#### ③约定大于配置\n\n- Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。\n\n- 目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。\n\n\n\n\n\n# 学习备注\n\n> 1. maven的工作机制还需要深入熟悉\n\n<br>\n\n<img src=\"\" width=\"60%\"/>\n\n<br>\n\n","source":"_posts/2022/Maven核心知识梳理.md","raw":"---\ntitle: Maven核心知识梳理\ndate: 2022-09-17 20:45:22\ntags:\n\t- maven\ncategories:\n\t- maven\n---\n\n\n\n# 第一章 Maven概述\n\n## Why？为什么要学习 Maven？\n\n### Maven 作为依赖管理工具\n\n#### ①jar 包的规模\n\n- 随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的\n- 比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：\n  - Nacos 服务注册发现\n  - Web 框架环境\n  - 图模板技术 Thymeleaf\n\n> 最终却导入了 106 个 jar 包\n\n\n\n而如果使用 Maven 来引入这些 jar 包只需要配置三个『**依赖**』：\n\n```xml\n\t<!-- Nacos 服务注册发现启动器 -->\n    <dependency>\n        <groupId>com.alibaba.cloud</groupId>\n        <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n    </dependency>\n\n    <!-- web启动器依赖 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <!-- 视图模板技术 thymeleaf -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n```\n\n\n\n#### ②jar 包的来源\n\n- 这个jar包所属技术的官网。官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载\n- 第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题:\n  - jar包的名称\n  - jar包的版本\n  - jar包内的具体细节\n- 而使用 Maven 后，依赖对应的 jar 包能够**自动下载**，方便、快捷又规范\n\n\n\n#### ③jar 包之间的依赖关系\n\n- 框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度\n\n- 下面是前面例子中 jar 包之间的依赖关系：\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.mqcmj2wu734.webp\" width=\"65%\" />\n\n<br>\n\n- 而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助\n- **使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量**\n\n<br>\n\n<br>\n\n### Maven 作为构建管理工具\n\n#### ①你没有注意过的构建\n\n- 可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的\n\n\n\n#### ②脱离 IDE 环境仍需构建\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1ivp2tn48qw0.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n### 结论\n\n- **管理规模庞大的 jar 包，需要专门工具。**\n- **脱离 IDE 环境执行构建操作，需要专门工具。**\n\n<br>\n\n<br>\n\n<br>\n\n## What？什么是 Maven？\n\n- Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供**构建**和**依赖**管理支持的工具\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ecian9do5e0.webp\" width=\"30%\"/>\n\n<br>\n\n### 构建\n\n> Java 项目开发过程中，构建指的是使用**『原材料生产产品』**的过程\n\n- 原材料\n  - Java 源代码\n  - 基于 HTML 的 Thymeleaf 文件\n  - 图片\n  - 配置文件\n  - ......\n- 产品\n  - 一个可以在服务器上运行的项目\n\n\n\n- **构建过程包含的主要的环节：**\n\n> - 清理：删除上一次构建的结果，为下一次构建做好准备\n> - 编译：Java 源程序编译成 *.class 字节码文件\n> - 测试：运行提前准备好的测试程序\n> - 报告：针对刚才测试的结果生成一个全面的信息\n> - 打包\n>   - Java工程：jar包\n>   - Web工程：war包\n> - 安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库\n> - 部署\n>   - 部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上\n>   - 部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上\n\n\n\n### 依赖\n\n- 如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。例如：\n  - junit-4.12 依赖 hamcrest-core-1.3\n  - thymeleaf-3.0.12.RELEASE 依赖 ognl-3.1.26\n    - ognl-3.1.26 依赖 javassist-3.20.0-GA\n\n\n\n- 依赖管理中要解决的具体问题：\n  - jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地\n  - jar 包之间的依赖：通过依赖的传递性自动完成\n  - jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入\n\n\n\n### Maven 的工作机制\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6wuv1htwzko0.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n# 第二章 Maven 核心程序解压和配置\n\n## Maven核心程序解压与配置\n\n- Maven 官网地址：[Maven – Welcome to Apache Maven](https://maven.apache.org/)\n\n\n\n- 解压Maven核心程序\n  - 核心程序压缩包：apache-maven-3.8.4-bin.zip，解压到**非中文、没有空格**的目录\n  - 在解压目录中，我们需要着重关注 Maven 的核心配置文件：**conf/settings.xml**\n\n\n\n- 指定本地仓库\n  - 建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：\n\n```xml\n<!-- localRepository\n| The path to the local repository maven will use to store artifacts.\n|\n| Default: ${user.home}/.m2/repository\n<localRepository>/path/to/local/repo</localRepository>\n-->\n<localRepository>D:\\maven-repository</localRepository>\n```\n\n\n\n- 配置阿里云提供的镜像仓库\n  - Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，**访问国内网站**，可以让 Maven 下载 jar 包的时候速度更快。配置的方式是：\n\n```xml\n<!--将原有的例子配置注释掉 -->\n<!-- <mirror>\n  <id>maven-default-http-blocker</id>\n  <mirrorOf>external:http:*</mirrorOf>\n  <name>Pseudo repository to mirror external repositories initially using HTTP.</name>\n  <url>http://0.0.0.0/</url>\n  <blocked>true</blocked>\n</mirror> -->\n```\n\n```xml\n\t<!--加入我们的配置 -->\n\t<mirror>\n\t\t<id>nexus-aliyun</id>\n\t\t<mirrorOf>central</mirrorOf>\n\t\t<name>Nexus aliyun</name>\n\t\t<url>http://maven.aliyun.com/nexus/content/groups/public</url>\n\t</mirror>\n```\n\n\n\n- 配置 Maven 工程的基础 JDK 版本\n\n```xml\n\t<profile>\n\t  <id>jdk-1.8</id>\n\t  <activation>\n\t\t<activeByDefault>true</activeByDefault>\n\t\t<jdk>1.8</jdk>\n\t  </activation>\n\t  <properties>\n\t\t<maven.compiler.source>1.8</maven.compiler.source>\n\t\t<maven.compiler.target>1.8</maven.compiler.target>\n\t\t<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n\t  </properties>\n\t</profile>\n```\n\n<br>\n\n<br>\n\n## 配置环境变量\n\n- 检查 JAVA_HOME 配置是否正确\n  - Maven 是一个用 Java 语言开发的程序，它必须基于 JDK 来运行，需要通过 JAVA_HOME 来找到 JDK 的安装位置\n- 配置 MAVEN_HOME\n- 配置PATH\n- 验证\n\n```bash\nC:\\Users\\Administrator>mvn -v\nApache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)\nMaven home: D:\\software\\apache-maven-3.8.4\nJava version: 1.8.0_141, vendor: Oracle Corporation, runtime: D:\\software\\Java\\jre\nDefault locale: zh_CN, platform encoding: GBK\nOS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 第三章 使用 Maven：命令行环境\n\n## 实验一：根据坐标创建 Maven 工程\n\n### Maven 核心概念：坐标\n\n#### ①数学中的坐标\n\n- 使用 x、y、z 三个**『向量』**作为空间的坐标系，可以在**『空间』**中唯一的定位到一个**『点』**\n\n\n\n#### ②Maven中的坐标\n\n[1]向量说明\n\n- 使用三个**『向量』**在**『Maven的仓库』**中**唯一**的定位到一个**『jar』**包。\n  - **groupId**：公司或组织的 id\n  - **artifactId**：一个项目或者是项目中的一个模块的 id\n  - **version**：版本号\n\n\n\n[2]三个向量的取值方式\n\n- groupId：公司或组织域名的倒序，通常也会加上项目名称\n  - 例如：com.atguigu.maven\n- artifactId：模块的名称，将来作为 Maven 工程的工程名\n- version：模块的版本号，根据自己的需要设定\n  - 例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本\n  - 例如：RELEASE 表示正式版本\n\n\n\n> 举例：\n\n- groupId：com.atguigu.maven\n- artifactId：pro01-atguigu-maven\n- version：1.0-SNAPSHOT\n\n\n\n#### ③坐标和仓库中 jar 包的存储路径之间的对应关系\n\n```xml\n  <!-- 坐标： -->\n  <groupId>javax.servlet</groupId>\n  <artifactId>servlet-api</artifactId>\n  <version>2.5</version>\n```\n\n```text\n上面坐标对应的 jar 包在 Maven 本地仓库中的位置：\nMaven本地仓库根目录\\javax\\servlet\\servlet-api\\2.5\\servlet-api-2.5.jar\n```\n\n\n\n### 实验操作：使用命令生成Maven工程\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.52zgdx8nqpc0.webp\" width=\"40%\"/>\n\n<br>\n\n- 运行 **mvn archetype:generate** 命令\n\n> TIP\n>\n> Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】\n>\n> Define value for property 'groupId': com.atguigu.maven\n>\n> Define value for property 'artifactId': pro01-maven-java\n>\n> Define value for property 'version' 1.0-SNAPSHOT: :【直接回车，使用默认值】\n>\n> Define value for property 'package' com.atguigu.maven: :【直接回车，使用默认值】\n>\n> Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】\n\n\n\n- 调整\n\n```xml\n<!-- Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。\n\n自动生成的 App.java 和 AppTest.java 可以删除  -->\n\n<!-- 依赖信息配置 -->\n<!-- dependencies复数标签：里面包含dependency单数标签 -->\n<dependencies>\n\t<!-- dependency单数标签：配置一个具体的依赖 -->\n\t<dependency>\n\t\t<!-- 通过坐标来依赖其他jar包 -->\n\t\t<groupId>junit</groupId>\n\t\t<artifactId>junit</artifactId>\n\t\t<version>4.12</version>\n\t\t\n\t\t<!-- 依赖的范围 -->\n\t\t<scope>test</scope>\n\t</dependency>\n</dependencies>\n```\n\n\n\n- 自动生成的 pom.xml 解读\n\n```xml\n  <!-- 当前Maven工程的坐标 -->\n  <groupId>com.atguigu.maven</groupId>\n  <artifactId>pro01-maven-java</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  \n  <!-- 当前Maven工程的打包方式，可选值有下面三种： -->\n  <!-- jar：表示这个工程是一个Java工程  -->\n  <!-- war：表示这个工程是一个Web工程 -->\n  <!-- pom：表示这个工程是“管理其他工程”的工程 -->\n  <packaging>jar</packaging>\n\n  <name>pro01-maven-java</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n\t<!-- 工程构建过程中读取源码时使用的字符集 -->\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <!-- 当前工程所依赖的jar包 -->\n  <dependencies>\n\t<!-- 使用dependency配置一个具体的依赖 -->\n    <dependency>\n\t\n\t  <!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 -->\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n\t  \n\t  <!-- scope标签配置依赖的范围 -->\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n```\n\n<br>\n\n### Maven核心概念：POM\n\n#### 含义\n\n- POM：**P**roject **O**bject **M**odel，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现\n\n\n\n#### 模型化思想\n\n- POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据\n\n\n\n#### 对应的配置文件\n\n- POM 理念集中体现在 Maven 工程根目录下 **pom.xml** 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。\n\n\n\n### Maven核心概念：约定的目录结构\n\n#### ①各个目录的作用\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.178pqbq36pd.webp\" width=\"60%\"/>\n\n<br>\n\n- 另外还有一个 target 目录专门存放构建操作输出的结果\n\n\n\n#### ②约定目录结构的意义\n\n- Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。\n\n\n\n#### ③约定大于配置\n\n- Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。\n\n- 目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。\n\n\n\n\n\n# 学习备注\n\n> 1. maven的工作机制还需要深入熟悉\n\n<br>\n\n<img src=\"\" width=\"60%\"/>\n\n<br>\n\n","slug":"Maven核心知识梳理","published":1,"updated":"2022-09-18T07:10:17.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsn4000ddctag5um9na0","content":"<h1 id=\"第一章-Maven概述\"><a href=\"#第一章-Maven概述\" class=\"headerlink\" title=\"第一章 Maven概述\"></a>第一章 Maven概述</h1><h2 id=\"Why？为什么要学习-Maven？\"><a href=\"#Why？为什么要学习-Maven？\" class=\"headerlink\" title=\"Why？为什么要学习 Maven？\"></a>Why？为什么要学习 Maven？</h2><h3 id=\"Maven-作为依赖管理工具\"><a href=\"#Maven-作为依赖管理工具\" class=\"headerlink\" title=\"Maven 作为依赖管理工具\"></a>Maven 作为依赖管理工具</h3><h4 id=\"①jar-包的规模\"><a href=\"#①jar-包的规模\" class=\"headerlink\" title=\"①jar 包的规模\"></a>①jar 包的规模</h4><ul>\n<li>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的</li>\n<li>比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：<ul>\n<li>Nacos 服务注册发现</li>\n<li>Web 框架环境</li>\n<li>图模板技术 Thymeleaf</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>最终却导入了 106 个 jar 包</p>\n</blockquote>\n<p>而如果使用 Maven 来引入这些 jar 包只需要配置三个『<strong>依赖</strong>』：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Nacos 服务注册发现启动器 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- web启动器依赖 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 视图模板技术 thymeleaf --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"②jar-包的来源\"><a href=\"#②jar-包的来源\" class=\"headerlink\" title=\"②jar 包的来源\"></a>②jar 包的来源</h4><ul>\n<li>这个jar包所属技术的官网。官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载</li>\n<li>第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题:<ul>\n<li>jar包的名称</li>\n<li>jar包的版本</li>\n<li>jar包内的具体细节</li>\n</ul>\n</li>\n<li>而使用 Maven 后，依赖对应的 jar 包能够<strong>自动下载</strong>，方便、快捷又规范</li>\n</ul>\n<h4 id=\"③jar-包之间的依赖关系\"><a href=\"#③jar-包之间的依赖关系\" class=\"headerlink\" title=\"③jar 包之间的依赖关系\"></a>③jar 包之间的依赖关系</h4><ul>\n<li><p>框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度</p>\n</li>\n<li><p>下面是前面例子中 jar 包之间的依赖关系：</p>\n</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.mqcmj2wu734.webp\" width=\"65%\" />\n\n<br>\n\n<ul>\n<li>而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助</li>\n<li><strong>使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量</strong></li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"Maven-作为构建管理工具\"><a href=\"#Maven-作为构建管理工具\" class=\"headerlink\" title=\"Maven 作为构建管理工具\"></a>Maven 作为构建管理工具</h3><h4 id=\"①你没有注意过的构建\"><a href=\"#①你没有注意过的构建\" class=\"headerlink\" title=\"①你没有注意过的构建\"></a>①你没有注意过的构建</h4><ul>\n<li>可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的</li>\n</ul>\n<h4 id=\"②脱离-IDE-环境仍需构建\"><a href=\"#②脱离-IDE-环境仍需构建\" class=\"headerlink\" title=\"②脱离 IDE 环境仍需构建\"></a>②脱离 IDE 环境仍需构建</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1ivp2tn48qw0.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ul>\n<li><strong>管理规模庞大的 jar 包，需要专门工具。</strong></li>\n<li><strong>脱离 IDE 环境执行构建操作，需要专门工具。</strong></li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"What？什么是-Maven？\"><a href=\"#What？什么是-Maven？\" class=\"headerlink\" title=\"What？什么是 Maven？\"></a>What？什么是 Maven？</h2><ul>\n<li>Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供<strong>构建</strong>和<strong>依赖</strong>管理支持的工具</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ecian9do5e0.webp\" width=\"30%\"/>\n\n<br>\n\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><blockquote>\n<p>Java 项目开发过程中，构建指的是使用<strong>『原材料生产产品』</strong>的过程</p>\n</blockquote>\n<ul>\n<li>原材料<ul>\n<li>Java 源代码</li>\n<li>基于 HTML 的 Thymeleaf 文件</li>\n<li>图片</li>\n<li>配置文件</li>\n<li>……</li>\n</ul>\n</li>\n<li>产品<ul>\n<li>一个可以在服务器上运行的项目</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>构建过程包含的主要的环节：</strong></li>\n</ul>\n<blockquote>\n<ul>\n<li>清理：删除上一次构建的结果，为下一次构建做好准备</li>\n<li>编译：Java 源程序编译成 *.class 字节码文件</li>\n<li>测试：运行提前准备好的测试程序</li>\n<li>报告：针对刚才测试的结果生成一个全面的信息</li>\n<li>打包<ul>\n<li>Java工程：jar包</li>\n<li>Web工程：war包</li>\n</ul>\n</li>\n<li>安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库</li>\n<li>部署<ul>\n<li>部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上</li>\n<li>部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><ul>\n<li>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。例如：<ul>\n<li>junit-4.12 依赖 hamcrest-core-1.3</li>\n<li>thymeleaf-3.0.12.RELEASE 依赖 ognl-3.1.26<ul>\n<li>ognl-3.1.26 依赖 javassist-3.20.0-GA</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>依赖管理中要解决的具体问题：<ul>\n<li>jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</li>\n<li>jar 包之间的依赖：通过依赖的传递性自动完成</li>\n<li>jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Maven-的工作机制\"><a href=\"#Maven-的工作机制\" class=\"headerlink\" title=\"Maven 的工作机制\"></a>Maven 的工作机制</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6wuv1htwzko0.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"第二章-Maven-核心程序解压和配置\"><a href=\"#第二章-Maven-核心程序解压和配置\" class=\"headerlink\" title=\"第二章 Maven 核心程序解压和配置\"></a>第二章 Maven 核心程序解压和配置</h1><h2 id=\"Maven核心程序解压与配置\"><a href=\"#Maven核心程序解压与配置\" class=\"headerlink\" title=\"Maven核心程序解压与配置\"></a>Maven核心程序解压与配置</h2><ul>\n<li>Maven 官网地址：<a class=\"link\"   href=\"https://maven.apache.org/\" >Maven – Welcome to Apache Maven<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<ul>\n<li>解压Maven核心程序<ul>\n<li>核心程序压缩包：apache-maven-3.8.4-bin.zip，解压到<strong>非中文、没有空格</strong>的目录</li>\n<li>在解压目录中，我们需要着重关注 Maven 的核心配置文件：<strong>conf/settings.xml</strong></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>指定本地仓库<ul>\n<li>建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- localRepository</span></span><br><span class=\"line\"><span class=\"comment\">| The path to the local repository maven will use to store artifacts.</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class=\"line\"><span class=\"comment\">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\maven-repository<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>配置阿里云提供的镜像仓库<ul>\n<li>Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，<strong>访问国内网站</strong>，可以让 Maven 下载 jar 包的时候速度更快。配置的方式是：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--将原有的例子配置注释掉 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;mirror&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;id&gt;maven-default-http-blocker&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;url&gt;http://0.0.0.0/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;blocked&gt;true&lt;/blocked&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/mirror&gt; --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--加入我们的配置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>配置 Maven 工程的基础 JDK 版本</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.8<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><ul>\n<li>检查 JAVA_HOME 配置是否正确<ul>\n<li>Maven 是一个用 Java 语言开发的程序，它必须基于 JDK 来运行，需要通过 JAVA_HOME 来找到 JDK 的安装位置</li>\n</ul>\n</li>\n<li>配置 MAVEN_HOME</li>\n<li>配置PATH</li>\n<li>验证</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt;mvn -v</span><br><span class=\"line\">Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class=\"line\">Maven home: D:\\software\\apache-maven-3.8.4</span><br><span class=\"line\">Java version: 1.8.0_141, vendor: Oracle Corporation, runtime: D:\\software\\Java\\jre</span><br><span class=\"line\">Default locale: zh_CN, platform encoding: GBK</span><br><span class=\"line\">OS name: <span class=\"string\">&quot;windows 10&quot;</span>, version: <span class=\"string\">&quot;10.0&quot;</span>, <span class=\"built_in\">arch</span>: <span class=\"string\">&quot;amd64&quot;</span>, family: <span class=\"string\">&quot;windows&quot;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"第三章-使用-Maven：命令行环境\"><a href=\"#第三章-使用-Maven：命令行环境\" class=\"headerlink\" title=\"第三章 使用 Maven：命令行环境\"></a>第三章 使用 Maven：命令行环境</h1><h2 id=\"实验一：根据坐标创建-Maven-工程\"><a href=\"#实验一：根据坐标创建-Maven-工程\" class=\"headerlink\" title=\"实验一：根据坐标创建 Maven 工程\"></a>实验一：根据坐标创建 Maven 工程</h2><h3 id=\"Maven-核心概念：坐标\"><a href=\"#Maven-核心概念：坐标\" class=\"headerlink\" title=\"Maven 核心概念：坐标\"></a>Maven 核心概念：坐标</h3><h4 id=\"①数学中的坐标\"><a href=\"#①数学中的坐标\" class=\"headerlink\" title=\"①数学中的坐标\"></a>①数学中的坐标</h4><ul>\n<li>使用 x、y、z 三个<strong>『向量』</strong>作为空间的坐标系，可以在<strong>『空间』</strong>中唯一的定位到一个<strong>『点』</strong></li>\n</ul>\n<h4 id=\"②Maven中的坐标\"><a href=\"#②Maven中的坐标\" class=\"headerlink\" title=\"②Maven中的坐标\"></a>②Maven中的坐标</h4><p>[1]向量说明</p>\n<ul>\n<li>使用三个<strong>『向量』</strong>在<strong>『Maven的仓库』</strong>中<strong>唯一</strong>的定位到一个<strong>『jar』</strong>包。<ul>\n<li><strong>groupId</strong>：公司或组织的 id</li>\n<li><strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id</li>\n<li><strong>version</strong>：版本号</li>\n</ul>\n</li>\n</ul>\n<p>[2]三个向量的取值方式</p>\n<ul>\n<li>groupId：公司或组织域名的倒序，通常也会加上项目名称<ul>\n<li>例如：com.atguigu.maven</li>\n</ul>\n</li>\n<li>artifactId：模块的名称，将来作为 Maven 工程的工程名</li>\n<li>version：模块的版本号，根据自己的需要设定<ul>\n<li>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本</li>\n<li>例如：RELEASE 表示正式版本</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>举例：</p>\n</blockquote>\n<ul>\n<li>groupId：com.atguigu.maven</li>\n<li>artifactId：pro01-atguigu-maven</li>\n<li>version：1.0-SNAPSHOT</li>\n</ul>\n<h4 id=\"③坐标和仓库中-jar-包的存储路径之间的对应关系\"><a href=\"#③坐标和仓库中-jar-包的存储路径之间的对应关系\" class=\"headerlink\" title=\"③坐标和仓库中 jar 包的存储路径之间的对应关系\"></a>③坐标和仓库中 jar 包的存储路径之间的对应关系</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 坐标： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上面坐标对应的 jar 包在 Maven 本地仓库中的位置：</span><br><span class=\"line\">Maven本地仓库根目录\\javax\\servlet\\servlet-api\\2.5\\servlet-api-2.5.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"实验操作：使用命令生成Maven工程\"><a href=\"#实验操作：使用命令生成Maven工程\" class=\"headerlink\" title=\"实验操作：使用命令生成Maven工程\"></a>实验操作：使用命令生成Maven工程</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.52zgdx8nqpc0.webp\" width=\"40%\"/>\n\n<br>\n\n<ul>\n<li>运行 <strong>mvn archetype:generate</strong> 命令</li>\n</ul>\n<blockquote>\n<p>TIP</p>\n<p>Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】</p>\n<p>Define value for property ‘groupId’: com.atguigu.maven</p>\n<p>Define value for property ‘artifactId’: pro01-maven-java</p>\n<p>Define value for property ‘version’ 1.0-SNAPSHOT: :【直接回车，使用默认值】</p>\n<p>Define value for property ‘package’ com.atguigu.maven: :【直接回车，使用默认值】</p>\n<p>Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】</p>\n</blockquote>\n<ul>\n<li>调整</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">自动生成的 App.java 和 AppTest.java 可以删除  --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 依赖信息配置 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- dependencies复数标签：里面包含dependency单数标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- dependency单数标签：配置一个具体的依赖 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 通过坐标来依赖其他jar包 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 依赖的范围 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>自动生成的 pom.xml 解读</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 当前Maven工程的坐标 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pro01-maven-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- 当前Maven工程的打包方式，可选值有下面三种： --&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- jar：表示这个工程是一个Java工程  --&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- war：表示这个工程是一个Web工程 --&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- pom：表示这个工程是“管理其他工程”的工程 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>pro01-maven-java<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 工程构建过程中读取源码时使用的字符集 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- 当前工程所依赖的jar包 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用dependency配置一个具体的依赖 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- scope标签配置依赖的范围 --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"Maven核心概念：POM\"><a href=\"#Maven核心概念：POM\" class=\"headerlink\" title=\"Maven核心概念：POM\"></a>Maven核心概念：POM</h3><h4 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h4><ul>\n<li>POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现</li>\n</ul>\n<h4 id=\"模型化思想\"><a href=\"#模型化思想\" class=\"headerlink\" title=\"模型化思想\"></a>模型化思想</h4><ul>\n<li>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据</li>\n</ul>\n<h4 id=\"对应的配置文件\"><a href=\"#对应的配置文件\" class=\"headerlink\" title=\"对应的配置文件\"></a>对应的配置文件</h4><ul>\n<li>POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。</li>\n</ul>\n<h3 id=\"Maven核心概念：约定的目录结构\"><a href=\"#Maven核心概念：约定的目录结构\" class=\"headerlink\" title=\"Maven核心概念：约定的目录结构\"></a>Maven核心概念：约定的目录结构</h3><h4 id=\"①各个目录的作用\"><a href=\"#①各个目录的作用\" class=\"headerlink\" title=\"①各个目录的作用\"></a>①各个目录的作用</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.178pqbq36pd.webp\" width=\"60%\"/>\n\n<br>\n\n<ul>\n<li>另外还有一个 target 目录专门存放构建操作输出的结果</li>\n</ul>\n<h4 id=\"②约定目录结构的意义\"><a href=\"#②约定目录结构的意义\" class=\"headerlink\" title=\"②约定目录结构的意义\"></a>②约定目录结构的意义</h4><ul>\n<li>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。</li>\n</ul>\n<h4 id=\"③约定大于配置\"><a href=\"#③约定大于配置\" class=\"headerlink\" title=\"③约定大于配置\"></a>③约定大于配置</h4><ul>\n<li><p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。</p>\n</li>\n<li><p>目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。</p>\n</li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>maven的工作机制还需要深入熟悉</li>\n</ol>\n</blockquote>\n<br>\n\n<img src=\"\" width=\"60%\"/>\n\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一章-Maven概述\"><a href=\"#第一章-Maven概述\" class=\"headerlink\" title=\"第一章 Maven概述\"></a>第一章 Maven概述</h1><h2 id=\"Why？为什么要学习-Maven？\"><a href=\"#Why？为什么要学习-Maven？\" class=\"headerlink\" title=\"Why？为什么要学习 Maven？\"></a>Why？为什么要学习 Maven？</h2><h3 id=\"Maven-作为依赖管理工具\"><a href=\"#Maven-作为依赖管理工具\" class=\"headerlink\" title=\"Maven 作为依赖管理工具\"></a>Maven 作为依赖管理工具</h3><h4 id=\"①jar-包的规模\"><a href=\"#①jar-包的规模\" class=\"headerlink\" title=\"①jar 包的规模\"></a>①jar 包的规模</h4><ul>\n<li>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的</li>\n<li>比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：<ul>\n<li>Nacos 服务注册发现</li>\n<li>Web 框架环境</li>\n<li>图模板技术 Thymeleaf</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>最终却导入了 106 个 jar 包</p>\n</blockquote>\n<p>而如果使用 Maven 来引入这些 jar 包只需要配置三个『<strong>依赖</strong>』：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Nacos 服务注册发现启动器 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- web启动器依赖 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 视图模板技术 thymeleaf --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"②jar-包的来源\"><a href=\"#②jar-包的来源\" class=\"headerlink\" title=\"②jar 包的来源\"></a>②jar 包的来源</h4><ul>\n<li>这个jar包所属技术的官网。官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载</li>\n<li>第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题:<ul>\n<li>jar包的名称</li>\n<li>jar包的版本</li>\n<li>jar包内的具体细节</li>\n</ul>\n</li>\n<li>而使用 Maven 后，依赖对应的 jar 包能够<strong>自动下载</strong>，方便、快捷又规范</li>\n</ul>\n<h4 id=\"③jar-包之间的依赖关系\"><a href=\"#③jar-包之间的依赖关系\" class=\"headerlink\" title=\"③jar 包之间的依赖关系\"></a>③jar 包之间的依赖关系</h4><ul>\n<li><p>框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度</p>\n</li>\n<li><p>下面是前面例子中 jar 包之间的依赖关系：</p>\n</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.mqcmj2wu734.webp\" width=\"65%\" />\n\n<br>\n\n<ul>\n<li>而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助</li>\n<li><strong>使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量</strong></li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"Maven-作为构建管理工具\"><a href=\"#Maven-作为构建管理工具\" class=\"headerlink\" title=\"Maven 作为构建管理工具\"></a>Maven 作为构建管理工具</h3><h4 id=\"①你没有注意过的构建\"><a href=\"#①你没有注意过的构建\" class=\"headerlink\" title=\"①你没有注意过的构建\"></a>①你没有注意过的构建</h4><ul>\n<li>可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的</li>\n</ul>\n<h4 id=\"②脱离-IDE-环境仍需构建\"><a href=\"#②脱离-IDE-环境仍需构建\" class=\"headerlink\" title=\"②脱离 IDE 环境仍需构建\"></a>②脱离 IDE 环境仍需构建</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1ivp2tn48qw0.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ul>\n<li><strong>管理规模庞大的 jar 包，需要专门工具。</strong></li>\n<li><strong>脱离 IDE 环境执行构建操作，需要专门工具。</strong></li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"What？什么是-Maven？\"><a href=\"#What？什么是-Maven？\" class=\"headerlink\" title=\"What？什么是 Maven？\"></a>What？什么是 Maven？</h2><ul>\n<li>Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供<strong>构建</strong>和<strong>依赖</strong>管理支持的工具</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ecian9do5e0.webp\" width=\"30%\"/>\n\n<br>\n\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><blockquote>\n<p>Java 项目开发过程中，构建指的是使用<strong>『原材料生产产品』</strong>的过程</p>\n</blockquote>\n<ul>\n<li>原材料<ul>\n<li>Java 源代码</li>\n<li>基于 HTML 的 Thymeleaf 文件</li>\n<li>图片</li>\n<li>配置文件</li>\n<li>……</li>\n</ul>\n</li>\n<li>产品<ul>\n<li>一个可以在服务器上运行的项目</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>构建过程包含的主要的环节：</strong></li>\n</ul>\n<blockquote>\n<ul>\n<li>清理：删除上一次构建的结果，为下一次构建做好准备</li>\n<li>编译：Java 源程序编译成 *.class 字节码文件</li>\n<li>测试：运行提前准备好的测试程序</li>\n<li>报告：针对刚才测试的结果生成一个全面的信息</li>\n<li>打包<ul>\n<li>Java工程：jar包</li>\n<li>Web工程：war包</li>\n</ul>\n</li>\n<li>安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库</li>\n<li>部署<ul>\n<li>部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上</li>\n<li>部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><ul>\n<li>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。例如：<ul>\n<li>junit-4.12 依赖 hamcrest-core-1.3</li>\n<li>thymeleaf-3.0.12.RELEASE 依赖 ognl-3.1.26<ul>\n<li>ognl-3.1.26 依赖 javassist-3.20.0-GA</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>依赖管理中要解决的具体问题：<ul>\n<li>jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</li>\n<li>jar 包之间的依赖：通过依赖的传递性自动完成</li>\n<li>jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Maven-的工作机制\"><a href=\"#Maven-的工作机制\" class=\"headerlink\" title=\"Maven 的工作机制\"></a>Maven 的工作机制</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6wuv1htwzko0.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"第二章-Maven-核心程序解压和配置\"><a href=\"#第二章-Maven-核心程序解压和配置\" class=\"headerlink\" title=\"第二章 Maven 核心程序解压和配置\"></a>第二章 Maven 核心程序解压和配置</h1><h2 id=\"Maven核心程序解压与配置\"><a href=\"#Maven核心程序解压与配置\" class=\"headerlink\" title=\"Maven核心程序解压与配置\"></a>Maven核心程序解压与配置</h2><ul>\n<li>Maven 官网地址：<a class=\"link\"   href=\"https://maven.apache.org/\" >Maven – Welcome to Apache Maven<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<ul>\n<li>解压Maven核心程序<ul>\n<li>核心程序压缩包：apache-maven-3.8.4-bin.zip，解压到<strong>非中文、没有空格</strong>的目录</li>\n<li>在解压目录中，我们需要着重关注 Maven 的核心配置文件：<strong>conf/settings.xml</strong></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>指定本地仓库<ul>\n<li>建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- localRepository</span></span><br><span class=\"line\"><span class=\"comment\">| The path to the local repository maven will use to store artifacts.</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class=\"line\"><span class=\"comment\">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\maven-repository<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>配置阿里云提供的镜像仓库<ul>\n<li>Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，<strong>访问国内网站</strong>，可以让 Maven 下载 jar 包的时候速度更快。配置的方式是：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--将原有的例子配置注释掉 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;mirror&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;id&gt;maven-default-http-blocker&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;url&gt;http://0.0.0.0/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;blocked&gt;true&lt;/blocked&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/mirror&gt; --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--加入我们的配置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>配置 Maven 工程的基础 JDK 版本</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.8<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><ul>\n<li>检查 JAVA_HOME 配置是否正确<ul>\n<li>Maven 是一个用 Java 语言开发的程序，它必须基于 JDK 来运行，需要通过 JAVA_HOME 来找到 JDK 的安装位置</li>\n</ul>\n</li>\n<li>配置 MAVEN_HOME</li>\n<li>配置PATH</li>\n<li>验证</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt;mvn -v</span><br><span class=\"line\">Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class=\"line\">Maven home: D:\\software\\apache-maven-3.8.4</span><br><span class=\"line\">Java version: 1.8.0_141, vendor: Oracle Corporation, runtime: D:\\software\\Java\\jre</span><br><span class=\"line\">Default locale: zh_CN, platform encoding: GBK</span><br><span class=\"line\">OS name: <span class=\"string\">&quot;windows 10&quot;</span>, version: <span class=\"string\">&quot;10.0&quot;</span>, <span class=\"built_in\">arch</span>: <span class=\"string\">&quot;amd64&quot;</span>, family: <span class=\"string\">&quot;windows&quot;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"第三章-使用-Maven：命令行环境\"><a href=\"#第三章-使用-Maven：命令行环境\" class=\"headerlink\" title=\"第三章 使用 Maven：命令行环境\"></a>第三章 使用 Maven：命令行环境</h1><h2 id=\"实验一：根据坐标创建-Maven-工程\"><a href=\"#实验一：根据坐标创建-Maven-工程\" class=\"headerlink\" title=\"实验一：根据坐标创建 Maven 工程\"></a>实验一：根据坐标创建 Maven 工程</h2><h3 id=\"Maven-核心概念：坐标\"><a href=\"#Maven-核心概念：坐标\" class=\"headerlink\" title=\"Maven 核心概念：坐标\"></a>Maven 核心概念：坐标</h3><h4 id=\"①数学中的坐标\"><a href=\"#①数学中的坐标\" class=\"headerlink\" title=\"①数学中的坐标\"></a>①数学中的坐标</h4><ul>\n<li>使用 x、y、z 三个<strong>『向量』</strong>作为空间的坐标系，可以在<strong>『空间』</strong>中唯一的定位到一个<strong>『点』</strong></li>\n</ul>\n<h4 id=\"②Maven中的坐标\"><a href=\"#②Maven中的坐标\" class=\"headerlink\" title=\"②Maven中的坐标\"></a>②Maven中的坐标</h4><p>[1]向量说明</p>\n<ul>\n<li>使用三个<strong>『向量』</strong>在<strong>『Maven的仓库』</strong>中<strong>唯一</strong>的定位到一个<strong>『jar』</strong>包。<ul>\n<li><strong>groupId</strong>：公司或组织的 id</li>\n<li><strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id</li>\n<li><strong>version</strong>：版本号</li>\n</ul>\n</li>\n</ul>\n<p>[2]三个向量的取值方式</p>\n<ul>\n<li>groupId：公司或组织域名的倒序，通常也会加上项目名称<ul>\n<li>例如：com.atguigu.maven</li>\n</ul>\n</li>\n<li>artifactId：模块的名称，将来作为 Maven 工程的工程名</li>\n<li>version：模块的版本号，根据自己的需要设定<ul>\n<li>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本</li>\n<li>例如：RELEASE 表示正式版本</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>举例：</p>\n</blockquote>\n<ul>\n<li>groupId：com.atguigu.maven</li>\n<li>artifactId：pro01-atguigu-maven</li>\n<li>version：1.0-SNAPSHOT</li>\n</ul>\n<h4 id=\"③坐标和仓库中-jar-包的存储路径之间的对应关系\"><a href=\"#③坐标和仓库中-jar-包的存储路径之间的对应关系\" class=\"headerlink\" title=\"③坐标和仓库中 jar 包的存储路径之间的对应关系\"></a>③坐标和仓库中 jar 包的存储路径之间的对应关系</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 坐标： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上面坐标对应的 jar 包在 Maven 本地仓库中的位置：</span><br><span class=\"line\">Maven本地仓库根目录\\javax\\servlet\\servlet-api\\2.5\\servlet-api-2.5.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"实验操作：使用命令生成Maven工程\"><a href=\"#实验操作：使用命令生成Maven工程\" class=\"headerlink\" title=\"实验操作：使用命令生成Maven工程\"></a>实验操作：使用命令生成Maven工程</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.52zgdx8nqpc0.webp\" width=\"40%\"/>\n\n<br>\n\n<ul>\n<li>运行 <strong>mvn archetype:generate</strong> 命令</li>\n</ul>\n<blockquote>\n<p>TIP</p>\n<p>Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】</p>\n<p>Define value for property ‘groupId’: com.atguigu.maven</p>\n<p>Define value for property ‘artifactId’: pro01-maven-java</p>\n<p>Define value for property ‘version’ 1.0-SNAPSHOT: :【直接回车，使用默认值】</p>\n<p>Define value for property ‘package’ com.atguigu.maven: :【直接回车，使用默认值】</p>\n<p>Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】</p>\n</blockquote>\n<ul>\n<li>调整</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">自动生成的 App.java 和 AppTest.java 可以删除  --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 依赖信息配置 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- dependencies复数标签：里面包含dependency单数标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- dependency单数标签：配置一个具体的依赖 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 通过坐标来依赖其他jar包 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 依赖的范围 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>自动生成的 pom.xml 解读</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 当前Maven工程的坐标 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pro01-maven-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- 当前Maven工程的打包方式，可选值有下面三种： --&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- jar：表示这个工程是一个Java工程  --&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- war：表示这个工程是一个Web工程 --&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- pom：表示这个工程是“管理其他工程”的工程 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>pro01-maven-java<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 工程构建过程中读取源码时使用的字符集 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- 当前工程所依赖的jar包 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用dependency配置一个具体的依赖 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- scope标签配置依赖的范围 --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"Maven核心概念：POM\"><a href=\"#Maven核心概念：POM\" class=\"headerlink\" title=\"Maven核心概念：POM\"></a>Maven核心概念：POM</h3><h4 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h4><ul>\n<li>POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现</li>\n</ul>\n<h4 id=\"模型化思想\"><a href=\"#模型化思想\" class=\"headerlink\" title=\"模型化思想\"></a>模型化思想</h4><ul>\n<li>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据</li>\n</ul>\n<h4 id=\"对应的配置文件\"><a href=\"#对应的配置文件\" class=\"headerlink\" title=\"对应的配置文件\"></a>对应的配置文件</h4><ul>\n<li>POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。</li>\n</ul>\n<h3 id=\"Maven核心概念：约定的目录结构\"><a href=\"#Maven核心概念：约定的目录结构\" class=\"headerlink\" title=\"Maven核心概念：约定的目录结构\"></a>Maven核心概念：约定的目录结构</h3><h4 id=\"①各个目录的作用\"><a href=\"#①各个目录的作用\" class=\"headerlink\" title=\"①各个目录的作用\"></a>①各个目录的作用</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.178pqbq36pd.webp\" width=\"60%\"/>\n\n<br>\n\n<ul>\n<li>另外还有一个 target 目录专门存放构建操作输出的结果</li>\n</ul>\n<h4 id=\"②约定目录结构的意义\"><a href=\"#②约定目录结构的意义\" class=\"headerlink\" title=\"②约定目录结构的意义\"></a>②约定目录结构的意义</h4><ul>\n<li>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。</li>\n</ul>\n<h4 id=\"③约定大于配置\"><a href=\"#③约定大于配置\" class=\"headerlink\" title=\"③约定大于配置\"></a>③约定大于配置</h4><ul>\n<li><p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。</p>\n</li>\n<li><p>目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。</p>\n</li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>maven的工作机制还需要深入熟悉</li>\n</ol>\n</blockquote>\n<br>\n\n<img src=\"\" width=\"60%\"/>\n\n<br>\n\n"},{"title":"Mybatis","auth":"ratears","date":"2022-08-28T15:40:58.000Z","update":"2022-08-28T15:40:58.000Z","_content":"\n\n\n# MyBatis简介\n\n## MyBatis历史\n\n- MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁\n  移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于\n  2013年11月迁移到Github。\n- iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架\n  包括SQL Maps和Data Access Objects（DAO）。\n\n<br>\n\n## MyBatis特性\n\n1. MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架\n2. MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集\n3. MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java\n   Objects，普通的Java对象）映射成数据库中的记录\n4. MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架\n\n<br>\n\n## MyBatis下载\n\nMyBatis下载地址：https://github.com/mybatis/mybatis-3\n\n<br>\n\n## 和其它持久化层技术对比\n\n- JDBC\n  - SQL 夹杂在Java代码中耦合度高，导致硬编码内伤\n  - 维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见\n  - 代码冗长，开发效率低\n- Hibernate 和 JPA\n  - 操作简便，开发效率高\n  - 程序中的长难复杂 SQL 需要绕过框架\n  - 内部自动生产的 SQL，不容易做特殊优化\n  - 基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难\n  - 反射操作太多，导致数据库性能下降\n- MyBatis\n  - 轻量级，性能出色\n  - SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据\n  - 开发效率稍逊于HIbernate，但是完全能够接受\n\n<br>\n\n## 搭建MyBatis\n\n### 开发环境\n\n- IDE：idea\n- 构建工具：maven\n- MySQL版本：MySQL 8\n- MyBatis版本：MyBatis 3.5.7\n\n> MySQL不同版本的注意事项\n> 1、驱动类driver-class-name\n> MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver\n> MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver\n>\n> 2、连接地址url\n> MySQL 5版本的url：\n> jdbc:mysql://localhost:3306/ssm\n> MySQL 8版本的url：\n> jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC\n> 否则运行测试用例报告如下错误：\n> java.sql.SQLException: The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more\n\n<br>\n\n### 创建maven工程\n\n1. 打包方式：jar\n2. 引入依赖\n\n```xml\n<dependencies>\n        <!-- Mybatis核心 -->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.5.7</version>\n        </dependency>\n        <!-- junit测试 -->\n        <dependency>\n        <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- MySQL驱动 -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.16</version>\n        </dependency>\n</dependencies>\n```\n\n3. 创建MyBatis的核心配置文件\n\n> - 习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴\n> - 核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息\n> - 核心配置文件存放的位置是src/main/resources目录下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n    <properties resource=\"jdbc.properties\" />\n\n    <typeAliases>\n        <!--\n        typeAlias：设置某个类型的别名\n        属性：\n        type：设置需要设置别名的类型\n        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名\n        且不区分大小写\n        -->\n        <!--<typeAlias type=\"com.atguigu.mybatis.pojo.User\"></typeAlias>-->\n        <!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写-->\n        <package name=\"com.study.pojo\"/>\n    </typeAliases>\n\n\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${mysql.jdbc.driver}\"/>\n                <property name=\"url\" value=\"${mysql.jdbc.url}\"/>\n                <property name=\"username\" value=\"${mysql.jdbc.username}\"/>\n                <property name=\"password\" value=\"${mysql.jdbc.password}\"/>\n            </dataSource>\n        </environment>\n\n        <environment id=\"test\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"Happy2022\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n<!--        <mapper resource=\"mappers/UserMapper.xml\" />-->\n        <package name=\"com.study.mapper\"/>\n    </mappers>\n</configuration>\n```\n\n<br>\n\n### 创建mapper接口\n\n- MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要\n  提供实现类\n\n```java\npublic interface UserMapper {\n    /**\n    * 添加用户信息\n    */\n    int insertUser();\n}\n```\n\n<br>\n\n### 创建MyBatis的映射文件\n\n- 相关概念：ORM（Object Relationship Mapping）对象关系映射\n  - 对象：Java的实体类对象\n  - 关系：关系型数据库\n  - 映射：二者之间的对应关系\n\n| Java概念 | 数据库概念 |\n| :------: | :--------: |\n|    类    |     表     |\n|   属性   |  字段/列   |\n|   对象   |  记录/行   |\n\n1. 映射文件的命名规则：\n\n> 表所对应的实体类的类名+Mapper.xml\n>\n> 例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml\n>\n> 因此一个映射文件对应一个实体类，对应一张表的操作\n>\n> MyBatis映射文件用于编写SQL，访问以及操作表中的数据\n>\n> MyBatis映射文件存放的位置是src/main/resources/mappers目录下\n\n2. MyBatis中可以面向接口操作数据，要保证两个一致：\n\n> - mapper接口的全类名和映射文件的命名空间（namespace）保持一致\n> - mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.atguigu.mybatis.mapper.UserMapper\">\n    <!--int insertUser();-->\n    <insert id=\"insertUser\">\n    insert into t_user values(null,'admin','123456',23,'男','12345@qq.com')\n    </insert>\n</mapper>\n```\n\n<br>\n\n### 通过junit测试功能\n\n```java\n//读取MyBatis的核心配置文件\nInputStream is = Resources.getResourceAsStream(\"mybatis-config.xml\");\n\n//创建SqlSessionFactoryBuilder对象\nSqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n\n//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象\nSqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);\n\n//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务\n//SqlSession sqlSession = sqlSessionFactory.openSession();\n\n//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交\nSqlSession sqlSession = sqlSessionFactory.openSession(true);\n\n//通过代理模式创建UserMapper接口的代理实现类对象\nUserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n\n//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配\n映射文件中的SQL标签，并执行标签中的SQL语句\nint result = userMapper.insertUser();\n\n//sqlSession.commit();\n\nSystem.out.println(\"结果：\"+result);\n```\n\n- SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）\n- SqlSessionFactory：是“生产”SqlSession的“工厂”\n- 工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象\n\n<br>\n\n### 加入log4j日志功能\n\n1. 加入依赖\n\n```xml\n<!-- log4j日志 -->\n<dependency>\n    <groupId>log4j</groupId>\n    <artifactId>log4j</artifactId>\n    <version>1.2.17</version>\n</dependency>\n```\n\n2. 加入log4j的配置文件\n\n- log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n    <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n        <param name=\"Encoding\" value=\"UTF-8\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"%-5p %d{MM-dd HH:mm:ss,SSS}%m (%F:%L) \\n\" />\n        </layout>\n    </appender>\n    <logger name=\"java.sql\">\n        <level value=\"debug\" />\n    </logger>\n    <logger name=\"org.apache.ibatis\">\n\n        <level value=\"info\" />\n    </logger>\n    <root>\n        <level value=\"debug\" />\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</log4j:configuration>\n```\n\n- 日志的级别:\n\n> FATAL(致命)>ERROR(错误)>WARN(警告)>INFO(信息)>DEBUG(调试)\n>\n> 从左到右打印的内容越来越详细\n\n<br>\n\n## 核心配置文件详解\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!--\n    MyBatis核心配置文件中，标签的顺序：\n    properties?,settings?,typeAliases?,typeHandlers?,\n    objectFactory?,objectWrapperFactory?,reflectorFactory?,\n    plugins?,environments?,databaseIdProvider?,mappers?\n    -->\n    <!--引入properties文件-->\n    <properties resource=\"jdbc.properties\" />\n    <!--设置类型别名-->\n    <typeAliases>\n        <!--\n        typeAlias：设置某个类型的别名\n        属性：\n        type：设置需要设置别名的类型\n        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名\n        且不区分大小写\n        -->\n        <!--<typeAlias type=\"com.atguigu.mybatis.pojo.User\"></typeAlias>-->\n        <!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写-->\n        <package name=\"com.atguigu.mybatis.pojo\"/>\n    </typeAliases>\n    <!--\n    environments：配置多个连接数据库的环境\n    属性：\n    default：设置默认使用的环境的id\n    -->\n    <environments default=\"development\">\n        <!--\nenvironment：配置某个具体的环境\n属性：\nid：表示连接数据库的环境的唯一标识，不能重复\n-->\n        <environment id=\"development\">\n            <!--\n            transactionManager：设置事务管理方式\n            属性：\n            type=\"JDBC|MANAGED\"\n            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事\n            务的提交或回滚需要手动处理\n            MANAGED：被管理，例如Spring\n            -->\n            <transactionManager type=\"JDBC\"/>\n            <!--\n            dataSource：配置数据源\n            属性：\n            type：设置数据源的类型\n            type=\"POOLED|UNPOOLED|JNDI\"\n            POOLED：表示使用数据库连接池缓存数据库连接\n            UNPOOLED：表示不使用数据库连接池\n            JNDI：表示使用上下文中的数据源\n            -->\n            <dataSource type=\"POOLED\">\n                <!--设置连接数据库的驱动-->\n                <property name=\"driver\" value=\"${jdbc.driver}\"/>\n                <!--设置连接数据库的连接地址-->\n                <property name=\"url\" value=\"${jdbc.url}\"/>\n                <!--设置连接数据库的用户名-->\n                <property name=\"username\" value=\"${jdbc.username}\"/>\n                <!--设置连接数据库的密码-->\n                <property name=\"password\" value=\"${jdbc.password}\"/>\n            </dataSource>\n        </environment>\n        <environment id=\"test\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n                <property name=\"url\"\n                          value=\"jdbc:mysql://localhost:3306/ssmserverTimezone=UTC\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"123456\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <!--引入映射文件-->\n    <mappers>\n        <!--<mapper resource=\"mappers/UserMapper.xml\"/>-->\n        <!--\n        以包为单位引入映射文件\n        要求：\n        1、mapper接口所在的包要和映射文件所在的包一致\n        2、mapper接口要和映射文件的名字一致\n        -->\n        <package name=\"com.atguigu.mybatis.mapper\"/>\n    </mappers>\n```\n\n<br>\n\n\n\n## MyBatis的增删改查\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2022/MyBatis.md","raw":"---\ntitle: Mybatis\nauth: ratears\ndate: 2022-08-28 23:40:58\nupdate: 2022-08-28 23:40:58\ncategories:\n\t- [mybatis]\ntags:\n\t- mybatis\n---\n\n\n\n# MyBatis简介\n\n## MyBatis历史\n\n- MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁\n  移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于\n  2013年11月迁移到Github。\n- iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架\n  包括SQL Maps和Data Access Objects（DAO）。\n\n<br>\n\n## MyBatis特性\n\n1. MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架\n2. MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集\n3. MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java\n   Objects，普通的Java对象）映射成数据库中的记录\n4. MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架\n\n<br>\n\n## MyBatis下载\n\nMyBatis下载地址：https://github.com/mybatis/mybatis-3\n\n<br>\n\n## 和其它持久化层技术对比\n\n- JDBC\n  - SQL 夹杂在Java代码中耦合度高，导致硬编码内伤\n  - 维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见\n  - 代码冗长，开发效率低\n- Hibernate 和 JPA\n  - 操作简便，开发效率高\n  - 程序中的长难复杂 SQL 需要绕过框架\n  - 内部自动生产的 SQL，不容易做特殊优化\n  - 基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难\n  - 反射操作太多，导致数据库性能下降\n- MyBatis\n  - 轻量级，性能出色\n  - SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据\n  - 开发效率稍逊于HIbernate，但是完全能够接受\n\n<br>\n\n## 搭建MyBatis\n\n### 开发环境\n\n- IDE：idea\n- 构建工具：maven\n- MySQL版本：MySQL 8\n- MyBatis版本：MyBatis 3.5.7\n\n> MySQL不同版本的注意事项\n> 1、驱动类driver-class-name\n> MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver\n> MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver\n>\n> 2、连接地址url\n> MySQL 5版本的url：\n> jdbc:mysql://localhost:3306/ssm\n> MySQL 8版本的url：\n> jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC\n> 否则运行测试用例报告如下错误：\n> java.sql.SQLException: The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more\n\n<br>\n\n### 创建maven工程\n\n1. 打包方式：jar\n2. 引入依赖\n\n```xml\n<dependencies>\n        <!-- Mybatis核心 -->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.5.7</version>\n        </dependency>\n        <!-- junit测试 -->\n        <dependency>\n        <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- MySQL驱动 -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.16</version>\n        </dependency>\n</dependencies>\n```\n\n3. 创建MyBatis的核心配置文件\n\n> - 习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴\n> - 核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息\n> - 核心配置文件存放的位置是src/main/resources目录下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n    <properties resource=\"jdbc.properties\" />\n\n    <typeAliases>\n        <!--\n        typeAlias：设置某个类型的别名\n        属性：\n        type：设置需要设置别名的类型\n        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名\n        且不区分大小写\n        -->\n        <!--<typeAlias type=\"com.atguigu.mybatis.pojo.User\"></typeAlias>-->\n        <!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写-->\n        <package name=\"com.study.pojo\"/>\n    </typeAliases>\n\n\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${mysql.jdbc.driver}\"/>\n                <property name=\"url\" value=\"${mysql.jdbc.url}\"/>\n                <property name=\"username\" value=\"${mysql.jdbc.username}\"/>\n                <property name=\"password\" value=\"${mysql.jdbc.password}\"/>\n            </dataSource>\n        </environment>\n\n        <environment id=\"test\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"Happy2022\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n<!--        <mapper resource=\"mappers/UserMapper.xml\" />-->\n        <package name=\"com.study.mapper\"/>\n    </mappers>\n</configuration>\n```\n\n<br>\n\n### 创建mapper接口\n\n- MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要\n  提供实现类\n\n```java\npublic interface UserMapper {\n    /**\n    * 添加用户信息\n    */\n    int insertUser();\n}\n```\n\n<br>\n\n### 创建MyBatis的映射文件\n\n- 相关概念：ORM（Object Relationship Mapping）对象关系映射\n  - 对象：Java的实体类对象\n  - 关系：关系型数据库\n  - 映射：二者之间的对应关系\n\n| Java概念 | 数据库概念 |\n| :------: | :--------: |\n|    类    |     表     |\n|   属性   |  字段/列   |\n|   对象   |  记录/行   |\n\n1. 映射文件的命名规则：\n\n> 表所对应的实体类的类名+Mapper.xml\n>\n> 例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml\n>\n> 因此一个映射文件对应一个实体类，对应一张表的操作\n>\n> MyBatis映射文件用于编写SQL，访问以及操作表中的数据\n>\n> MyBatis映射文件存放的位置是src/main/resources/mappers目录下\n\n2. MyBatis中可以面向接口操作数据，要保证两个一致：\n\n> - mapper接口的全类名和映射文件的命名空间（namespace）保持一致\n> - mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.atguigu.mybatis.mapper.UserMapper\">\n    <!--int insertUser();-->\n    <insert id=\"insertUser\">\n    insert into t_user values(null,'admin','123456',23,'男','12345@qq.com')\n    </insert>\n</mapper>\n```\n\n<br>\n\n### 通过junit测试功能\n\n```java\n//读取MyBatis的核心配置文件\nInputStream is = Resources.getResourceAsStream(\"mybatis-config.xml\");\n\n//创建SqlSessionFactoryBuilder对象\nSqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n\n//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象\nSqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);\n\n//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务\n//SqlSession sqlSession = sqlSessionFactory.openSession();\n\n//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交\nSqlSession sqlSession = sqlSessionFactory.openSession(true);\n\n//通过代理模式创建UserMapper接口的代理实现类对象\nUserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n\n//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配\n映射文件中的SQL标签，并执行标签中的SQL语句\nint result = userMapper.insertUser();\n\n//sqlSession.commit();\n\nSystem.out.println(\"结果：\"+result);\n```\n\n- SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）\n- SqlSessionFactory：是“生产”SqlSession的“工厂”\n- 工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象\n\n<br>\n\n### 加入log4j日志功能\n\n1. 加入依赖\n\n```xml\n<!-- log4j日志 -->\n<dependency>\n    <groupId>log4j</groupId>\n    <artifactId>log4j</artifactId>\n    <version>1.2.17</version>\n</dependency>\n```\n\n2. 加入log4j的配置文件\n\n- log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n    <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n        <param name=\"Encoding\" value=\"UTF-8\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <param name=\"ConversionPattern\" value=\"%-5p %d{MM-dd HH:mm:ss,SSS}%m (%F:%L) \\n\" />\n        </layout>\n    </appender>\n    <logger name=\"java.sql\">\n        <level value=\"debug\" />\n    </logger>\n    <logger name=\"org.apache.ibatis\">\n\n        <level value=\"info\" />\n    </logger>\n    <root>\n        <level value=\"debug\" />\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</log4j:configuration>\n```\n\n- 日志的级别:\n\n> FATAL(致命)>ERROR(错误)>WARN(警告)>INFO(信息)>DEBUG(调试)\n>\n> 从左到右打印的内容越来越详细\n\n<br>\n\n## 核心配置文件详解\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!--\n    MyBatis核心配置文件中，标签的顺序：\n    properties?,settings?,typeAliases?,typeHandlers?,\n    objectFactory?,objectWrapperFactory?,reflectorFactory?,\n    plugins?,environments?,databaseIdProvider?,mappers?\n    -->\n    <!--引入properties文件-->\n    <properties resource=\"jdbc.properties\" />\n    <!--设置类型别名-->\n    <typeAliases>\n        <!--\n        typeAlias：设置某个类型的别名\n        属性：\n        type：设置需要设置别名的类型\n        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名\n        且不区分大小写\n        -->\n        <!--<typeAlias type=\"com.atguigu.mybatis.pojo.User\"></typeAlias>-->\n        <!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写-->\n        <package name=\"com.atguigu.mybatis.pojo\"/>\n    </typeAliases>\n    <!--\n    environments：配置多个连接数据库的环境\n    属性：\n    default：设置默认使用的环境的id\n    -->\n    <environments default=\"development\">\n        <!--\nenvironment：配置某个具体的环境\n属性：\nid：表示连接数据库的环境的唯一标识，不能重复\n-->\n        <environment id=\"development\">\n            <!--\n            transactionManager：设置事务管理方式\n            属性：\n            type=\"JDBC|MANAGED\"\n            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事\n            务的提交或回滚需要手动处理\n            MANAGED：被管理，例如Spring\n            -->\n            <transactionManager type=\"JDBC\"/>\n            <!--\n            dataSource：配置数据源\n            属性：\n            type：设置数据源的类型\n            type=\"POOLED|UNPOOLED|JNDI\"\n            POOLED：表示使用数据库连接池缓存数据库连接\n            UNPOOLED：表示不使用数据库连接池\n            JNDI：表示使用上下文中的数据源\n            -->\n            <dataSource type=\"POOLED\">\n                <!--设置连接数据库的驱动-->\n                <property name=\"driver\" value=\"${jdbc.driver}\"/>\n                <!--设置连接数据库的连接地址-->\n                <property name=\"url\" value=\"${jdbc.url}\"/>\n                <!--设置连接数据库的用户名-->\n                <property name=\"username\" value=\"${jdbc.username}\"/>\n                <!--设置连接数据库的密码-->\n                <property name=\"password\" value=\"${jdbc.password}\"/>\n            </dataSource>\n        </environment>\n        <environment id=\"test\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n                <property name=\"url\"\n                          value=\"jdbc:mysql://localhost:3306/ssmserverTimezone=UTC\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"123456\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <!--引入映射文件-->\n    <mappers>\n        <!--<mapper resource=\"mappers/UserMapper.xml\"/>-->\n        <!--\n        以包为单位引入映射文件\n        要求：\n        1、mapper接口所在的包要和映射文件所在的包一致\n        2、mapper接口要和映射文件的名字一致\n        -->\n        <package name=\"com.atguigu.mybatis.mapper\"/>\n    </mappers>\n```\n\n<br>\n\n\n\n## MyBatis的增删改查\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"MyBatis","published":1,"updated":"2022-08-29T04:09:12.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsn4000edcta3d7o8f5b","content":"<h1 id=\"MyBatis简介\"><a href=\"#MyBatis简介\" class=\"headerlink\" title=\"MyBatis简介\"></a>MyBatis简介</h1><h2 id=\"MyBatis历史\"><a href=\"#MyBatis历史\" class=\"headerlink\" title=\"MyBatis历史\"></a>MyBatis历史</h2><ul>\n<li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁<br>移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于<br>2013年11月迁移到Github。</li>\n<li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架<br>包括SQL Maps和Data Access Objects（DAO）。</li>\n</ul>\n<br>\n\n<h2 id=\"MyBatis特性\"><a href=\"#MyBatis特性\" class=\"headerlink\" title=\"MyBatis特性\"></a>MyBatis特性</h2><ol>\n<li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li>\n<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li>\n<li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java<br>Objects，普通的Java对象）映射成数据库中的记录</li>\n<li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li>\n</ol>\n<br>\n\n<h2 id=\"MyBatis下载\"><a href=\"#MyBatis下载\" class=\"headerlink\" title=\"MyBatis下载\"></a>MyBatis下载</h2><p>MyBatis下载地址：<a class=\"link\"   href=\"https://github.com/mybatis/mybatis-3\" >https://github.com/mybatis/mybatis-3<i class=\"fas fa-external-link-alt\"></i></a></p>\n<br>\n\n<h2 id=\"和其它持久化层技术对比\"><a href=\"#和其它持久化层技术对比\" class=\"headerlink\" title=\"和其它持久化层技术对比\"></a>和其它持久化层技术对比</h2><ul>\n<li>JDBC<ul>\n<li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li>\n<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li>\n<li>代码冗长，开发效率低</li>\n</ul>\n</li>\n<li>Hibernate 和 JPA<ul>\n<li>操作简便，开发效率高</li>\n<li>程序中的长难复杂 SQL 需要绕过框架</li>\n<li>内部自动生产的 SQL，不容易做特殊优化</li>\n<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难</li>\n<li>反射操作太多，导致数据库性能下降</li>\n</ul>\n</li>\n<li>MyBatis<ul>\n<li>轻量级，性能出色</li>\n<li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li>\n<li>开发效率稍逊于HIbernate，但是完全能够接受</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h2 id=\"搭建MyBatis\"><a href=\"#搭建MyBatis\" class=\"headerlink\" title=\"搭建MyBatis\"></a>搭建MyBatis</h2><h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><ul>\n<li>IDE：idea</li>\n<li>构建工具：maven</li>\n<li>MySQL版本：MySQL 8</li>\n<li>MyBatis版本：MyBatis 3.5.7</li>\n</ul>\n<blockquote>\n<p>MySQL不同版本的注意事项<br>1、驱动类driver-class-name<br>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver<br>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p>\n<p>2、连接地址url<br>MySQL 5版本的url：<br>jdbc:mysql://localhost:3306/ssm<br>MySQL 8版本的url：<br>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<br>否则运行测试用例报告如下错误：<br>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more</p>\n</blockquote>\n<br>\n\n<h3 id=\"创建maven工程\"><a href=\"#创建maven工程\" class=\"headerlink\" title=\"创建maven工程\"></a>创建maven工程</h3><ol>\n<li>打包方式：jar</li>\n<li>引入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- junit测试 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建MyBatis的核心配置文件</li>\n</ol>\n<blockquote>\n<ul>\n<li>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴</li>\n<li>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</li>\n<li>核心配置文件存放的位置是src/main/resources目录下</li>\n</ul>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        typeAlias：设置某个类型的别名</span></span><br><span class=\"line\"><span class=\"comment\">        属性：</span></span><br><span class=\"line\"><span class=\"comment\">        type：设置需要设置别名的类型</span></span><br><span class=\"line\"><span class=\"comment\">        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名</span></span><br><span class=\"line\"><span class=\"comment\">        且不区分大小写</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.study.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Happy2022&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot; /&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.study.mapper&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"创建mapper接口\"><a href=\"#创建mapper接口\" class=\"headerlink\" title=\"创建mapper接口\"></a>创建mapper接口</h3><ul>\n<li>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要<br>提供实现类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 添加用户信息</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"创建MyBatis的映射文件\"><a href=\"#创建MyBatis的映射文件\" class=\"headerlink\" title=\"创建MyBatis的映射文件\"></a>创建MyBatis的映射文件</h3><ul>\n<li>相关概念：ORM（Object Relationship Mapping）对象关系映射<ul>\n<li>对象：Java的实体类对象</li>\n<li>关系：关系型数据库</li>\n<li>映射：二者之间的对应关系</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Java概念</th>\n<th align=\"center\">数据库概念</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">类</td>\n<td align=\"center\">表</td>\n</tr>\n<tr>\n<td align=\"center\">属性</td>\n<td align=\"center\">字段/列</td>\n</tr>\n<tr>\n<td align=\"center\">对象</td>\n<td align=\"center\">记录/行</td>\n</tr>\n</tbody></table>\n<ol>\n<li>映射文件的命名规则：</li>\n</ol>\n<blockquote>\n<p>表所对应的实体类的类名+Mapper.xml</p>\n<p>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p>\n<p>因此一个映射文件对应一个实体类，对应一张表的操作</p>\n<p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p>\n<p>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</p>\n</blockquote>\n<ol start=\"2\">\n<li>MyBatis中可以面向接口操作数据，要保证两个一致：</li>\n</ol>\n<blockquote>\n<ul>\n<li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li>\n<li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li>\n</ul>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--int insertUser();--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertUser&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"通过junit测试功能\"><a href=\"#通过junit测试功能\" class=\"headerlink\" title=\"通过junit测试功能\"></a>通过junit测试功能</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//读取MyBatis的核心配置文件</span></span><br><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> Resources.getResourceAsStream(<span class=\"string\">&quot;mybatis-config.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建SqlSessionFactoryBuilder对象</span></span><br><span class=\"line\"><span class=\"type\">SqlSessionFactoryBuilder</span> <span class=\"variable\">sqlSessionFactoryBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class=\"line\"><span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class=\"line\"><span class=\"comment\">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span></span><br><span class=\"line\"><span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> sqlSessionFactory.openSession(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class=\"line\"><span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span></span><br><span class=\"line\">映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> userMapper.insertUser();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sqlSession.commit();</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;结果：&quot;</span>+result);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li>\n<li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li>\n<li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</li>\n</ul>\n<br>\n\n<h3 id=\"加入log4j日志功能\"><a href=\"#加入log4j日志功能\" class=\"headerlink\" title=\"加入log4j日志功能\"></a>加入log4j日志功能</h3><ol>\n<li>加入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- log4j日志 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>加入log4j的配置文件</li>\n</ol>\n<ul>\n<li>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">log4j</span>:configuration <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span> <span class=\"attr\">xmlns:log4j</span>=<span class=\"string\">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;STDOUT&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Encoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;%m (%F:%L) \\n&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;java.sql&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;info&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>日志的级别:</li>\n</ul>\n<blockquote>\n<p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</p>\n<p>从左到右打印的内容越来越详细</p>\n</blockquote>\n<br>\n\n<h2 id=\"核心配置文件详解\"><a href=\"#核心配置文件详解\" class=\"headerlink\" title=\"核心配置文件详解\"></a>核心配置文件详解</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    MyBatis核心配置文件中，标签的顺序：</span></span><br><span class=\"line\"><span class=\"comment\">    properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class=\"line\"><span class=\"comment\">    objectFactory?,objectWrapperFactory?,reflectorFactory?,</span></span><br><span class=\"line\"><span class=\"comment\">    plugins?,environments?,databaseIdProvider?,mappers?</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--引入properties文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--设置类型别名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        typeAlias：设置某个类型的别名</span></span><br><span class=\"line\"><span class=\"comment\">        属性：</span></span><br><span class=\"line\"><span class=\"comment\">        type：设置需要设置别名的类型</span></span><br><span class=\"line\"><span class=\"comment\">        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名</span></span><br><span class=\"line\"><span class=\"comment\">        且不区分大小写</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    environments：配置多个连接数据库的环境</span></span><br><span class=\"line\"><span class=\"comment\">    属性：</span></span><br><span class=\"line\"><span class=\"comment\">    default：设置默认使用的环境的id</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">environment：配置某个具体的环境</span></span><br><span class=\"line\"><span class=\"comment\">属性：</span></span><br><span class=\"line\"><span class=\"comment\">id：表示连接数据库的环境的唯一标识，不能重复</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            transactionManager：设置事务管理方式</span></span><br><span class=\"line\"><span class=\"comment\">            属性：</span></span><br><span class=\"line\"><span class=\"comment\">            type=&quot;JDBC|MANAGED&quot;</span></span><br><span class=\"line\"><span class=\"comment\">            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事</span></span><br><span class=\"line\"><span class=\"comment\">            务的提交或回滚需要手动处理</span></span><br><span class=\"line\"><span class=\"comment\">            MANAGED：被管理，例如Spring</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            dataSource：配置数据源</span></span><br><span class=\"line\"><span class=\"comment\">            属性：</span></span><br><span class=\"line\"><span class=\"comment\">            type：设置数据源的类型</span></span><br><span class=\"line\"><span class=\"comment\">            type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class=\"line\"><span class=\"comment\">            POOLED：表示使用数据库连接池缓存数据库连接</span></span><br><span class=\"line\"><span class=\"comment\">            UNPOOLED：表示不使用数据库连接池</span></span><br><span class=\"line\"><span class=\"comment\">            JNDI：表示使用上下文中的数据源</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                          <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/ssmserverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--引入映射文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        以包为单位引入映射文件</span></span><br><span class=\"line\"><span class=\"comment\">        要求：</span></span><br><span class=\"line\"><span class=\"comment\">        1、mapper接口所在的包要和映射文件所在的包一致</span></span><br><span class=\"line\"><span class=\"comment\">        2、mapper接口要和映射文件的名字一致</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"MyBatis的增删改查\"><a href=\"#MyBatis的增删改查\" class=\"headerlink\" title=\"MyBatis的增删改查\"></a>MyBatis的增删改查</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MyBatis简介\"><a href=\"#MyBatis简介\" class=\"headerlink\" title=\"MyBatis简介\"></a>MyBatis简介</h1><h2 id=\"MyBatis历史\"><a href=\"#MyBatis历史\" class=\"headerlink\" title=\"MyBatis历史\"></a>MyBatis历史</h2><ul>\n<li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁<br>移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于<br>2013年11月迁移到Github。</li>\n<li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架<br>包括SQL Maps和Data Access Objects（DAO）。</li>\n</ul>\n<br>\n\n<h2 id=\"MyBatis特性\"><a href=\"#MyBatis特性\" class=\"headerlink\" title=\"MyBatis特性\"></a>MyBatis特性</h2><ol>\n<li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li>\n<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li>\n<li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java<br>Objects，普通的Java对象）映射成数据库中的记录</li>\n<li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li>\n</ol>\n<br>\n\n<h2 id=\"MyBatis下载\"><a href=\"#MyBatis下载\" class=\"headerlink\" title=\"MyBatis下载\"></a>MyBatis下载</h2><p>MyBatis下载地址：<a class=\"link\"   href=\"https://github.com/mybatis/mybatis-3\" >https://github.com/mybatis/mybatis-3<i class=\"fas fa-external-link-alt\"></i></a></p>\n<br>\n\n<h2 id=\"和其它持久化层技术对比\"><a href=\"#和其它持久化层技术对比\" class=\"headerlink\" title=\"和其它持久化层技术对比\"></a>和其它持久化层技术对比</h2><ul>\n<li>JDBC<ul>\n<li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li>\n<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li>\n<li>代码冗长，开发效率低</li>\n</ul>\n</li>\n<li>Hibernate 和 JPA<ul>\n<li>操作简便，开发效率高</li>\n<li>程序中的长难复杂 SQL 需要绕过框架</li>\n<li>内部自动生产的 SQL，不容易做特殊优化</li>\n<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难</li>\n<li>反射操作太多，导致数据库性能下降</li>\n</ul>\n</li>\n<li>MyBatis<ul>\n<li>轻量级，性能出色</li>\n<li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li>\n<li>开发效率稍逊于HIbernate，但是完全能够接受</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h2 id=\"搭建MyBatis\"><a href=\"#搭建MyBatis\" class=\"headerlink\" title=\"搭建MyBatis\"></a>搭建MyBatis</h2><h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><ul>\n<li>IDE：idea</li>\n<li>构建工具：maven</li>\n<li>MySQL版本：MySQL 8</li>\n<li>MyBatis版本：MyBatis 3.5.7</li>\n</ul>\n<blockquote>\n<p>MySQL不同版本的注意事项<br>1、驱动类driver-class-name<br>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver<br>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p>\n<p>2、连接地址url<br>MySQL 5版本的url：<br>jdbc:mysql://localhost:3306/ssm<br>MySQL 8版本的url：<br>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<br>否则运行测试用例报告如下错误：<br>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more</p>\n</blockquote>\n<br>\n\n<h3 id=\"创建maven工程\"><a href=\"#创建maven工程\" class=\"headerlink\" title=\"创建maven工程\"></a>创建maven工程</h3><ol>\n<li>打包方式：jar</li>\n<li>引入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- junit测试 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建MyBatis的核心配置文件</li>\n</ol>\n<blockquote>\n<ul>\n<li>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴</li>\n<li>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</li>\n<li>核心配置文件存放的位置是src/main/resources目录下</li>\n</ul>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        typeAlias：设置某个类型的别名</span></span><br><span class=\"line\"><span class=\"comment\">        属性：</span></span><br><span class=\"line\"><span class=\"comment\">        type：设置需要设置别名的类型</span></span><br><span class=\"line\"><span class=\"comment\">        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名</span></span><br><span class=\"line\"><span class=\"comment\">        且不区分大小写</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.study.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;mysql.jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Happy2022&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot; /&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.study.mapper&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"创建mapper接口\"><a href=\"#创建mapper接口\" class=\"headerlink\" title=\"创建mapper接口\"></a>创建mapper接口</h3><ul>\n<li>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要<br>提供实现类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 添加用户信息</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"创建MyBatis的映射文件\"><a href=\"#创建MyBatis的映射文件\" class=\"headerlink\" title=\"创建MyBatis的映射文件\"></a>创建MyBatis的映射文件</h3><ul>\n<li>相关概念：ORM（Object Relationship Mapping）对象关系映射<ul>\n<li>对象：Java的实体类对象</li>\n<li>关系：关系型数据库</li>\n<li>映射：二者之间的对应关系</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Java概念</th>\n<th align=\"center\">数据库概念</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">类</td>\n<td align=\"center\">表</td>\n</tr>\n<tr>\n<td align=\"center\">属性</td>\n<td align=\"center\">字段/列</td>\n</tr>\n<tr>\n<td align=\"center\">对象</td>\n<td align=\"center\">记录/行</td>\n</tr>\n</tbody></table>\n<ol>\n<li>映射文件的命名规则：</li>\n</ol>\n<blockquote>\n<p>表所对应的实体类的类名+Mapper.xml</p>\n<p>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p>\n<p>因此一个映射文件对应一个实体类，对应一张表的操作</p>\n<p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p>\n<p>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</p>\n</blockquote>\n<ol start=\"2\">\n<li>MyBatis中可以面向接口操作数据，要保证两个一致：</li>\n</ol>\n<blockquote>\n<ul>\n<li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li>\n<li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li>\n</ul>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--int insertUser();--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertUser&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"通过junit测试功能\"><a href=\"#通过junit测试功能\" class=\"headerlink\" title=\"通过junit测试功能\"></a>通过junit测试功能</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//读取MyBatis的核心配置文件</span></span><br><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> Resources.getResourceAsStream(<span class=\"string\">&quot;mybatis-config.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建SqlSessionFactoryBuilder对象</span></span><br><span class=\"line\"><span class=\"type\">SqlSessionFactoryBuilder</span> <span class=\"variable\">sqlSessionFactoryBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class=\"line\"><span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class=\"line\"><span class=\"comment\">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span></span><br><span class=\"line\"><span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> sqlSessionFactory.openSession(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class=\"line\"><span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span></span><br><span class=\"line\">映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> userMapper.insertUser();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sqlSession.commit();</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;结果：&quot;</span>+result);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li>\n<li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li>\n<li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</li>\n</ul>\n<br>\n\n<h3 id=\"加入log4j日志功能\"><a href=\"#加入log4j日志功能\" class=\"headerlink\" title=\"加入log4j日志功能\"></a>加入log4j日志功能</h3><ol>\n<li>加入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- log4j日志 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>加入log4j的配置文件</li>\n</ol>\n<ul>\n<li>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">log4j</span>:configuration <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span> <span class=\"attr\">xmlns:log4j</span>=<span class=\"string\">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;STDOUT&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Encoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;%m (%F:%L) \\n&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;java.sql&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;info&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>日志的级别:</li>\n</ul>\n<blockquote>\n<p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</p>\n<p>从左到右打印的内容越来越详细</p>\n</blockquote>\n<br>\n\n<h2 id=\"核心配置文件详解\"><a href=\"#核心配置文件详解\" class=\"headerlink\" title=\"核心配置文件详解\"></a>核心配置文件详解</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    MyBatis核心配置文件中，标签的顺序：</span></span><br><span class=\"line\"><span class=\"comment\">    properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class=\"line\"><span class=\"comment\">    objectFactory?,objectWrapperFactory?,reflectorFactory?,</span></span><br><span class=\"line\"><span class=\"comment\">    plugins?,environments?,databaseIdProvider?,mappers?</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--引入properties文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--设置类型别名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        typeAlias：设置某个类型的别名</span></span><br><span class=\"line\"><span class=\"comment\">        属性：</span></span><br><span class=\"line\"><span class=\"comment\">        type：设置需要设置别名的类型</span></span><br><span class=\"line\"><span class=\"comment\">        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名</span></span><br><span class=\"line\"><span class=\"comment\">        且不区分大小写</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    environments：配置多个连接数据库的环境</span></span><br><span class=\"line\"><span class=\"comment\">    属性：</span></span><br><span class=\"line\"><span class=\"comment\">    default：设置默认使用的环境的id</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">environment：配置某个具体的环境</span></span><br><span class=\"line\"><span class=\"comment\">属性：</span></span><br><span class=\"line\"><span class=\"comment\">id：表示连接数据库的环境的唯一标识，不能重复</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            transactionManager：设置事务管理方式</span></span><br><span class=\"line\"><span class=\"comment\">            属性：</span></span><br><span class=\"line\"><span class=\"comment\">            type=&quot;JDBC|MANAGED&quot;</span></span><br><span class=\"line\"><span class=\"comment\">            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事</span></span><br><span class=\"line\"><span class=\"comment\">            务的提交或回滚需要手动处理</span></span><br><span class=\"line\"><span class=\"comment\">            MANAGED：被管理，例如Spring</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            dataSource：配置数据源</span></span><br><span class=\"line\"><span class=\"comment\">            属性：</span></span><br><span class=\"line\"><span class=\"comment\">            type：设置数据源的类型</span></span><br><span class=\"line\"><span class=\"comment\">            type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class=\"line\"><span class=\"comment\">            POOLED：表示使用数据库连接池缓存数据库连接</span></span><br><span class=\"line\"><span class=\"comment\">            UNPOOLED：表示不使用数据库连接池</span></span><br><span class=\"line\"><span class=\"comment\">            JNDI：表示使用上下文中的数据源</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                          <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/ssmserverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--引入映射文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        以包为单位引入映射文件</span></span><br><span class=\"line\"><span class=\"comment\">        要求：</span></span><br><span class=\"line\"><span class=\"comment\">        1、mapper接口所在的包要和映射文件所在的包一致</span></span><br><span class=\"line\"><span class=\"comment\">        2、mapper接口要和映射文件的名字一致</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"MyBatis的增删改查\"><a href=\"#MyBatis的增删改查\" class=\"headerlink\" title=\"MyBatis的增删改查\"></a>MyBatis的增删改查</h2>"},{"title":"Nexus搭建Maven私服","author":"ratears","date":"2022-09-28T10:38:46.000Z","updated":"2022-09-28T10:38:46.000Z","_content":"\n\n\n# Nexus 安装\n\n- [Nexus下载](https://www.sonatype.com/thanks/repo-oss)\n\n```shell\n# （1）上传 下载的软件到目录 /app\n[root@bu2-vm-svr-67 app]# ll\ntotal 212392\n-rw-r--r-- 1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz\n\n[root@bu2-vm-svr-67 app]# tar -zxvf nexus-3.42.0-01-unix.tar.gz\n\n[root@bu2-vm-svr-67 app]# ll\ntotal 212400\ndrwxr-xr-x 10 root root      4096 Sep 28 18:55 nexus-3.42.0-01\n-rw-r--r--  1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz\ndrwxr-xr-x  3 root root      4096 Sep 28 18:55 sonatype-work\n\n[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/bin/nexus\n\nrun_as_root=false\n\n[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/etc/nexus-default.properties\n\napplication-port=7071\n\n[root@bu2-vm-svr-67 app]# /app/nexus-3.42.0-01/bin/nexus start\nStarting nexus\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","source":"_posts/2022/Nexus搭建Maven私服.md","raw":"---\ntitle: Nexus搭建Maven私服\nauthor: ratears\ncategories:\n\t- [Maven,Nexus]\ntags:\n\t- Nexus\n\t- Maven\ndate: 2022-09-28 18:38:46\nupdated: 2022-09-28 18:38:46\n---\n\n\n\n# Nexus 安装\n\n- [Nexus下载](https://www.sonatype.com/thanks/repo-oss)\n\n```shell\n# （1）上传 下载的软件到目录 /app\n[root@bu2-vm-svr-67 app]# ll\ntotal 212392\n-rw-r--r-- 1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz\n\n[root@bu2-vm-svr-67 app]# tar -zxvf nexus-3.42.0-01-unix.tar.gz\n\n[root@bu2-vm-svr-67 app]# ll\ntotal 212400\ndrwxr-xr-x 10 root root      4096 Sep 28 18:55 nexus-3.42.0-01\n-rw-r--r--  1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz\ndrwxr-xr-x  3 root root      4096 Sep 28 18:55 sonatype-work\n\n[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/bin/nexus\n\nrun_as_root=false\n\n[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/etc/nexus-default.properties\n\napplication-port=7071\n\n[root@bu2-vm-svr-67 app]# /app/nexus-3.42.0-01/bin/nexus start\nStarting nexus\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","slug":"Nexus搭建Maven私服","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsn5000hdctabjnc8lxu","content":"<h1 id=\"Nexus-安装\"><a href=\"#Nexus-安装\" class=\"headerlink\" title=\"Nexus 安装\"></a>Nexus 安装</h1><ul>\n<li><a class=\"link\"   href=\"https://www.sonatype.com/thanks/repo-oss\" >Nexus下载<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）上传 下载的软件到目录 /app</span></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# ll</span><br><span class=\"line\">total 212392</span><br><span class=\"line\">-rw-r--r-- 1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# tar -zxvf nexus-3.42.0-01-unix.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# ll</span><br><span class=\"line\">total 212400</span><br><span class=\"line\">drwxr-xr-x 10 root root      4096 Sep 28 18:55 nexus-3.42.0-01</span><br><span class=\"line\">-rw-r--r--  1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz</span><br><span class=\"line\">drwxr-xr-x  3 root root      4096 Sep 28 18:55 sonatype-work</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/bin/nexus</span><br><span class=\"line\"></span><br><span class=\"line\">run_as_root=false</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/etc/nexus-default.properties</span><br><span class=\"line\"></span><br><span class=\"line\">application-port=7071</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# /app/nexus-3.42.0-01/bin/nexus start</span><br><span class=\"line\">Starting nexus</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nexus-安装\"><a href=\"#Nexus-安装\" class=\"headerlink\" title=\"Nexus 安装\"></a>Nexus 安装</h1><ul>\n<li><a class=\"link\"   href=\"https://www.sonatype.com/thanks/repo-oss\" >Nexus下载<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）上传 下载的软件到目录 /app</span></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# ll</span><br><span class=\"line\">total 212392</span><br><span class=\"line\">-rw-r--r-- 1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# tar -zxvf nexus-3.42.0-01-unix.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# ll</span><br><span class=\"line\">total 212400</span><br><span class=\"line\">drwxr-xr-x 10 root root      4096 Sep 28 18:55 nexus-3.42.0-01</span><br><span class=\"line\">-rw-r--r--  1 root root 217484934 Sep 28 14:06 nexus-3.42.0-01-unix.tar.gz</span><br><span class=\"line\">drwxr-xr-x  3 root root      4096 Sep 28 18:55 sonatype-work</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/bin/nexus</span><br><span class=\"line\"></span><br><span class=\"line\">run_as_root=false</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# vi /app/nexus-3.42.0-01/etc/nexus-default.properties</span><br><span class=\"line\"></span><br><span class=\"line\">application-port=7071</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-67 app]# /app/nexus-3.42.0-01/bin/nexus start</span><br><span class=\"line\">Starting nexus</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>"},{"title":"kingbase","author":"sonzonzy","date":"2022-05-16T18:51:05.000Z","updated":"2022-05-16T18:51:05.000Z","_content":"\n# Kingbase 安装与启停\n\n## 安装前准备工作\n\n- 服务器安装jdk1.8+版本并配置环境变量\n- 创建kingbase用户组与用户。创建目录，并设置目录属组、属组、权限\n- 上传kingbase安装包和kingbase的license.dat 到服务器（安装包和license可以到[官网](https://www.kingbase.com.cn/rjcxxz/index.htm)下载） \n\n  <br/>\n\n```shell\n# 为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前需做好选项、存储目录规划\n\n# 使用root用户登录进服务器\n# /install 安装软件上传目录  \n# /kingbase/V8  数据库安装目录  \n# /backup 备份目录  \n# /data 数据存储目录  \n# /archive 归档目录\n[root@bu2-vm-svr-66 ~]# mkdir -p /install /KingbaseES/V8 /backup /data /archive\n\n# 上传 安装包、license.dat 到 /install 目录\n# 上传 执行脚本 optimize_system_conf_kcp.sh 和 optimize_database_conf.s 到 /install 目录\n# optimize_system_conf_kcp.sh 优化操作系统的脚本   optimize_database_conf.sh 优化数据库的脚本\n\n[root@bu2-vm-svr-66 ~]# ll /install\n总用量 852348\n-rw-r--r--. 1 root root 872781824 5月  11 03:27 KingbaseES_V008R006C005B0023_Lin                                      64_single_install.iso\n-rw-r--r--. 1 root root      3351 5月  11 03:27 license_12350_0.dat\n-rw-r--r--. 1 root root      6504 5月  11 03:27 optimize_database_conf.sh\n-rw-r--r--. 1 root root      8023 5月  11 03:27 optimize_system_conf_kcp.sh\n\n\n# 执行 optimize_system_conf_kcp.sh（优化操作系统的脚本）。主要帮我们 创建了kingbase 用户组和用户（用户密码：kingbase）。具体详情可以查看脚本内容\nbash /install/optimize_system_conf_kcp.sh\n\n[root@node1 install]# id kingbase\nuid=1001(kingbase) gid=1001(kingbase) 组=1001(kingbase)\n\n# 修改目录属组、属主、权限\nchown -R kingbase:kingbase /install /KingbaseES /backup /archive /data\nchmod -R 775 /install /KingbaseES /backup /archive\nchmod -R 700 /data\n```\n\n <br/>\n\n## Kingbase 安装\n\n```shell\n# 我们使用的是 KingbaseES_V008R006C005B0023_Lin64_single_install.iso 文件，所以先使用root用户登录并挂载\n[root@node1 install]# mount -o loop /install/KingbaseES_V008R006C005B0023_Lin64_single_install.iso  /mnt/\n\n[root@node1 install]# ll /mnt/\n总用量 6\ndr-xr-xr-x. 2 root root 2048 11月  5 2021 setup\n-r-xr-xr-x. 1 root root 3820 11月  5 2021 setup.sh\n```\n\n```bash\n# \n# 使用kingbase 用户登录服务器 ，进入/mnt 下执行 setup.sh 则开始安装 （\n[kingbase@node1 mnt]$ cd /mnt\n[kingbase@node1 mnt]$ bash setup.sh\n\n# 也可以使用命令行安装\n./setup.sh -i console\n```\n\n```bash\n# 安装完成后 使用root用户登录进服务器，把数据库服务注册成系统服务。并启动数据库\n[root@node1 ~]# /KingbaseES/V8/install/script/root.sh\n\n\n# 把kingbase注册成系统服务后（root用户执行 /KingbaseES/V8/Scripts/root.sh 后）。kingbase已经启动了，但此时 为什么不可以使用 systemctl  这种方式启停 kingbase？\n# 必须 使用sys_ctl 数据库先停止. 然后再使用systemctl 启动数据. 才能成功启动, 因为systemctl 需要获取进程状态信息.\n```\n\n- 运行 数据库优化文件\n\n```bash\nbash /install/optimize_database_conf.sh\n```\n\n<br/>\n\n## Kingbase 相关环境变量配置\n\n```bash\n# 使用kingbase用户登录。配置ksql环境变量\n\n[root@sonronzy ~]# su - kingbase\n[kingbase@sonronzy ~]$ cd ~\n[kingbase@sonronzy ~]$ vi .bashrc\n\nexport PATH=/KingbaseES/V8/Server/bin:$PATH\n\n[kingbase@sonronzy ~]$ source .bashrc\n```\n\n```sql\n# 使用kingbase用户登录 ，使用sys_ctl 专用命令管理金仓数据库\n# 配置sys_ctl 环境变量\n[kingbase@sonronzy ~]$ cd ~\n[kingbase@sonronzy ~]$ vim .bashrc\n\nexport PATH\nexport KINGBASE_DATA=/data\nexport PATH=/KingbaseES/V8/Server/bin:$PATH\n\n[kingbase@sonronzy ~]$ source .bashrc\n```\n\n<br/>\n\n## Kingbase 启停\n\n```bash\n# kingbase 是进程，kingbase8d 是服务\n# 注意没有修改linux参数的时候 systemctl 和 service 方式启停数据库 不要混用\n\nservice kingbase8d start/stop/restart/status\nservice kingbase8 start/stop/restart/status\n\nsystemctl start kingbase8d\n\n/etc/init.d/kingbase8d start\n\n# kingbase用户 ，使用sys_ctl 专用命令管理金仓数据库\n# 首先要配置 环境变量\n\nsys_ctl start/stop/restart/status\n```\n\n```bash\n# 有任何用户连接到数据库里来，都无法关闭数据库，必须等所有用户提交完数据断开连接后 才可关闭数据库。这个可能会关闭很长时间\nsys_ctl stop -m smart\n\n# 默认方式 关闭数据库。最好选用这个。 已经提交的用户踢开连接，未提交的用户 回滚，然后关闭数据库（一致状态，安全关闭方式）\nsys_ctl stop -m fast | sys_ctl stop\n\n# 断电式关闭数据库 (不推荐，可能会导致数据不一致，数据库无法启动)\nsys_ctl -m immediate\n```\n\n<br/>\n\n## Kingbase 卸载\n\n```bash\n# 使用root用户登录，进入到数据库的安装目录下的 Scripts 目录下，执行 rootuninstall.sh 卸载kingbase数据库\ncd /KingbaseES/V8/Scripts\n\n/KingbaseES/V8/Scripts/rootuninstall.sh\n\n# 最后确认已删除的kingbase8d 服务\n```\n\n<br/>\n\n## 实践环境中常见的问题\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/0097e80f862e58ac1ee42674eb5f03e.5mzf9cefwgc0.webp\"  width=\"80%\"/>\n\n<br/>\n\n## * 注意事项\n\n### Kingbase数据库大小写敏感说明及转换\n\n[<font color=\"red\">Kingbase数据库大小写敏感说明及转换</font>](https://bbs.kingbase.com.cn/wenda/question/137.html)\n\n<br/>\n\n# Kingbase 客户端\n\n## Kingbase 对象管理器\n\n- 我们安装kingbase的时候，如果选择完全安装，则会帮我们安装上 数据库对象管理工具\n- 使用Kingbase 对象管理器连接数据库 操作如下图\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6gb216h4y0g0.webp\"  width=\"90%\"/>\n\n### 模式\n\n- 业务软件所使用的对象的集合。包括：表、视图、序列、索引、函数、存储过程等......\n- 非模式对象：表空间\n\n<br/>\n\n## 其它客户端\n\n- 当我们不想在本机安装kingbase数据库时，可以选择第三方数据库客户端连接kingbase数据库。可以使用的相关客户端有：DBeaver、DataGrip 2020.1 x64、Dbvisualizer\n\n<br/>\n\n### DBeaver\n\n- [官网](https://dbeaver.io/download/) 下载 DBeaver\n- 使用DBeaver 连接Kingbase 数据库 操作如下图\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5o8iqfctzac0.webp\"  />\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4z57m966ojc0.webp\" />\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7essaooqm480.webp\" /> \n\n<br/>\n\n# ksql 命令行工具\n\n- Ksql是Kingbase的交互式终端\n- 支持上下键翻页，tab键补全\n\n<br/>\n\n## ksql登录 、执行sql语句、sql脚本\n\n```bash\nksql -Usystem -h localhost -p54321 -W TEST\n\nksql -Usystem -W xjnxdb -l\n\nksql -Usystem -W xjnxdb -c  \"select * from xjnxdb.pa_user\"\n\nksql -Usystem -W test -f /install/1.sql\n```\n\n<br/>\n\n## ksql终端常用快捷键\n\n```bash\n# 查看所有快捷键\n\\?\n\n# help\n\\h create\n\n# 查看当前有哪些数据库\n\\l\n\n# 查看表结构\n\\d xjxndb.pa_user\n\n\\c 切换数据库\n23:17:59 (system@[local]:54321)TEST=# \\c template1\n口令：\n您现在已经连接到数据库 \"template1\",用户 \"system\".\n23:18:09 (system@[local]:54321)template1=#\n\n\n# 退出ksql终端\n\\q\n```\n\n<br/>\n\n## 自定义sql提示符\n\n```bash\n# 定制sql提示符，便于我们了解 目前在哪台终端、哪个用户、哪个数据库下操作\n\n# 使用kingbase用户登录\n\n[kingbase@sonronzy ~]$ vim ~/.ksqlrc\n[kingbase@sonronzy ~]$\n[kingbase@sonronzy ~]$ cat ~/.ksqlrc\n\\set PROMPT1 '%`date +%H:%M:%S` (%n@%M:%>)%/%R%#%x '\n\\set PROMPT2 '%M %n@%/%R%# '\n[kingbase@sonronzy ~]$\n[kingbase@sonronzy ~]$ source ~/.ksqlrc\n[kingbase@sonronzy ~]$\n[kingbase@sonronzy ~]$ ksql -Usystem -W TEST\n口令：\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\n23:13:03 (system@[local]:54321)TEST=#\n```\n\n```bash\n\\set PROMPT1 '%`date +%H:%M:%S` (%n@%M:%>)%/%R%#%x '\n\\set PROMPT2 '%M %n@%/%R%# '\n```\n\n解析： \n◆ %M  \t指数据库服务器的主机名 - 如果连接是通过 Unix 域套接字，则为“[local]” \n◆ %m  \t也表示数据库主机名，会截断第一个 . 后的内容 \n◆ %>\t\t数据库端口号 \n◆ %n\t\t是指会话用户名 \n◆ %/\t\t当前数据库名 \n◆ %#\t\t如果是超级用户显示为 #，否则显示为 > \n◆ %R\t\t是指您处于单行模式（^）还是断开连接（！ ） ，但通常为= \n◆ %x\t\t指的是事务状态 - 通常为空白，除非在事务块（*）\n\n<br/>\n\n## 常用sql\n\n```sql\nshow database_mode;\n\nshow shared_buffers;\n\nselect get_license_validdays();\n```\n\n\n\n\n\n## copy 与 \\copy\n\n- copy 命令属于 SQL 命令， \\copy 命令属于元命令\n- copy 命令进行数据导出、导入时，需要具有 superuser 的权限；导出至 stdout 时，仅需模式、\n  对象的相关权限即可；\\copy 命令进行数据导出、导入时，无需 superuser 权限\n- copy 命令只能在源数据库服务器上进行数据导出、导入；\\copy 命令还可以通过远程服务器连\n  接至源数据库服务器，将数据导出至远程服务器、或将远程服务器的数据导入源数据库中\n- 大数据量的数据进行导出、导入时，copy 比\\copy 的性能高\n- 如果进行小数据量导出、导入，建议通过\\copy 操作便利；大数据量操作时，建议在源数据库中\n  使用 copy 效率更高\n\n<br/>\n\n# Kingbase 数据迁移\n\n## 第一步：基础数据结构及数据迁移\n\n- 准备工作\n  - 根据需要创建用户、表空间、模式等对象\n- 使用【数据库迁移工具】完成基础数据迁移工作\n\n<br/>\n\n## 第二步：应用接口及框架迁移\n\n### springboot 数据源配置\n\n```yaml\n#环境业务自身配置开始\n#默认数据源default，不能修改\nspring.datasource.dynamic.primary = default\n\n#默认数据源，名称 default\n#spring.datasource.dynamic.datasource.default.driver-class-name=com.mysql.jdbc.Driver\n#spring.datasource.dynamic.datasource.default.url=jdbc:mysql://localhost:3306/xjnxdb?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\n#spring.datasource.dynamic.datasource.default.username=root\n#spring.datasource.dynamic.datasource.default.password=root\n\n#kingbase 数据源配置\nspring.datasource.dynamic.datasource.default.driver-class-name=com.kingbase8.Driver\nspring.datasource.dynamic.datasource.default.url=jdbc:kingbase8://10.114.12.66:54321/xjnxdb\nspring.datasource.dynamic.datasource.default.username=xjnxdb\nspring.datasource.dynamic.datasource.default.password=xjnxdb\n```\n\n<br/>\n\n### maven 配置Kingbase 驱动\n\n在maven repository中查找kingbase的驱动依赖配置，加入到我们的pom文件\n\n```xml\n<!-- https://mvnrepository.com/artifact/kingbase/kingbase8 -->\n<dependency>\n    <groupId>kingbase</groupId>\n    <artifactId>kingbase8</artifactId>\n    <version>8</version>\n</dependency>\n```\n\n- <font color=\"red\">**注意：**</font>我们会发现Kingbase8驱动依赖根本下载不下来。此时：**我们可以把驱动下载到本地，再使用maven命令install到maven本地仓库即可**\n\n[kingbase8-8.jar](https://maven.jeecg.org/nexus/content/repositories/jeecg/kingbase/kingbase8/8/kingbase8-8.jar)\n\n```xml\nmvn install:install-file -DgroupId=kingbase -DartifactId=kingbase8 -Dversion=8 -Dfile=D:\\bak\\kingbase8-8.jar -Dpackaging=jar -DgeneratePom=true\n\nmvn install:install-file -DgroupId=kingbase -DartifactId=kingbase8 -Dversion=8.6.0 -Dfile=H:\\bank\\kingbase8-8.6.0.jar -Dpackaging=jar -DgeneratePom=true\n```\n\n> 该语句中参数：\n>\n> DgroupId ：组id 【对应pom中的groupId】\n> DartifactId：项目id 【对应pom中的artifactId】\n> Dversion：版本号 【对应pom中的version】\n> Dfile：jar包的绝对路径\n> Dpackaging：是什么包\n> DgeneratePom：是否生成pom\n\n- 最后在pom中直接写入 dependency 就可以了，刷新即可使用\n\n```xml\n<!-- https://mvnrepository.com/artifact/kingbase/kingbase8 -->\n<dependency>\n    <groupId>kingbase</groupId>\n    <artifactId>kingbase8</artifactId>\n    <version>8.6.0</version>\n</dependency>\n```\n\n<br/>\n\n## 第三步：应用功能测试（SQL兼容情况）\n\n### date_format 函数支持\n\n```java\n@Mapper\n@TableInfo(name = \"wf_sequence\", primaryKeys = {\"seqNo\"})\npublic interface WfSequenceMapper {\n\t@Update(\"update wf_sequence set seqval = seqval+1 where seqno=#{seqNo}\")\n\tint incBySeqNo(@Param(\"seqNo\") String seqNo);\n\n\t@Select(\"select * from wf_sequence where seqno=#{seqNo}\")\n\tWfSequenceDO getBySeqNo(@Param(\"seqNo\") String seqNo);\n\n\t@Insert(\"insert into wf_sequence (seqno,seqval,seqdesc)values(#{seqNo},#{seqVal},#{seqDesc})\")\n\tint insert(WfSequenceDO seq);\n\n\t@Select(\"SELECT concat(DATE_FORMAT(sysdate(),'%Y%m%d'),right(lpad(seqval,15,0),8)) as seqDesc FROM wf_sequence where seqno=#{seqNo}\")\n\tWfSequenceDO getTxnBySeqNo(@Param(\"seqNo\") String seqNo);\n\n}\n```\n\n```sql\n00:28:12 (system@[local]:54321)TEST=# select date_format('2022-05-15','yyyy-mm-dd');\n错误:  函数 date_format(unknown, unknown) 不存在\n第1行select date_format('2022-05-15','yyyy-mm-dd');\n            ^\n提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.\n00:28:15 (system@[local]:54321)TEST=#\n```\n\n- 参考 《[应用开发及迁移][参考手册]KingbaseES扩展插件参考手册.pdf》\n\n> - kdb_date_function\n>\n> kdb_date_function 是一个兼容 mysql 数据库 date 相关函数的扩展。使用时需要 `create extension kdb_date_function`，不需要时 `drop extension kdb_date_function` 即可。\n\n```sql\n00:41:28 (system@[local]:54321)TEST=# select date_format('2022-05-15','yyyy-mm-dd');\n错误:  函数 date_format(unknown, unknown) 不存在\n第1行select date_format('2022-05-15','yyyy-mm-dd');\n            ^\n提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.\n00:41:29 (system@[local]:54321)TEST=#\n00:41:30 (system@[local]:54321)TEST=#\n00:41:30 (system@[local]:54321)TEST=#\n00:41:30 (system@[local]:54321)TEST=# create extension kdb_date_function;\nCREATE EXTENSION\n00:44:42 (system@[local]:54321)TEST=# select date_format('2022-05-15','yyyy-mm-dd');\n date_format\n-------------\n 2022-05-15\n(1 行记录)\n\n00:44:46 (system@[local]:54321)TEST=#\n```\n\n<br/>\n\n# 数据库迁移评估系统\n\n- 具体详情参考官方文档\n","source":"_posts/2022/kingbase.md","raw":"---\ntitle: kingbase\nauthor: sonzonzy\ndate: 2022-05-17 02:51:05\nupdated: 2022-05-17 02:51:05\ncategories:\n  - [database,kingbase]\ntags:\n  - database\n  - kingbase\n---\n\n# Kingbase 安装与启停\n\n## 安装前准备工作\n\n- 服务器安装jdk1.8+版本并配置环境变量\n- 创建kingbase用户组与用户。创建目录，并设置目录属组、属组、权限\n- 上传kingbase安装包和kingbase的license.dat 到服务器（安装包和license可以到[官网](https://www.kingbase.com.cn/rjcxxz/index.htm)下载） \n\n  <br/>\n\n```shell\n# 为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前需做好选项、存储目录规划\n\n# 使用root用户登录进服务器\n# /install 安装软件上传目录  \n# /kingbase/V8  数据库安装目录  \n# /backup 备份目录  \n# /data 数据存储目录  \n# /archive 归档目录\n[root@bu2-vm-svr-66 ~]# mkdir -p /install /KingbaseES/V8 /backup /data /archive\n\n# 上传 安装包、license.dat 到 /install 目录\n# 上传 执行脚本 optimize_system_conf_kcp.sh 和 optimize_database_conf.s 到 /install 目录\n# optimize_system_conf_kcp.sh 优化操作系统的脚本   optimize_database_conf.sh 优化数据库的脚本\n\n[root@bu2-vm-svr-66 ~]# ll /install\n总用量 852348\n-rw-r--r--. 1 root root 872781824 5月  11 03:27 KingbaseES_V008R006C005B0023_Lin                                      64_single_install.iso\n-rw-r--r--. 1 root root      3351 5月  11 03:27 license_12350_0.dat\n-rw-r--r--. 1 root root      6504 5月  11 03:27 optimize_database_conf.sh\n-rw-r--r--. 1 root root      8023 5月  11 03:27 optimize_system_conf_kcp.sh\n\n\n# 执行 optimize_system_conf_kcp.sh（优化操作系统的脚本）。主要帮我们 创建了kingbase 用户组和用户（用户密码：kingbase）。具体详情可以查看脚本内容\nbash /install/optimize_system_conf_kcp.sh\n\n[root@node1 install]# id kingbase\nuid=1001(kingbase) gid=1001(kingbase) 组=1001(kingbase)\n\n# 修改目录属组、属主、权限\nchown -R kingbase:kingbase /install /KingbaseES /backup /archive /data\nchmod -R 775 /install /KingbaseES /backup /archive\nchmod -R 700 /data\n```\n\n <br/>\n\n## Kingbase 安装\n\n```shell\n# 我们使用的是 KingbaseES_V008R006C005B0023_Lin64_single_install.iso 文件，所以先使用root用户登录并挂载\n[root@node1 install]# mount -o loop /install/KingbaseES_V008R006C005B0023_Lin64_single_install.iso  /mnt/\n\n[root@node1 install]# ll /mnt/\n总用量 6\ndr-xr-xr-x. 2 root root 2048 11月  5 2021 setup\n-r-xr-xr-x. 1 root root 3820 11月  5 2021 setup.sh\n```\n\n```bash\n# \n# 使用kingbase 用户登录服务器 ，进入/mnt 下执行 setup.sh 则开始安装 （\n[kingbase@node1 mnt]$ cd /mnt\n[kingbase@node1 mnt]$ bash setup.sh\n\n# 也可以使用命令行安装\n./setup.sh -i console\n```\n\n```bash\n# 安装完成后 使用root用户登录进服务器，把数据库服务注册成系统服务。并启动数据库\n[root@node1 ~]# /KingbaseES/V8/install/script/root.sh\n\n\n# 把kingbase注册成系统服务后（root用户执行 /KingbaseES/V8/Scripts/root.sh 后）。kingbase已经启动了，但此时 为什么不可以使用 systemctl  这种方式启停 kingbase？\n# 必须 使用sys_ctl 数据库先停止. 然后再使用systemctl 启动数据. 才能成功启动, 因为systemctl 需要获取进程状态信息.\n```\n\n- 运行 数据库优化文件\n\n```bash\nbash /install/optimize_database_conf.sh\n```\n\n<br/>\n\n## Kingbase 相关环境变量配置\n\n```bash\n# 使用kingbase用户登录。配置ksql环境变量\n\n[root@sonronzy ~]# su - kingbase\n[kingbase@sonronzy ~]$ cd ~\n[kingbase@sonronzy ~]$ vi .bashrc\n\nexport PATH=/KingbaseES/V8/Server/bin:$PATH\n\n[kingbase@sonronzy ~]$ source .bashrc\n```\n\n```sql\n# 使用kingbase用户登录 ，使用sys_ctl 专用命令管理金仓数据库\n# 配置sys_ctl 环境变量\n[kingbase@sonronzy ~]$ cd ~\n[kingbase@sonronzy ~]$ vim .bashrc\n\nexport PATH\nexport KINGBASE_DATA=/data\nexport PATH=/KingbaseES/V8/Server/bin:$PATH\n\n[kingbase@sonronzy ~]$ source .bashrc\n```\n\n<br/>\n\n## Kingbase 启停\n\n```bash\n# kingbase 是进程，kingbase8d 是服务\n# 注意没有修改linux参数的时候 systemctl 和 service 方式启停数据库 不要混用\n\nservice kingbase8d start/stop/restart/status\nservice kingbase8 start/stop/restart/status\n\nsystemctl start kingbase8d\n\n/etc/init.d/kingbase8d start\n\n# kingbase用户 ，使用sys_ctl 专用命令管理金仓数据库\n# 首先要配置 环境变量\n\nsys_ctl start/stop/restart/status\n```\n\n```bash\n# 有任何用户连接到数据库里来，都无法关闭数据库，必须等所有用户提交完数据断开连接后 才可关闭数据库。这个可能会关闭很长时间\nsys_ctl stop -m smart\n\n# 默认方式 关闭数据库。最好选用这个。 已经提交的用户踢开连接，未提交的用户 回滚，然后关闭数据库（一致状态，安全关闭方式）\nsys_ctl stop -m fast | sys_ctl stop\n\n# 断电式关闭数据库 (不推荐，可能会导致数据不一致，数据库无法启动)\nsys_ctl -m immediate\n```\n\n<br/>\n\n## Kingbase 卸载\n\n```bash\n# 使用root用户登录，进入到数据库的安装目录下的 Scripts 目录下，执行 rootuninstall.sh 卸载kingbase数据库\ncd /KingbaseES/V8/Scripts\n\n/KingbaseES/V8/Scripts/rootuninstall.sh\n\n# 最后确认已删除的kingbase8d 服务\n```\n\n<br/>\n\n## 实践环境中常见的问题\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/0097e80f862e58ac1ee42674eb5f03e.5mzf9cefwgc0.webp\"  width=\"80%\"/>\n\n<br/>\n\n## * 注意事项\n\n### Kingbase数据库大小写敏感说明及转换\n\n[<font color=\"red\">Kingbase数据库大小写敏感说明及转换</font>](https://bbs.kingbase.com.cn/wenda/question/137.html)\n\n<br/>\n\n# Kingbase 客户端\n\n## Kingbase 对象管理器\n\n- 我们安装kingbase的时候，如果选择完全安装，则会帮我们安装上 数据库对象管理工具\n- 使用Kingbase 对象管理器连接数据库 操作如下图\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6gb216h4y0g0.webp\"  width=\"90%\"/>\n\n### 模式\n\n- 业务软件所使用的对象的集合。包括：表、视图、序列、索引、函数、存储过程等......\n- 非模式对象：表空间\n\n<br/>\n\n## 其它客户端\n\n- 当我们不想在本机安装kingbase数据库时，可以选择第三方数据库客户端连接kingbase数据库。可以使用的相关客户端有：DBeaver、DataGrip 2020.1 x64、Dbvisualizer\n\n<br/>\n\n### DBeaver\n\n- [官网](https://dbeaver.io/download/) 下载 DBeaver\n- 使用DBeaver 连接Kingbase 数据库 操作如下图\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5o8iqfctzac0.webp\"  />\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4z57m966ojc0.webp\" />\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7essaooqm480.webp\" /> \n\n<br/>\n\n# ksql 命令行工具\n\n- Ksql是Kingbase的交互式终端\n- 支持上下键翻页，tab键补全\n\n<br/>\n\n## ksql登录 、执行sql语句、sql脚本\n\n```bash\nksql -Usystem -h localhost -p54321 -W TEST\n\nksql -Usystem -W xjnxdb -l\n\nksql -Usystem -W xjnxdb -c  \"select * from xjnxdb.pa_user\"\n\nksql -Usystem -W test -f /install/1.sql\n```\n\n<br/>\n\n## ksql终端常用快捷键\n\n```bash\n# 查看所有快捷键\n\\?\n\n# help\n\\h create\n\n# 查看当前有哪些数据库\n\\l\n\n# 查看表结构\n\\d xjxndb.pa_user\n\n\\c 切换数据库\n23:17:59 (system@[local]:54321)TEST=# \\c template1\n口令：\n您现在已经连接到数据库 \"template1\",用户 \"system\".\n23:18:09 (system@[local]:54321)template1=#\n\n\n# 退出ksql终端\n\\q\n```\n\n<br/>\n\n## 自定义sql提示符\n\n```bash\n# 定制sql提示符，便于我们了解 目前在哪台终端、哪个用户、哪个数据库下操作\n\n# 使用kingbase用户登录\n\n[kingbase@sonronzy ~]$ vim ~/.ksqlrc\n[kingbase@sonronzy ~]$\n[kingbase@sonronzy ~]$ cat ~/.ksqlrc\n\\set PROMPT1 '%`date +%H:%M:%S` (%n@%M:%>)%/%R%#%x '\n\\set PROMPT2 '%M %n@%/%R%# '\n[kingbase@sonronzy ~]$\n[kingbase@sonronzy ~]$ source ~/.ksqlrc\n[kingbase@sonronzy ~]$\n[kingbase@sonronzy ~]$ ksql -Usystem -W TEST\n口令：\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\n23:13:03 (system@[local]:54321)TEST=#\n```\n\n```bash\n\\set PROMPT1 '%`date +%H:%M:%S` (%n@%M:%>)%/%R%#%x '\n\\set PROMPT2 '%M %n@%/%R%# '\n```\n\n解析： \n◆ %M  \t指数据库服务器的主机名 - 如果连接是通过 Unix 域套接字，则为“[local]” \n◆ %m  \t也表示数据库主机名，会截断第一个 . 后的内容 \n◆ %>\t\t数据库端口号 \n◆ %n\t\t是指会话用户名 \n◆ %/\t\t当前数据库名 \n◆ %#\t\t如果是超级用户显示为 #，否则显示为 > \n◆ %R\t\t是指您处于单行模式（^）还是断开连接（！ ） ，但通常为= \n◆ %x\t\t指的是事务状态 - 通常为空白，除非在事务块（*）\n\n<br/>\n\n## 常用sql\n\n```sql\nshow database_mode;\n\nshow shared_buffers;\n\nselect get_license_validdays();\n```\n\n\n\n\n\n## copy 与 \\copy\n\n- copy 命令属于 SQL 命令， \\copy 命令属于元命令\n- copy 命令进行数据导出、导入时，需要具有 superuser 的权限；导出至 stdout 时，仅需模式、\n  对象的相关权限即可；\\copy 命令进行数据导出、导入时，无需 superuser 权限\n- copy 命令只能在源数据库服务器上进行数据导出、导入；\\copy 命令还可以通过远程服务器连\n  接至源数据库服务器，将数据导出至远程服务器、或将远程服务器的数据导入源数据库中\n- 大数据量的数据进行导出、导入时，copy 比\\copy 的性能高\n- 如果进行小数据量导出、导入，建议通过\\copy 操作便利；大数据量操作时，建议在源数据库中\n  使用 copy 效率更高\n\n<br/>\n\n# Kingbase 数据迁移\n\n## 第一步：基础数据结构及数据迁移\n\n- 准备工作\n  - 根据需要创建用户、表空间、模式等对象\n- 使用【数据库迁移工具】完成基础数据迁移工作\n\n<br/>\n\n## 第二步：应用接口及框架迁移\n\n### springboot 数据源配置\n\n```yaml\n#环境业务自身配置开始\n#默认数据源default，不能修改\nspring.datasource.dynamic.primary = default\n\n#默认数据源，名称 default\n#spring.datasource.dynamic.datasource.default.driver-class-name=com.mysql.jdbc.Driver\n#spring.datasource.dynamic.datasource.default.url=jdbc:mysql://localhost:3306/xjnxdb?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false\n#spring.datasource.dynamic.datasource.default.username=root\n#spring.datasource.dynamic.datasource.default.password=root\n\n#kingbase 数据源配置\nspring.datasource.dynamic.datasource.default.driver-class-name=com.kingbase8.Driver\nspring.datasource.dynamic.datasource.default.url=jdbc:kingbase8://10.114.12.66:54321/xjnxdb\nspring.datasource.dynamic.datasource.default.username=xjnxdb\nspring.datasource.dynamic.datasource.default.password=xjnxdb\n```\n\n<br/>\n\n### maven 配置Kingbase 驱动\n\n在maven repository中查找kingbase的驱动依赖配置，加入到我们的pom文件\n\n```xml\n<!-- https://mvnrepository.com/artifact/kingbase/kingbase8 -->\n<dependency>\n    <groupId>kingbase</groupId>\n    <artifactId>kingbase8</artifactId>\n    <version>8</version>\n</dependency>\n```\n\n- <font color=\"red\">**注意：**</font>我们会发现Kingbase8驱动依赖根本下载不下来。此时：**我们可以把驱动下载到本地，再使用maven命令install到maven本地仓库即可**\n\n[kingbase8-8.jar](https://maven.jeecg.org/nexus/content/repositories/jeecg/kingbase/kingbase8/8/kingbase8-8.jar)\n\n```xml\nmvn install:install-file -DgroupId=kingbase -DartifactId=kingbase8 -Dversion=8 -Dfile=D:\\bak\\kingbase8-8.jar -Dpackaging=jar -DgeneratePom=true\n\nmvn install:install-file -DgroupId=kingbase -DartifactId=kingbase8 -Dversion=8.6.0 -Dfile=H:\\bank\\kingbase8-8.6.0.jar -Dpackaging=jar -DgeneratePom=true\n```\n\n> 该语句中参数：\n>\n> DgroupId ：组id 【对应pom中的groupId】\n> DartifactId：项目id 【对应pom中的artifactId】\n> Dversion：版本号 【对应pom中的version】\n> Dfile：jar包的绝对路径\n> Dpackaging：是什么包\n> DgeneratePom：是否生成pom\n\n- 最后在pom中直接写入 dependency 就可以了，刷新即可使用\n\n```xml\n<!-- https://mvnrepository.com/artifact/kingbase/kingbase8 -->\n<dependency>\n    <groupId>kingbase</groupId>\n    <artifactId>kingbase8</artifactId>\n    <version>8.6.0</version>\n</dependency>\n```\n\n<br/>\n\n## 第三步：应用功能测试（SQL兼容情况）\n\n### date_format 函数支持\n\n```java\n@Mapper\n@TableInfo(name = \"wf_sequence\", primaryKeys = {\"seqNo\"})\npublic interface WfSequenceMapper {\n\t@Update(\"update wf_sequence set seqval = seqval+1 where seqno=#{seqNo}\")\n\tint incBySeqNo(@Param(\"seqNo\") String seqNo);\n\n\t@Select(\"select * from wf_sequence where seqno=#{seqNo}\")\n\tWfSequenceDO getBySeqNo(@Param(\"seqNo\") String seqNo);\n\n\t@Insert(\"insert into wf_sequence (seqno,seqval,seqdesc)values(#{seqNo},#{seqVal},#{seqDesc})\")\n\tint insert(WfSequenceDO seq);\n\n\t@Select(\"SELECT concat(DATE_FORMAT(sysdate(),'%Y%m%d'),right(lpad(seqval,15,0),8)) as seqDesc FROM wf_sequence where seqno=#{seqNo}\")\n\tWfSequenceDO getTxnBySeqNo(@Param(\"seqNo\") String seqNo);\n\n}\n```\n\n```sql\n00:28:12 (system@[local]:54321)TEST=# select date_format('2022-05-15','yyyy-mm-dd');\n错误:  函数 date_format(unknown, unknown) 不存在\n第1行select date_format('2022-05-15','yyyy-mm-dd');\n            ^\n提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.\n00:28:15 (system@[local]:54321)TEST=#\n```\n\n- 参考 《[应用开发及迁移][参考手册]KingbaseES扩展插件参考手册.pdf》\n\n> - kdb_date_function\n>\n> kdb_date_function 是一个兼容 mysql 数据库 date 相关函数的扩展。使用时需要 `create extension kdb_date_function`，不需要时 `drop extension kdb_date_function` 即可。\n\n```sql\n00:41:28 (system@[local]:54321)TEST=# select date_format('2022-05-15','yyyy-mm-dd');\n错误:  函数 date_format(unknown, unknown) 不存在\n第1行select date_format('2022-05-15','yyyy-mm-dd');\n            ^\n提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.\n00:41:29 (system@[local]:54321)TEST=#\n00:41:30 (system@[local]:54321)TEST=#\n00:41:30 (system@[local]:54321)TEST=#\n00:41:30 (system@[local]:54321)TEST=# create extension kdb_date_function;\nCREATE EXTENSION\n00:44:42 (system@[local]:54321)TEST=# select date_format('2022-05-15','yyyy-mm-dd');\n date_format\n-------------\n 2022-05-15\n(1 行记录)\n\n00:44:46 (system@[local]:54321)TEST=#\n```\n\n<br/>\n\n# 数据库迁移评估系统\n\n- 具体详情参考官方文档\n","slug":"kingbase","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsn6000jdcta7w846ezi","content":"<h1 id=\"Kingbase-安装与启停\"><a href=\"#Kingbase-安装与启停\" class=\"headerlink\" title=\"Kingbase 安装与启停\"></a>Kingbase 安装与启停</h1><h2 id=\"安装前准备工作\"><a href=\"#安装前准备工作\" class=\"headerlink\" title=\"安装前准备工作\"></a>安装前准备工作</h2><ul>\n<li><p>服务器安装jdk1.8+版本并配置环境变量</p>\n</li>\n<li><p>创建kingbase用户组与用户。创建目录，并设置目录属组、属组、权限</p>\n</li>\n<li><p>上传kingbase安装包和kingbase的license.dat 到服务器（安装包和license可以到<a class=\"link\"   href=\"https://www.kingbase.com.cn/rjcxxz/index.htm\" >官网<i class=\"fas fa-external-link-alt\"></i></a>下载） </p>\n<br/></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前需做好选项、存储目录规划</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用root用户登录进服务器</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/install 安装软件上传目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/kingbase/V8  数据库安装目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/backup 备份目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/data 数据存储目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/archive 归档目录</span></span><br><span class=\"line\">[root@bu2-vm-svr-66 ~]# mkdir -p /install /KingbaseES/V8 /backup /data /archive</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传 安装包、license.dat 到 /install 目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传 执行脚本 optimize_system_conf_kcp.sh 和 optimize_database_conf.s 到 /install 目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">optimize_system_conf_kcp.sh 优化操作系统的脚本   optimize_database_conf.sh 优化数据库的脚本</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-66 ~]# ll /install</span><br><span class=\"line\">总用量 852348</span><br><span class=\"line\">-rw-r--r--. 1 root root 872781824 5月  11 03:27 KingbaseES_V008R006C005B0023_Lin                                      64_single_install.iso</span><br><span class=\"line\">-rw-r--r--. 1 root root      3351 5月  11 03:27 license_12350_0.dat</span><br><span class=\"line\">-rw-r--r--. 1 root root      6504 5月  11 03:27 optimize_database_conf.sh</span><br><span class=\"line\">-rw-r--r--. 1 root root      8023 5月  11 03:27 optimize_system_conf_kcp.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行 optimize_system_conf_kcp.sh（优化操作系统的脚本）。主要帮我们 创建了kingbase 用户组和用户（用户密码：kingbase）。具体详情可以查看脚本内容</span></span><br><span class=\"line\">bash /install/optimize_system_conf_kcp.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node1 install]# id kingbase</span><br><span class=\"line\">uid=1001(kingbase) gid=1001(kingbase) 组=1001(kingbase)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改目录属组、属主、权限</span></span><br><span class=\"line\">chown -R kingbase:kingbase /install /KingbaseES /backup /archive /data</span><br><span class=\"line\">chmod -R 775 /install /KingbaseES /backup /archive</span><br><span class=\"line\">chmod -R 700 /data</span><br></pre></td></tr></table></figure>\n\n <br/>\n\n<h2 id=\"Kingbase-安装\"><a href=\"#Kingbase-安装\" class=\"headerlink\" title=\"Kingbase 安装\"></a>Kingbase 安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">我们使用的是 KingbaseES_V008R006C005B0023_Lin64_single_install.iso 文件，所以先使用root用户登录并挂载</span></span><br><span class=\"line\">[root@node1 install]# mount -o loop /install/KingbaseES_V008R006C005B0023_Lin64_single_install.iso  /mnt/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node1 install]# ll /mnt/</span><br><span class=\"line\">总用量 6</span><br><span class=\"line\">dr-xr-xr-x. 2 root root 2048 11月  5 2021 setup</span><br><span class=\"line\">-r-xr-xr-x. 1 root root 3820 11月  5 2021 setup.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># 使用kingbase 用户登录服务器 ，进入/mnt 下执行 setup.sh 则开始安装 （</span></span><br><span class=\"line\">[kingbase@node1 mnt]$ <span class=\"built_in\">cd</span> /mnt</span><br><span class=\"line\">[kingbase@node1 mnt]$ bash setup.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以使用命令行安装</span></span><br><span class=\"line\">./setup.sh -i console</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装完成后 使用root用户登录进服务器，把数据库服务注册成系统服务。并启动数据库</span></span><br><span class=\"line\">[root@node1 ~]<span class=\"comment\"># /KingbaseES/V8/install/script/root.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把kingbase注册成系统服务后（root用户执行 /KingbaseES/V8/Scripts/root.sh 后）。kingbase已经启动了，但此时 为什么不可以使用 systemctl  这种方式启停 kingbase？</span></span><br><span class=\"line\"><span class=\"comment\"># 必须 使用sys_ctl 数据库先停止. 然后再使用systemctl 启动数据. 才能成功启动, 因为systemctl 需要获取进程状态信息.</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行 数据库优化文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash /install/optimize_database_conf.sh</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Kingbase-相关环境变量配置\"><a href=\"#Kingbase-相关环境变量配置\" class=\"headerlink\" title=\"Kingbase 相关环境变量配置\"></a>Kingbase 相关环境变量配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用kingbase用户登录。配置ksql环境变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@sonronzy ~]<span class=\"comment\"># su - kingbase</span></span><br><span class=\"line\">[kingbase@sonronzy ~]$ <span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">[kingbase@sonronzy ~]$ vi .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/KingbaseES/V8/Server/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@sonronzy ~]$ <span class=\"built_in\">source</span> .bashrc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用kingbase用户登录 ，使用sys_ctl 专用命令管理金仓数据库</span><br><span class=\"line\"># 配置sys_ctl 环境变量</span><br><span class=\"line\">[kingbase<span class=\"variable\">@sonronzy</span> <span class=\"operator\">~</span>]$ cd <span class=\"operator\">~</span></span><br><span class=\"line\">[kingbase<span class=\"variable\">@sonronzy</span> <span class=\"operator\">~</span>]$ vim .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export KINGBASE_DATA<span class=\"operator\">=</span><span class=\"operator\">/</span>data</span><br><span class=\"line\">export PATH<span class=\"operator\">=</span><span class=\"operator\">/</span>KingbaseES<span class=\"operator\">/</span>V8<span class=\"operator\">/</span>Server<span class=\"operator\">/</span>bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase<span class=\"variable\">@sonronzy</span> <span class=\"operator\">~</span>]$ source .bashrc</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Kingbase-启停\"><a href=\"#Kingbase-启停\" class=\"headerlink\" title=\"Kingbase 启停\"></a>Kingbase 启停</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kingbase 是进程，kingbase8d 是服务</span></span><br><span class=\"line\"><span class=\"comment\"># 注意没有修改linux参数的时候 systemctl 和 service 方式启停数据库 不要混用</span></span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d start/stop/restart/status</span><br><span class=\"line\">service kingbase8 start/stop/restart/status</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start kingbase8d</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/init.d/kingbase8d start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kingbase用户 ，使用sys_ctl 专用命令管理金仓数据库</span></span><br><span class=\"line\"><span class=\"comment\"># 首先要配置 环境变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl start/stop/restart/status</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 有任何用户连接到数据库里来，都无法关闭数据库，必须等所有用户提交完数据断开连接后 才可关闭数据库。这个可能会关闭很长时间</span></span><br><span class=\"line\">sys_ctl stop -m smart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认方式 关闭数据库。最好选用这个。 已经提交的用户踢开连接，未提交的用户 回滚，然后关闭数据库（一致状态，安全关闭方式）</span></span><br><span class=\"line\">sys_ctl stop -m fast | sys_ctl stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 断电式关闭数据库 (不推荐，可能会导致数据不一致，数据库无法启动)</span></span><br><span class=\"line\">sys_ctl -m immediate</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Kingbase-卸载\"><a href=\"#Kingbase-卸载\" class=\"headerlink\" title=\"Kingbase 卸载\"></a>Kingbase 卸载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用root用户登录，进入到数据库的安装目录下的 Scripts 目录下，执行 rootuninstall.sh 卸载kingbase数据库</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /KingbaseES/V8/Scripts</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/Scripts/rootuninstall.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后确认已删除的kingbase8d 服务</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"实践环境中常见的问题\"><a href=\"#实践环境中常见的问题\" class=\"headerlink\" title=\"实践环境中常见的问题\"></a>实践环境中常见的问题</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/0097e80f862e58ac1ee42674eb5f03e.5mzf9cefwgc0.webp\"  width=\"80%\"/>\n\n<br/>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"* 注意事项\"></a>* 注意事项</h2><h3 id=\"Kingbase数据库大小写敏感说明及转换\"><a href=\"#Kingbase数据库大小写敏感说明及转换\" class=\"headerlink\" title=\"Kingbase数据库大小写敏感说明及转换\"></a>Kingbase数据库大小写敏感说明及转换</h3><p><a href=\"https://bbs.kingbase.com.cn/wenda/question/137.html\"><font color=\"red\">Kingbase数据库大小写敏感说明及转换</font></a></p>\n<br/>\n\n<h1 id=\"Kingbase-客户端\"><a href=\"#Kingbase-客户端\" class=\"headerlink\" title=\"Kingbase 客户端\"></a>Kingbase 客户端</h1><h2 id=\"Kingbase-对象管理器\"><a href=\"#Kingbase-对象管理器\" class=\"headerlink\" title=\"Kingbase 对象管理器\"></a>Kingbase 对象管理器</h2><ul>\n<li>我们安装kingbase的时候，如果选择完全安装，则会帮我们安装上 数据库对象管理工具</li>\n<li>使用Kingbase 对象管理器连接数据库 操作如下图</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6gb216h4y0g0.webp\"  width=\"90%\"/>\n\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><ul>\n<li>业务软件所使用的对象的集合。包括：表、视图、序列、索引、函数、存储过程等……</li>\n<li>非模式对象：表空间</li>\n</ul>\n<br/>\n\n<h2 id=\"其它客户端\"><a href=\"#其它客户端\" class=\"headerlink\" title=\"其它客户端\"></a>其它客户端</h2><ul>\n<li>当我们不想在本机安装kingbase数据库时，可以选择第三方数据库客户端连接kingbase数据库。可以使用的相关客户端有：DBeaver、DataGrip 2020.1 x64、Dbvisualizer</li>\n</ul>\n<br/>\n\n<h3 id=\"DBeaver\"><a href=\"#DBeaver\" class=\"headerlink\" title=\"DBeaver\"></a>DBeaver</h3><ul>\n<li><a class=\"link\"   href=\"https://dbeaver.io/download/\" >官网<i class=\"fas fa-external-link-alt\"></i></a> 下载 DBeaver</li>\n<li>使用DBeaver 连接Kingbase 数据库 操作如下图</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5o8iqfctzac0.webp\"  />\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4z57m966ojc0.webp\" />\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7essaooqm480.webp\" /> \n\n<br/>\n\n<h1 id=\"ksql-命令行工具\"><a href=\"#ksql-命令行工具\" class=\"headerlink\" title=\"ksql 命令行工具\"></a>ksql 命令行工具</h1><ul>\n<li>Ksql是Kingbase的交互式终端</li>\n<li>支持上下键翻页，tab键补全</li>\n</ul>\n<br/>\n\n<h2 id=\"ksql登录-、执行sql语句、sql脚本\"><a href=\"#ksql登录-、执行sql语句、sql脚本\" class=\"headerlink\" title=\"ksql登录 、执行sql语句、sql脚本\"></a>ksql登录 、执行sql语句、sql脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ksql -Usystem -h localhost -p54321 -W TEST</span><br><span class=\"line\"></span><br><span class=\"line\">ksql -Usystem -W xjnxdb -l</span><br><span class=\"line\"></span><br><span class=\"line\">ksql -Usystem -W xjnxdb -c  <span class=\"string\">&quot;select * from xjnxdb.pa_user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ksql -Usystem -W <span class=\"built_in\">test</span> -f /install/1.sql</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"ksql终端常用快捷键\"><a href=\"#ksql终端常用快捷键\" class=\"headerlink\" title=\"ksql终端常用快捷键\"></a>ksql终端常用快捷键</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有快捷键</span></span><br><span class=\"line\">\\?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># help</span></span><br><span class=\"line\">\\h create</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前有哪些数据库</span></span><br><span class=\"line\">\\l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看表结构</span></span><br><span class=\"line\">\\d xjxndb.pa_user</span><br><span class=\"line\"></span><br><span class=\"line\">\\c 切换数据库</span><br><span class=\"line\">23:17:59 (system@[<span class=\"built_in\">local</span>]:54321)TEST=<span class=\"comment\"># \\c template1</span></span><br><span class=\"line\">口令：</span><br><span class=\"line\">您现在已经连接到数据库 <span class=\"string\">&quot;template1&quot;</span>,用户 <span class=\"string\">&quot;system&quot;</span>.</span><br><span class=\"line\">23:18:09 (system@[<span class=\"built_in\">local</span>]:54321)template1=<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 退出ksql终端</span></span><br><span class=\"line\">\\q</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"自定义sql提示符\"><a href=\"#自定义sql提示符\" class=\"headerlink\" title=\"自定义sql提示符\"></a>自定义sql提示符</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定制sql提示符，便于我们了解 目前在哪台终端、哪个用户、哪个数据库下操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用kingbase用户登录</span></span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@sonronzy ~]$ vim ~/.ksqlrc</span><br><span class=\"line\">[kingbase@sonronzy ~]$</span><br><span class=\"line\">[kingbase@sonronzy ~]$ <span class=\"built_in\">cat</span> ~/.ksqlrc</span><br><span class=\"line\">\\<span class=\"built_in\">set</span> PROMPT1 <span class=\"string\">&#x27;%`date +%H:%M:%S` (%n@%M:%&gt;)%/%R%#%x &#x27;</span></span><br><span class=\"line\">\\<span class=\"built_in\">set</span> PROMPT2 <span class=\"string\">&#x27;%M %n@%/%R%# &#x27;</span></span><br><span class=\"line\">[kingbase@sonronzy ~]$</span><br><span class=\"line\">[kingbase@sonronzy ~]$ <span class=\"built_in\">source</span> ~/.ksqlrc</span><br><span class=\"line\">[kingbase@sonronzy ~]$</span><br><span class=\"line\">[kingbase@sonronzy ~]$ ksql -Usystem -W TEST</span><br><span class=\"line\">口令：</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 <span class=\"string\">&quot;help&quot;</span> 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">23:13:03 (system@[<span class=\"built_in\">local</span>]:54321)TEST=<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\<span class=\"built_in\">set</span> PROMPT1 <span class=\"string\">&#x27;%`date +%H:%M:%S` (%n@%M:%&gt;)%/%R%#%x &#x27;</span></span><br><span class=\"line\">\\<span class=\"built_in\">set</span> PROMPT2 <span class=\"string\">&#x27;%M %n@%/%R%# &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>解析：<br>◆ %M      指数据库服务器的主机名 - 如果连接是通过 Unix 域套接字，则为“[local]”<br>◆ %m      也表示数据库主机名，会截断第一个 . 后的内容<br>◆ %&gt;        数据库端口号<br>◆ %n        是指会话用户名<br>◆ %/        当前数据库名<br>◆ %#        如果是超级用户显示为 #，否则显示为 &gt;<br>◆ %R        是指您处于单行模式（^）还是断开连接（！ ） ，但通常为=<br>◆ %x        指的是事务状态 - 通常为空白，除非在事务块（*）</p>\n<br/>\n\n<h2 id=\"常用sql\"><a href=\"#常用sql\" class=\"headerlink\" title=\"常用sql\"></a>常用sql</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> database_mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> shared_buffers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> get_license_validdays();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"copy-与-copy\"><a href=\"#copy-与-copy\" class=\"headerlink\" title=\"copy 与 \\copy\"></a>copy 与 \\copy</h2><ul>\n<li>copy 命令属于 SQL 命令， \\copy 命令属于元命令</li>\n<li>copy 命令进行数据导出、导入时，需要具有 superuser 的权限；导出至 stdout 时，仅需模式、<br>对象的相关权限即可；\\copy 命令进行数据导出、导入时，无需 superuser 权限</li>\n<li>copy 命令只能在源数据库服务器上进行数据导出、导入；\\copy 命令还可以通过远程服务器连<br>接至源数据库服务器，将数据导出至远程服务器、或将远程服务器的数据导入源数据库中</li>\n<li>大数据量的数据进行导出、导入时，copy 比\\copy 的性能高</li>\n<li>如果进行小数据量导出、导入，建议通过\\copy 操作便利；大数据量操作时，建议在源数据库中<br>使用 copy 效率更高</li>\n</ul>\n<br/>\n\n<h1 id=\"Kingbase-数据迁移\"><a href=\"#Kingbase-数据迁移\" class=\"headerlink\" title=\"Kingbase 数据迁移\"></a>Kingbase 数据迁移</h1><h2 id=\"第一步：基础数据结构及数据迁移\"><a href=\"#第一步：基础数据结构及数据迁移\" class=\"headerlink\" title=\"第一步：基础数据结构及数据迁移\"></a>第一步：基础数据结构及数据迁移</h2><ul>\n<li>准备工作<ul>\n<li>根据需要创建用户、表空间、模式等对象</li>\n</ul>\n</li>\n<li>使用【数据库迁移工具】完成基础数据迁移工作</li>\n</ul>\n<br/>\n\n<h2 id=\"第二步：应用接口及框架迁移\"><a href=\"#第二步：应用接口及框架迁移\" class=\"headerlink\" title=\"第二步：应用接口及框架迁移\"></a>第二步：应用接口及框架迁移</h2><h3 id=\"springboot-数据源配置\"><a href=\"#springboot-数据源配置\" class=\"headerlink\" title=\"springboot 数据源配置\"></a>springboot 数据源配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#环境业务自身配置开始</span></span><br><span class=\"line\"><span class=\"comment\">#默认数据源default，不能修改</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.primary</span> <span class=\"string\">=</span> <span class=\"string\">default</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认数据源，名称 default</span></span><br><span class=\"line\"><span class=\"comment\">#spring.datasource.dynamic.datasource.default.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\">#spring.datasource.dynamic.datasource.default.url=jdbc:mysql://localhost:3306/xjnxdb?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"comment\">#spring.datasource.dynamic.datasource.default.username=root</span></span><br><span class=\"line\"><span class=\"comment\">#spring.datasource.dynamic.datasource.default.password=root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#kingbase 数据源配置</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.datasource.default.driver-class-name=com.kingbase8.Driver</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.datasource.default.url=jdbc:kingbase8://10.114.12.66:54321/xjnxdb</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.datasource.default.username=xjnxdb</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.datasource.default.password=xjnxdb</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"maven-配置Kingbase-驱动\"><a href=\"#maven-配置Kingbase-驱动\" class=\"headerlink\" title=\"maven 配置Kingbase 驱动\"></a>maven 配置Kingbase 驱动</h3><p>在maven repository中查找kingbase的驱动依赖配置，加入到我们的pom文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/kingbase/kingbase8 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>kingbase<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>kingbase8<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><font color=\"red\"><strong>注意：</strong></font>我们会发现Kingbase8驱动依赖根本下载不下来。此时：<strong>我们可以把驱动下载到本地，再使用maven命令install到maven本地仓库即可</strong></li>\n</ul>\n<p><a class=\"link\"   href=\"https://maven.jeecg.org/nexus/content/repositories/jeecg/kingbase/kingbase8/8/kingbase8-8.jar\" >kingbase8-8.jar<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -DgroupId=kingbase -DartifactId=kingbase8 -Dversion=8 -Dfile=D:\\bak\\kingbase8-8.jar -Dpackaging=jar -DgeneratePom=true</span><br><span class=\"line\"></span><br><span class=\"line\">mvn install:install-file -DgroupId=kingbase -DartifactId=kingbase8 -Dversion=8.6.0 -Dfile=H:\\bank\\kingbase8-8.6.0.jar -Dpackaging=jar -DgeneratePom=true</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该语句中参数：</p>\n<p>DgroupId ：组id 【对应pom中的groupId】<br>DartifactId：项目id 【对应pom中的artifactId】<br>Dversion：版本号 【对应pom中的version】<br>Dfile：jar包的绝对路径<br>Dpackaging：是什么包<br>DgeneratePom：是否生成pom</p>\n</blockquote>\n<ul>\n<li>最后在pom中直接写入 dependency 就可以了，刷新即可使用</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/kingbase/kingbase8 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>kingbase<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>kingbase8<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"第三步：应用功能测试（SQL兼容情况）\"><a href=\"#第三步：应用功能测试（SQL兼容情况）\" class=\"headerlink\" title=\"第三步：应用功能测试（SQL兼容情况）\"></a>第三步：应用功能测试（SQL兼容情况）</h2><h3 id=\"date-format-函数支持\"><a href=\"#date-format-函数支持\" class=\"headerlink\" title=\"date_format 函数支持\"></a>date_format 函数支持</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@TableInfo(name = &quot;wf_sequence&quot;, primaryKeys = &#123;&quot;seqNo&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WfSequenceMapper</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Update(&quot;update wf_sequence set seqval = seqval+1 where seqno=#&#123;seqNo&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">incBySeqNo</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;seqNo&quot;)</span> String seqNo)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Select(&quot;select * from wf_sequence where seqno=#&#123;seqNo&#125;&quot;)</span></span><br><span class=\"line\">\tWfSequenceDO <span class=\"title function_\">getBySeqNo</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;seqNo&quot;)</span> String seqNo)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Insert(&quot;insert into wf_sequence (seqno,seqval,seqdesc)values(#&#123;seqNo&#125;,#&#123;seqVal&#125;,#&#123;seqDesc&#125;)&quot;)</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">insert</span><span class=\"params\">(WfSequenceDO seq)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Select(&quot;SELECT concat(DATE_FORMAT(sysdate(),&#x27;%Y%m%d&#x27;),right(lpad(seqval,15,0),8)) as seqDesc FROM wf_sequence where seqno=#&#123;seqNo&#125;&quot;)</span></span><br><span class=\"line\">\tWfSequenceDO <span class=\"title function_\">getTxnBySeqNo</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;seqNo&quot;)</span> String seqNo)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">28</span>:<span class=\"number\">12</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span># <span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\">错误:  函数 date_format(<span class=\"literal\">unknown</span>, <span class=\"literal\">unknown</span>) 不存在</span><br><span class=\"line\">第<span class=\"number\">1</span>行<span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\">            <span class=\"operator\">^</span></span><br><span class=\"line\">提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">28</span>:<span class=\"number\">15</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参考 《[应用开发及迁移][参考手册]KingbaseES扩展插件参考手册.pdf》</li>\n</ul>\n<blockquote>\n<ul>\n<li>kdb_date_function</li>\n</ul>\n<p>kdb_date_function 是一个兼容 mysql 数据库 date 相关函数的扩展。使用时需要 <code>create extension kdb_date_function</code>，不需要时 <code>drop extension kdb_date_function</code> 即可。</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">28</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span># <span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\">错误:  函数 date_format(<span class=\"literal\">unknown</span>, <span class=\"literal\">unknown</span>) 不存在</span><br><span class=\"line\">第<span class=\"number\">1</span>行<span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\">            <span class=\"operator\">^</span></span><br><span class=\"line\">提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">29</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">30</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">30</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">30</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span># <span class=\"keyword\">create</span> extension kdb_date_function;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> EXTENSION</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">44</span>:<span class=\"number\">42</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span># <span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\"> date_format</span><br><span class=\"line\"><span class=\"comment\">-------------</span></span><br><span class=\"line\"> <span class=\"number\">2022</span><span class=\"number\">-05</span><span class=\"number\">-15</span></span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">44</span>:<span class=\"number\">46</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h1 id=\"数据库迁移评估系统\"><a href=\"#数据库迁移评估系统\" class=\"headerlink\" title=\"数据库迁移评估系统\"></a>数据库迁移评估系统</h1><ul>\n<li>具体详情参考官方文档</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Kingbase-安装与启停\"><a href=\"#Kingbase-安装与启停\" class=\"headerlink\" title=\"Kingbase 安装与启停\"></a>Kingbase 安装与启停</h1><h2 id=\"安装前准备工作\"><a href=\"#安装前准备工作\" class=\"headerlink\" title=\"安装前准备工作\"></a>安装前准备工作</h2><ul>\n<li><p>服务器安装jdk1.8+版本并配置环境变量</p>\n</li>\n<li><p>创建kingbase用户组与用户。创建目录，并设置目录属组、属组、权限</p>\n</li>\n<li><p>上传kingbase安装包和kingbase的license.dat 到服务器（安装包和license可以到<a class=\"link\"   href=\"https://www.kingbase.com.cn/rjcxxz/index.htm\" >官网<i class=\"fas fa-external-link-alt\"></i></a>下载） </p>\n<br/></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前需做好选项、存储目录规划</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用root用户登录进服务器</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/install 安装软件上传目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/kingbase/V8  数据库安装目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/backup 备份目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/data 数据存储目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/archive 归档目录</span></span><br><span class=\"line\">[root@bu2-vm-svr-66 ~]# mkdir -p /install /KingbaseES/V8 /backup /data /archive</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传 安装包、license.dat 到 /install 目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传 执行脚本 optimize_system_conf_kcp.sh 和 optimize_database_conf.s 到 /install 目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">optimize_system_conf_kcp.sh 优化操作系统的脚本   optimize_database_conf.sh 优化数据库的脚本</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bu2-vm-svr-66 ~]# ll /install</span><br><span class=\"line\">总用量 852348</span><br><span class=\"line\">-rw-r--r--. 1 root root 872781824 5月  11 03:27 KingbaseES_V008R006C005B0023_Lin                                      64_single_install.iso</span><br><span class=\"line\">-rw-r--r--. 1 root root      3351 5月  11 03:27 license_12350_0.dat</span><br><span class=\"line\">-rw-r--r--. 1 root root      6504 5月  11 03:27 optimize_database_conf.sh</span><br><span class=\"line\">-rw-r--r--. 1 root root      8023 5月  11 03:27 optimize_system_conf_kcp.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行 optimize_system_conf_kcp.sh（优化操作系统的脚本）。主要帮我们 创建了kingbase 用户组和用户（用户密码：kingbase）。具体详情可以查看脚本内容</span></span><br><span class=\"line\">bash /install/optimize_system_conf_kcp.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node1 install]# id kingbase</span><br><span class=\"line\">uid=1001(kingbase) gid=1001(kingbase) 组=1001(kingbase)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改目录属组、属主、权限</span></span><br><span class=\"line\">chown -R kingbase:kingbase /install /KingbaseES /backup /archive /data</span><br><span class=\"line\">chmod -R 775 /install /KingbaseES /backup /archive</span><br><span class=\"line\">chmod -R 700 /data</span><br></pre></td></tr></table></figure>\n\n <br/>\n\n<h2 id=\"Kingbase-安装\"><a href=\"#Kingbase-安装\" class=\"headerlink\" title=\"Kingbase 安装\"></a>Kingbase 安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">我们使用的是 KingbaseES_V008R006C005B0023_Lin64_single_install.iso 文件，所以先使用root用户登录并挂载</span></span><br><span class=\"line\">[root@node1 install]# mount -o loop /install/KingbaseES_V008R006C005B0023_Lin64_single_install.iso  /mnt/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node1 install]# ll /mnt/</span><br><span class=\"line\">总用量 6</span><br><span class=\"line\">dr-xr-xr-x. 2 root root 2048 11月  5 2021 setup</span><br><span class=\"line\">-r-xr-xr-x. 1 root root 3820 11月  5 2021 setup.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># 使用kingbase 用户登录服务器 ，进入/mnt 下执行 setup.sh 则开始安装 （</span></span><br><span class=\"line\">[kingbase@node1 mnt]$ <span class=\"built_in\">cd</span> /mnt</span><br><span class=\"line\">[kingbase@node1 mnt]$ bash setup.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以使用命令行安装</span></span><br><span class=\"line\">./setup.sh -i console</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装完成后 使用root用户登录进服务器，把数据库服务注册成系统服务。并启动数据库</span></span><br><span class=\"line\">[root@node1 ~]<span class=\"comment\"># /KingbaseES/V8/install/script/root.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把kingbase注册成系统服务后（root用户执行 /KingbaseES/V8/Scripts/root.sh 后）。kingbase已经启动了，但此时 为什么不可以使用 systemctl  这种方式启停 kingbase？</span></span><br><span class=\"line\"><span class=\"comment\"># 必须 使用sys_ctl 数据库先停止. 然后再使用systemctl 启动数据. 才能成功启动, 因为systemctl 需要获取进程状态信息.</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行 数据库优化文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash /install/optimize_database_conf.sh</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Kingbase-相关环境变量配置\"><a href=\"#Kingbase-相关环境变量配置\" class=\"headerlink\" title=\"Kingbase 相关环境变量配置\"></a>Kingbase 相关环境变量配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用kingbase用户登录。配置ksql环境变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@sonronzy ~]<span class=\"comment\"># su - kingbase</span></span><br><span class=\"line\">[kingbase@sonronzy ~]$ <span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">[kingbase@sonronzy ~]$ vi .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/KingbaseES/V8/Server/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@sonronzy ~]$ <span class=\"built_in\">source</span> .bashrc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用kingbase用户登录 ，使用sys_ctl 专用命令管理金仓数据库</span><br><span class=\"line\"># 配置sys_ctl 环境变量</span><br><span class=\"line\">[kingbase<span class=\"variable\">@sonronzy</span> <span class=\"operator\">~</span>]$ cd <span class=\"operator\">~</span></span><br><span class=\"line\">[kingbase<span class=\"variable\">@sonronzy</span> <span class=\"operator\">~</span>]$ vim .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export KINGBASE_DATA<span class=\"operator\">=</span><span class=\"operator\">/</span>data</span><br><span class=\"line\">export PATH<span class=\"operator\">=</span><span class=\"operator\">/</span>KingbaseES<span class=\"operator\">/</span>V8<span class=\"operator\">/</span>Server<span class=\"operator\">/</span>bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase<span class=\"variable\">@sonronzy</span> <span class=\"operator\">~</span>]$ source .bashrc</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Kingbase-启停\"><a href=\"#Kingbase-启停\" class=\"headerlink\" title=\"Kingbase 启停\"></a>Kingbase 启停</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kingbase 是进程，kingbase8d 是服务</span></span><br><span class=\"line\"><span class=\"comment\"># 注意没有修改linux参数的时候 systemctl 和 service 方式启停数据库 不要混用</span></span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d start/stop/restart/status</span><br><span class=\"line\">service kingbase8 start/stop/restart/status</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start kingbase8d</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/init.d/kingbase8d start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kingbase用户 ，使用sys_ctl 专用命令管理金仓数据库</span></span><br><span class=\"line\"><span class=\"comment\"># 首先要配置 环境变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl start/stop/restart/status</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 有任何用户连接到数据库里来，都无法关闭数据库，必须等所有用户提交完数据断开连接后 才可关闭数据库。这个可能会关闭很长时间</span></span><br><span class=\"line\">sys_ctl stop -m smart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认方式 关闭数据库。最好选用这个。 已经提交的用户踢开连接，未提交的用户 回滚，然后关闭数据库（一致状态，安全关闭方式）</span></span><br><span class=\"line\">sys_ctl stop -m fast | sys_ctl stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 断电式关闭数据库 (不推荐，可能会导致数据不一致，数据库无法启动)</span></span><br><span class=\"line\">sys_ctl -m immediate</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Kingbase-卸载\"><a href=\"#Kingbase-卸载\" class=\"headerlink\" title=\"Kingbase 卸载\"></a>Kingbase 卸载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用root用户登录，进入到数据库的安装目录下的 Scripts 目录下，执行 rootuninstall.sh 卸载kingbase数据库</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /KingbaseES/V8/Scripts</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/Scripts/rootuninstall.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后确认已删除的kingbase8d 服务</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"实践环境中常见的问题\"><a href=\"#实践环境中常见的问题\" class=\"headerlink\" title=\"实践环境中常见的问题\"></a>实践环境中常见的问题</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/0097e80f862e58ac1ee42674eb5f03e.5mzf9cefwgc0.webp\"  width=\"80%\"/>\n\n<br/>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"* 注意事项\"></a>* 注意事项</h2><h3 id=\"Kingbase数据库大小写敏感说明及转换\"><a href=\"#Kingbase数据库大小写敏感说明及转换\" class=\"headerlink\" title=\"Kingbase数据库大小写敏感说明及转换\"></a>Kingbase数据库大小写敏感说明及转换</h3><p><a href=\"https://bbs.kingbase.com.cn/wenda/question/137.html\"><font color=\"red\">Kingbase数据库大小写敏感说明及转换</font></a></p>\n<br/>\n\n<h1 id=\"Kingbase-客户端\"><a href=\"#Kingbase-客户端\" class=\"headerlink\" title=\"Kingbase 客户端\"></a>Kingbase 客户端</h1><h2 id=\"Kingbase-对象管理器\"><a href=\"#Kingbase-对象管理器\" class=\"headerlink\" title=\"Kingbase 对象管理器\"></a>Kingbase 对象管理器</h2><ul>\n<li>我们安装kingbase的时候，如果选择完全安装，则会帮我们安装上 数据库对象管理工具</li>\n<li>使用Kingbase 对象管理器连接数据库 操作如下图</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6gb216h4y0g0.webp\"  width=\"90%\"/>\n\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><ul>\n<li>业务软件所使用的对象的集合。包括：表、视图、序列、索引、函数、存储过程等……</li>\n<li>非模式对象：表空间</li>\n</ul>\n<br/>\n\n<h2 id=\"其它客户端\"><a href=\"#其它客户端\" class=\"headerlink\" title=\"其它客户端\"></a>其它客户端</h2><ul>\n<li>当我们不想在本机安装kingbase数据库时，可以选择第三方数据库客户端连接kingbase数据库。可以使用的相关客户端有：DBeaver、DataGrip 2020.1 x64、Dbvisualizer</li>\n</ul>\n<br/>\n\n<h3 id=\"DBeaver\"><a href=\"#DBeaver\" class=\"headerlink\" title=\"DBeaver\"></a>DBeaver</h3><ul>\n<li><a class=\"link\"   href=\"https://dbeaver.io/download/\" >官网<i class=\"fas fa-external-link-alt\"></i></a> 下载 DBeaver</li>\n<li>使用DBeaver 连接Kingbase 数据库 操作如下图</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5o8iqfctzac0.webp\"  />\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4z57m966ojc0.webp\" />\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7essaooqm480.webp\" /> \n\n<br/>\n\n<h1 id=\"ksql-命令行工具\"><a href=\"#ksql-命令行工具\" class=\"headerlink\" title=\"ksql 命令行工具\"></a>ksql 命令行工具</h1><ul>\n<li>Ksql是Kingbase的交互式终端</li>\n<li>支持上下键翻页，tab键补全</li>\n</ul>\n<br/>\n\n<h2 id=\"ksql登录-、执行sql语句、sql脚本\"><a href=\"#ksql登录-、执行sql语句、sql脚本\" class=\"headerlink\" title=\"ksql登录 、执行sql语句、sql脚本\"></a>ksql登录 、执行sql语句、sql脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ksql -Usystem -h localhost -p54321 -W TEST</span><br><span class=\"line\"></span><br><span class=\"line\">ksql -Usystem -W xjnxdb -l</span><br><span class=\"line\"></span><br><span class=\"line\">ksql -Usystem -W xjnxdb -c  <span class=\"string\">&quot;select * from xjnxdb.pa_user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ksql -Usystem -W <span class=\"built_in\">test</span> -f /install/1.sql</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"ksql终端常用快捷键\"><a href=\"#ksql终端常用快捷键\" class=\"headerlink\" title=\"ksql终端常用快捷键\"></a>ksql终端常用快捷键</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有快捷键</span></span><br><span class=\"line\">\\?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># help</span></span><br><span class=\"line\">\\h create</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前有哪些数据库</span></span><br><span class=\"line\">\\l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看表结构</span></span><br><span class=\"line\">\\d xjxndb.pa_user</span><br><span class=\"line\"></span><br><span class=\"line\">\\c 切换数据库</span><br><span class=\"line\">23:17:59 (system@[<span class=\"built_in\">local</span>]:54321)TEST=<span class=\"comment\"># \\c template1</span></span><br><span class=\"line\">口令：</span><br><span class=\"line\">您现在已经连接到数据库 <span class=\"string\">&quot;template1&quot;</span>,用户 <span class=\"string\">&quot;system&quot;</span>.</span><br><span class=\"line\">23:18:09 (system@[<span class=\"built_in\">local</span>]:54321)template1=<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 退出ksql终端</span></span><br><span class=\"line\">\\q</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"自定义sql提示符\"><a href=\"#自定义sql提示符\" class=\"headerlink\" title=\"自定义sql提示符\"></a>自定义sql提示符</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定制sql提示符，便于我们了解 目前在哪台终端、哪个用户、哪个数据库下操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用kingbase用户登录</span></span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@sonronzy ~]$ vim ~/.ksqlrc</span><br><span class=\"line\">[kingbase@sonronzy ~]$</span><br><span class=\"line\">[kingbase@sonronzy ~]$ <span class=\"built_in\">cat</span> ~/.ksqlrc</span><br><span class=\"line\">\\<span class=\"built_in\">set</span> PROMPT1 <span class=\"string\">&#x27;%`date +%H:%M:%S` (%n@%M:%&gt;)%/%R%#%x &#x27;</span></span><br><span class=\"line\">\\<span class=\"built_in\">set</span> PROMPT2 <span class=\"string\">&#x27;%M %n@%/%R%# &#x27;</span></span><br><span class=\"line\">[kingbase@sonronzy ~]$</span><br><span class=\"line\">[kingbase@sonronzy ~]$ <span class=\"built_in\">source</span> ~/.ksqlrc</span><br><span class=\"line\">[kingbase@sonronzy ~]$</span><br><span class=\"line\">[kingbase@sonronzy ~]$ ksql -Usystem -W TEST</span><br><span class=\"line\">口令：</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 <span class=\"string\">&quot;help&quot;</span> 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">23:13:03 (system@[<span class=\"built_in\">local</span>]:54321)TEST=<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\<span class=\"built_in\">set</span> PROMPT1 <span class=\"string\">&#x27;%`date +%H:%M:%S` (%n@%M:%&gt;)%/%R%#%x &#x27;</span></span><br><span class=\"line\">\\<span class=\"built_in\">set</span> PROMPT2 <span class=\"string\">&#x27;%M %n@%/%R%# &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>解析：<br>◆ %M      指数据库服务器的主机名 - 如果连接是通过 Unix 域套接字，则为“[local]”<br>◆ %m      也表示数据库主机名，会截断第一个 . 后的内容<br>◆ %&gt;        数据库端口号<br>◆ %n        是指会话用户名<br>◆ %/        当前数据库名<br>◆ %#        如果是超级用户显示为 #，否则显示为 &gt;<br>◆ %R        是指您处于单行模式（^）还是断开连接（！ ） ，但通常为=<br>◆ %x        指的是事务状态 - 通常为空白，除非在事务块（*）</p>\n<br/>\n\n<h2 id=\"常用sql\"><a href=\"#常用sql\" class=\"headerlink\" title=\"常用sql\"></a>常用sql</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> database_mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> shared_buffers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> get_license_validdays();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"copy-与-copy\"><a href=\"#copy-与-copy\" class=\"headerlink\" title=\"copy 与 \\copy\"></a>copy 与 \\copy</h2><ul>\n<li>copy 命令属于 SQL 命令， \\copy 命令属于元命令</li>\n<li>copy 命令进行数据导出、导入时，需要具有 superuser 的权限；导出至 stdout 时，仅需模式、<br>对象的相关权限即可；\\copy 命令进行数据导出、导入时，无需 superuser 权限</li>\n<li>copy 命令只能在源数据库服务器上进行数据导出、导入；\\copy 命令还可以通过远程服务器连<br>接至源数据库服务器，将数据导出至远程服务器、或将远程服务器的数据导入源数据库中</li>\n<li>大数据量的数据进行导出、导入时，copy 比\\copy 的性能高</li>\n<li>如果进行小数据量导出、导入，建议通过\\copy 操作便利；大数据量操作时，建议在源数据库中<br>使用 copy 效率更高</li>\n</ul>\n<br/>\n\n<h1 id=\"Kingbase-数据迁移\"><a href=\"#Kingbase-数据迁移\" class=\"headerlink\" title=\"Kingbase 数据迁移\"></a>Kingbase 数据迁移</h1><h2 id=\"第一步：基础数据结构及数据迁移\"><a href=\"#第一步：基础数据结构及数据迁移\" class=\"headerlink\" title=\"第一步：基础数据结构及数据迁移\"></a>第一步：基础数据结构及数据迁移</h2><ul>\n<li>准备工作<ul>\n<li>根据需要创建用户、表空间、模式等对象</li>\n</ul>\n</li>\n<li>使用【数据库迁移工具】完成基础数据迁移工作</li>\n</ul>\n<br/>\n\n<h2 id=\"第二步：应用接口及框架迁移\"><a href=\"#第二步：应用接口及框架迁移\" class=\"headerlink\" title=\"第二步：应用接口及框架迁移\"></a>第二步：应用接口及框架迁移</h2><h3 id=\"springboot-数据源配置\"><a href=\"#springboot-数据源配置\" class=\"headerlink\" title=\"springboot 数据源配置\"></a>springboot 数据源配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#环境业务自身配置开始</span></span><br><span class=\"line\"><span class=\"comment\">#默认数据源default，不能修改</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.primary</span> <span class=\"string\">=</span> <span class=\"string\">default</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认数据源，名称 default</span></span><br><span class=\"line\"><span class=\"comment\">#spring.datasource.dynamic.datasource.default.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\">#spring.datasource.dynamic.datasource.default.url=jdbc:mysql://localhost:3306/xjnxdb?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"comment\">#spring.datasource.dynamic.datasource.default.username=root</span></span><br><span class=\"line\"><span class=\"comment\">#spring.datasource.dynamic.datasource.default.password=root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#kingbase 数据源配置</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.datasource.default.driver-class-name=com.kingbase8.Driver</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.datasource.default.url=jdbc:kingbase8://10.114.12.66:54321/xjnxdb</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.datasource.default.username=xjnxdb</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.dynamic.datasource.default.password=xjnxdb</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"maven-配置Kingbase-驱动\"><a href=\"#maven-配置Kingbase-驱动\" class=\"headerlink\" title=\"maven 配置Kingbase 驱动\"></a>maven 配置Kingbase 驱动</h3><p>在maven repository中查找kingbase的驱动依赖配置，加入到我们的pom文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/kingbase/kingbase8 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>kingbase<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>kingbase8<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><font color=\"red\"><strong>注意：</strong></font>我们会发现Kingbase8驱动依赖根本下载不下来。此时：<strong>我们可以把驱动下载到本地，再使用maven命令install到maven本地仓库即可</strong></li>\n</ul>\n<p><a class=\"link\"   href=\"https://maven.jeecg.org/nexus/content/repositories/jeecg/kingbase/kingbase8/8/kingbase8-8.jar\" >kingbase8-8.jar<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -DgroupId=kingbase -DartifactId=kingbase8 -Dversion=8 -Dfile=D:\\bak\\kingbase8-8.jar -Dpackaging=jar -DgeneratePom=true</span><br><span class=\"line\"></span><br><span class=\"line\">mvn install:install-file -DgroupId=kingbase -DartifactId=kingbase8 -Dversion=8.6.0 -Dfile=H:\\bank\\kingbase8-8.6.0.jar -Dpackaging=jar -DgeneratePom=true</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该语句中参数：</p>\n<p>DgroupId ：组id 【对应pom中的groupId】<br>DartifactId：项目id 【对应pom中的artifactId】<br>Dversion：版本号 【对应pom中的version】<br>Dfile：jar包的绝对路径<br>Dpackaging：是什么包<br>DgeneratePom：是否生成pom</p>\n</blockquote>\n<ul>\n<li>最后在pom中直接写入 dependency 就可以了，刷新即可使用</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/kingbase/kingbase8 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>kingbase<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>kingbase8<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"第三步：应用功能测试（SQL兼容情况）\"><a href=\"#第三步：应用功能测试（SQL兼容情况）\" class=\"headerlink\" title=\"第三步：应用功能测试（SQL兼容情况）\"></a>第三步：应用功能测试（SQL兼容情况）</h2><h3 id=\"date-format-函数支持\"><a href=\"#date-format-函数支持\" class=\"headerlink\" title=\"date_format 函数支持\"></a>date_format 函数支持</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@TableInfo(name = &quot;wf_sequence&quot;, primaryKeys = &#123;&quot;seqNo&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WfSequenceMapper</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Update(&quot;update wf_sequence set seqval = seqval+1 where seqno=#&#123;seqNo&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">incBySeqNo</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;seqNo&quot;)</span> String seqNo)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Select(&quot;select * from wf_sequence where seqno=#&#123;seqNo&#125;&quot;)</span></span><br><span class=\"line\">\tWfSequenceDO <span class=\"title function_\">getBySeqNo</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;seqNo&quot;)</span> String seqNo)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Insert(&quot;insert into wf_sequence (seqno,seqval,seqdesc)values(#&#123;seqNo&#125;,#&#123;seqVal&#125;,#&#123;seqDesc&#125;)&quot;)</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">insert</span><span class=\"params\">(WfSequenceDO seq)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Select(&quot;SELECT concat(DATE_FORMAT(sysdate(),&#x27;%Y%m%d&#x27;),right(lpad(seqval,15,0),8)) as seqDesc FROM wf_sequence where seqno=#&#123;seqNo&#125;&quot;)</span></span><br><span class=\"line\">\tWfSequenceDO <span class=\"title function_\">getTxnBySeqNo</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;seqNo&quot;)</span> String seqNo)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">28</span>:<span class=\"number\">12</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span># <span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\">错误:  函数 date_format(<span class=\"literal\">unknown</span>, <span class=\"literal\">unknown</span>) 不存在</span><br><span class=\"line\">第<span class=\"number\">1</span>行<span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\">            <span class=\"operator\">^</span></span><br><span class=\"line\">提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">28</span>:<span class=\"number\">15</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参考 《[应用开发及迁移][参考手册]KingbaseES扩展插件参考手册.pdf》</li>\n</ul>\n<blockquote>\n<ul>\n<li>kdb_date_function</li>\n</ul>\n<p>kdb_date_function 是一个兼容 mysql 数据库 date 相关函数的扩展。使用时需要 <code>create extension kdb_date_function</code>，不需要时 <code>drop extension kdb_date_function</code> 即可。</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">28</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span># <span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\">错误:  函数 date_format(<span class=\"literal\">unknown</span>, <span class=\"literal\">unknown</span>) 不存在</span><br><span class=\"line\">第<span class=\"number\">1</span>行<span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\">            <span class=\"operator\">^</span></span><br><span class=\"line\">提示:  没有匹配指定名称和参数类型的函数. 您也许需要增加明确的类型转换.</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">29</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">30</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">30</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">41</span>:<span class=\"number\">30</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span># <span class=\"keyword\">create</span> extension kdb_date_function;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> EXTENSION</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">44</span>:<span class=\"number\">42</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span># <span class=\"keyword\">select</span> date_format(<span class=\"string\">&#x27;2022-05-15&#x27;</span>,<span class=\"string\">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class=\"line\"> date_format</span><br><span class=\"line\"><span class=\"comment\">-------------</span></span><br><span class=\"line\"> <span class=\"number\">2022</span><span class=\"number\">-05</span><span class=\"number\">-15</span></span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">44</span>:<span class=\"number\">46</span> (<span class=\"keyword\">system</span>@[<span class=\"keyword\">local</span>]:<span class=\"number\">54321</span>)TEST<span class=\"operator\">=</span>#</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h1 id=\"数据库迁移评估系统\"><a href=\"#数据库迁移评估系统\" class=\"headerlink\" title=\"数据库迁移评估系统\"></a>数据库迁移评估系统</h1><ul>\n<li>具体详情参考官方文档</li>\n</ul>\n"},{"title":"Spring","date":"2022-07-16T13:42:14.000Z","_content":"\n\n\n# Spring 概览\n\n- Spring IoC\n\n|       内容        |               说明               | 重要程度 |\n| :---------------: | :------------------------------: | :------: |\n|  Spring 框架介绍  | Spring IoC、DI 和 AOP 等核心概念 |  ※※※※※   |\n|  Spring IoC 容器  |     Spring 实例化与管理对象      |  ※※※※※   |\n|   集合对象注入    |    注入List、Set、Map集合对象    |  ※※※※※   |\n|     底层原理      |      Spring Bean 的生命周期      |  ※※※※※   |\n| 注解与Java Config |  Spring 注解分类和常用注解应用   |  ※※※※※   |\n\n<br/>\n\nSpring AOP\n\n|      内容       |                说明                 | 重要程度 |\n| :-------------: | :---------------------------------: | :------: |\n| 理解 AOP 及名词 |      Spring AOP 开发与配置流程      |   ※※※※   |\n|  五种通知类型   |    Spring 五种通知类型与应用场景    |   ※※※    |\n|   切点表达式    | PointCut 切点表达式的语法规则及应用 |    ※※    |\n|    代理模式     | JDK 动态代理和 CGLib代理的执行过程  |   ※※※※   |\n\n<br/>\n\n- Spring JDBC 与声明式事物\n\n|        内容        |              说明               | 重要程度 |\n| :----------------: | :-----------------------------: | :------: |\n|    Spring JDBC     |     Spring JDBC 的环境配置      |   ※※※※   |\n|    RestTemplate    | 基于 RestTemplate 实现 SQL 处理 |   ※※※    |\n|   配置声明式事物   |      声明式事物的配置过程       |  ※※※※※   |\n|  事物传播行为介绍  |   讲解常用事物传播行为的用途    |   ※※※    |\n| 声明式事物注解形式 |     基于注解使用声明式事物      |  ※※※※※   |\n\n<br/>\n\n## Spring 的含义\n\n- Spring 可以从狭义与广义两个角度看待\n- 狭义的 Spring 是指 Spring 框架（Spring Framework）\n- 广义的 Spring 是指 Spring 生态体系\n\n\n\n### 狭义的 Spring 框架\n\n- Spring 框架是企业开发复杂性的一站式解决方案\n- Spring 框架的核心是 IoC 容器与 AOP 面向切面编程\n- Spring IoC 负责创建与管理系统对象，并在此基础上扩展功能\n\n\n\n### 广义的 Spring 生态体系\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.ueqlwks019s.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n## IoC 控制反转\n\n- IoC 控制反转，全称 Inverse of Control ，是一种设计理念\n- 由代理人来创建与管理对象，消费者通过代理人来获取对象\n- IoC 的目的是降低对象之间直接耦合，加入 IoC 容器将对象统一管理，让对象关联变为弱耦合\n\n\n\n## DI\n\n- IoC 是设计理念，是现代程序设计遵循的标准，是宏伟目标\n- DI （Dependency Injection）是具体技术实现，是微观实现\n- DI 在 Java 中利用反射技术实现对象注入（Injection）\n\n\n\n## Spring框架组成模块\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.55c4tw9371o0.webp?raw=true\" width=\"70%\" />\n\n<br/>\n\n# Spring IoC\n\n## 传统开发方式\n\n- 对象直接饮用，导致对象硬性关联，程序难以扩展维护\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.58jxehmqgy80.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n## Spring IoC 容器\n\n- IoC 容器是 Spring 生态的地基，用于统一创建与管理对象依赖\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.4lxmp6457ng0.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n## Spring IoC 容器职责\n\n- 对象的控制权交由第三方统一管理（IoC 控制反转）\n- 利用 Java 反射技术实现运行时对象创建与关联（DI 依赖注入）\n- 基于配置提高应用程序的可维护性与可扩展性\n\n\n\n## 配置 bean 的三种方式\n\n- 基于XML配置bean\n- 基于注解配置bean\n- 基于Java代码配置bean\n\n\n\n### XML实例化Bean的配置方式\n\n#### （1）基于构造方法实例化对象\n\n```xml\n    <!--通过默认构造方法创建对象-->\n    <bean id=\"lily\" class=\"com.study.spring.entity.Person\" >\n    </bean>\n    \n    <!--通过有参构造方法创建对象-->\n    <bean id=\"andy\" class=\"com.study.spring.entity.Person\" >\n        <!-- 没有constructor-arg 则代表调用默认构造方法实例化        -->\n        <constructor-arg name=\"nickName\" value=\"andy\" ></constructor-arg>\n        <constructor-arg name=\"age\" value=\"18\"></constructor-arg>\n    </bean>\n    \n    <!--通过有参构造方法创建对象-->\n    <bean id=\"nacos\" class=\"com.study.spring.entity.Person\" >\n        <!-- 利用构造方法参数位置实现对象实例化        -->\n        <constructor-arg index=\"0\" value=\"nacos\" ></constructor-arg>\n        <constructor-arg index=\"1\" value=\"18\"></constructor-arg>\n    </bean>\n```\n\n\n\n#### （2）基于静态工厂实例化对象\n\n```java\n/**\n * 使用静态工厂方法创建对象，隐藏创建对象的细节\n */\npublic class PersonStaticFactory {\n    public static Person createPerson() {\n        Person person = new Person();\n        person.setAge(19);\n        person.setNickName(\"张三\");\n        System.out.println(\"使用静态工厂方法创建对象，隐藏创建对象的细节\");\n        return person;\n    }\n}\n```\n\n```xml\n<!--利用静态工厂实例化对象    -->\n    <bean id=\"personStaticFactory\" class=\"com.study.spring.factory.PersonStaticFactory\"\n          factory-method=\"createPerson\" ></bean>\n```\n\n\n\n#### （3）基于工厂实例方法实例化对象\n\n```java\n/**\n * 工厂实例方法创建对象是指IoC容器对工厂类进行实例化并调用对应的实例方法创建对象的过程\n */\npublic class PersonFactoryInstance {\n    public  Person createPerson() {\n        Person person = new Person();\n        person.setAge(19);\n        person.setNickName(\"张三\");\n        System.out.println(\"使用工厂实例方法创建对象，隐藏创建对象的细节\");\n        return person;\n    }\n}\n```\n\n```xml\n \t<!--利用工厂实例方法实例化bean -->\n    <bean id=\"personFactoryInstance\" class=\"com.study.spring.factory.PersonFactoryInstance\" ></bean>\n    <bean id=\"wangwu\" factory-bean=\"personFactoryInstance\" factory-method=\"createPerson\" ></bean>\n\n```\n\n\n\n## 从Spring IoC 容器获取bean\n\n```java\n        // 创建IoC容器并根据配置文件创建对象（初始化IoC容器并实例化对象）\n        ApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n\n        Person person = ac.getBean(\"andy\", Person.class);\n\n        Person person1 = (Person) ac.getBean(\"nacos\");\n```\n\n\n\n###  xml 方式中 id 与 name属性相同点\n\n- bean id 与 name 都是设置对象在 ioc 容器中唯一标识\n- 两者在同一配置文件中都不允许出现重复\n- 两者允许在多个配置文件中出现重复，新对象 覆盖旧对象\n\n\n\n### xml 方式中 id 与 name 属性区别\n\n- id 要求更为严格，一次只能定义一个对象标识（推荐）\n- name 更为宽松，一次允许定义多个对象标识\n- tips：id 与 name 的命名要求有意义。按驼峰命名书写\n\n\n\n```xml\n    <!-- 没有 id 与 name，默认使用类全名 作为 bean 标识-->\n    <bean class=\"com.study.spring.entity.Person\">\n        <constructor-arg name=\"nickName\" value=\"andy2\" ></constructor-arg>\n        <constructor-arg name=\"age\" value=\"118\"></constructor-arg>\n    </bean>\n```\n\n```java\nApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n\nPerson p = (Person) ac.getBean(\"com.study.spring.entity.Person\");\n```\n\n\n\n### Spring 配置文件，配置路径表达式\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1i297kdcvls0.webp?raw=true\" width=\"70%\"/>\n\n### 加载Spring 的配置文件\n\n```java\n // 加载单个配置文件\nApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n```\n\n```java\n// 加载多个配置文件\nString [] config = new String[]{\"classpath:applicationContext.xml\",\"classpath:applicationContext-2.xml\"};\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(config);\n```\n\n\n\n## 对象依赖注入\n\n- 依赖注入是指运行时将容器内对象利用反射赋给其它对象的操作\n\n\n\n### 基于setter方法注入对象\n\n- 利用setter对象实现静态数值注入\n\n```xml\n<!--ioc 容器自动利用反射机制运行时调用 setXXX方法为属性赋值-->\n    <bean id=\"guog\" class=\"com.study.spring.entity.Person\">\n        <property name=\"nickName\" value=\"guod\" ></property>\n        <property name=\"age\" value=\"55\" ></property>\n    </bean>\n```\n\n- 利用setter对象实现对象注入\n\n\n\n\n\n\n\n### 基于构造方法注入对象\n\n- \n\n\n\n\n\n","source":"_posts/2022/Spring.md","raw":"---\ntitle: Spring\ndate: 2022-07-16 21:42:14\ntags:\n\t- spring\n---\n\n\n\n# Spring 概览\n\n- Spring IoC\n\n|       内容        |               说明               | 重要程度 |\n| :---------------: | :------------------------------: | :------: |\n|  Spring 框架介绍  | Spring IoC、DI 和 AOP 等核心概念 |  ※※※※※   |\n|  Spring IoC 容器  |     Spring 实例化与管理对象      |  ※※※※※   |\n|   集合对象注入    |    注入List、Set、Map集合对象    |  ※※※※※   |\n|     底层原理      |      Spring Bean 的生命周期      |  ※※※※※   |\n| 注解与Java Config |  Spring 注解分类和常用注解应用   |  ※※※※※   |\n\n<br/>\n\nSpring AOP\n\n|      内容       |                说明                 | 重要程度 |\n| :-------------: | :---------------------------------: | :------: |\n| 理解 AOP 及名词 |      Spring AOP 开发与配置流程      |   ※※※※   |\n|  五种通知类型   |    Spring 五种通知类型与应用场景    |   ※※※    |\n|   切点表达式    | PointCut 切点表达式的语法规则及应用 |    ※※    |\n|    代理模式     | JDK 动态代理和 CGLib代理的执行过程  |   ※※※※   |\n\n<br/>\n\n- Spring JDBC 与声明式事物\n\n|        内容        |              说明               | 重要程度 |\n| :----------------: | :-----------------------------: | :------: |\n|    Spring JDBC     |     Spring JDBC 的环境配置      |   ※※※※   |\n|    RestTemplate    | 基于 RestTemplate 实现 SQL 处理 |   ※※※    |\n|   配置声明式事物   |      声明式事物的配置过程       |  ※※※※※   |\n|  事物传播行为介绍  |   讲解常用事物传播行为的用途    |   ※※※    |\n| 声明式事物注解形式 |     基于注解使用声明式事物      |  ※※※※※   |\n\n<br/>\n\n## Spring 的含义\n\n- Spring 可以从狭义与广义两个角度看待\n- 狭义的 Spring 是指 Spring 框架（Spring Framework）\n- 广义的 Spring 是指 Spring 生态体系\n\n\n\n### 狭义的 Spring 框架\n\n- Spring 框架是企业开发复杂性的一站式解决方案\n- Spring 框架的核心是 IoC 容器与 AOP 面向切面编程\n- Spring IoC 负责创建与管理系统对象，并在此基础上扩展功能\n\n\n\n### 广义的 Spring 生态体系\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.ueqlwks019s.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n## IoC 控制反转\n\n- IoC 控制反转，全称 Inverse of Control ，是一种设计理念\n- 由代理人来创建与管理对象，消费者通过代理人来获取对象\n- IoC 的目的是降低对象之间直接耦合，加入 IoC 容器将对象统一管理，让对象关联变为弱耦合\n\n\n\n## DI\n\n- IoC 是设计理念，是现代程序设计遵循的标准，是宏伟目标\n- DI （Dependency Injection）是具体技术实现，是微观实现\n- DI 在 Java 中利用反射技术实现对象注入（Injection）\n\n\n\n## Spring框架组成模块\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.55c4tw9371o0.webp?raw=true\" width=\"70%\" />\n\n<br/>\n\n# Spring IoC\n\n## 传统开发方式\n\n- 对象直接饮用，导致对象硬性关联，程序难以扩展维护\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.58jxehmqgy80.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n## Spring IoC 容器\n\n- IoC 容器是 Spring 生态的地基，用于统一创建与管理对象依赖\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.4lxmp6457ng0.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n## Spring IoC 容器职责\n\n- 对象的控制权交由第三方统一管理（IoC 控制反转）\n- 利用 Java 反射技术实现运行时对象创建与关联（DI 依赖注入）\n- 基于配置提高应用程序的可维护性与可扩展性\n\n\n\n## 配置 bean 的三种方式\n\n- 基于XML配置bean\n- 基于注解配置bean\n- 基于Java代码配置bean\n\n\n\n### XML实例化Bean的配置方式\n\n#### （1）基于构造方法实例化对象\n\n```xml\n    <!--通过默认构造方法创建对象-->\n    <bean id=\"lily\" class=\"com.study.spring.entity.Person\" >\n    </bean>\n    \n    <!--通过有参构造方法创建对象-->\n    <bean id=\"andy\" class=\"com.study.spring.entity.Person\" >\n        <!-- 没有constructor-arg 则代表调用默认构造方法实例化        -->\n        <constructor-arg name=\"nickName\" value=\"andy\" ></constructor-arg>\n        <constructor-arg name=\"age\" value=\"18\"></constructor-arg>\n    </bean>\n    \n    <!--通过有参构造方法创建对象-->\n    <bean id=\"nacos\" class=\"com.study.spring.entity.Person\" >\n        <!-- 利用构造方法参数位置实现对象实例化        -->\n        <constructor-arg index=\"0\" value=\"nacos\" ></constructor-arg>\n        <constructor-arg index=\"1\" value=\"18\"></constructor-arg>\n    </bean>\n```\n\n\n\n#### （2）基于静态工厂实例化对象\n\n```java\n/**\n * 使用静态工厂方法创建对象，隐藏创建对象的细节\n */\npublic class PersonStaticFactory {\n    public static Person createPerson() {\n        Person person = new Person();\n        person.setAge(19);\n        person.setNickName(\"张三\");\n        System.out.println(\"使用静态工厂方法创建对象，隐藏创建对象的细节\");\n        return person;\n    }\n}\n```\n\n```xml\n<!--利用静态工厂实例化对象    -->\n    <bean id=\"personStaticFactory\" class=\"com.study.spring.factory.PersonStaticFactory\"\n          factory-method=\"createPerson\" ></bean>\n```\n\n\n\n#### （3）基于工厂实例方法实例化对象\n\n```java\n/**\n * 工厂实例方法创建对象是指IoC容器对工厂类进行实例化并调用对应的实例方法创建对象的过程\n */\npublic class PersonFactoryInstance {\n    public  Person createPerson() {\n        Person person = new Person();\n        person.setAge(19);\n        person.setNickName(\"张三\");\n        System.out.println(\"使用工厂实例方法创建对象，隐藏创建对象的细节\");\n        return person;\n    }\n}\n```\n\n```xml\n \t<!--利用工厂实例方法实例化bean -->\n    <bean id=\"personFactoryInstance\" class=\"com.study.spring.factory.PersonFactoryInstance\" ></bean>\n    <bean id=\"wangwu\" factory-bean=\"personFactoryInstance\" factory-method=\"createPerson\" ></bean>\n\n```\n\n\n\n## 从Spring IoC 容器获取bean\n\n```java\n        // 创建IoC容器并根据配置文件创建对象（初始化IoC容器并实例化对象）\n        ApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n\n        Person person = ac.getBean(\"andy\", Person.class);\n\n        Person person1 = (Person) ac.getBean(\"nacos\");\n```\n\n\n\n###  xml 方式中 id 与 name属性相同点\n\n- bean id 与 name 都是设置对象在 ioc 容器中唯一标识\n- 两者在同一配置文件中都不允许出现重复\n- 两者允许在多个配置文件中出现重复，新对象 覆盖旧对象\n\n\n\n### xml 方式中 id 与 name 属性区别\n\n- id 要求更为严格，一次只能定义一个对象标识（推荐）\n- name 更为宽松，一次允许定义多个对象标识\n- tips：id 与 name 的命名要求有意义。按驼峰命名书写\n\n\n\n```xml\n    <!-- 没有 id 与 name，默认使用类全名 作为 bean 标识-->\n    <bean class=\"com.study.spring.entity.Person\">\n        <constructor-arg name=\"nickName\" value=\"andy2\" ></constructor-arg>\n        <constructor-arg name=\"age\" value=\"118\"></constructor-arg>\n    </bean>\n```\n\n```java\nApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n\nPerson p = (Person) ac.getBean(\"com.study.spring.entity.Person\");\n```\n\n\n\n### Spring 配置文件，配置路径表达式\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1i297kdcvls0.webp?raw=true\" width=\"70%\"/>\n\n### 加载Spring 的配置文件\n\n```java\n // 加载单个配置文件\nApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n```\n\n```java\n// 加载多个配置文件\nString [] config = new String[]{\"classpath:applicationContext.xml\",\"classpath:applicationContext-2.xml\"};\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(config);\n```\n\n\n\n## 对象依赖注入\n\n- 依赖注入是指运行时将容器内对象利用反射赋给其它对象的操作\n\n\n\n### 基于setter方法注入对象\n\n- 利用setter对象实现静态数值注入\n\n```xml\n<!--ioc 容器自动利用反射机制运行时调用 setXXX方法为属性赋值-->\n    <bean id=\"guog\" class=\"com.study.spring.entity.Person\">\n        <property name=\"nickName\" value=\"guod\" ></property>\n        <property name=\"age\" value=\"55\" ></property>\n    </bean>\n```\n\n- 利用setter对象实现对象注入\n\n\n\n\n\n\n\n### 基于构造方法注入对象\n\n- \n\n\n\n\n\n","slug":"Spring","published":1,"updated":"2022-07-24T21:16:02.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsn7000ndctac4d0ax62","content":"<h1 id=\"Spring-概览\"><a href=\"#Spring-概览\" class=\"headerlink\" title=\"Spring 概览\"></a>Spring 概览</h1><ul>\n<li>Spring IoC</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">内容</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">重要程度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Spring 框架介绍</td>\n<td align=\"center\">Spring IoC、DI 和 AOP 等核心概念</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">Spring IoC 容器</td>\n<td align=\"center\">Spring 实例化与管理对象</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">集合对象注入</td>\n<td align=\"center\">注入List、Set、Map集合对象</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">底层原理</td>\n<td align=\"center\">Spring Bean 的生命周期</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">注解与Java Config</td>\n<td align=\"center\">Spring 注解分类和常用注解应用</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n</tbody></table>\n<br/>\n\n<p>Spring AOP</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">内容</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">重要程度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">理解 AOP 及名词</td>\n<td align=\"center\">Spring AOP 开发与配置流程</td>\n<td align=\"center\">※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">五种通知类型</td>\n<td align=\"center\">Spring 五种通知类型与应用场景</td>\n<td align=\"center\">※※※</td>\n</tr>\n<tr>\n<td align=\"center\">切点表达式</td>\n<td align=\"center\">PointCut 切点表达式的语法规则及应用</td>\n<td align=\"center\">※※</td>\n</tr>\n<tr>\n<td align=\"center\">代理模式</td>\n<td align=\"center\">JDK 动态代理和 CGLib代理的执行过程</td>\n<td align=\"center\">※※※※</td>\n</tr>\n</tbody></table>\n<br/>\n\n<ul>\n<li>Spring JDBC 与声明式事物</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">内容</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">重要程度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Spring JDBC</td>\n<td align=\"center\">Spring JDBC 的环境配置</td>\n<td align=\"center\">※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">RestTemplate</td>\n<td align=\"center\">基于 RestTemplate 实现 SQL 处理</td>\n<td align=\"center\">※※※</td>\n</tr>\n<tr>\n<td align=\"center\">配置声明式事物</td>\n<td align=\"center\">声明式事物的配置过程</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">事物传播行为介绍</td>\n<td align=\"center\">讲解常用事物传播行为的用途</td>\n<td align=\"center\">※※※</td>\n</tr>\n<tr>\n<td align=\"center\">声明式事物注解形式</td>\n<td align=\"center\">基于注解使用声明式事物</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"Spring-的含义\"><a href=\"#Spring-的含义\" class=\"headerlink\" title=\"Spring 的含义\"></a>Spring 的含义</h2><ul>\n<li>Spring 可以从狭义与广义两个角度看待</li>\n<li>狭义的 Spring 是指 Spring 框架（Spring Framework）</li>\n<li>广义的 Spring 是指 Spring 生态体系</li>\n</ul>\n<h3 id=\"狭义的-Spring-框架\"><a href=\"#狭义的-Spring-框架\" class=\"headerlink\" title=\"狭义的 Spring 框架\"></a>狭义的 Spring 框架</h3><ul>\n<li>Spring 框架是企业开发复杂性的一站式解决方案</li>\n<li>Spring 框架的核心是 IoC 容器与 AOP 面向切面编程</li>\n<li>Spring IoC 负责创建与管理系统对象，并在此基础上扩展功能</li>\n</ul>\n<h3 id=\"广义的-Spring-生态体系\"><a href=\"#广义的-Spring-生态体系\" class=\"headerlink\" title=\"广义的 Spring 生态体系\"></a>广义的 Spring 生态体系</h3><img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.ueqlwks019s.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n<h2 id=\"IoC-控制反转\"><a href=\"#IoC-控制反转\" class=\"headerlink\" title=\"IoC 控制反转\"></a>IoC 控制反转</h2><ul>\n<li>IoC 控制反转，全称 Inverse of Control ，是一种设计理念</li>\n<li>由代理人来创建与管理对象，消费者通过代理人来获取对象</li>\n<li>IoC 的目的是降低对象之间直接耦合，加入 IoC 容器将对象统一管理，让对象关联变为弱耦合</li>\n</ul>\n<h2 id=\"DI\"><a href=\"#DI\" class=\"headerlink\" title=\"DI\"></a>DI</h2><ul>\n<li>IoC 是设计理念，是现代程序设计遵循的标准，是宏伟目标</li>\n<li>DI （Dependency Injection）是具体技术实现，是微观实现</li>\n<li>DI 在 Java 中利用反射技术实现对象注入（Injection）</li>\n</ul>\n<h2 id=\"Spring框架组成模块\"><a href=\"#Spring框架组成模块\" class=\"headerlink\" title=\"Spring框架组成模块\"></a>Spring框架组成模块</h2><img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.55c4tw9371o0.webp?raw=true\" width=\"70%\" />\n\n<br/>\n\n<h1 id=\"Spring-IoC\"><a href=\"#Spring-IoC\" class=\"headerlink\" title=\"Spring IoC\"></a>Spring IoC</h1><h2 id=\"传统开发方式\"><a href=\"#传统开发方式\" class=\"headerlink\" title=\"传统开发方式\"></a>传统开发方式</h2><ul>\n<li>对象直接饮用，导致对象硬性关联，程序难以扩展维护</li>\n</ul>\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.58jxehmqgy80.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n<h2 id=\"Spring-IoC-容器\"><a href=\"#Spring-IoC-容器\" class=\"headerlink\" title=\"Spring IoC 容器\"></a>Spring IoC 容器</h2><ul>\n<li>IoC 容器是 Spring 生态的地基，用于统一创建与管理对象依赖</li>\n</ul>\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.4lxmp6457ng0.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n<h2 id=\"Spring-IoC-容器职责\"><a href=\"#Spring-IoC-容器职责\" class=\"headerlink\" title=\"Spring IoC 容器职责\"></a>Spring IoC 容器职责</h2><ul>\n<li>对象的控制权交由第三方统一管理（IoC 控制反转）</li>\n<li>利用 Java 反射技术实现运行时对象创建与关联（DI 依赖注入）</li>\n<li>基于配置提高应用程序的可维护性与可扩展性</li>\n</ul>\n<h2 id=\"配置-bean-的三种方式\"><a href=\"#配置-bean-的三种方式\" class=\"headerlink\" title=\"配置 bean 的三种方式\"></a>配置 bean 的三种方式</h2><ul>\n<li>基于XML配置bean</li>\n<li>基于注解配置bean</li>\n<li>基于Java代码配置bean</li>\n</ul>\n<h3 id=\"XML实例化Bean的配置方式\"><a href=\"#XML实例化Bean的配置方式\" class=\"headerlink\" title=\"XML实例化Bean的配置方式\"></a>XML实例化Bean的配置方式</h3><h4 id=\"（1）基于构造方法实例化对象\"><a href=\"#（1）基于构造方法实例化对象\" class=\"headerlink\" title=\"（1）基于构造方法实例化对象\"></a>（1）基于构造方法实例化对象</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--通过默认构造方法创建对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;lily&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--通过有参构造方法创建对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;andy&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 没有constructor-arg 则代表调用默认构造方法实例化        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nickName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;andy&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;18&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--通过有参构造方法创建对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nacos&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 利用构造方法参数位置实现对象实例化        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;nacos&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;18&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"（2）基于静态工厂实例化对象\"><a href=\"#（2）基于静态工厂实例化对象\" class=\"headerlink\" title=\"（2）基于静态工厂实例化对象\"></a>（2）基于静态工厂实例化对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用静态工厂方法创建对象，隐藏创建对象的细节</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonStaticFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">createPerson</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">        person.setAge(<span class=\"number\">19</span>);</span><br><span class=\"line\">        person.setNickName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用静态工厂方法创建对象，隐藏创建对象的细节&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--利用静态工厂实例化对象    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;personStaticFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.factory.PersonStaticFactory&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;createPerson&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"（3）基于工厂实例方法实例化对象\"><a href=\"#（3）基于工厂实例方法实例化对象\" class=\"headerlink\" title=\"（3）基于工厂实例方法实例化对象\"></a>（3）基于工厂实例方法实例化对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂实例方法创建对象是指IoC容器对工厂类进行实例化并调用对应的实例方法创建对象的过程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonFactoryInstance</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  Person <span class=\"title function_\">createPerson</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">        person.setAge(<span class=\"number\">19</span>);</span><br><span class=\"line\">        person.setNickName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用工厂实例方法创建对象，隐藏创建对象的细节&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--利用工厂实例方法实例化bean --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;personFactoryInstance&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.factory.PersonFactoryInstance&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wangwu&quot;</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">&quot;personFactoryInstance&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;createPerson&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"从Spring-IoC-容器获取bean\"><a href=\"#从Spring-IoC-容器获取bean\" class=\"headerlink\" title=\"从Spring IoC 容器获取bean\"></a>从Spring IoC 容器获取bean</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建IoC容器并根据配置文件创建对象（初始化IoC容器并实例化对象）</span></span><br><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ac.getBean(<span class=\"string\">&quot;andy&quot;</span>, Person.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person1</span> <span class=\"operator\">=</span> (Person) ac.getBean(<span class=\"string\">&quot;nacos&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"xml-方式中-id-与-name属性相同点\"><a href=\"#xml-方式中-id-与-name属性相同点\" class=\"headerlink\" title=\"xml 方式中 id 与 name属性相同点\"></a>xml 方式中 id 与 name属性相同点</h3><ul>\n<li>bean id 与 name 都是设置对象在 ioc 容器中唯一标识</li>\n<li>两者在同一配置文件中都不允许出现重复</li>\n<li>两者允许在多个配置文件中出现重复，新对象 覆盖旧对象</li>\n</ul>\n<h3 id=\"xml-方式中-id-与-name-属性区别\"><a href=\"#xml-方式中-id-与-name-属性区别\" class=\"headerlink\" title=\"xml 方式中 id 与 name 属性区别\"></a>xml 方式中 id 与 name 属性区别</h3><ul>\n<li>id 要求更为严格，一次只能定义一个对象标识（推荐）</li>\n<li>name 更为宽松，一次允许定义多个对象标识</li>\n<li>tips：id 与 name 的命名要求有意义。按驼峰命名书写</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 没有 id 与 name，默认使用类全名 作为 bean 标识--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nickName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;andy2&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;118&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> (Person) ac.getBean(<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Spring-配置文件，配置路径表达式\"><a href=\"#Spring-配置文件，配置路径表达式\" class=\"headerlink\" title=\"Spring 配置文件，配置路径表达式\"></a>Spring 配置文件，配置路径表达式</h3><img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1i297kdcvls0.webp?raw=true\" width=\"70%\"/>\n\n<h3 id=\"加载Spring-的配置文件\"><a href=\"#加载Spring-的配置文件\" class=\"headerlink\" title=\"加载Spring 的配置文件\"></a>加载Spring 的配置文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 加载单个配置文件</span></span><br><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载多个配置文件</span></span><br><span class=\"line\">String [] config = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;classpath:applicationContext.xml&quot;</span>,<span class=\"string\">&quot;classpath:applicationContext-2.xml&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(config);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"对象依赖注入\"><a href=\"#对象依赖注入\" class=\"headerlink\" title=\"对象依赖注入\"></a>对象依赖注入</h2><ul>\n<li>依赖注入是指运行时将容器内对象利用反射赋给其它对象的操作</li>\n</ul>\n<h3 id=\"基于setter方法注入对象\"><a href=\"#基于setter方法注入对象\" class=\"headerlink\" title=\"基于setter方法注入对象\"></a>基于setter方法注入对象</h3><ul>\n<li>利用setter对象实现静态数值注入</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--ioc 容器自动利用反射机制运行时调用 setXXX方法为属性赋值--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;guog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nickName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;guod&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;55&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用setter对象实现对象注入</li>\n</ul>\n<h3 id=\"基于构造方法注入对象\"><a href=\"#基于构造方法注入对象\" class=\"headerlink\" title=\"基于构造方法注入对象\"></a>基于构造方法注入对象</h3><ul>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-概览\"><a href=\"#Spring-概览\" class=\"headerlink\" title=\"Spring 概览\"></a>Spring 概览</h1><ul>\n<li>Spring IoC</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">内容</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">重要程度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Spring 框架介绍</td>\n<td align=\"center\">Spring IoC、DI 和 AOP 等核心概念</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">Spring IoC 容器</td>\n<td align=\"center\">Spring 实例化与管理对象</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">集合对象注入</td>\n<td align=\"center\">注入List、Set、Map集合对象</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">底层原理</td>\n<td align=\"center\">Spring Bean 的生命周期</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">注解与Java Config</td>\n<td align=\"center\">Spring 注解分类和常用注解应用</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n</tbody></table>\n<br/>\n\n<p>Spring AOP</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">内容</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">重要程度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">理解 AOP 及名词</td>\n<td align=\"center\">Spring AOP 开发与配置流程</td>\n<td align=\"center\">※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">五种通知类型</td>\n<td align=\"center\">Spring 五种通知类型与应用场景</td>\n<td align=\"center\">※※※</td>\n</tr>\n<tr>\n<td align=\"center\">切点表达式</td>\n<td align=\"center\">PointCut 切点表达式的语法规则及应用</td>\n<td align=\"center\">※※</td>\n</tr>\n<tr>\n<td align=\"center\">代理模式</td>\n<td align=\"center\">JDK 动态代理和 CGLib代理的执行过程</td>\n<td align=\"center\">※※※※</td>\n</tr>\n</tbody></table>\n<br/>\n\n<ul>\n<li>Spring JDBC 与声明式事物</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">内容</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">重要程度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Spring JDBC</td>\n<td align=\"center\">Spring JDBC 的环境配置</td>\n<td align=\"center\">※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">RestTemplate</td>\n<td align=\"center\">基于 RestTemplate 实现 SQL 处理</td>\n<td align=\"center\">※※※</td>\n</tr>\n<tr>\n<td align=\"center\">配置声明式事物</td>\n<td align=\"center\">声明式事物的配置过程</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n<tr>\n<td align=\"center\">事物传播行为介绍</td>\n<td align=\"center\">讲解常用事物传播行为的用途</td>\n<td align=\"center\">※※※</td>\n</tr>\n<tr>\n<td align=\"center\">声明式事物注解形式</td>\n<td align=\"center\">基于注解使用声明式事物</td>\n<td align=\"center\">※※※※※</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h2 id=\"Spring-的含义\"><a href=\"#Spring-的含义\" class=\"headerlink\" title=\"Spring 的含义\"></a>Spring 的含义</h2><ul>\n<li>Spring 可以从狭义与广义两个角度看待</li>\n<li>狭义的 Spring 是指 Spring 框架（Spring Framework）</li>\n<li>广义的 Spring 是指 Spring 生态体系</li>\n</ul>\n<h3 id=\"狭义的-Spring-框架\"><a href=\"#狭义的-Spring-框架\" class=\"headerlink\" title=\"狭义的 Spring 框架\"></a>狭义的 Spring 框架</h3><ul>\n<li>Spring 框架是企业开发复杂性的一站式解决方案</li>\n<li>Spring 框架的核心是 IoC 容器与 AOP 面向切面编程</li>\n<li>Spring IoC 负责创建与管理系统对象，并在此基础上扩展功能</li>\n</ul>\n<h3 id=\"广义的-Spring-生态体系\"><a href=\"#广义的-Spring-生态体系\" class=\"headerlink\" title=\"广义的 Spring 生态体系\"></a>广义的 Spring 生态体系</h3><img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.ueqlwks019s.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n<h2 id=\"IoC-控制反转\"><a href=\"#IoC-控制反转\" class=\"headerlink\" title=\"IoC 控制反转\"></a>IoC 控制反转</h2><ul>\n<li>IoC 控制反转，全称 Inverse of Control ，是一种设计理念</li>\n<li>由代理人来创建与管理对象，消费者通过代理人来获取对象</li>\n<li>IoC 的目的是降低对象之间直接耦合，加入 IoC 容器将对象统一管理，让对象关联变为弱耦合</li>\n</ul>\n<h2 id=\"DI\"><a href=\"#DI\" class=\"headerlink\" title=\"DI\"></a>DI</h2><ul>\n<li>IoC 是设计理念，是现代程序设计遵循的标准，是宏伟目标</li>\n<li>DI （Dependency Injection）是具体技术实现，是微观实现</li>\n<li>DI 在 Java 中利用反射技术实现对象注入（Injection）</li>\n</ul>\n<h2 id=\"Spring框架组成模块\"><a href=\"#Spring框架组成模块\" class=\"headerlink\" title=\"Spring框架组成模块\"></a>Spring框架组成模块</h2><img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.55c4tw9371o0.webp?raw=true\" width=\"70%\" />\n\n<br/>\n\n<h1 id=\"Spring-IoC\"><a href=\"#Spring-IoC\" class=\"headerlink\" title=\"Spring IoC\"></a>Spring IoC</h1><h2 id=\"传统开发方式\"><a href=\"#传统开发方式\" class=\"headerlink\" title=\"传统开发方式\"></a>传统开发方式</h2><ul>\n<li>对象直接饮用，导致对象硬性关联，程序难以扩展维护</li>\n</ul>\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.58jxehmqgy80.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n<h2 id=\"Spring-IoC-容器\"><a href=\"#Spring-IoC-容器\" class=\"headerlink\" title=\"Spring IoC 容器\"></a>Spring IoC 容器</h2><ul>\n<li>IoC 容器是 Spring 生态的地基，用于统一创建与管理对象依赖</li>\n</ul>\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.4lxmp6457ng0.webp?raw=true\"  width=\"80%\"/>\n\n<br/>\n\n<h2 id=\"Spring-IoC-容器职责\"><a href=\"#Spring-IoC-容器职责\" class=\"headerlink\" title=\"Spring IoC 容器职责\"></a>Spring IoC 容器职责</h2><ul>\n<li>对象的控制权交由第三方统一管理（IoC 控制反转）</li>\n<li>利用 Java 反射技术实现运行时对象创建与关联（DI 依赖注入）</li>\n<li>基于配置提高应用程序的可维护性与可扩展性</li>\n</ul>\n<h2 id=\"配置-bean-的三种方式\"><a href=\"#配置-bean-的三种方式\" class=\"headerlink\" title=\"配置 bean 的三种方式\"></a>配置 bean 的三种方式</h2><ul>\n<li>基于XML配置bean</li>\n<li>基于注解配置bean</li>\n<li>基于Java代码配置bean</li>\n</ul>\n<h3 id=\"XML实例化Bean的配置方式\"><a href=\"#XML实例化Bean的配置方式\" class=\"headerlink\" title=\"XML实例化Bean的配置方式\"></a>XML实例化Bean的配置方式</h3><h4 id=\"（1）基于构造方法实例化对象\"><a href=\"#（1）基于构造方法实例化对象\" class=\"headerlink\" title=\"（1）基于构造方法实例化对象\"></a>（1）基于构造方法实例化对象</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--通过默认构造方法创建对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;lily&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--通过有参构造方法创建对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;andy&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 没有constructor-arg 则代表调用默认构造方法实例化        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nickName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;andy&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;18&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--通过有参构造方法创建对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nacos&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 利用构造方法参数位置实现对象实例化        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;nacos&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;18&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"（2）基于静态工厂实例化对象\"><a href=\"#（2）基于静态工厂实例化对象\" class=\"headerlink\" title=\"（2）基于静态工厂实例化对象\"></a>（2）基于静态工厂实例化对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用静态工厂方法创建对象，隐藏创建对象的细节</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonStaticFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">createPerson</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">        person.setAge(<span class=\"number\">19</span>);</span><br><span class=\"line\">        person.setNickName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用静态工厂方法创建对象，隐藏创建对象的细节&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--利用静态工厂实例化对象    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;personStaticFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.factory.PersonStaticFactory&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;createPerson&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"（3）基于工厂实例方法实例化对象\"><a href=\"#（3）基于工厂实例方法实例化对象\" class=\"headerlink\" title=\"（3）基于工厂实例方法实例化对象\"></a>（3）基于工厂实例方法实例化对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂实例方法创建对象是指IoC容器对工厂类进行实例化并调用对应的实例方法创建对象的过程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonFactoryInstance</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  Person <span class=\"title function_\">createPerson</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">        person.setAge(<span class=\"number\">19</span>);</span><br><span class=\"line\">        person.setNickName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用工厂实例方法创建对象，隐藏创建对象的细节&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--利用工厂实例方法实例化bean --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;personFactoryInstance&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.factory.PersonFactoryInstance&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wangwu&quot;</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">&quot;personFactoryInstance&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;createPerson&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"从Spring-IoC-容器获取bean\"><a href=\"#从Spring-IoC-容器获取bean\" class=\"headerlink\" title=\"从Spring IoC 容器获取bean\"></a>从Spring IoC 容器获取bean</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建IoC容器并根据配置文件创建对象（初始化IoC容器并实例化对象）</span></span><br><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ac.getBean(<span class=\"string\">&quot;andy&quot;</span>, Person.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person1</span> <span class=\"operator\">=</span> (Person) ac.getBean(<span class=\"string\">&quot;nacos&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"xml-方式中-id-与-name属性相同点\"><a href=\"#xml-方式中-id-与-name属性相同点\" class=\"headerlink\" title=\"xml 方式中 id 与 name属性相同点\"></a>xml 方式中 id 与 name属性相同点</h3><ul>\n<li>bean id 与 name 都是设置对象在 ioc 容器中唯一标识</li>\n<li>两者在同一配置文件中都不允许出现重复</li>\n<li>两者允许在多个配置文件中出现重复，新对象 覆盖旧对象</li>\n</ul>\n<h3 id=\"xml-方式中-id-与-name-属性区别\"><a href=\"#xml-方式中-id-与-name-属性区别\" class=\"headerlink\" title=\"xml 方式中 id 与 name 属性区别\"></a>xml 方式中 id 与 name 属性区别</h3><ul>\n<li>id 要求更为严格，一次只能定义一个对象标识（推荐）</li>\n<li>name 更为宽松，一次允许定义多个对象标识</li>\n<li>tips：id 与 name 的命名要求有意义。按驼峰命名书写</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 没有 id 与 name，默认使用类全名 作为 bean 标识--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nickName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;andy2&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;118&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> (Person) ac.getBean(<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Spring-配置文件，配置路径表达式\"><a href=\"#Spring-配置文件，配置路径表达式\" class=\"headerlink\" title=\"Spring 配置文件，配置路径表达式\"></a>Spring 配置文件，配置路径表达式</h3><img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1i297kdcvls0.webp?raw=true\" width=\"70%\"/>\n\n<h3 id=\"加载Spring-的配置文件\"><a href=\"#加载Spring-的配置文件\" class=\"headerlink\" title=\"加载Spring 的配置文件\"></a>加载Spring 的配置文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 加载单个配置文件</span></span><br><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载多个配置文件</span></span><br><span class=\"line\">String [] config = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;classpath:applicationContext.xml&quot;</span>,<span class=\"string\">&quot;classpath:applicationContext-2.xml&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(config);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"对象依赖注入\"><a href=\"#对象依赖注入\" class=\"headerlink\" title=\"对象依赖注入\"></a>对象依赖注入</h2><ul>\n<li>依赖注入是指运行时将容器内对象利用反射赋给其它对象的操作</li>\n</ul>\n<h3 id=\"基于setter方法注入对象\"><a href=\"#基于setter方法注入对象\" class=\"headerlink\" title=\"基于setter方法注入对象\"></a>基于setter方法注入对象</h3><ul>\n<li>利用setter对象实现静态数值注入</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--ioc 容器自动利用反射机制运行时调用 setXXX方法为属性赋值--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;guog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.study.spring.entity.Person&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nickName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;guod&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;55&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用setter对象实现对象注入</li>\n</ul>\n<h3 id=\"基于构造方法注入对象\"><a href=\"#基于构造方法注入对象\" class=\"headerlink\" title=\"基于构造方法注入对象\"></a>基于构造方法注入对象</h3><ul>\n<li></li>\n</ul>\n"},{"title":"linux实战技能","author":"sonzonzy","date":"2022-06-01T01:16:27.000Z","updated":"2022-06-01T01:16:27.000Z","_content":"\n# 学习备注\n\n- linux下的打包 压缩还需深入理解 和操作\n\n\n\n# linux 基础介绍\n\n- linux有两种含义\n  - 一种是linus编写的开源操作系统内核\n  - 另一种是广义的操作系统\n\n- 内核版本（分为三个部分）\n  - 主版本号、次版本号、末版本号\n  - 次版本号是奇数为开发版本，偶数为稳定版\n\n## linux 常见目录介绍\n\n- / 根目录\n- /root root用户家目录\n- /home/username 普通用户的家目录\n- /etc 配置文件目录\n- /bin 命令目录\n- /sbin 管理命令目录\n- /usr/bin /usr/sbin 系统预装的其它命令\n\n## linux 关机 / 重启 命令\n\n```bash\n# 关机\ninit 0\n\n# 延时关机 19:30关机\nshutdown -h 19:30\n\n# 延时30分钟关机\nshutdown -h +30 \n\n# 重启\nreboot\n```\n\n# 系统操作\n\n## 帮助命令\n\n### man\n\n```linux\n# man是manual的缩写\n# 演示\nman ls\n```\n\n### help \n\n- shell 自带的命令称为内部命令，其它的是外部命令\n\n```linux\n# 内部命令使用 help 帮助\nhelp cd\n\n# 外部命令使用 help 帮助\nls --help\n```\n\n### info\n\n- info 帮助比 help 更详细，作为 help 的补充\n\n```linux\ninfo ls\n```\n\n## 文件 - 增删改查\n\n- linux 操作系统中，一切皆文件\n\n```linux\n# 创建非空目录 \nmkdir [参数]\n\n# -p 递归创建目录\nmkdir -p [参数]\n```\n\n```linux\n# 删除非空目录\nrm [参数]\n\n# 递归删除目录（包括目录下的所有文件）\nrm -r [参数]\n\n# 不提示，无需确认，递归删除目录\nrm -rf [参数]\n```\n\n```linux\n# 仅仅复制文件\ncp [] []\n\n# 复制文件 or 目录\ncp -r [] []\n\n# -v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主\ncp -vpa [] []\n```\n\n```linux\n# 移动文件\nmv [参数] [源文件] [目标文件/目录]\n\n# 重命名\nmv [] []\n```\n\n```linux\n# 查看当前目录下的文件\nls [选项...] [参数...]\n\n# -l 长格式显示文件\n# -a 显示隐藏文件\n# -r 逆序显示\n# -t 按照时间顺序显示\n# -R 递归显示\n\nll\n```\n\n## 通配符\n\n- 定义：shell 内建的符号\n- 用途：操作多个相似（有规律）的文件\n- 常用通配符\n  - \\* 匹配任意字符串\n  - ? 匹配一个字符串\n  - [xyz] 匹配xyz任意一个字符\n  - [a-z] 匹配一个范围\n  - [!xyz] 或 [\\^xyz] 不匹配\n\n ## 文本\n\n```linux\ntouch []\n```\n\n```linux\n# 文本内容显示到终端\ncat []\n\n# 查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行\nhead -5 []\n\n# 查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新\ntail -20 -f []\n\n# 统计文件内容信息\nwc []\n\n# 查看文件行数\nwc -l []\n\nmore [filename]\nless [filename]\n```\n\n## 打包 / 压缩\n\n","source":"_posts/2022/linux实战技能.md","raw":"---\ntitle: linux实战技能\nauthor: sonzonzy\ndate: 2022-06-01 09:16:27\nupdated: 2022-06-01 09:16:27\ncategories:\ntags:\n  - linux\n---\n\n# 学习备注\n\n- linux下的打包 压缩还需深入理解 和操作\n\n\n\n# linux 基础介绍\n\n- linux有两种含义\n  - 一种是linus编写的开源操作系统内核\n  - 另一种是广义的操作系统\n\n- 内核版本（分为三个部分）\n  - 主版本号、次版本号、末版本号\n  - 次版本号是奇数为开发版本，偶数为稳定版\n\n## linux 常见目录介绍\n\n- / 根目录\n- /root root用户家目录\n- /home/username 普通用户的家目录\n- /etc 配置文件目录\n- /bin 命令目录\n- /sbin 管理命令目录\n- /usr/bin /usr/sbin 系统预装的其它命令\n\n## linux 关机 / 重启 命令\n\n```bash\n# 关机\ninit 0\n\n# 延时关机 19:30关机\nshutdown -h 19:30\n\n# 延时30分钟关机\nshutdown -h +30 \n\n# 重启\nreboot\n```\n\n# 系统操作\n\n## 帮助命令\n\n### man\n\n```linux\n# man是manual的缩写\n# 演示\nman ls\n```\n\n### help \n\n- shell 自带的命令称为内部命令，其它的是外部命令\n\n```linux\n# 内部命令使用 help 帮助\nhelp cd\n\n# 外部命令使用 help 帮助\nls --help\n```\n\n### info\n\n- info 帮助比 help 更详细，作为 help 的补充\n\n```linux\ninfo ls\n```\n\n## 文件 - 增删改查\n\n- linux 操作系统中，一切皆文件\n\n```linux\n# 创建非空目录 \nmkdir [参数]\n\n# -p 递归创建目录\nmkdir -p [参数]\n```\n\n```linux\n# 删除非空目录\nrm [参数]\n\n# 递归删除目录（包括目录下的所有文件）\nrm -r [参数]\n\n# 不提示，无需确认，递归删除目录\nrm -rf [参数]\n```\n\n```linux\n# 仅仅复制文件\ncp [] []\n\n# 复制文件 or 目录\ncp -r [] []\n\n# -v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主\ncp -vpa [] []\n```\n\n```linux\n# 移动文件\nmv [参数] [源文件] [目标文件/目录]\n\n# 重命名\nmv [] []\n```\n\n```linux\n# 查看当前目录下的文件\nls [选项...] [参数...]\n\n# -l 长格式显示文件\n# -a 显示隐藏文件\n# -r 逆序显示\n# -t 按照时间顺序显示\n# -R 递归显示\n\nll\n```\n\n## 通配符\n\n- 定义：shell 内建的符号\n- 用途：操作多个相似（有规律）的文件\n- 常用通配符\n  - \\* 匹配任意字符串\n  - ? 匹配一个字符串\n  - [xyz] 匹配xyz任意一个字符\n  - [a-z] 匹配一个范围\n  - [!xyz] 或 [\\^xyz] 不匹配\n\n ## 文本\n\n```linux\ntouch []\n```\n\n```linux\n# 文本内容显示到终端\ncat []\n\n# 查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行\nhead -5 []\n\n# 查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新\ntail -20 -f []\n\n# 统计文件内容信息\nwc []\n\n# 查看文件行数\nwc -l []\n\nmore [filename]\nless [filename]\n```\n\n## 打包 / 压缩\n\n","slug":"linux实战技能","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsn8000odcta2b651qf2","content":"<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><ul>\n<li>linux下的打包 压缩还需深入理解 和操作</li>\n</ul>\n<h1 id=\"linux-基础介绍\"><a href=\"#linux-基础介绍\" class=\"headerlink\" title=\"linux 基础介绍\"></a>linux 基础介绍</h1><ul>\n<li><p>linux有两种含义</p>\n<ul>\n<li>一种是linus编写的开源操作系统内核</li>\n<li>另一种是广义的操作系统</li>\n</ul>\n</li>\n<li><p>内核版本（分为三个部分）</p>\n<ul>\n<li>主版本号、次版本号、末版本号</li>\n<li>次版本号是奇数为开发版本，偶数为稳定版</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"linux-常见目录介绍\"><a href=\"#linux-常见目录介绍\" class=\"headerlink\" title=\"linux 常见目录介绍\"></a>linux 常见目录介绍</h2><ul>\n<li>/ 根目录</li>\n<li>/root root用户家目录</li>\n<li>/home/username 普通用户的家目录</li>\n<li>/etc 配置文件目录</li>\n<li>/bin 命令目录</li>\n<li>/sbin 管理命令目录</li>\n<li>/usr/bin /usr/sbin 系统预装的其它命令</li>\n</ul>\n<h2 id=\"linux-关机-重启-命令\"><a href=\"#linux-关机-重启-命令\" class=\"headerlink\" title=\"linux 关机 / 重启 命令\"></a>linux 关机 / 重启 命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关机</span></span><br><span class=\"line\">init 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 延时关机 19:30关机</span></span><br><span class=\"line\">shutdown -h 19:30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 延时30分钟关机</span></span><br><span class=\"line\">shutdown -h +30 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h1><h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># man是manual的缩写</span><br><span class=\"line\"># 演示</span><br><span class=\"line\">man ls</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help\"></a>help</h3><ul>\n<li>shell 自带的命令称为内部命令，其它的是外部命令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 内部命令使用 help 帮助</span><br><span class=\"line\">help cd</span><br><span class=\"line\"></span><br><span class=\"line\"># 外部命令使用 help 帮助</span><br><span class=\"line\">ls --help</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"info\"><a href=\"#info\" class=\"headerlink\" title=\"info\"></a>info</h3><ul>\n<li>info 帮助比 help 更详细，作为 help 的补充</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info ls</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件-增删改查\"><a href=\"#文件-增删改查\" class=\"headerlink\" title=\"文件 - 增删改查\"></a>文件 - 增删改查</h2><ul>\n<li>linux 操作系统中，一切皆文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建非空目录 </span><br><span class=\"line\">mkdir [参数]</span><br><span class=\"line\"></span><br><span class=\"line\"># -p 递归创建目录</span><br><span class=\"line\">mkdir -p [参数]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除非空目录</span><br><span class=\"line\">rm [参数]</span><br><span class=\"line\"></span><br><span class=\"line\"># 递归删除目录（包括目录下的所有文件）</span><br><span class=\"line\">rm -r [参数]</span><br><span class=\"line\"></span><br><span class=\"line\"># 不提示，无需确认，递归删除目录</span><br><span class=\"line\">rm -rf [参数]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 仅仅复制文件</span><br><span class=\"line\">cp [] []</span><br><span class=\"line\"></span><br><span class=\"line\"># 复制文件 or 目录</span><br><span class=\"line\">cp -r [] []</span><br><span class=\"line\"></span><br><span class=\"line\"># -v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主</span><br><span class=\"line\">cp -vpa [] []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 移动文件</span><br><span class=\"line\">mv [参数] [源文件] [目标文件/目录]</span><br><span class=\"line\"></span><br><span class=\"line\"># 重命名</span><br><span class=\"line\">mv [] []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看当前目录下的文件</span><br><span class=\"line\">ls [选项...] [参数...]</span><br><span class=\"line\"></span><br><span class=\"line\"># -l 长格式显示文件</span><br><span class=\"line\"># -a 显示隐藏文件</span><br><span class=\"line\"># -r 逆序显示</span><br><span class=\"line\"># -t 按照时间顺序显示</span><br><span class=\"line\"># -R 递归显示</span><br><span class=\"line\"></span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><ul>\n<li>定义：shell 内建的符号</li>\n<li>用途：操作多个相似（有规律）的文件</li>\n<li>常用通配符<ul>\n<li>* 匹配任意字符串</li>\n<li>? 匹配一个字符串</li>\n<li>[xyz] 匹配xyz任意一个字符</li>\n<li>[a-z] 匹配一个范围</li>\n<li>[!xyz] 或 [^xyz] 不匹配</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文本内容显示到终端</span><br><span class=\"line\">cat []</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行</span><br><span class=\"line\">head -5 []</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新</span><br><span class=\"line\">tail -20 -f []</span><br><span class=\"line\"></span><br><span class=\"line\"># 统计文件内容信息</span><br><span class=\"line\">wc []</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看文件行数</span><br><span class=\"line\">wc -l []</span><br><span class=\"line\"></span><br><span class=\"line\">more [filename]</span><br><span class=\"line\">less [filename]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包-压缩\"><a href=\"#打包-压缩\" class=\"headerlink\" title=\"打包 / 压缩\"></a>打包 / 压缩</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><ul>\n<li>linux下的打包 压缩还需深入理解 和操作</li>\n</ul>\n<h1 id=\"linux-基础介绍\"><a href=\"#linux-基础介绍\" class=\"headerlink\" title=\"linux 基础介绍\"></a>linux 基础介绍</h1><ul>\n<li><p>linux有两种含义</p>\n<ul>\n<li>一种是linus编写的开源操作系统内核</li>\n<li>另一种是广义的操作系统</li>\n</ul>\n</li>\n<li><p>内核版本（分为三个部分）</p>\n<ul>\n<li>主版本号、次版本号、末版本号</li>\n<li>次版本号是奇数为开发版本，偶数为稳定版</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"linux-常见目录介绍\"><a href=\"#linux-常见目录介绍\" class=\"headerlink\" title=\"linux 常见目录介绍\"></a>linux 常见目录介绍</h2><ul>\n<li>/ 根目录</li>\n<li>/root root用户家目录</li>\n<li>/home/username 普通用户的家目录</li>\n<li>/etc 配置文件目录</li>\n<li>/bin 命令目录</li>\n<li>/sbin 管理命令目录</li>\n<li>/usr/bin /usr/sbin 系统预装的其它命令</li>\n</ul>\n<h2 id=\"linux-关机-重启-命令\"><a href=\"#linux-关机-重启-命令\" class=\"headerlink\" title=\"linux 关机 / 重启 命令\"></a>linux 关机 / 重启 命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关机</span></span><br><span class=\"line\">init 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 延时关机 19:30关机</span></span><br><span class=\"line\">shutdown -h 19:30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 延时30分钟关机</span></span><br><span class=\"line\">shutdown -h +30 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h1><h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># man是manual的缩写</span><br><span class=\"line\"># 演示</span><br><span class=\"line\">man ls</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help\"></a>help</h3><ul>\n<li>shell 自带的命令称为内部命令，其它的是外部命令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 内部命令使用 help 帮助</span><br><span class=\"line\">help cd</span><br><span class=\"line\"></span><br><span class=\"line\"># 外部命令使用 help 帮助</span><br><span class=\"line\">ls --help</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"info\"><a href=\"#info\" class=\"headerlink\" title=\"info\"></a>info</h3><ul>\n<li>info 帮助比 help 更详细，作为 help 的补充</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info ls</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件-增删改查\"><a href=\"#文件-增删改查\" class=\"headerlink\" title=\"文件 - 增删改查\"></a>文件 - 增删改查</h2><ul>\n<li>linux 操作系统中，一切皆文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建非空目录 </span><br><span class=\"line\">mkdir [参数]</span><br><span class=\"line\"></span><br><span class=\"line\"># -p 递归创建目录</span><br><span class=\"line\">mkdir -p [参数]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除非空目录</span><br><span class=\"line\">rm [参数]</span><br><span class=\"line\"></span><br><span class=\"line\"># 递归删除目录（包括目录下的所有文件）</span><br><span class=\"line\">rm -r [参数]</span><br><span class=\"line\"></span><br><span class=\"line\"># 不提示，无需确认，递归删除目录</span><br><span class=\"line\">rm -rf [参数]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 仅仅复制文件</span><br><span class=\"line\">cp [] []</span><br><span class=\"line\"></span><br><span class=\"line\"># 复制文件 or 目录</span><br><span class=\"line\">cp -r [] []</span><br><span class=\"line\"></span><br><span class=\"line\"># -v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主</span><br><span class=\"line\">cp -vpa [] []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 移动文件</span><br><span class=\"line\">mv [参数] [源文件] [目标文件/目录]</span><br><span class=\"line\"></span><br><span class=\"line\"># 重命名</span><br><span class=\"line\">mv [] []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看当前目录下的文件</span><br><span class=\"line\">ls [选项...] [参数...]</span><br><span class=\"line\"></span><br><span class=\"line\"># -l 长格式显示文件</span><br><span class=\"line\"># -a 显示隐藏文件</span><br><span class=\"line\"># -r 逆序显示</span><br><span class=\"line\"># -t 按照时间顺序显示</span><br><span class=\"line\"># -R 递归显示</span><br><span class=\"line\"></span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><ul>\n<li>定义：shell 内建的符号</li>\n<li>用途：操作多个相似（有规律）的文件</li>\n<li>常用通配符<ul>\n<li>* 匹配任意字符串</li>\n<li>? 匹配一个字符串</li>\n<li>[xyz] 匹配xyz任意一个字符</li>\n<li>[a-z] 匹配一个范围</li>\n<li>[!xyz] 或 [^xyz] 不匹配</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文本内容显示到终端</span><br><span class=\"line\">cat []</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行</span><br><span class=\"line\">head -5 []</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新</span><br><span class=\"line\">tail -20 -f []</span><br><span class=\"line\"></span><br><span class=\"line\"># 统计文件内容信息</span><br><span class=\"line\">wc []</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看文件行数</span><br><span class=\"line\">wc -l []</span><br><span class=\"line\"></span><br><span class=\"line\">more [filename]</span><br><span class=\"line\">less [filename]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包-压缩\"><a href=\"#打包-压缩\" class=\"headerlink\" title=\"打包 / 压缩\"></a>打包 / 压缩</h2>"},{"title":"《Java 并发编程实战》study notes","author":"sonzonzy","date":"2022-05-29T17:19:06.000Z","updated":"2022-05-29T17:19:06.000Z","_content":"\n# 前言\n\n\n\n# 开篇词 | 你为什么需要学习并发编程？\n\n- 近几年，并发编程已经慢慢成为一项必备技能\n\n<br/>\n\n# 学习攻略 | 如何才能学好并发编程？\n\n## 跳出来，看全景\n\n- **首要之事就是你建立起一张全景图**\n- 并发编程领域可以抽象成**三个核心问题：分工、同步和互斥**\n\n<br/>\n\n### 分工\n\n- Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是一种分工方法\n- 并发编程领域总结出设计模式：生产者 - 消费者、Thread-Per-Message、Worker Thread 模式等都是用来指导你如何分工的\n\n> 学习这部分内容，最佳的方式就是和现实世界做对比。例如生产者 - 消费者模式，可以类比一下餐馆里的大厨和服务员，大厨就是生产者，负责做菜，做完放到出菜口，而服务员就是消费者，把做好的菜给你端过来。不过，我们经常会发现，出菜口有时候一下子出了好几个菜，服务员是可以把这一批菜同时端给你的。其实这就是生产者 - 消费者模式的一个优点，生产者一个一个地生产数据，而消费者可以批处理，这样就提高了性能\n\n<br/>\n\n### 同步\n\n- 在并发编程领域里的同步，主要指的就是线程间的协作。**一个线程执行完了一个任务，如何通知执行后续任务的线程开工**\n- 协作一般是和分工相关的。Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是分工方法，但同时也能解决线程协作的问题\n\n> 例如，用 Future 可以发起一个异步调用，当主线程通过 get() 方法取结果时，主线程就会等待，当异步执行的结果返回时，get() 方法就自动返回了。主线程和异步线程之间的协作，Future 工具类已经帮我们解决了\n\n- 线程协作问题，基本上都可以描述为：**当某个条件不满足时，线程需要等待，当某个条件满足时，线程需要被唤醒执行**\n\n> 例如，在生产者 - 消费者模型里：当队列满时，生产者线程等待，当队列不满时，生产者线程需要被唤醒执行；当队列空时，消费者线程等待，当队列不空时，消费者线程需要被唤醒执行\n\n- 在 Java 并发编程领域，解决协作问题的核心技术是**管程**，**管程是解决并发问题的万能钥匙**。（解决线程协作问题、互斥问题）\n\n> 这部分内容的学习，关键是理解管程模型，学好它就可以解决所有问题。其次是了解 Java SDK 并发包提供的几个线程协作的工具类的应用场景，用好它们可以妥妥地提高你的工作效率\n\n<br/>\n\n### 互斥\n\n> 分工、同步主要强调的是性能，但并发程序里还有一部分是关于正确性的，用专业术语叫“**线程安全**”。并发程序里，当多个线程同时访问同一个共享变量的时候，结果是不确定的。不确定，则意味着可能正确，也可能错误，事先是不知道的。而导致不确定的主要源头是可见性问题、有序性问题和原子性问题，为了解决这三个问题，Java 语言引入了内存模型，内存模型提供了一系列的规则，利用这些规则，我们可以避免可见性问题、有序性问题，但是还不足以完全解决线程安全问题。**解决线程安全问题的核心方案还是互斥**。\n\n- **互斥，指的是同一时刻，只允许一个线程访问共享变量**\n\n- 实现互斥的核心技术就是锁\n\n> 锁解决了安全性问题，但同时也带来了性能问题，那如何保证安全性的同时又尽量提高性能呢？可以分场景优化，Java SDK 里提供的 ReadWriteLock、StampedLock 就可以优化读多写少场景下锁的性能。还可以使用无锁的数据结构，例如 Java SDK 里提供的原子类都是基于无锁技术实现的。\n>\n> 除此之外，还有一些其他的方案，原理是不共享变量或者变量只允许读。这方面，Java 提供了 Thread Local 和 final 关键字，还有一种 Copy-on-write 的模式。\n>\n> 使用锁除了要注意性能问题外，还需要注意死锁问题。\n\n> 这部分内容比较复杂，往往还是跨领域的，例如要理解可见性，就需要了解一些 CPU 和缓存的知识；要理解原子性，就需要理解一些操作系统的知识；很多无锁算法的实现往往也需要理解 CPU 缓存。这部分内容的学习，需要博览群书，在大脑里建立起 CPU、内存、I/O 执行的模拟器。这样遇到问题就能得心应手了。\n\n![并发编程全景图之思维导图](https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2nti7fz31g60.webp)\n\n<br/>\n\n## 钻进去，看本质\n\n- 光跳出来还不够，还需要下一步，就是在某个问题上钻进去，深入理解，找到本质\n- **工程上的解决方案，一定要有理论做基础**\n\n> 探索它背后的理论是什么。分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的\n\n<br/>\n\n# 总结\n\n- 要让自己的知识成体系，一定要挖掘 Java SDK 并发包背后的设计理念\n- 分工、同步和互斥的全景图，是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识\n- 对于某个具体的技术，我建议你探索它背后的理论本质\n- 探求理论本质，既能加深对技术本身的理解，也能拓展知识深度和广度，这是个一举多得的方法\n\n<br/>\n\n# 第一部分：并发理论基础\n\n## 01 | 可见性、原子性和有序性问题：并发编程Bug的源头\n\n### 并发程序幕后的故事\n\n- **核心矛盾一直存在，就是这三者（CPU、内存、I/O 设备）的速度差异**\n- 为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：\n\n> 1. CPU 增加了缓存，以均衡与内存的速度差异；\n> 2. 操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；\n> 3. 编译程序优化指令执行次序，使得缓存能够得到更加合理地利用\n\n### 源头之一：缓存导致的可见性问题\n\n\n\n\n\n### 源头之二：线程切换带来的原子性问题\n\n\n\n\n\n### 源头之三：编译优化带来的有序性问题\n\n\n\n### 总结\n\n\n\n### 课后思考\n\n\n\n\n\n# 备注\n","source":"_posts/2022/《Java-并发编程实战》study-notes.md","raw":"---\ntitle: 《Java 并发编程实战》study notes\nauthor: sonzonzy\ndate: 2022-05-30 01:19:06\nupdated: 2022-05-30 01:19:06\ncategories:\n  - [java,concurrent]\ntags:\n  - concurrent\n  - java \n---\n\n# 前言\n\n\n\n# 开篇词 | 你为什么需要学习并发编程？\n\n- 近几年，并发编程已经慢慢成为一项必备技能\n\n<br/>\n\n# 学习攻略 | 如何才能学好并发编程？\n\n## 跳出来，看全景\n\n- **首要之事就是你建立起一张全景图**\n- 并发编程领域可以抽象成**三个核心问题：分工、同步和互斥**\n\n<br/>\n\n### 分工\n\n- Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是一种分工方法\n- 并发编程领域总结出设计模式：生产者 - 消费者、Thread-Per-Message、Worker Thread 模式等都是用来指导你如何分工的\n\n> 学习这部分内容，最佳的方式就是和现实世界做对比。例如生产者 - 消费者模式，可以类比一下餐馆里的大厨和服务员，大厨就是生产者，负责做菜，做完放到出菜口，而服务员就是消费者，把做好的菜给你端过来。不过，我们经常会发现，出菜口有时候一下子出了好几个菜，服务员是可以把这一批菜同时端给你的。其实这就是生产者 - 消费者模式的一个优点，生产者一个一个地生产数据，而消费者可以批处理，这样就提高了性能\n\n<br/>\n\n### 同步\n\n- 在并发编程领域里的同步，主要指的就是线程间的协作。**一个线程执行完了一个任务，如何通知执行后续任务的线程开工**\n- 协作一般是和分工相关的。Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是分工方法，但同时也能解决线程协作的问题\n\n> 例如，用 Future 可以发起一个异步调用，当主线程通过 get() 方法取结果时，主线程就会等待，当异步执行的结果返回时，get() 方法就自动返回了。主线程和异步线程之间的协作，Future 工具类已经帮我们解决了\n\n- 线程协作问题，基本上都可以描述为：**当某个条件不满足时，线程需要等待，当某个条件满足时，线程需要被唤醒执行**\n\n> 例如，在生产者 - 消费者模型里：当队列满时，生产者线程等待，当队列不满时，生产者线程需要被唤醒执行；当队列空时，消费者线程等待，当队列不空时，消费者线程需要被唤醒执行\n\n- 在 Java 并发编程领域，解决协作问题的核心技术是**管程**，**管程是解决并发问题的万能钥匙**。（解决线程协作问题、互斥问题）\n\n> 这部分内容的学习，关键是理解管程模型，学好它就可以解决所有问题。其次是了解 Java SDK 并发包提供的几个线程协作的工具类的应用场景，用好它们可以妥妥地提高你的工作效率\n\n<br/>\n\n### 互斥\n\n> 分工、同步主要强调的是性能，但并发程序里还有一部分是关于正确性的，用专业术语叫“**线程安全**”。并发程序里，当多个线程同时访问同一个共享变量的时候，结果是不确定的。不确定，则意味着可能正确，也可能错误，事先是不知道的。而导致不确定的主要源头是可见性问题、有序性问题和原子性问题，为了解决这三个问题，Java 语言引入了内存模型，内存模型提供了一系列的规则，利用这些规则，我们可以避免可见性问题、有序性问题，但是还不足以完全解决线程安全问题。**解决线程安全问题的核心方案还是互斥**。\n\n- **互斥，指的是同一时刻，只允许一个线程访问共享变量**\n\n- 实现互斥的核心技术就是锁\n\n> 锁解决了安全性问题，但同时也带来了性能问题，那如何保证安全性的同时又尽量提高性能呢？可以分场景优化，Java SDK 里提供的 ReadWriteLock、StampedLock 就可以优化读多写少场景下锁的性能。还可以使用无锁的数据结构，例如 Java SDK 里提供的原子类都是基于无锁技术实现的。\n>\n> 除此之外，还有一些其他的方案，原理是不共享变量或者变量只允许读。这方面，Java 提供了 Thread Local 和 final 关键字，还有一种 Copy-on-write 的模式。\n>\n> 使用锁除了要注意性能问题外，还需要注意死锁问题。\n\n> 这部分内容比较复杂，往往还是跨领域的，例如要理解可见性，就需要了解一些 CPU 和缓存的知识；要理解原子性，就需要理解一些操作系统的知识；很多无锁算法的实现往往也需要理解 CPU 缓存。这部分内容的学习，需要博览群书，在大脑里建立起 CPU、内存、I/O 执行的模拟器。这样遇到问题就能得心应手了。\n\n![并发编程全景图之思维导图](https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2nti7fz31g60.webp)\n\n<br/>\n\n## 钻进去，看本质\n\n- 光跳出来还不够，还需要下一步，就是在某个问题上钻进去，深入理解，找到本质\n- **工程上的解决方案，一定要有理论做基础**\n\n> 探索它背后的理论是什么。分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的\n\n<br/>\n\n# 总结\n\n- 要让自己的知识成体系，一定要挖掘 Java SDK 并发包背后的设计理念\n- 分工、同步和互斥的全景图，是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识\n- 对于某个具体的技术，我建议你探索它背后的理论本质\n- 探求理论本质，既能加深对技术本身的理解，也能拓展知识深度和广度，这是个一举多得的方法\n\n<br/>\n\n# 第一部分：并发理论基础\n\n## 01 | 可见性、原子性和有序性问题：并发编程Bug的源头\n\n### 并发程序幕后的故事\n\n- **核心矛盾一直存在，就是这三者（CPU、内存、I/O 设备）的速度差异**\n- 为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：\n\n> 1. CPU 增加了缓存，以均衡与内存的速度差异；\n> 2. 操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；\n> 3. 编译程序优化指令执行次序，使得缓存能够得到更加合理地利用\n\n### 源头之一：缓存导致的可见性问题\n\n\n\n\n\n### 源头之二：线程切换带来的原子性问题\n\n\n\n\n\n### 源头之三：编译优化带来的有序性问题\n\n\n\n### 总结\n\n\n\n### 课后思考\n\n\n\n\n\n# 备注\n","slug":"《Java-并发编程实战》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnb000rdctadgkj3mt7","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h1 id=\"开篇词-你为什么需要学习并发编程？\"><a href=\"#开篇词-你为什么需要学习并发编程？\" class=\"headerlink\" title=\"开篇词 | 你为什么需要学习并发编程？\"></a>开篇词 | 你为什么需要学习并发编程？</h1><ul>\n<li>近几年，并发编程已经慢慢成为一项必备技能</li>\n</ul>\n<br/>\n\n<h1 id=\"学习攻略-如何才能学好并发编程？\"><a href=\"#学习攻略-如何才能学好并发编程？\" class=\"headerlink\" title=\"学习攻略 | 如何才能学好并发编程？\"></a>学习攻略 | 如何才能学好并发编程？</h1><h2 id=\"跳出来，看全景\"><a href=\"#跳出来，看全景\" class=\"headerlink\" title=\"跳出来，看全景\"></a>跳出来，看全景</h2><ul>\n<li><strong>首要之事就是你建立起一张全景图</strong></li>\n<li>并发编程领域可以抽象成<strong>三个核心问题：分工、同步和互斥</strong></li>\n</ul>\n<br/>\n\n<h3 id=\"分工\"><a href=\"#分工\" class=\"headerlink\" title=\"分工\"></a>分工</h3><ul>\n<li>Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是一种分工方法</li>\n<li>并发编程领域总结出设计模式：生产者 - 消费者、Thread-Per-Message、Worker Thread 模式等都是用来指导你如何分工的</li>\n</ul>\n<blockquote>\n<p>学习这部分内容，最佳的方式就是和现实世界做对比。例如生产者 - 消费者模式，可以类比一下餐馆里的大厨和服务员，大厨就是生产者，负责做菜，做完放到出菜口，而服务员就是消费者，把做好的菜给你端过来。不过，我们经常会发现，出菜口有时候一下子出了好几个菜，服务员是可以把这一批菜同时端给你的。其实这就是生产者 - 消费者模式的一个优点，生产者一个一个地生产数据，而消费者可以批处理，这样就提高了性能</p>\n</blockquote>\n<br/>\n\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><ul>\n<li>在并发编程领域里的同步，主要指的就是线程间的协作。<strong>一个线程执行完了一个任务，如何通知执行后续任务的线程开工</strong></li>\n<li>协作一般是和分工相关的。Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是分工方法，但同时也能解决线程协作的问题</li>\n</ul>\n<blockquote>\n<p>例如，用 Future 可以发起一个异步调用，当主线程通过 get() 方法取结果时，主线程就会等待，当异步执行的结果返回时，get() 方法就自动返回了。主线程和异步线程之间的协作，Future 工具类已经帮我们解决了</p>\n</blockquote>\n<ul>\n<li>线程协作问题，基本上都可以描述为：<strong>当某个条件不满足时，线程需要等待，当某个条件满足时，线程需要被唤醒执行</strong></li>\n</ul>\n<blockquote>\n<p>例如，在生产者 - 消费者模型里：当队列满时，生产者线程等待，当队列不满时，生产者线程需要被唤醒执行；当队列空时，消费者线程等待，当队列不空时，消费者线程需要被唤醒执行</p>\n</blockquote>\n<ul>\n<li>在 Java 并发编程领域，解决协作问题的核心技术是<strong>管程</strong>，<strong>管程是解决并发问题的万能钥匙</strong>。（解决线程协作问题、互斥问题）</li>\n</ul>\n<blockquote>\n<p>这部分内容的学习，关键是理解管程模型，学好它就可以解决所有问题。其次是了解 Java SDK 并发包提供的几个线程协作的工具类的应用场景，用好它们可以妥妥地提高你的工作效率</p>\n</blockquote>\n<br/>\n\n<h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a>互斥</h3><blockquote>\n<p>分工、同步主要强调的是性能，但并发程序里还有一部分是关于正确性的，用专业术语叫“<strong>线程安全</strong>”。并发程序里，当多个线程同时访问同一个共享变量的时候，结果是不确定的。不确定，则意味着可能正确，也可能错误，事先是不知道的。而导致不确定的主要源头是可见性问题、有序性问题和原子性问题，为了解决这三个问题，Java 语言引入了内存模型，内存模型提供了一系列的规则，利用这些规则，我们可以避免可见性问题、有序性问题，但是还不足以完全解决线程安全问题。<strong>解决线程安全问题的核心方案还是互斥</strong>。</p>\n</blockquote>\n<ul>\n<li><p><strong>互斥，指的是同一时刻，只允许一个线程访问共享变量</strong></p>\n</li>\n<li><p>实现互斥的核心技术就是锁</p>\n</li>\n</ul>\n<blockquote>\n<p>锁解决了安全性问题，但同时也带来了性能问题，那如何保证安全性的同时又尽量提高性能呢？可以分场景优化，Java SDK 里提供的 ReadWriteLock、StampedLock 就可以优化读多写少场景下锁的性能。还可以使用无锁的数据结构，例如 Java SDK 里提供的原子类都是基于无锁技术实现的。</p>\n<p>除此之外，还有一些其他的方案，原理是不共享变量或者变量只允许读。这方面，Java 提供了 Thread Local 和 final 关键字，还有一种 Copy-on-write 的模式。</p>\n<p>使用锁除了要注意性能问题外，还需要注意死锁问题。</p>\n</blockquote>\n<blockquote>\n<p>这部分内容比较复杂，往往还是跨领域的，例如要理解可见性，就需要了解一些 CPU 和缓存的知识；要理解原子性，就需要理解一些操作系统的知识；很多无锁算法的实现往往也需要理解 CPU 缓存。这部分内容的学习，需要博览群书，在大脑里建立起 CPU、内存、I/O 执行的模拟器。这样遇到问题就能得心应手了。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2nti7fz31g60.webp\" alt=\"并发编程全景图之思维导图\"></p>\n<br/>\n\n<h2 id=\"钻进去，看本质\"><a href=\"#钻进去，看本质\" class=\"headerlink\" title=\"钻进去，看本质\"></a>钻进去，看本质</h2><ul>\n<li>光跳出来还不够，还需要下一步，就是在某个问题上钻进去，深入理解，找到本质</li>\n<li><strong>工程上的解决方案，一定要有理论做基础</strong></li>\n</ul>\n<blockquote>\n<p>探索它背后的理论是什么。分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的</p>\n</blockquote>\n<br/>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>要让自己的知识成体系，一定要挖掘 Java SDK 并发包背后的设计理念</li>\n<li>分工、同步和互斥的全景图，是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识</li>\n<li>对于某个具体的技术，我建议你探索它背后的理论本质</li>\n<li>探求理论本质，既能加深对技术本身的理解，也能拓展知识深度和广度，这是个一举多得的方法</li>\n</ul>\n<br/>\n\n<h1 id=\"第一部分：并发理论基础\"><a href=\"#第一部分：并发理论基础\" class=\"headerlink\" title=\"第一部分：并发理论基础\"></a>第一部分：并发理论基础</h1><h2 id=\"01-可见性、原子性和有序性问题：并发编程Bug的源头\"><a href=\"#01-可见性、原子性和有序性问题：并发编程Bug的源头\" class=\"headerlink\" title=\"01 | 可见性、原子性和有序性问题：并发编程Bug的源头\"></a>01 | 可见性、原子性和有序性问题：并发编程Bug的源头</h2><h3 id=\"并发程序幕后的故事\"><a href=\"#并发程序幕后的故事\" class=\"headerlink\" title=\"并发程序幕后的故事\"></a>并发程序幕后的故事</h3><ul>\n<li><strong>核心矛盾一直存在，就是这三者（CPU、内存、I/O 设备）的速度差异</strong></li>\n<li>为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：</li>\n</ul>\n<blockquote>\n<ol>\n<li>CPU 增加了缓存，以均衡与内存的速度差异；</li>\n<li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；</li>\n<li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用</li>\n</ol>\n</blockquote>\n<h3 id=\"源头之一：缓存导致的可见性问题\"><a href=\"#源头之一：缓存导致的可见性问题\" class=\"headerlink\" title=\"源头之一：缓存导致的可见性问题\"></a>源头之一：缓存导致的可见性问题</h3><h3 id=\"源头之二：线程切换带来的原子性问题\"><a href=\"#源头之二：线程切换带来的原子性问题\" class=\"headerlink\" title=\"源头之二：线程切换带来的原子性问题\"></a>源头之二：线程切换带来的原子性问题</h3><h3 id=\"源头之三：编译优化带来的有序性问题\"><a href=\"#源头之三：编译优化带来的有序性问题\" class=\"headerlink\" title=\"源头之三：编译优化带来的有序性问题\"></a>源头之三：编译优化带来的有序性问题</h3><h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h1 id=\"开篇词-你为什么需要学习并发编程？\"><a href=\"#开篇词-你为什么需要学习并发编程？\" class=\"headerlink\" title=\"开篇词 | 你为什么需要学习并发编程？\"></a>开篇词 | 你为什么需要学习并发编程？</h1><ul>\n<li>近几年，并发编程已经慢慢成为一项必备技能</li>\n</ul>\n<br/>\n\n<h1 id=\"学习攻略-如何才能学好并发编程？\"><a href=\"#学习攻略-如何才能学好并发编程？\" class=\"headerlink\" title=\"学习攻略 | 如何才能学好并发编程？\"></a>学习攻略 | 如何才能学好并发编程？</h1><h2 id=\"跳出来，看全景\"><a href=\"#跳出来，看全景\" class=\"headerlink\" title=\"跳出来，看全景\"></a>跳出来，看全景</h2><ul>\n<li><strong>首要之事就是你建立起一张全景图</strong></li>\n<li>并发编程领域可以抽象成<strong>三个核心问题：分工、同步和互斥</strong></li>\n</ul>\n<br/>\n\n<h3 id=\"分工\"><a href=\"#分工\" class=\"headerlink\" title=\"分工\"></a>分工</h3><ul>\n<li>Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是一种分工方法</li>\n<li>并发编程领域总结出设计模式：生产者 - 消费者、Thread-Per-Message、Worker Thread 模式等都是用来指导你如何分工的</li>\n</ul>\n<blockquote>\n<p>学习这部分内容，最佳的方式就是和现实世界做对比。例如生产者 - 消费者模式，可以类比一下餐馆里的大厨和服务员，大厨就是生产者，负责做菜，做完放到出菜口，而服务员就是消费者，把做好的菜给你端过来。不过，我们经常会发现，出菜口有时候一下子出了好几个菜，服务员是可以把这一批菜同时端给你的。其实这就是生产者 - 消费者模式的一个优点，生产者一个一个地生产数据，而消费者可以批处理，这样就提高了性能</p>\n</blockquote>\n<br/>\n\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><ul>\n<li>在并发编程领域里的同步，主要指的就是线程间的协作。<strong>一个线程执行完了一个任务，如何通知执行后续任务的线程开工</strong></li>\n<li>协作一般是和分工相关的。Java SDK 并发包里的 Executor、Fork/Join、Future 本质上都是分工方法，但同时也能解决线程协作的问题</li>\n</ul>\n<blockquote>\n<p>例如，用 Future 可以发起一个异步调用，当主线程通过 get() 方法取结果时，主线程就会等待，当异步执行的结果返回时，get() 方法就自动返回了。主线程和异步线程之间的协作，Future 工具类已经帮我们解决了</p>\n</blockquote>\n<ul>\n<li>线程协作问题，基本上都可以描述为：<strong>当某个条件不满足时，线程需要等待，当某个条件满足时，线程需要被唤醒执行</strong></li>\n</ul>\n<blockquote>\n<p>例如，在生产者 - 消费者模型里：当队列满时，生产者线程等待，当队列不满时，生产者线程需要被唤醒执行；当队列空时，消费者线程等待，当队列不空时，消费者线程需要被唤醒执行</p>\n</blockquote>\n<ul>\n<li>在 Java 并发编程领域，解决协作问题的核心技术是<strong>管程</strong>，<strong>管程是解决并发问题的万能钥匙</strong>。（解决线程协作问题、互斥问题）</li>\n</ul>\n<blockquote>\n<p>这部分内容的学习，关键是理解管程模型，学好它就可以解决所有问题。其次是了解 Java SDK 并发包提供的几个线程协作的工具类的应用场景，用好它们可以妥妥地提高你的工作效率</p>\n</blockquote>\n<br/>\n\n<h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a>互斥</h3><blockquote>\n<p>分工、同步主要强调的是性能，但并发程序里还有一部分是关于正确性的，用专业术语叫“<strong>线程安全</strong>”。并发程序里，当多个线程同时访问同一个共享变量的时候，结果是不确定的。不确定，则意味着可能正确，也可能错误，事先是不知道的。而导致不确定的主要源头是可见性问题、有序性问题和原子性问题，为了解决这三个问题，Java 语言引入了内存模型，内存模型提供了一系列的规则，利用这些规则，我们可以避免可见性问题、有序性问题，但是还不足以完全解决线程安全问题。<strong>解决线程安全问题的核心方案还是互斥</strong>。</p>\n</blockquote>\n<ul>\n<li><p><strong>互斥，指的是同一时刻，只允许一个线程访问共享变量</strong></p>\n</li>\n<li><p>实现互斥的核心技术就是锁</p>\n</li>\n</ul>\n<blockquote>\n<p>锁解决了安全性问题，但同时也带来了性能问题，那如何保证安全性的同时又尽量提高性能呢？可以分场景优化，Java SDK 里提供的 ReadWriteLock、StampedLock 就可以优化读多写少场景下锁的性能。还可以使用无锁的数据结构，例如 Java SDK 里提供的原子类都是基于无锁技术实现的。</p>\n<p>除此之外，还有一些其他的方案，原理是不共享变量或者变量只允许读。这方面，Java 提供了 Thread Local 和 final 关键字，还有一种 Copy-on-write 的模式。</p>\n<p>使用锁除了要注意性能问题外，还需要注意死锁问题。</p>\n</blockquote>\n<blockquote>\n<p>这部分内容比较复杂，往往还是跨领域的，例如要理解可见性，就需要了解一些 CPU 和缓存的知识；要理解原子性，就需要理解一些操作系统的知识；很多无锁算法的实现往往也需要理解 CPU 缓存。这部分内容的学习，需要博览群书，在大脑里建立起 CPU、内存、I/O 执行的模拟器。这样遇到问题就能得心应手了。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2nti7fz31g60.webp\" alt=\"并发编程全景图之思维导图\"></p>\n<br/>\n\n<h2 id=\"钻进去，看本质\"><a href=\"#钻进去，看本质\" class=\"headerlink\" title=\"钻进去，看本质\"></a>钻进去，看本质</h2><ul>\n<li>光跳出来还不够，还需要下一步，就是在某个问题上钻进去，深入理解，找到本质</li>\n<li><strong>工程上的解决方案，一定要有理论做基础</strong></li>\n</ul>\n<blockquote>\n<p>探索它背后的理论是什么。分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的</p>\n</blockquote>\n<br/>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>要让自己的知识成体系，一定要挖掘 Java SDK 并发包背后的设计理念</li>\n<li>分工、同步和互斥的全景图，是我对并发问题的个人总结，不一定正确，但是可以帮助我快速建立解决并发问题的思路，梳理并发编程的知识，加深认识</li>\n<li>对于某个具体的技术，我建议你探索它背后的理论本质</li>\n<li>探求理论本质，既能加深对技术本身的理解，也能拓展知识深度和广度，这是个一举多得的方法</li>\n</ul>\n<br/>\n\n<h1 id=\"第一部分：并发理论基础\"><a href=\"#第一部分：并发理论基础\" class=\"headerlink\" title=\"第一部分：并发理论基础\"></a>第一部分：并发理论基础</h1><h2 id=\"01-可见性、原子性和有序性问题：并发编程Bug的源头\"><a href=\"#01-可见性、原子性和有序性问题：并发编程Bug的源头\" class=\"headerlink\" title=\"01 | 可见性、原子性和有序性问题：并发编程Bug的源头\"></a>01 | 可见性、原子性和有序性问题：并发编程Bug的源头</h2><h3 id=\"并发程序幕后的故事\"><a href=\"#并发程序幕后的故事\" class=\"headerlink\" title=\"并发程序幕后的故事\"></a>并发程序幕后的故事</h3><ul>\n<li><strong>核心矛盾一直存在，就是这三者（CPU、内存、I/O 设备）的速度差异</strong></li>\n<li>为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系机构、操作系统、编译程序都做出了贡献，主要体现为：</li>\n</ul>\n<blockquote>\n<ol>\n<li>CPU 增加了缓存，以均衡与内存的速度差异；</li>\n<li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；</li>\n<li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用</li>\n</ol>\n</blockquote>\n<h3 id=\"源头之一：缓存导致的可见性问题\"><a href=\"#源头之一：缓存导致的可见性问题\" class=\"headerlink\" title=\"源头之一：缓存导致的可见性问题\"></a>源头之一：缓存导致的可见性问题</h3><h3 id=\"源头之二：线程切换带来的原子性问题\"><a href=\"#源头之二：线程切换带来的原子性问题\" class=\"headerlink\" title=\"源头之二：线程切换带来的原子性问题\"></a>源头之二：线程切换带来的原子性问题</h3><h3 id=\"源头之三：编译优化带来的有序性问题\"><a href=\"#源头之三：编译优化带来的有序性问题\" class=\"headerlink\" title=\"源头之三：编译优化带来的有序性问题\"></a>源头之三：编译优化带来的有序性问题</h3><h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"课后思考\"><a href=\"#课后思考\" class=\"headerlink\" title=\"课后思考\"></a>课后思考</h3><h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1>"},{"title":"《Kafka多维度系统精讲，从入门到熟练掌握》study notes","author":"ratears","date":"2022-11-26T14:00:57.000Z","updated":"2022-11-26T14:00:57.000Z","_content":"\n\n\n# 第1章 课程导学与学习指南\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 第2章 Kafka入门——开发环境准备\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 第3章 Kafka入门——Kafka基础操作\n\n## Kafka介绍\n\n- 一个分布式流处理平台\n- Kafka是基于zookeeper的分布式消息系统\n- Kafka具有高吞吐率、高性能、实时及高可靠等特点\n\n<br>\n\n## Kafka安装\n\n- 安装准备\n  - jdk-8u181-linux-x64.tar.gz（因为Kafka是scala开发的，scala是基于jdk的，固需需要安装jdk）\n  - apache-zookeeper-3.5.7-bin.tar.gz\n  - kafka_2.11-2.4.0.tgz\n\n<br>\n\n### step1 安装jdk\n\n```shell\n# 准备jdk安装包，并解压到 /usr/local/ 目录下\ntar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/local/\n\n# 创建软连接\nln -s jdk-8u181-linux-x64 jdk1.8\n\n#配置jdk环境变量\nvim /etc/profile\n\n#####################################################\n# 文档末尾追加如下内容\nexport JAVA_HOME=/usr/local/jdk1.8\nexport PATH=$PATH:$JAVA_HOME/bin\n#####################################################\n\nsource /etc/profile\n\n# 验证jdk环境\njava -version\n```\n\n<br>\n\n### step2 安装zookeeper\n\n```shell\n# 准备zookeeper安装包，并解压到 /usr/local/ 目录下\ntar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /usr/local/\n\n# 创建软连接\nln -s apache-zookeeper-3.5.7-bin zookeeper\n\n# 准备配置文件\ncd /usr/local/zookeeper/conf/\n\ncp zoo_sample.cfg zoo.cfg\n\nvim zoo.cfg\n\n#####################################################\n# 修改 dataDir 然后保存（生产环境应该把dataDir设置成磁盘比较大的目录）\ndataDir=/usr/local/zookeeper/data\n#####################################################\n\n# 创建data目录\nmkdir -p /usr/local/zookeeper/data\n\n# 启动zookeeper\ncd /usr/local/zookeeper/bin/\n./zkServer.sh start\n\n# 使用zookeeper 自带的客户端连接 zookeeper\ncd /usr/local/zookeeper/bin/\n./zkCli.sh\n\n```\n\n<br>\n\n### step3 安装Kafka\n\n```shell\n# 准备zookeeper安装包，并解压到 /usr/local/ 目录下\ntar -zxvf kafka_2.11-2.4.0.tar.gz -C /usr/local/\n\n# 创建软连接\nln -s kafka_2.11-2.4.0 kafka\n\n# 修改配置文件\ncd /usr/local/kafka/config/\n\nvim server.properties\n\n#####################################################\nlisteners=PLAINTEXT://192.168.146.135:9092\n\nadvertised.listeners=PLAINTEXT://192.168.146.135:9092\n\nlog.dirs=/usr/local/kafka/kafka-logs\n\n# 注意生产环境该配置会变化，目前我们就使用如下配置，保持不变\nzookeeper.connect=localhost:2181\n#####################################################\n\n# 创建logs目录\nmkdir -p /usr/local/kafka/kafka-logs\n```\n\n<br>\n\n## Kafka常用命令\n\n```shell\n# 注意执行命令需要在kafka的根目录下\n\n# 1、启动Kafka\nbin/kafka-server-start.sh config/server.properties &\n\n# 2、停止Kafka\nbin/kafka-server-stop.sh\n\n# 3、创建Topic\nbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic jiangzh-topic\n\n# 4、查看已经创建的Topic信息\nbin/kafka-topics.sh --list --zookeeper localhost:2181\n\n# 5、发送消息\nbin/kafka-console-producer.sh --broker-list 192.168.146.135:9092 --topic jiangzh-topic\n\n# 6、接收消息\nbin/kafka-console-consumer.sh --bootstrap-server 192.168.146.135:9092 --topic jiangzh-topic --from-beginning\n```\n\n<br>\n\n## Kafka基本概念\n\n- Topic：一个虚拟的概念，由1到多个Partitions组成\n- Partition：实际消息存储单位\n- Producer：消息生产者\n- Consumer：消息消费者\n\n<br>\n\n<br>\n\n<br>\n\n# 第4章 Kafka核心API——Kafka客户端操作 \n\n## 五类Kafka客户端 API\n\n- Producer API: 向主题(一个或多个)发布消息；\n- Consumer API: 订阅主题(一个或多个)，拉取这些主题上发布的消息；\n- Stream API: 作为流处理器，从主题消费消息，向主题发布消息，把输出流转换为输入流；\n- Connect API: 作为下游或上游，把主题连接到应用程序或数据系统(比如关系数据库)，通常不需要直接使用这些API，而是使用 现成的连接器；\n- AdminClient API: 管理(或巡查) topic, brokers, 或其他 kafka 对象；\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.32hkgl5c6x20.webp\" width=\"60%\">\n\n<br>\n\n## AdminClient客户端建立\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkg228f3zm0.webp\" width=\"70%\">\n\n<br>\n\n```java\npublic class AdminSimple {\n    public static void main(String[] args) {\n        AdminClient adminClient = adminClient();\n        System.out.println(\"adminClient:\"+adminClient);\n    }\n\n    public static AdminClient adminClient(){\n        Properties properties =new Properties();\n        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,\"192.168.146.135:9092\");\n        AdminClient adminClient = AdminClient.create(properties);\n        return adminClient;\n    }\n}\n```\n\n<br>\n\n## 创建Topic演示\n\n```java\npublic class AdminSimple {\n    public static void main(String[] args) {\n//        AdminClient adminClient = adminClient();\n//        System.out.println(\"adminClient:\"+adminClient);\n        createTopic();\n    }\n\n    public static void createTopic() {\n        AdminClient adminClient = adminClient();\n        short rs = 10;\n        NewTopic newTopic = new NewTopic(\"demo_topic\",10,rs);\n        CreateTopicsResult topics = adminClient.createTopics(Arrays.asList(newTopic));\n        System.out.println(\"CreateTopicsResult :\"+topics.toString());\n    }\n\n    public static AdminClient adminClient(){\n        Properties properties =new Properties();\n        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,\"192.168.146.135:9092\");\n        AdminClient adminClient = AdminClient.create(properties);\n        return adminClient;\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","source":"_posts/2022/《Kafka多维度系统精讲，从入门到熟练掌握》study-notes.md","raw":"---\ntitle: 《Kafka多维度系统精讲，从入门到熟练掌握》study notes\nauthor: ratears\ncategories:\n\t- [MQ,Kafka]\ntags:\n  - Kafka\ndate: 2022-11-26 22:00:57\nupdated: 2022-11-26 22:00:57\n---\n\n\n\n# 第1章 课程导学与学习指南\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 第2章 Kafka入门——开发环境准备\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 第3章 Kafka入门——Kafka基础操作\n\n## Kafka介绍\n\n- 一个分布式流处理平台\n- Kafka是基于zookeeper的分布式消息系统\n- Kafka具有高吞吐率、高性能、实时及高可靠等特点\n\n<br>\n\n## Kafka安装\n\n- 安装准备\n  - jdk-8u181-linux-x64.tar.gz（因为Kafka是scala开发的，scala是基于jdk的，固需需要安装jdk）\n  - apache-zookeeper-3.5.7-bin.tar.gz\n  - kafka_2.11-2.4.0.tgz\n\n<br>\n\n### step1 安装jdk\n\n```shell\n# 准备jdk安装包，并解压到 /usr/local/ 目录下\ntar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/local/\n\n# 创建软连接\nln -s jdk-8u181-linux-x64 jdk1.8\n\n#配置jdk环境变量\nvim /etc/profile\n\n#####################################################\n# 文档末尾追加如下内容\nexport JAVA_HOME=/usr/local/jdk1.8\nexport PATH=$PATH:$JAVA_HOME/bin\n#####################################################\n\nsource /etc/profile\n\n# 验证jdk环境\njava -version\n```\n\n<br>\n\n### step2 安装zookeeper\n\n```shell\n# 准备zookeeper安装包，并解压到 /usr/local/ 目录下\ntar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /usr/local/\n\n# 创建软连接\nln -s apache-zookeeper-3.5.7-bin zookeeper\n\n# 准备配置文件\ncd /usr/local/zookeeper/conf/\n\ncp zoo_sample.cfg zoo.cfg\n\nvim zoo.cfg\n\n#####################################################\n# 修改 dataDir 然后保存（生产环境应该把dataDir设置成磁盘比较大的目录）\ndataDir=/usr/local/zookeeper/data\n#####################################################\n\n# 创建data目录\nmkdir -p /usr/local/zookeeper/data\n\n# 启动zookeeper\ncd /usr/local/zookeeper/bin/\n./zkServer.sh start\n\n# 使用zookeeper 自带的客户端连接 zookeeper\ncd /usr/local/zookeeper/bin/\n./zkCli.sh\n\n```\n\n<br>\n\n### step3 安装Kafka\n\n```shell\n# 准备zookeeper安装包，并解压到 /usr/local/ 目录下\ntar -zxvf kafka_2.11-2.4.0.tar.gz -C /usr/local/\n\n# 创建软连接\nln -s kafka_2.11-2.4.0 kafka\n\n# 修改配置文件\ncd /usr/local/kafka/config/\n\nvim server.properties\n\n#####################################################\nlisteners=PLAINTEXT://192.168.146.135:9092\n\nadvertised.listeners=PLAINTEXT://192.168.146.135:9092\n\nlog.dirs=/usr/local/kafka/kafka-logs\n\n# 注意生产环境该配置会变化，目前我们就使用如下配置，保持不变\nzookeeper.connect=localhost:2181\n#####################################################\n\n# 创建logs目录\nmkdir -p /usr/local/kafka/kafka-logs\n```\n\n<br>\n\n## Kafka常用命令\n\n```shell\n# 注意执行命令需要在kafka的根目录下\n\n# 1、启动Kafka\nbin/kafka-server-start.sh config/server.properties &\n\n# 2、停止Kafka\nbin/kafka-server-stop.sh\n\n# 3、创建Topic\nbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic jiangzh-topic\n\n# 4、查看已经创建的Topic信息\nbin/kafka-topics.sh --list --zookeeper localhost:2181\n\n# 5、发送消息\nbin/kafka-console-producer.sh --broker-list 192.168.146.135:9092 --topic jiangzh-topic\n\n# 6、接收消息\nbin/kafka-console-consumer.sh --bootstrap-server 192.168.146.135:9092 --topic jiangzh-topic --from-beginning\n```\n\n<br>\n\n## Kafka基本概念\n\n- Topic：一个虚拟的概念，由1到多个Partitions组成\n- Partition：实际消息存储单位\n- Producer：消息生产者\n- Consumer：消息消费者\n\n<br>\n\n<br>\n\n<br>\n\n# 第4章 Kafka核心API——Kafka客户端操作 \n\n## 五类Kafka客户端 API\n\n- Producer API: 向主题(一个或多个)发布消息；\n- Consumer API: 订阅主题(一个或多个)，拉取这些主题上发布的消息；\n- Stream API: 作为流处理器，从主题消费消息，向主题发布消息，把输出流转换为输入流；\n- Connect API: 作为下游或上游，把主题连接到应用程序或数据系统(比如关系数据库)，通常不需要直接使用这些API，而是使用 现成的连接器；\n- AdminClient API: 管理(或巡查) topic, brokers, 或其他 kafka 对象；\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.32hkgl5c6x20.webp\" width=\"60%\">\n\n<br>\n\n## AdminClient客户端建立\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkg228f3zm0.webp\" width=\"70%\">\n\n<br>\n\n```java\npublic class AdminSimple {\n    public static void main(String[] args) {\n        AdminClient adminClient = adminClient();\n        System.out.println(\"adminClient:\"+adminClient);\n    }\n\n    public static AdminClient adminClient(){\n        Properties properties =new Properties();\n        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,\"192.168.146.135:9092\");\n        AdminClient adminClient = AdminClient.create(properties);\n        return adminClient;\n    }\n}\n```\n\n<br>\n\n## 创建Topic演示\n\n```java\npublic class AdminSimple {\n    public static void main(String[] args) {\n//        AdminClient adminClient = adminClient();\n//        System.out.println(\"adminClient:\"+adminClient);\n        createTopic();\n    }\n\n    public static void createTopic() {\n        AdminClient adminClient = adminClient();\n        short rs = 10;\n        NewTopic newTopic = new NewTopic(\"demo_topic\",10,rs);\n        CreateTopicsResult topics = adminClient.createTopics(Arrays.asList(newTopic));\n        System.out.println(\"CreateTopicsResult :\"+topics.toString());\n    }\n\n    public static AdminClient adminClient(){\n        Properties properties =new Properties();\n        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,\"192.168.146.135:9092\");\n        AdminClient adminClient = AdminClient.create(properties);\n        return adminClient;\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","slug":"《Kafka多维度系统精讲，从入门到熟练掌握》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnc000udctag1w2ey35","content":"<h1 id=\"第1章-课程导学与学习指南\"><a href=\"#第1章-课程导学与学习指南\" class=\"headerlink\" title=\"第1章 课程导学与学习指南\"></a>第1章 课程导学与学习指南</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"第2章-Kafka入门——开发环境准备\"><a href=\"#第2章-Kafka入门——开发环境准备\" class=\"headerlink\" title=\"第2章 Kafka入门——开发环境准备\"></a>第2章 Kafka入门——开发环境准备</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"第3章-Kafka入门——Kafka基础操作\"><a href=\"#第3章-Kafka入门——Kafka基础操作\" class=\"headerlink\" title=\"第3章 Kafka入门——Kafka基础操作\"></a>第3章 Kafka入门——Kafka基础操作</h1><h2 id=\"Kafka介绍\"><a href=\"#Kafka介绍\" class=\"headerlink\" title=\"Kafka介绍\"></a>Kafka介绍</h2><ul>\n<li>一个分布式流处理平台</li>\n<li>Kafka是基于zookeeper的分布式消息系统</li>\n<li>Kafka具有高吞吐率、高性能、实时及高可靠等特点</li>\n</ul>\n<br>\n\n<h2 id=\"Kafka安装\"><a href=\"#Kafka安装\" class=\"headerlink\" title=\"Kafka安装\"></a>Kafka安装</h2><ul>\n<li>安装准备<ul>\n<li>jdk-8u181-linux-x64.tar.gz（因为Kafka是scala开发的，scala是基于jdk的，固需需要安装jdk）</li>\n<li>apache-zookeeper-3.5.7-bin.tar.gz</li>\n<li>kafka_2.11-2.4.0.tgz</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"step1-安装jdk\"><a href=\"#step1-安装jdk\" class=\"headerlink\" title=\"step1 安装jdk\"></a>step1 安装jdk</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">准备jdk安装包，并解压到 /usr/local/ 目录下</span></span><br><span class=\"line\">tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建软连接</span></span><br><span class=\"line\">ln -s jdk-8u181-linux-x64 jdk1.8</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置jdk环境变量</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文档末尾追加如下内容</span></span><br><span class=\"line\">export JAVA_HOME=/usr/local/jdk1.8</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证jdk环境</span></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"step2-安装zookeeper\"><a href=\"#step2-安装zookeeper\" class=\"headerlink\" title=\"step2 安装zookeeper\"></a>step2 安装zookeeper</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">准备zookeeper安装包，并解压到 /usr/local/ 目录下</span></span><br><span class=\"line\">tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建软连接</span></span><br><span class=\"line\">ln -s apache-zookeeper-3.5.7-bin zookeeper</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">准备配置文件</span></span><br><span class=\"line\">cd /usr/local/zookeeper/conf/</span><br><span class=\"line\"></span><br><span class=\"line\">cp zoo_sample.cfg zoo.cfg</span><br><span class=\"line\"></span><br><span class=\"line\">vim zoo.cfg</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 dataDir 然后保存（生产环境应该把dataDir设置成磁盘比较大的目录）</span></span><br><span class=\"line\">dataDir=/usr/local/zookeeper/data</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建data目录</span></span><br><span class=\"line\">mkdir -p /usr/local/zookeeper/data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动zookeeper</span></span><br><span class=\"line\">cd /usr/local/zookeeper/bin/</span><br><span class=\"line\">./zkServer.sh start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用zookeeper 自带的客户端连接 zookeeper</span></span><br><span class=\"line\">cd /usr/local/zookeeper/bin/</span><br><span class=\"line\">./zkCli.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"step3-安装Kafka\"><a href=\"#step3-安装Kafka\" class=\"headerlink\" title=\"step3 安装Kafka\"></a>step3 安装Kafka</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">准备zookeeper安装包，并解压到 /usr/local/ 目录下</span></span><br><span class=\"line\">tar -zxvf kafka_2.11-2.4.0.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建软连接</span></span><br><span class=\"line\">ln -s kafka_2.11-2.4.0 kafka</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改配置文件</span></span><br><span class=\"line\">cd /usr/local/kafka/config/</span><br><span class=\"line\"></span><br><span class=\"line\">vim server.properties</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\">listeners=PLAINTEXT://192.168.146.135:9092</span><br><span class=\"line\"></span><br><span class=\"line\">advertised.listeners=PLAINTEXT://192.168.146.135:9092</span><br><span class=\"line\"></span><br><span class=\"line\">log.dirs=/usr/local/kafka/kafka-logs</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意生产环境该配置会变化，目前我们就使用如下配置，保持不变</span></span><br><span class=\"line\">zookeeper.connect=localhost:2181</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建logs目录</span></span><br><span class=\"line\">mkdir -p /usr/local/kafka/kafka-logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Kafka常用命令\"><a href=\"#Kafka常用命令\" class=\"headerlink\" title=\"Kafka常用命令\"></a>Kafka常用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意执行命令需要在kafka的根目录下</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、启动Kafka</span></span><br><span class=\"line\">bin/kafka-server-start.sh config/server.properties &amp;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、停止Kafka</span></span><br><span class=\"line\">bin/kafka-server-stop.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3、创建Topic</span></span><br><span class=\"line\">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic jiangzh-topic</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4、查看已经创建的Topic信息</span></span><br><span class=\"line\">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5、发送消息</span></span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list 192.168.146.135:9092 --topic jiangzh-topic</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6、接收消息</span></span><br><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server 192.168.146.135:9092 --topic jiangzh-topic --from-beginning</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Kafka基本概念\"><a href=\"#Kafka基本概念\" class=\"headerlink\" title=\"Kafka基本概念\"></a>Kafka基本概念</h2><ul>\n<li>Topic：一个虚拟的概念，由1到多个Partitions组成</li>\n<li>Partition：实际消息存储单位</li>\n<li>Producer：消息生产者</li>\n<li>Consumer：消息消费者</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"第4章-Kafka核心API——Kafka客户端操作\"><a href=\"#第4章-Kafka核心API——Kafka客户端操作\" class=\"headerlink\" title=\"第4章 Kafka核心API——Kafka客户端操作\"></a>第4章 Kafka核心API——Kafka客户端操作</h1><h2 id=\"五类Kafka客户端-API\"><a href=\"#五类Kafka客户端-API\" class=\"headerlink\" title=\"五类Kafka客户端 API\"></a>五类Kafka客户端 API</h2><ul>\n<li>Producer API: 向主题(一个或多个)发布消息；</li>\n<li>Consumer API: 订阅主题(一个或多个)，拉取这些主题上发布的消息；</li>\n<li>Stream API: 作为流处理器，从主题消费消息，向主题发布消息，把输出流转换为输入流；</li>\n<li>Connect API: 作为下游或上游，把主题连接到应用程序或数据系统(比如关系数据库)，通常不需要直接使用这些API，而是使用 现成的连接器；</li>\n<li>AdminClient API: 管理(或巡查) topic, brokers, 或其他 kafka 对象；</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.32hkgl5c6x20.webp\" width=\"60%\">\n\n<br>\n\n<h2 id=\"AdminClient客户端建立\"><a href=\"#AdminClient客户端建立\" class=\"headerlink\" title=\"AdminClient客户端建立\"></a>AdminClient客户端建立</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkg228f3zm0.webp\" width=\"70%\">\n\n<br>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdminSimple</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AdminClient</span> <span class=\"variable\">adminClient</span> <span class=\"operator\">=</span> adminClient();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;adminClient:&quot;</span>+adminClient);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AdminClient <span class=\"title function_\">adminClient</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,<span class=\"string\">&quot;192.168.146.135:9092&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AdminClient</span> <span class=\"variable\">adminClient</span> <span class=\"operator\">=</span> AdminClient.create(properties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> adminClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"创建Topic演示\"><a href=\"#创建Topic演示\" class=\"headerlink\" title=\"创建Topic演示\"></a>创建Topic演示</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdminSimple</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        AdminClient adminClient = adminClient();</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;adminClient:&quot;+adminClient);</span></span><br><span class=\"line\">        createTopic();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createTopic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AdminClient</span> <span class=\"variable\">adminClient</span> <span class=\"operator\">=</span> adminClient();</span><br><span class=\"line\">        <span class=\"type\">short</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">NewTopic</span> <span class=\"variable\">newTopic</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NewTopic</span>(<span class=\"string\">&quot;demo_topic&quot;</span>,<span class=\"number\">10</span>,rs);</span><br><span class=\"line\">        <span class=\"type\">CreateTopicsResult</span> <span class=\"variable\">topics</span> <span class=\"operator\">=</span> adminClient.createTopics(Arrays.asList(newTopic));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CreateTopicsResult :&quot;</span>+topics.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AdminClient <span class=\"title function_\">adminClient</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,<span class=\"string\">&quot;192.168.146.135:9092&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AdminClient</span> <span class=\"variable\">adminClient</span> <span class=\"operator\">=</span> AdminClient.create(properties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> adminClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第1章-课程导学与学习指南\"><a href=\"#第1章-课程导学与学习指南\" class=\"headerlink\" title=\"第1章 课程导学与学习指南\"></a>第1章 课程导学与学习指南</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"第2章-Kafka入门——开发环境准备\"><a href=\"#第2章-Kafka入门——开发环境准备\" class=\"headerlink\" title=\"第2章 Kafka入门——开发环境准备\"></a>第2章 Kafka入门——开发环境准备</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"第3章-Kafka入门——Kafka基础操作\"><a href=\"#第3章-Kafka入门——Kafka基础操作\" class=\"headerlink\" title=\"第3章 Kafka入门——Kafka基础操作\"></a>第3章 Kafka入门——Kafka基础操作</h1><h2 id=\"Kafka介绍\"><a href=\"#Kafka介绍\" class=\"headerlink\" title=\"Kafka介绍\"></a>Kafka介绍</h2><ul>\n<li>一个分布式流处理平台</li>\n<li>Kafka是基于zookeeper的分布式消息系统</li>\n<li>Kafka具有高吞吐率、高性能、实时及高可靠等特点</li>\n</ul>\n<br>\n\n<h2 id=\"Kafka安装\"><a href=\"#Kafka安装\" class=\"headerlink\" title=\"Kafka安装\"></a>Kafka安装</h2><ul>\n<li>安装准备<ul>\n<li>jdk-8u181-linux-x64.tar.gz（因为Kafka是scala开发的，scala是基于jdk的，固需需要安装jdk）</li>\n<li>apache-zookeeper-3.5.7-bin.tar.gz</li>\n<li>kafka_2.11-2.4.0.tgz</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"step1-安装jdk\"><a href=\"#step1-安装jdk\" class=\"headerlink\" title=\"step1 安装jdk\"></a>step1 安装jdk</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">准备jdk安装包，并解压到 /usr/local/ 目录下</span></span><br><span class=\"line\">tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建软连接</span></span><br><span class=\"line\">ln -s jdk-8u181-linux-x64 jdk1.8</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置jdk环境变量</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文档末尾追加如下内容</span></span><br><span class=\"line\">export JAVA_HOME=/usr/local/jdk1.8</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证jdk环境</span></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"step2-安装zookeeper\"><a href=\"#step2-安装zookeeper\" class=\"headerlink\" title=\"step2 安装zookeeper\"></a>step2 安装zookeeper</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">准备zookeeper安装包，并解压到 /usr/local/ 目录下</span></span><br><span class=\"line\">tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建软连接</span></span><br><span class=\"line\">ln -s apache-zookeeper-3.5.7-bin zookeeper</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">准备配置文件</span></span><br><span class=\"line\">cd /usr/local/zookeeper/conf/</span><br><span class=\"line\"></span><br><span class=\"line\">cp zoo_sample.cfg zoo.cfg</span><br><span class=\"line\"></span><br><span class=\"line\">vim zoo.cfg</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 dataDir 然后保存（生产环境应该把dataDir设置成磁盘比较大的目录）</span></span><br><span class=\"line\">dataDir=/usr/local/zookeeper/data</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建data目录</span></span><br><span class=\"line\">mkdir -p /usr/local/zookeeper/data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动zookeeper</span></span><br><span class=\"line\">cd /usr/local/zookeeper/bin/</span><br><span class=\"line\">./zkServer.sh start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用zookeeper 自带的客户端连接 zookeeper</span></span><br><span class=\"line\">cd /usr/local/zookeeper/bin/</span><br><span class=\"line\">./zkCli.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"step3-安装Kafka\"><a href=\"#step3-安装Kafka\" class=\"headerlink\" title=\"step3 安装Kafka\"></a>step3 安装Kafka</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">准备zookeeper安装包，并解压到 /usr/local/ 目录下</span></span><br><span class=\"line\">tar -zxvf kafka_2.11-2.4.0.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建软连接</span></span><br><span class=\"line\">ln -s kafka_2.11-2.4.0 kafka</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改配置文件</span></span><br><span class=\"line\">cd /usr/local/kafka/config/</span><br><span class=\"line\"></span><br><span class=\"line\">vim server.properties</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\">listeners=PLAINTEXT://192.168.146.135:9092</span><br><span class=\"line\"></span><br><span class=\"line\">advertised.listeners=PLAINTEXT://192.168.146.135:9092</span><br><span class=\"line\"></span><br><span class=\"line\">log.dirs=/usr/local/kafka/kafka-logs</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意生产环境该配置会变化，目前我们就使用如下配置，保持不变</span></span><br><span class=\"line\">zookeeper.connect=localhost:2181</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################################</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建logs目录</span></span><br><span class=\"line\">mkdir -p /usr/local/kafka/kafka-logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Kafka常用命令\"><a href=\"#Kafka常用命令\" class=\"headerlink\" title=\"Kafka常用命令\"></a>Kafka常用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意执行命令需要在kafka的根目录下</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、启动Kafka</span></span><br><span class=\"line\">bin/kafka-server-start.sh config/server.properties &amp;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、停止Kafka</span></span><br><span class=\"line\">bin/kafka-server-stop.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3、创建Topic</span></span><br><span class=\"line\">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic jiangzh-topic</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4、查看已经创建的Topic信息</span></span><br><span class=\"line\">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5、发送消息</span></span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list 192.168.146.135:9092 --topic jiangzh-topic</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6、接收消息</span></span><br><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server 192.168.146.135:9092 --topic jiangzh-topic --from-beginning</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Kafka基本概念\"><a href=\"#Kafka基本概念\" class=\"headerlink\" title=\"Kafka基本概念\"></a>Kafka基本概念</h2><ul>\n<li>Topic：一个虚拟的概念，由1到多个Partitions组成</li>\n<li>Partition：实际消息存储单位</li>\n<li>Producer：消息生产者</li>\n<li>Consumer：消息消费者</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"第4章-Kafka核心API——Kafka客户端操作\"><a href=\"#第4章-Kafka核心API——Kafka客户端操作\" class=\"headerlink\" title=\"第4章 Kafka核心API——Kafka客户端操作\"></a>第4章 Kafka核心API——Kafka客户端操作</h1><h2 id=\"五类Kafka客户端-API\"><a href=\"#五类Kafka客户端-API\" class=\"headerlink\" title=\"五类Kafka客户端 API\"></a>五类Kafka客户端 API</h2><ul>\n<li>Producer API: 向主题(一个或多个)发布消息；</li>\n<li>Consumer API: 订阅主题(一个或多个)，拉取这些主题上发布的消息；</li>\n<li>Stream API: 作为流处理器，从主题消费消息，向主题发布消息，把输出流转换为输入流；</li>\n<li>Connect API: 作为下游或上游，把主题连接到应用程序或数据系统(比如关系数据库)，通常不需要直接使用这些API，而是使用 现成的连接器；</li>\n<li>AdminClient API: 管理(或巡查) topic, brokers, 或其他 kafka 对象；</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.32hkgl5c6x20.webp\" width=\"60%\">\n\n<br>\n\n<h2 id=\"AdminClient客户端建立\"><a href=\"#AdminClient客户端建立\" class=\"headerlink\" title=\"AdminClient客户端建立\"></a>AdminClient客户端建立</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkg228f3zm0.webp\" width=\"70%\">\n\n<br>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdminSimple</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AdminClient</span> <span class=\"variable\">adminClient</span> <span class=\"operator\">=</span> adminClient();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;adminClient:&quot;</span>+adminClient);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AdminClient <span class=\"title function_\">adminClient</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,<span class=\"string\">&quot;192.168.146.135:9092&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AdminClient</span> <span class=\"variable\">adminClient</span> <span class=\"operator\">=</span> AdminClient.create(properties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> adminClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"创建Topic演示\"><a href=\"#创建Topic演示\" class=\"headerlink\" title=\"创建Topic演示\"></a>创建Topic演示</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdminSimple</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        AdminClient adminClient = adminClient();</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;adminClient:&quot;+adminClient);</span></span><br><span class=\"line\">        createTopic();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createTopic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AdminClient</span> <span class=\"variable\">adminClient</span> <span class=\"operator\">=</span> adminClient();</span><br><span class=\"line\">        <span class=\"type\">short</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">NewTopic</span> <span class=\"variable\">newTopic</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NewTopic</span>(<span class=\"string\">&quot;demo_topic&quot;</span>,<span class=\"number\">10</span>,rs);</span><br><span class=\"line\">        <span class=\"type\">CreateTopicsResult</span> <span class=\"variable\">topics</span> <span class=\"operator\">=</span> adminClient.createTopics(Arrays.asList(newTopic));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CreateTopicsResult :&quot;</span>+topics.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AdminClient <span class=\"title function_\">adminClient</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,<span class=\"string\">&quot;192.168.146.135:9092&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AdminClient</span> <span class=\"variable\">adminClient</span> <span class=\"operator\">=</span> AdminClient.create(properties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> adminClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>"},{"title":"《Linux 实战技能 100 讲》study notes","auth":"ratears","date":"2022-08-21T14:37:16.000Z","update":"2022-08-21T14:37:16.000Z","_content":"\n\n\n# linux 基础介绍\n\n- linux有两种含义\n  - 一种是linus编写的开源操作系统内核\n  - 另一种是广义的操作系统\n\n- linux内核版本（分为三个部分）\n  - 主版本号、次版本号、末版本号\n  - 次版本号是奇数为开发版本，偶数为稳定版\n\n<br>\n\n<br>\n\n## linux 常见目录介绍\n\n- / 根目录\n- /root root用户家目录\n- /home/username 普通用户的家目录\n- /etc 配置文件目录\n- /bin 命令目录\n- /sbin 管理命令目录\n- /usr/bin /usr/sbin 系统预装的其它命令\n\n<br>\n\n<br>\n\n## linux 关机/重启 命令\n\n```bash\n# 关机\ninit 0\n\n# 延时关机 19:30关机\nshutdown -h 19:30\n\n# 延时30分钟关机\nshutdown -h 30 \n\n# 停止延时关闭\nshutdown -c\n\n# 重启\nreboot\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 系统操作\n\n## 帮助命令\n\n### man\n\n```shell\n# man是manual的缩写\n# 演示\nman ls\n```\n\n\n\n### help \n\n- shell 自带的命令称为内部命令，其它的是外部命令\n\n```shell\n# 内部命令使用 help 帮助\nhelp cd\n\n# 外部命令使用 help 帮助\nls --help\n\n# 区分内部、外部命令 演示\ntype cd\n```\n\n\n\n### info\n\n- info 帮助比 help 更详细，作为 help 的补充\n\n```shell\ninfo ls\n```\n\n<br>\n\n<br>\n\n## 文件/目录 - 增删改查\n\n- linux 操作系统中，一切皆文件\n\n```shell\n# 创建非空目录 \nmkdir [parameter]\n\n# -p 递归创建目录\nmkdir -p [parameter]\n```\n\n```shell\n# 删除非空目录\nrm [parameter]\n\n# 递归删除目录（包括目录下的所有文件）\nrm -r [parameter]\n\n# 不提示，无需确认，递归删除目录\nrm -rf [parameter]\n```\n\n```shell\n# 仅仅复制文件\ncp [] []\n\n# 复制文件 or 目录\ncp -r [] []\n\n# -v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主\ncp -vpa [] []\n\ncd [parameter]\ncd -\ncd ~\n```\n\n```shell\n# 移动文件\nmv [参数] [源文件] [目标文件/目录]\n\n# 重命名\nmv [] []\n```\n\n```shell\n# 查看当前目录下的文件\nls [选项...]...\n\n# -l 长格式显示文件\n# -a 显示隐藏文件\n# -r 逆序显示\n# -t 按照时间顺序显示\n# -R 递归显示\n\nll\n\npwd\n```\n\n<br>\n\n<br>\n\n## 通配符\n\n- 定义：shell 内建的符号\n- 用途：操作多个相似（有规律）的文件\n- 常用通配符\n  - \\* 匹配任意字符串\n  - ? 匹配一个字符串\n  - [xyz] 匹配xyz任意一个字符\n  - [a-z] 匹配一个范围\n  - [!xyz] 或 [\\^xyz] 不匹配\n\n<br>\n\n<br>\n\n ## 文本\n\n```shell\ntouch [file_name]\n```\n\n```shell\n# 文本内容显示到终端\ncat [text_file_name]\n\n# 查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行\nhead -5 []\n\n# 查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新\ntail -20 -f []\n\n# 统计文件内容信息\nwc []\n\n# 查看文件行数\nwc -l []\n\nmore [filename]\nless [filename]\n```\n\n<br>\n\n<br>\n\n## 打包 / 压缩\n\n- 打包/压缩\n\n```shell\ntar cf /tmp/etc.tar /etc\n\ntar czf /tmp/etc.tar.gz /etc\ntar cjf /tmp/etc.tar.bz2 /etc\n```\n\n- 解包/解压缩\n\n```shell\ntar xf /tmp/etc.tar -C /bak\n\ntar zxf /tmp/etc.tar.gz -C /bak\ntar jxf /tmp/etc.tar.bz2 -C /bak\n```\n\n<br>\n\n<br>\n\n##  文本编辑器/vi/vim\n\n### 四种模式\n\n- 正常模式\n- 插入模式\n- 命令模式\n- 可视模式\n\n```shell\n# 进入插入模式 i I o O a A\ni 进入插入模式，光标不移动\nI 进入插入模式，光标移动到当前行的首字符\na 进入插入模式，光标移动到下一个字符\nA 进入插入模式，光标移动到当前行的末尾\no 进入插入模式，光标移动到当前行的下一行（新建一行）\nO 进入插入模式，光标移动到当前行的上一行（新建一行）\n\n# 进入可视 模式 v\n\n# 移动光标 h j k l \n\nyy 复制当前行\np 粘贴\n\n3yy 复制3行\ny$ 复制光标位置到当前行文本结尾\n\ndd 剪切当前行\nd$ 剪切光标位置到当前行文本结尾\n\nu 撤销\nctrl + r 对撤销的内容重做\n\nx 单个字符删除\nr + [新字符] 替换\n\n:set nu 显示行号\n:set nonu 不显示行号\n# 设置每次打开vim都显示行号\nvim /etc/vimrc\n# 在最后一行添加\nset nu\n# 保存退出后便生效\n\n\n11+shift+g 11+G    光标移动到11行\ngg 移动到第一行\nG 移动到最后一行\n\nshift+^ 移动到行首\nshift+$ 移动到行尾\n\n:w 保存\n:q 退出\n:wq 保存并退出\n\n:q! 不保存退出\n\n:! ll /etc/ 临时执行命令\n\n/x 查找x，按n匹配下一个，shift+n 匹配上一个字符\n\n:%s/x/X 全局替换查找到的第一个字符 （单次替换）\n:s/x/X 光标所在行替换，替换查找到的第一个字符 （单次替换）\n\n:%s/x/X/g 全局替换查找到的所有字符 \n:s/x/X/g 光标所在行替换，替换查找到的当前行的所有字符 \n\n:3,5s/x/X/g 第三行到第五行之间替换\n\n# v 字符可视化\n# V 行可视\n# ctrl+v 块可视\n```\n\n<br>\n\n<br>\n\n## 用户和用户组管理\n\n```shell\n# 会创建同名的用户组\nuseradd [user_name]\n\n# 不加 -r 会保留用户的家目录，加 -r 会在删除用户的同时删除其家目录\nuserdel -r [user_name]\n\n\n\npasswd\n\n#修改用户属性\nusermod\n\n# 修改用户家目录\nusermod -d /wilson wilson\n\n# 修改用户组\nusermod -g group1 wilson\n\n#修改用户属性（生命周期，密码修改周期等）\nchage\n\n# 用户信息会被记录到 /etc/passwd 文件中 /etc/shadow 这个是密码相关的文件\n\ngroupadd\n\n# 新建用户并直接指定组\nuseradd -g group1 lily\n\ngroupdel\n\n# 切换用户并切换home目录\nsu - wilson\n\n# 以其它用户身份执行\n# visudo 设置需要使用sudo的用户组\nsudo \n\n\nvisudo\n# 赋予Wilson 执行如下命令的权限\nwilson ALL=/sbin/shutdown -c\n\n```\n\n<br>\n\n<br>\n\n## 文件与目录权限\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3v78rhmj4va0.webp\" width=\"65%\"/>\n\n<br>\n\n- 权限的前三个字符，表示所属用户对该文件的权限\n- 中间三个字符，表示所属用户组对该文件的权限\n- 最后三个字符表示其他人对该文件有什么权限\n\n<br>\n\n<br>\n\n### 文件类型\n\n• - 普通⽂文件\n• d ⽬目录⽂文件\n• b 块特殊⽂文件\n• c 字符特殊⽂文件\n• l 符号链接\n• f 命名管道\n• s 套接字⽂文件\n\n<br>\n\n<br>\n\n<br>\n\n# 系统管理\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 学习备注\n\n- linux下的打包 压缩还需深入理解 和操作\n- vim\n\n\n\n","source":"_posts/2022/《Linux-实战技能-100-讲》study-notes.md","raw":"---\ntitle: 《Linux 实战技能 100 讲》study notes\nauth: ratears\ndate: 2022-08-21 22:37:16\nupdate: 2022-08-21 22:37:16\ncategories:\n\t- [linux]\ntags:\n\t- linux\n---\n\n\n\n# linux 基础介绍\n\n- linux有两种含义\n  - 一种是linus编写的开源操作系统内核\n  - 另一种是广义的操作系统\n\n- linux内核版本（分为三个部分）\n  - 主版本号、次版本号、末版本号\n  - 次版本号是奇数为开发版本，偶数为稳定版\n\n<br>\n\n<br>\n\n## linux 常见目录介绍\n\n- / 根目录\n- /root root用户家目录\n- /home/username 普通用户的家目录\n- /etc 配置文件目录\n- /bin 命令目录\n- /sbin 管理命令目录\n- /usr/bin /usr/sbin 系统预装的其它命令\n\n<br>\n\n<br>\n\n## linux 关机/重启 命令\n\n```bash\n# 关机\ninit 0\n\n# 延时关机 19:30关机\nshutdown -h 19:30\n\n# 延时30分钟关机\nshutdown -h 30 \n\n# 停止延时关闭\nshutdown -c\n\n# 重启\nreboot\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 系统操作\n\n## 帮助命令\n\n### man\n\n```shell\n# man是manual的缩写\n# 演示\nman ls\n```\n\n\n\n### help \n\n- shell 自带的命令称为内部命令，其它的是外部命令\n\n```shell\n# 内部命令使用 help 帮助\nhelp cd\n\n# 外部命令使用 help 帮助\nls --help\n\n# 区分内部、外部命令 演示\ntype cd\n```\n\n\n\n### info\n\n- info 帮助比 help 更详细，作为 help 的补充\n\n```shell\ninfo ls\n```\n\n<br>\n\n<br>\n\n## 文件/目录 - 增删改查\n\n- linux 操作系统中，一切皆文件\n\n```shell\n# 创建非空目录 \nmkdir [parameter]\n\n# -p 递归创建目录\nmkdir -p [parameter]\n```\n\n```shell\n# 删除非空目录\nrm [parameter]\n\n# 递归删除目录（包括目录下的所有文件）\nrm -r [parameter]\n\n# 不提示，无需确认，递归删除目录\nrm -rf [parameter]\n```\n\n```shell\n# 仅仅复制文件\ncp [] []\n\n# 复制文件 or 目录\ncp -r [] []\n\n# -v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主\ncp -vpa [] []\n\ncd [parameter]\ncd -\ncd ~\n```\n\n```shell\n# 移动文件\nmv [参数] [源文件] [目标文件/目录]\n\n# 重命名\nmv [] []\n```\n\n```shell\n# 查看当前目录下的文件\nls [选项...]...\n\n# -l 长格式显示文件\n# -a 显示隐藏文件\n# -r 逆序显示\n# -t 按照时间顺序显示\n# -R 递归显示\n\nll\n\npwd\n```\n\n<br>\n\n<br>\n\n## 通配符\n\n- 定义：shell 内建的符号\n- 用途：操作多个相似（有规律）的文件\n- 常用通配符\n  - \\* 匹配任意字符串\n  - ? 匹配一个字符串\n  - [xyz] 匹配xyz任意一个字符\n  - [a-z] 匹配一个范围\n  - [!xyz] 或 [\\^xyz] 不匹配\n\n<br>\n\n<br>\n\n ## 文本\n\n```shell\ntouch [file_name]\n```\n\n```shell\n# 文本内容显示到终端\ncat [text_file_name]\n\n# 查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行\nhead -5 []\n\n# 查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新\ntail -20 -f []\n\n# 统计文件内容信息\nwc []\n\n# 查看文件行数\nwc -l []\n\nmore [filename]\nless [filename]\n```\n\n<br>\n\n<br>\n\n## 打包 / 压缩\n\n- 打包/压缩\n\n```shell\ntar cf /tmp/etc.tar /etc\n\ntar czf /tmp/etc.tar.gz /etc\ntar cjf /tmp/etc.tar.bz2 /etc\n```\n\n- 解包/解压缩\n\n```shell\ntar xf /tmp/etc.tar -C /bak\n\ntar zxf /tmp/etc.tar.gz -C /bak\ntar jxf /tmp/etc.tar.bz2 -C /bak\n```\n\n<br>\n\n<br>\n\n##  文本编辑器/vi/vim\n\n### 四种模式\n\n- 正常模式\n- 插入模式\n- 命令模式\n- 可视模式\n\n```shell\n# 进入插入模式 i I o O a A\ni 进入插入模式，光标不移动\nI 进入插入模式，光标移动到当前行的首字符\na 进入插入模式，光标移动到下一个字符\nA 进入插入模式，光标移动到当前行的末尾\no 进入插入模式，光标移动到当前行的下一行（新建一行）\nO 进入插入模式，光标移动到当前行的上一行（新建一行）\n\n# 进入可视 模式 v\n\n# 移动光标 h j k l \n\nyy 复制当前行\np 粘贴\n\n3yy 复制3行\ny$ 复制光标位置到当前行文本结尾\n\ndd 剪切当前行\nd$ 剪切光标位置到当前行文本结尾\n\nu 撤销\nctrl + r 对撤销的内容重做\n\nx 单个字符删除\nr + [新字符] 替换\n\n:set nu 显示行号\n:set nonu 不显示行号\n# 设置每次打开vim都显示行号\nvim /etc/vimrc\n# 在最后一行添加\nset nu\n# 保存退出后便生效\n\n\n11+shift+g 11+G    光标移动到11行\ngg 移动到第一行\nG 移动到最后一行\n\nshift+^ 移动到行首\nshift+$ 移动到行尾\n\n:w 保存\n:q 退出\n:wq 保存并退出\n\n:q! 不保存退出\n\n:! ll /etc/ 临时执行命令\n\n/x 查找x，按n匹配下一个，shift+n 匹配上一个字符\n\n:%s/x/X 全局替换查找到的第一个字符 （单次替换）\n:s/x/X 光标所在行替换，替换查找到的第一个字符 （单次替换）\n\n:%s/x/X/g 全局替换查找到的所有字符 \n:s/x/X/g 光标所在行替换，替换查找到的当前行的所有字符 \n\n:3,5s/x/X/g 第三行到第五行之间替换\n\n# v 字符可视化\n# V 行可视\n# ctrl+v 块可视\n```\n\n<br>\n\n<br>\n\n## 用户和用户组管理\n\n```shell\n# 会创建同名的用户组\nuseradd [user_name]\n\n# 不加 -r 会保留用户的家目录，加 -r 会在删除用户的同时删除其家目录\nuserdel -r [user_name]\n\n\n\npasswd\n\n#修改用户属性\nusermod\n\n# 修改用户家目录\nusermod -d /wilson wilson\n\n# 修改用户组\nusermod -g group1 wilson\n\n#修改用户属性（生命周期，密码修改周期等）\nchage\n\n# 用户信息会被记录到 /etc/passwd 文件中 /etc/shadow 这个是密码相关的文件\n\ngroupadd\n\n# 新建用户并直接指定组\nuseradd -g group1 lily\n\ngroupdel\n\n# 切换用户并切换home目录\nsu - wilson\n\n# 以其它用户身份执行\n# visudo 设置需要使用sudo的用户组\nsudo \n\n\nvisudo\n# 赋予Wilson 执行如下命令的权限\nwilson ALL=/sbin/shutdown -c\n\n```\n\n<br>\n\n<br>\n\n## 文件与目录权限\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3v78rhmj4va0.webp\" width=\"65%\"/>\n\n<br>\n\n- 权限的前三个字符，表示所属用户对该文件的权限\n- 中间三个字符，表示所属用户组对该文件的权限\n- 最后三个字符表示其他人对该文件有什么权限\n\n<br>\n\n<br>\n\n### 文件类型\n\n• - 普通⽂文件\n• d ⽬目录⽂文件\n• b 块特殊⽂文件\n• c 字符特殊⽂文件\n• l 符号链接\n• f 命名管道\n• s 套接字⽂文件\n\n<br>\n\n<br>\n\n<br>\n\n# 系统管理\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 学习备注\n\n- linux下的打包 压缩还需深入理解 和操作\n- vim\n\n\n\n","slug":"《Linux-实战技能-100-讲》study-notes","published":1,"updated":"2022-10-16T21:13:02.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnd000wdctaci1j0r1b","content":"<h1 id=\"linux-基础介绍\"><a href=\"#linux-基础介绍\" class=\"headerlink\" title=\"linux 基础介绍\"></a>linux 基础介绍</h1><ul>\n<li><p>linux有两种含义</p>\n<ul>\n<li>一种是linus编写的开源操作系统内核</li>\n<li>另一种是广义的操作系统</li>\n</ul>\n</li>\n<li><p>linux内核版本（分为三个部分）</p>\n<ul>\n<li>主版本号、次版本号、末版本号</li>\n<li>次版本号是奇数为开发版本，偶数为稳定版</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"linux-常见目录介绍\"><a href=\"#linux-常见目录介绍\" class=\"headerlink\" title=\"linux 常见目录介绍\"></a>linux 常见目录介绍</h2><ul>\n<li>/ 根目录</li>\n<li>/root root用户家目录</li>\n<li>/home/username 普通用户的家目录</li>\n<li>/etc 配置文件目录</li>\n<li>/bin 命令目录</li>\n<li>/sbin 管理命令目录</li>\n<li>/usr/bin /usr/sbin 系统预装的其它命令</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"linux-关机-重启-命令\"><a href=\"#linux-关机-重启-命令\" class=\"headerlink\" title=\"linux 关机/重启 命令\"></a>linux 关机/重启 命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关机</span></span><br><span class=\"line\">init 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 延时关机 19:30关机</span></span><br><span class=\"line\">shutdown -h 19:30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 延时30分钟关机</span></span><br><span class=\"line\">shutdown -h 30 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止延时关闭</span></span><br><span class=\"line\">shutdown -c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h1><h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">man是manual的缩写</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">演示</span></span><br><span class=\"line\">man ls</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help\"></a>help</h3><ul>\n<li>shell 自带的命令称为内部命令，其它的是外部命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">内部命令使用 <span class=\"built_in\">help</span> 帮助</span></span><br><span class=\"line\">help cd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">外部命令使用 <span class=\"built_in\">help</span> 帮助</span></span><br><span class=\"line\">ls --help</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">区分内部、外部命令 演示</span></span><br><span class=\"line\">type cd</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"info\"><a href=\"#info\" class=\"headerlink\" title=\"info\"></a>info</h3><ul>\n<li>info 帮助比 help 更详细，作为 help 的补充</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info ls</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"文件-目录-增删改查\"><a href=\"#文件-目录-增删改查\" class=\"headerlink\" title=\"文件/目录 - 增删改查\"></a>文件/目录 - 增删改查</h2><ul>\n<li>linux 操作系统中，一切皆文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建非空目录</span> </span><br><span class=\"line\">mkdir [parameter]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-p 递归创建目录</span></span><br><span class=\"line\">mkdir -p [parameter]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除非空目录</span></span><br><span class=\"line\">rm [parameter]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">递归删除目录（包括目录下的所有文件）</span></span><br><span class=\"line\">rm -r [parameter]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不提示，无需确认，递归删除目录</span></span><br><span class=\"line\">rm -rf [parameter]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">仅仅复制文件</span></span><br><span class=\"line\">cp [] []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制文件 or 目录</span></span><br><span class=\"line\">cp -r [] []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主</span></span><br><span class=\"line\">cp -vpa [] []</span><br><span class=\"line\"></span><br><span class=\"line\">cd [parameter]</span><br><span class=\"line\">cd -</span><br><span class=\"line\">cd ~</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移动文件</span></span><br><span class=\"line\">mv [参数] [源文件] [目标文件/目录]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重命名</span></span><br><span class=\"line\">mv [] []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前目录下的文件</span></span><br><span class=\"line\">ls [选项...]...</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-l 长格式显示文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-a 显示隐藏文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-r 逆序显示</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-t 按照时间顺序显示</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-R 递归显示</span></span><br><span class=\"line\"></span><br><span class=\"line\">ll</span><br><span class=\"line\"></span><br><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><ul>\n<li>定义：shell 内建的符号</li>\n<li>用途：操作多个相似（有规律）的文件</li>\n<li>常用通配符<ul>\n<li>* 匹配任意字符串</li>\n<li>? 匹配一个字符串</li>\n<li>[xyz] 匹配xyz任意一个字符</li>\n<li>[a-z] 匹配一个范围</li>\n<li>[!xyz] 或 [^xyz] 不匹配</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch [file_name]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文本内容显示到终端</span></span><br><span class=\"line\">cat [text_file_name]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行</span></span><br><span class=\"line\">head -5 []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新</span></span><br><span class=\"line\">tail -20 -f []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计文件内容信息</span></span><br><span class=\"line\">wc []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看文件行数</span></span><br><span class=\"line\">wc -l []</span><br><span class=\"line\"></span><br><span class=\"line\">more [filename]</span><br><span class=\"line\">less [filename]</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"打包-压缩\"><a href=\"#打包-压缩\" class=\"headerlink\" title=\"打包 / 压缩\"></a>打包 / 压缩</h2><ul>\n<li>打包/压缩</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar cf /tmp/etc.tar /etc</span><br><span class=\"line\"></span><br><span class=\"line\">tar czf /tmp/etc.tar.gz /etc</span><br><span class=\"line\">tar cjf /tmp/etc.tar.bz2 /etc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解包/解压缩</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf /tmp/etc.tar -C /bak</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxf /tmp/etc.tar.gz -C /bak</span><br><span class=\"line\">tar jxf /tmp/etc.tar.bz2 -C /bak</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"文本编辑器-vi-vim\"><a href=\"#文本编辑器-vi-vim\" class=\"headerlink\" title=\"文本编辑器/vi/vim\"></a>文本编辑器/vi/vim</h2><h3 id=\"四种模式\"><a href=\"#四种模式\" class=\"headerlink\" title=\"四种模式\"></a>四种模式</h3><ul>\n<li>正常模式</li>\n<li>插入模式</li>\n<li>命令模式</li>\n<li>可视模式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入插入模式 i I o O a A</span></span><br><span class=\"line\">i 进入插入模式，光标不移动</span><br><span class=\"line\">I 进入插入模式，光标移动到当前行的首字符</span><br><span class=\"line\">a 进入插入模式，光标移动到下一个字符</span><br><span class=\"line\">A 进入插入模式，光标移动到当前行的末尾</span><br><span class=\"line\">o 进入插入模式，光标移动到当前行的下一行（新建一行）</span><br><span class=\"line\">O 进入插入模式，光标移动到当前行的上一行（新建一行）</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入可视 模式 v</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移动光标 h j k l</span> </span><br><span class=\"line\"></span><br><span class=\"line\">yy 复制当前行</span><br><span class=\"line\">p 粘贴</span><br><span class=\"line\"></span><br><span class=\"line\">3yy 复制3行</span><br><span class=\"line\"><span class=\"meta prompt_\">y$ </span><span class=\"language-bash\">复制光标位置到当前行文本结尾</span></span><br><span class=\"line\"></span><br><span class=\"line\">dd 剪切当前行</span><br><span class=\"line\"><span class=\"meta prompt_\">d$ </span><span class=\"language-bash\">剪切光标位置到当前行文本结尾</span></span><br><span class=\"line\"></span><br><span class=\"line\">u 撤销</span><br><span class=\"line\">ctrl + r 对撤销的内容重做</span><br><span class=\"line\"></span><br><span class=\"line\">x 单个字符删除</span><br><span class=\"line\">r + [新字符] 替换</span><br><span class=\"line\"></span><br><span class=\"line\">:set nu 显示行号</span><br><span class=\"line\">:set nonu 不显示行号</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置每次打开vim都显示行号</span></span><br><span class=\"line\">vim /etc/vimrc</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在最后一行添加</span></span><br><span class=\"line\">set nu</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">保存退出后便生效</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">11+shift+g 11+G    光标移动到11行</span><br><span class=\"line\">gg 移动到第一行</span><br><span class=\"line\">G 移动到最后一行</span><br><span class=\"line\"></span><br><span class=\"line\">shift+^ 移动到行首</span><br><span class=\"line\">shift+$ 移动到行尾</span><br><span class=\"line\"></span><br><span class=\"line\">:w 保存</span><br><span class=\"line\">:q 退出</span><br><span class=\"line\">:wq 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\">:q! 不保存退出</span><br><span class=\"line\"></span><br><span class=\"line\">:! ll /etc/ 临时执行命令</span><br><span class=\"line\"></span><br><span class=\"line\">/x 查找x，按n匹配下一个，shift+n 匹配上一个字符</span><br><span class=\"line\"></span><br><span class=\"line\">:%s/x/X 全局替换查找到的第一个字符 （单次替换）</span><br><span class=\"line\">:s/x/X 光标所在行替换，替换查找到的第一个字符 （单次替换）</span><br><span class=\"line\"></span><br><span class=\"line\">:%s/x/X/g 全局替换查找到的所有字符 </span><br><span class=\"line\">:s/x/X/g 光标所在行替换，替换查找到的当前行的所有字符 </span><br><span class=\"line\"></span><br><span class=\"line\">:3,5s/x/X/g 第三行到第五行之间替换</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">v 字符可视化</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">V 行可视</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ctrl+v 块可视</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"用户和用户组管理\"><a href=\"#用户和用户组管理\" class=\"headerlink\" title=\"用户和用户组管理\"></a>用户和用户组管理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">会创建同名的用户组</span></span><br><span class=\"line\">useradd [user_name]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不加 -r 会保留用户的家目录，加 -r 会在删除用户的同时删除其家目录</span></span><br><span class=\"line\">userdel -r [user_name]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">passwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改用户属性</span></span><br><span class=\"line\">usermod</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改用户家目录</span></span><br><span class=\"line\">usermod -d /wilson wilson</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改用户组</span></span><br><span class=\"line\">usermod -g group1 wilson</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改用户属性（生命周期，密码修改周期等）</span></span><br><span class=\"line\">chage</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用户信息会被记录到 /etc/passwd 文件中 /etc/shadow 这个是密码相关的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">groupadd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建用户并直接指定组</span></span><br><span class=\"line\">useradd -g group1 lily</span><br><span class=\"line\"></span><br><span class=\"line\">groupdel</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切换用户并切换home目录</span></span><br><span class=\"line\">su - wilson</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以其它用户身份执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">visudo 设置需要使用sudo的用户组</span></span><br><span class=\"line\">sudo </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">visudo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">赋予Wilson 执行如下命令的权限</span></span><br><span class=\"line\">wilson ALL=/sbin/shutdown -c</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"文件与目录权限\"><a href=\"#文件与目录权限\" class=\"headerlink\" title=\"文件与目录权限\"></a>文件与目录权限</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3v78rhmj4va0.webp\" width=\"65%\"/>\n\n<br>\n\n<ul>\n<li>权限的前三个字符，表示所属用户对该文件的权限</li>\n<li>中间三个字符，表示所属用户组对该文件的权限</li>\n<li>最后三个字符表示其他人对该文件有什么权限</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"文件类型\"><a href=\"#文件类型\" class=\"headerlink\" title=\"文件类型\"></a>文件类型</h3><p>• - 普通⽂文件<br>• d ⽬目录⽂文件<br>• b 块特殊⽂文件<br>• c 字符特殊⽂文件<br>• l 符号链接<br>• f 命名管道<br>• s 套接字⽂文件</p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"系统管理\"><a href=\"#系统管理\" class=\"headerlink\" title=\"系统管理\"></a>系统管理</h1><h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><ul>\n<li>linux下的打包 压缩还需深入理解 和操作</li>\n<li>vim</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux-基础介绍\"><a href=\"#linux-基础介绍\" class=\"headerlink\" title=\"linux 基础介绍\"></a>linux 基础介绍</h1><ul>\n<li><p>linux有两种含义</p>\n<ul>\n<li>一种是linus编写的开源操作系统内核</li>\n<li>另一种是广义的操作系统</li>\n</ul>\n</li>\n<li><p>linux内核版本（分为三个部分）</p>\n<ul>\n<li>主版本号、次版本号、末版本号</li>\n<li>次版本号是奇数为开发版本，偶数为稳定版</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"linux-常见目录介绍\"><a href=\"#linux-常见目录介绍\" class=\"headerlink\" title=\"linux 常见目录介绍\"></a>linux 常见目录介绍</h2><ul>\n<li>/ 根目录</li>\n<li>/root root用户家目录</li>\n<li>/home/username 普通用户的家目录</li>\n<li>/etc 配置文件目录</li>\n<li>/bin 命令目录</li>\n<li>/sbin 管理命令目录</li>\n<li>/usr/bin /usr/sbin 系统预装的其它命令</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"linux-关机-重启-命令\"><a href=\"#linux-关机-重启-命令\" class=\"headerlink\" title=\"linux 关机/重启 命令\"></a>linux 关机/重启 命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关机</span></span><br><span class=\"line\">init 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 延时关机 19:30关机</span></span><br><span class=\"line\">shutdown -h 19:30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 延时30分钟关机</span></span><br><span class=\"line\">shutdown -h 30 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止延时关闭</span></span><br><span class=\"line\">shutdown -c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h1><h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">man是manual的缩写</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">演示</span></span><br><span class=\"line\">man ls</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help\"></a>help</h3><ul>\n<li>shell 自带的命令称为内部命令，其它的是外部命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">内部命令使用 <span class=\"built_in\">help</span> 帮助</span></span><br><span class=\"line\">help cd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">外部命令使用 <span class=\"built_in\">help</span> 帮助</span></span><br><span class=\"line\">ls --help</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">区分内部、外部命令 演示</span></span><br><span class=\"line\">type cd</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"info\"><a href=\"#info\" class=\"headerlink\" title=\"info\"></a>info</h3><ul>\n<li>info 帮助比 help 更详细，作为 help 的补充</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info ls</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"文件-目录-增删改查\"><a href=\"#文件-目录-增删改查\" class=\"headerlink\" title=\"文件/目录 - 增删改查\"></a>文件/目录 - 增删改查</h2><ul>\n<li>linux 操作系统中，一切皆文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建非空目录</span> </span><br><span class=\"line\">mkdir [parameter]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-p 递归创建目录</span></span><br><span class=\"line\">mkdir -p [parameter]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除非空目录</span></span><br><span class=\"line\">rm [parameter]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">递归删除目录（包括目录下的所有文件）</span></span><br><span class=\"line\">rm -r [parameter]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不提示，无需确认，递归删除目录</span></span><br><span class=\"line\">rm -rf [parameter]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">仅仅复制文件</span></span><br><span class=\"line\">cp [] []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制文件 or 目录</span></span><br><span class=\"line\">cp -r [] []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-v 查看复制提示、过程  -p 复制的文件保留原文件的时间 -a 保留权限、保留属主</span></span><br><span class=\"line\">cp -vpa [] []</span><br><span class=\"line\"></span><br><span class=\"line\">cd [parameter]</span><br><span class=\"line\">cd -</span><br><span class=\"line\">cd ~</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移动文件</span></span><br><span class=\"line\">mv [参数] [源文件] [目标文件/目录]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重命名</span></span><br><span class=\"line\">mv [] []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前目录下的文件</span></span><br><span class=\"line\">ls [选项...]...</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-l 长格式显示文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-a 显示隐藏文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-r 逆序显示</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-t 按照时间顺序显示</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-R 递归显示</span></span><br><span class=\"line\"></span><br><span class=\"line\">ll</span><br><span class=\"line\"></span><br><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><ul>\n<li>定义：shell 内建的符号</li>\n<li>用途：操作多个相似（有规律）的文件</li>\n<li>常用通配符<ul>\n<li>* 匹配任意字符串</li>\n<li>? 匹配一个字符串</li>\n<li>[xyz] 匹配xyz任意一个字符</li>\n<li>[a-z] 匹配一个范围</li>\n<li>[!xyz] 或 [^xyz] 不匹配</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch [file_name]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文本内容显示到终端</span></span><br><span class=\"line\">cat [text_file_name]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看文件开头 -number  表示查看文件开头的number行 。不加默认查看10行</span></span><br><span class=\"line\">head -5 []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看文件结尾 -number 表示查看文件结尾哦的number行 。不加默认查看10行  -f文件内容更新后，显示同步更新</span></span><br><span class=\"line\">tail -20 -f []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计文件内容信息</span></span><br><span class=\"line\">wc []</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看文件行数</span></span><br><span class=\"line\">wc -l []</span><br><span class=\"line\"></span><br><span class=\"line\">more [filename]</span><br><span class=\"line\">less [filename]</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"打包-压缩\"><a href=\"#打包-压缩\" class=\"headerlink\" title=\"打包 / 压缩\"></a>打包 / 压缩</h2><ul>\n<li>打包/压缩</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar cf /tmp/etc.tar /etc</span><br><span class=\"line\"></span><br><span class=\"line\">tar czf /tmp/etc.tar.gz /etc</span><br><span class=\"line\">tar cjf /tmp/etc.tar.bz2 /etc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解包/解压缩</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf /tmp/etc.tar -C /bak</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxf /tmp/etc.tar.gz -C /bak</span><br><span class=\"line\">tar jxf /tmp/etc.tar.bz2 -C /bak</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"文本编辑器-vi-vim\"><a href=\"#文本编辑器-vi-vim\" class=\"headerlink\" title=\"文本编辑器/vi/vim\"></a>文本编辑器/vi/vim</h2><h3 id=\"四种模式\"><a href=\"#四种模式\" class=\"headerlink\" title=\"四种模式\"></a>四种模式</h3><ul>\n<li>正常模式</li>\n<li>插入模式</li>\n<li>命令模式</li>\n<li>可视模式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入插入模式 i I o O a A</span></span><br><span class=\"line\">i 进入插入模式，光标不移动</span><br><span class=\"line\">I 进入插入模式，光标移动到当前行的首字符</span><br><span class=\"line\">a 进入插入模式，光标移动到下一个字符</span><br><span class=\"line\">A 进入插入模式，光标移动到当前行的末尾</span><br><span class=\"line\">o 进入插入模式，光标移动到当前行的下一行（新建一行）</span><br><span class=\"line\">O 进入插入模式，光标移动到当前行的上一行（新建一行）</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入可视 模式 v</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移动光标 h j k l</span> </span><br><span class=\"line\"></span><br><span class=\"line\">yy 复制当前行</span><br><span class=\"line\">p 粘贴</span><br><span class=\"line\"></span><br><span class=\"line\">3yy 复制3行</span><br><span class=\"line\"><span class=\"meta prompt_\">y$ </span><span class=\"language-bash\">复制光标位置到当前行文本结尾</span></span><br><span class=\"line\"></span><br><span class=\"line\">dd 剪切当前行</span><br><span class=\"line\"><span class=\"meta prompt_\">d$ </span><span class=\"language-bash\">剪切光标位置到当前行文本结尾</span></span><br><span class=\"line\"></span><br><span class=\"line\">u 撤销</span><br><span class=\"line\">ctrl + r 对撤销的内容重做</span><br><span class=\"line\"></span><br><span class=\"line\">x 单个字符删除</span><br><span class=\"line\">r + [新字符] 替换</span><br><span class=\"line\"></span><br><span class=\"line\">:set nu 显示行号</span><br><span class=\"line\">:set nonu 不显示行号</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置每次打开vim都显示行号</span></span><br><span class=\"line\">vim /etc/vimrc</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在最后一行添加</span></span><br><span class=\"line\">set nu</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">保存退出后便生效</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">11+shift+g 11+G    光标移动到11行</span><br><span class=\"line\">gg 移动到第一行</span><br><span class=\"line\">G 移动到最后一行</span><br><span class=\"line\"></span><br><span class=\"line\">shift+^ 移动到行首</span><br><span class=\"line\">shift+$ 移动到行尾</span><br><span class=\"line\"></span><br><span class=\"line\">:w 保存</span><br><span class=\"line\">:q 退出</span><br><span class=\"line\">:wq 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\">:q! 不保存退出</span><br><span class=\"line\"></span><br><span class=\"line\">:! ll /etc/ 临时执行命令</span><br><span class=\"line\"></span><br><span class=\"line\">/x 查找x，按n匹配下一个，shift+n 匹配上一个字符</span><br><span class=\"line\"></span><br><span class=\"line\">:%s/x/X 全局替换查找到的第一个字符 （单次替换）</span><br><span class=\"line\">:s/x/X 光标所在行替换，替换查找到的第一个字符 （单次替换）</span><br><span class=\"line\"></span><br><span class=\"line\">:%s/x/X/g 全局替换查找到的所有字符 </span><br><span class=\"line\">:s/x/X/g 光标所在行替换，替换查找到的当前行的所有字符 </span><br><span class=\"line\"></span><br><span class=\"line\">:3,5s/x/X/g 第三行到第五行之间替换</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">v 字符可视化</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">V 行可视</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ctrl+v 块可视</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"用户和用户组管理\"><a href=\"#用户和用户组管理\" class=\"headerlink\" title=\"用户和用户组管理\"></a>用户和用户组管理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">会创建同名的用户组</span></span><br><span class=\"line\">useradd [user_name]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不加 -r 会保留用户的家目录，加 -r 会在删除用户的同时删除其家目录</span></span><br><span class=\"line\">userdel -r [user_name]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">passwd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改用户属性</span></span><br><span class=\"line\">usermod</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改用户家目录</span></span><br><span class=\"line\">usermod -d /wilson wilson</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改用户组</span></span><br><span class=\"line\">usermod -g group1 wilson</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改用户属性（生命周期，密码修改周期等）</span></span><br><span class=\"line\">chage</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用户信息会被记录到 /etc/passwd 文件中 /etc/shadow 这个是密码相关的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">groupadd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新建用户并直接指定组</span></span><br><span class=\"line\">useradd -g group1 lily</span><br><span class=\"line\"></span><br><span class=\"line\">groupdel</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切换用户并切换home目录</span></span><br><span class=\"line\">su - wilson</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以其它用户身份执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">visudo 设置需要使用sudo的用户组</span></span><br><span class=\"line\">sudo </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">visudo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">赋予Wilson 执行如下命令的权限</span></span><br><span class=\"line\">wilson ALL=/sbin/shutdown -c</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"文件与目录权限\"><a href=\"#文件与目录权限\" class=\"headerlink\" title=\"文件与目录权限\"></a>文件与目录权限</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3v78rhmj4va0.webp\" width=\"65%\"/>\n\n<br>\n\n<ul>\n<li>权限的前三个字符，表示所属用户对该文件的权限</li>\n<li>中间三个字符，表示所属用户组对该文件的权限</li>\n<li>最后三个字符表示其他人对该文件有什么权限</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"文件类型\"><a href=\"#文件类型\" class=\"headerlink\" title=\"文件类型\"></a>文件类型</h3><p>• - 普通⽂文件<br>• d ⽬目录⽂文件<br>• b 块特殊⽂文件<br>• c 字符特殊⽂文件<br>• l 符号链接<br>• f 命名管道<br>• s 套接字⽂文件</p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"系统管理\"><a href=\"#系统管理\" class=\"headerlink\" title=\"系统管理\"></a>系统管理</h1><h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><ul>\n<li>linux下的打包 压缩还需深入理解 和操作</li>\n<li>vim</li>\n</ul>\n"},{"title":"《MySQL 8.0详解与实战》study notes","author":"ratears","date":"2022-10-24T03:00:34.000Z","updated":"2022-10-24T03:00:34.000Z","_content":"\n\n\n\n\n# 数据库选型\n\n## SQL VS NOSQL\n\n| 类型  |                    示例                    | 特点                                                         | 适用场景                                                     |\n| :---: | :----------------------------------------: | :----------------------------------------------------------- | :----------------------------------------------------------- |\n|  SQL  | MySQL<br>Oracle<br>SQLServer<br>PostGreSQL | 数据结构化存储在二维表格中。<br/>支持事务的 ACID 特性。<br/>支持使用SQL语言对存储在其中的数据进行操作 | 数据之间存在着一定关系，需要关联查询数据的场景。<br/>需要事务支持的业务场景。<br/>需要使用SQL语言灵活操作数据的场景。 |\n| NOSQL |    HBase<br>MongoDB<br>Redis<br>Hadoop     | 存储结构灵活，没有固定的存储结构<br/>对事务的支持比较弱，但对数据的并发处理性能高<br/>大多不使用SQL语言操作数据 | 数据结构不固定的场景<br/>对事务要求不高，但读写并发比较大的场景。<br/>对数据处理操作比较简单的场景 |\n\n<br>\n\n<br>\n\n## 关系数据库选型原则\n\n- 数据库使用的广泛性\n\n  <img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4hxh96wd6lc0.webp\" width=\"80%\">\n\n- 数据库的可扩展性\n\n  - 支持基于二进制日志的逻辑复制\n  - 存在多种第三方数据库中间件，支持读写分离，分库分表\n\n- 数据库的安全性和稳定性\n\n  - MySQL主从复制集群可达到99%的可用性\n  - 配合主从复制高可用架构，可达到99%的可用性\n  - 支持对存储在MySQL的数据，进行分级安全控制\n\n- 数据库所支持的系统\n\n  - 支持Linux操作系统\n  - 支持windows操作系统\n\n- 数据库的使用成本\n\n  - 社区版本免费\n  - 使用人员众多，社区活跃，可以方便获取技术支持\n\n<br>\n\n<br>\n\n## MySQL 8.x 的安装\n\n- 服务器环境：CentOS 7 \n\n```shell\n# （1）下载mysql的安装包\n[root@localhost ~]# cd /install/\n[root@localhost install]# wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.31-el7-x86_64.tar.gz\n\n# （2）解压\n[root@localhost install]# tar -zxvf mysql-8.0.31-el7-x86_64.tar.gz\n\n# （3）移动mysql的位置，创建软连接（便于管理）\n[root@localhost install]# mv mysql-8.0.31-el7-x86_64 /usr/local/\n[root@localhost install]# cd /usr/local/\n[root@localhost local]# ln -s mysql-8.0.31-el7-x86_64/ mysql\n\n# （4）配置mysql\n# 先备份原 /etc/my.cnf 文件\n[root@localhost mysql]# cp /etc/my.cnf /etc/my.cnf.bak\n[root@localhost mysql]# vim /etc/my.cnf\n```\n\n```mysql\n[client]\nport            = 3306\nsocket          = /usr/local/mysql/data/mysql.sock\n[mysqld]\n# Skip #\nskip_name_resolve              = 1\nskip_external_locking          = 1 \nskip_symbolic_links     = 1\n# GENERAL #\nuser = mysql\ndefault_storage_engine = InnoDB\ncharacter-set-server = utf8\nsocket  = /usr/local/mysql/data/mysql.sock\npid_file = /usr/local/mysql/data/mysqld.pid\nbasedir = /usr/local/mysql\nport = 3306\nbind-address = 0.0.0.0\nexplicit_defaults_for_timestamp = off\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n#read_only=on\n# MyISAM #\nkey_buffer_size                = 32M\n#myisam_recover                 = FORCE,BACKUP\n\n# undo log #\ninnodb_undo_directory = /usr/local/mysql/undo\ninnodb_undo_tablespaces = 8\n\n# SAFETY #\nmax_allowed_packet             = 100M\nmax_connect_errors             = 1000000\nsysdate_is_now                 = 1\n#innodb = FORCE\n#innodb_strict_mode = 1\nsecure-file-priv='/tmp'\ndefault_authentication_plugin='mysql_native_password'\n# Replice #\n server-id = 1001\n relay_log = mysqld-relay-bin\n gtid_mode = on\n enforce-gtid-consistency\n log-slave-updates = on\n master_info_repository =TABLE\n relay_log_info_repository =TABLE\n\n\n# DATA STORAGE #\n datadir = /usr/local/mysql/data/\n tmpdir = /tmp\n \n# BINARY LOGGING #\n log_bin = /usr/local/mysql/sql_log/mysql-bin\n max_binlog_size = 1000M\n binlog_format = row\n binlog_expire_logs_seconds=86400\n# sync_binlog = 1\n\n # CACHES AND LIMITS #\n tmp_table_size                 = 32M\n max_heap_table_size            = 32M\n max_connections                = 4000\n thread_cache_size              = 2048\n open_files_limit               = 65535\n table_definition_cache         = 4096\n table_open_cache               = 4096\n sort_buffer_size               = 2M\n read_buffer_size               = 2M\n read_rnd_buffer_size           = 2M\n# thread_concurrency             = 24\n join_buffer_size = 1M\n# table_cache = 32768\n thread_stack = 512k\n max_length_for_sort_data = 16k\n\n\n # INNODB #\n innodb_flush_method            = O_DIRECT\n innodb_log_buffer_size = 16M\n innodb_flush_log_at_trx_commit = 2\n innodb_file_per_table          = 1\n innodb_buffer_pool_size        = 256M\n #innodb_buffer_pool_instances = 8\n innodb_stats_on_metadata = off\n innodb_open_files = 8192\n innodb_read_io_threads = 16\n innodb_write_io_threads = 16\n innodb_io_capacity = 20000\n innodb_thread_concurrency = 0\n innodb_lock_wait_timeout = 60\n innodb_old_blocks_time=1000\n innodb_use_native_aio = 1\n innodb_purge_threads=1\n innodb_change_buffering=all\n innodb_log_file_size = 64M\n innodb_log_files_in_group = 2\n innodb_data_file_path  = ibdata1:256M:autoextend\n \n innodb_rollback_on_timeout=on\n # LOGGING #\n log_error                      = /usr/local/mysql/sql_log/mysql-error.log\n # log_queries_not_using_indexes  = 1\n # slow_query_log                 = 1\n  slow_query_log_file            = /usr/local/mysql/sql_log/slowlog.log\n\n # TimeOut #\n #interactive_timeout = 30\n #wait_timeout        = 30\n #net_read_timeout = 60\n\n[mysqldump]\nquick\nmax_allowed_packet = 100M\n\n[mysql]\nno-auto-rehash\n# Remove the next comment character if you are not familiar with SQL\n#safe-updates\n\n[myisamchk]\nkey_buffer_size = 256M\nsort_buffer_size = 256M\nread_buffer = 2M\nwrite_buffer = 2M\n\n[mysqlhotcopy]\ninteractive-timeout\n```\n\n```shell\n# （5）创建管理mysql的用户mysql\n[root@localhost mysql]# useradd mysql\n\n# （6）创建mysql相关数据目录，并修改文件权限\n[root@localhost mysql]# mkdir data sql_log undo\n[root@localhost mysql]# chown -R mysql:mysql data sql_log undo\n[root@localhost mysql]# ll\ntotal 300\ndrwxr-xr-x.  2  7161 31415   4096 Sep 14 01:50 bin\ndrwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 data\ndrwxr-xr-x.  2  7161 31415     55 Sep 14 01:50 docs\ndrwxr-xr-x.  3  7161 31415   4096 Sep 14 01:50 include\ndrwxr-xr-x.  6  7161 31415    201 Sep 14 01:50 lib\n-rw-r--r--.  1  7161 31415 287627 Sep 14 00:15 LICENSE\ndrwxr-xr-x.  4  7161 31415     30 Sep 14 01:50 man\n-rw-r--r--.  1  7161 31415    666 Sep 14 00:15 README\ndrwxr-xr-x. 28  7161 31415   4096 Sep 14 01:50 share\ndrwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 sql_log\ndrwxr-xr-x.  2  7161 31415     77 Sep 14 01:50 support-files\ndrwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 undo\n\n# （7）配置mysql的环境变量\n[root@localhost mysql]# vim /etc/profile\n# 在 /etc/profile 文件末尾添加如下内容\nexport PATH=$PATH:/usr/local/mysql/bin\n\n[root@localhost mysql]# source /etc/profile\n\n# （8）初始化mysql数据库\n[root@localhost mysql]# mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\n# 验证：数据库初始化成功后，会在data目录下有相关文件生成\n\n# （9）拷贝数据库启动脚本\n[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld\n\n# 至此，mysql数据库安装完成\n```\n\n<br>\n\n<br>\n\n## MySQL 启动\n\n```mysql\n[root@localhost mysql]# /etc/init.d/mysqld start\nStarting MySQL.. SUCCESS!\n\n# 获取mysql的初始密码\n[root@localhost mysql]# grep password sql_log/mysql-error.log\n\n# 登录mysql后，修改mysql的密码\nmysql> alter user user() identified by 'root';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 数据库设计\n\n- 业务分析\t=》\t逻辑设计\t=》\t数据类型\t=》\t对象命名\t=》 建立库表\n\n\n\n## 逻辑设计\n\n### 宽表模式存在的问题\n\n- 宽表模式：指把所有需求字段设计在一张表中\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkqourzzp40.webp\" width=\"70%\">\n\n<br>\n\n<br>\n\n#### 数据冗余\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.693sty7axdk0.webp\" width=\"80%\">\n\n<br>\n\n- 相同数据在一个表中出现了多次（增加数据占用空间）\n- 需要对数据进行多次维护（如果讲师的职位发生了变化，就需要对多条数据进行维护，如果有数据没有维护，就会导致数据不一致）\n\n<br>\n\n<br>\n\n#### 宽表模式的应用场景\n\n- 配合列存储的数据报表应用\n\n<br>\n\n<br>\n\n## 数据库设计范式\n\n- 第一范式：要求有主键，并且要求每一个字段原子性不可再分\n- 第二范式：表中必须存在业务主键，并且非主键全部依赖于业务主键\n- 第三范式：表中的非主键列之间不能相互依赖\n\n<br>\n\n<br>\n\n- 反反范式化设计\n  - 范式化设计存在的问题：为了满足范式化设计要求，我们对表拆分的很细。但是在查询时候关联的表会很多，影响性能\n  - 为了提高查询性能，我们需要反范式化设计\n\n<br>\n\n<br>\n\n## 物理设计\n\n### MySQL常见的存储引擎\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pqx87bjieq0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### InnoDB存储引擎的特点\n\n- 事物型存储引擎支持ACID\n- 数据按主键聚集存储\n- 支持行级锁及MVCC\n- 支持Btree和自适应Hash索引\n- 支持全文和空间索引\n\n<br>\n\n<br>\n\n### 整数类型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75n135ulfk00.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### 实数类型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4d7mn2i88vq0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### 常用时间类型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5e3m2d5s8yc0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### 字符串类型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.618wwafqys00.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### 选择合适的数据类型\n\n- 优先选择符合存储数据需求的最小数据类型\n- 谨慎使用ENUM,TEXT字符串类型\n- 同财务相关的数据类型，必须使用decimal类型\n\n<br>\n\n<br>\n\n### 数据库对象命名原则\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6bx7vkwrtgc0.webp\" width=\"60%\">\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.58c8x2q3kq80.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n<br>\n\n# MySQL 访问数据库\n\n## MySQL 访问异常处理\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6si7f2uku6w0.webp\" width=\"80%\">\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4zrntdxrjtk0.webp\" width=\"80%\">\n\n<br>\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1. 数据类型这块还需要加强一下呢\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"80%\">\n\n<br>\n\n","source":"_posts/2022/《MySQL-8-0详解与实战》study-notes.md","raw":"---\ntitle: 《MySQL 8.0详解与实战》study notes\nauthor: ratears\ncategories:\n  - [database,MySQL]\ntags:\n  - MySQL\n  - database\ndate: 2022-10-24 11:00:34\nupdated: 2022-10-24 11:00:34\n---\n\n\n\n\n\n# 数据库选型\n\n## SQL VS NOSQL\n\n| 类型  |                    示例                    | 特点                                                         | 适用场景                                                     |\n| :---: | :----------------------------------------: | :----------------------------------------------------------- | :----------------------------------------------------------- |\n|  SQL  | MySQL<br>Oracle<br>SQLServer<br>PostGreSQL | 数据结构化存储在二维表格中。<br/>支持事务的 ACID 特性。<br/>支持使用SQL语言对存储在其中的数据进行操作 | 数据之间存在着一定关系，需要关联查询数据的场景。<br/>需要事务支持的业务场景。<br/>需要使用SQL语言灵活操作数据的场景。 |\n| NOSQL |    HBase<br>MongoDB<br>Redis<br>Hadoop     | 存储结构灵活，没有固定的存储结构<br/>对事务的支持比较弱，但对数据的并发处理性能高<br/>大多不使用SQL语言操作数据 | 数据结构不固定的场景<br/>对事务要求不高，但读写并发比较大的场景。<br/>对数据处理操作比较简单的场景 |\n\n<br>\n\n<br>\n\n## 关系数据库选型原则\n\n- 数据库使用的广泛性\n\n  <img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4hxh96wd6lc0.webp\" width=\"80%\">\n\n- 数据库的可扩展性\n\n  - 支持基于二进制日志的逻辑复制\n  - 存在多种第三方数据库中间件，支持读写分离，分库分表\n\n- 数据库的安全性和稳定性\n\n  - MySQL主从复制集群可达到99%的可用性\n  - 配合主从复制高可用架构，可达到99%的可用性\n  - 支持对存储在MySQL的数据，进行分级安全控制\n\n- 数据库所支持的系统\n\n  - 支持Linux操作系统\n  - 支持windows操作系统\n\n- 数据库的使用成本\n\n  - 社区版本免费\n  - 使用人员众多，社区活跃，可以方便获取技术支持\n\n<br>\n\n<br>\n\n## MySQL 8.x 的安装\n\n- 服务器环境：CentOS 7 \n\n```shell\n# （1）下载mysql的安装包\n[root@localhost ~]# cd /install/\n[root@localhost install]# wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.31-el7-x86_64.tar.gz\n\n# （2）解压\n[root@localhost install]# tar -zxvf mysql-8.0.31-el7-x86_64.tar.gz\n\n# （3）移动mysql的位置，创建软连接（便于管理）\n[root@localhost install]# mv mysql-8.0.31-el7-x86_64 /usr/local/\n[root@localhost install]# cd /usr/local/\n[root@localhost local]# ln -s mysql-8.0.31-el7-x86_64/ mysql\n\n# （4）配置mysql\n# 先备份原 /etc/my.cnf 文件\n[root@localhost mysql]# cp /etc/my.cnf /etc/my.cnf.bak\n[root@localhost mysql]# vim /etc/my.cnf\n```\n\n```mysql\n[client]\nport            = 3306\nsocket          = /usr/local/mysql/data/mysql.sock\n[mysqld]\n# Skip #\nskip_name_resolve              = 1\nskip_external_locking          = 1 \nskip_symbolic_links     = 1\n# GENERAL #\nuser = mysql\ndefault_storage_engine = InnoDB\ncharacter-set-server = utf8\nsocket  = /usr/local/mysql/data/mysql.sock\npid_file = /usr/local/mysql/data/mysqld.pid\nbasedir = /usr/local/mysql\nport = 3306\nbind-address = 0.0.0.0\nexplicit_defaults_for_timestamp = off\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n#read_only=on\n# MyISAM #\nkey_buffer_size                = 32M\n#myisam_recover                 = FORCE,BACKUP\n\n# undo log #\ninnodb_undo_directory = /usr/local/mysql/undo\ninnodb_undo_tablespaces = 8\n\n# SAFETY #\nmax_allowed_packet             = 100M\nmax_connect_errors             = 1000000\nsysdate_is_now                 = 1\n#innodb = FORCE\n#innodb_strict_mode = 1\nsecure-file-priv='/tmp'\ndefault_authentication_plugin='mysql_native_password'\n# Replice #\n server-id = 1001\n relay_log = mysqld-relay-bin\n gtid_mode = on\n enforce-gtid-consistency\n log-slave-updates = on\n master_info_repository =TABLE\n relay_log_info_repository =TABLE\n\n\n# DATA STORAGE #\n datadir = /usr/local/mysql/data/\n tmpdir = /tmp\n \n# BINARY LOGGING #\n log_bin = /usr/local/mysql/sql_log/mysql-bin\n max_binlog_size = 1000M\n binlog_format = row\n binlog_expire_logs_seconds=86400\n# sync_binlog = 1\n\n # CACHES AND LIMITS #\n tmp_table_size                 = 32M\n max_heap_table_size            = 32M\n max_connections                = 4000\n thread_cache_size              = 2048\n open_files_limit               = 65535\n table_definition_cache         = 4096\n table_open_cache               = 4096\n sort_buffer_size               = 2M\n read_buffer_size               = 2M\n read_rnd_buffer_size           = 2M\n# thread_concurrency             = 24\n join_buffer_size = 1M\n# table_cache = 32768\n thread_stack = 512k\n max_length_for_sort_data = 16k\n\n\n # INNODB #\n innodb_flush_method            = O_DIRECT\n innodb_log_buffer_size = 16M\n innodb_flush_log_at_trx_commit = 2\n innodb_file_per_table          = 1\n innodb_buffer_pool_size        = 256M\n #innodb_buffer_pool_instances = 8\n innodb_stats_on_metadata = off\n innodb_open_files = 8192\n innodb_read_io_threads = 16\n innodb_write_io_threads = 16\n innodb_io_capacity = 20000\n innodb_thread_concurrency = 0\n innodb_lock_wait_timeout = 60\n innodb_old_blocks_time=1000\n innodb_use_native_aio = 1\n innodb_purge_threads=1\n innodb_change_buffering=all\n innodb_log_file_size = 64M\n innodb_log_files_in_group = 2\n innodb_data_file_path  = ibdata1:256M:autoextend\n \n innodb_rollback_on_timeout=on\n # LOGGING #\n log_error                      = /usr/local/mysql/sql_log/mysql-error.log\n # log_queries_not_using_indexes  = 1\n # slow_query_log                 = 1\n  slow_query_log_file            = /usr/local/mysql/sql_log/slowlog.log\n\n # TimeOut #\n #interactive_timeout = 30\n #wait_timeout        = 30\n #net_read_timeout = 60\n\n[mysqldump]\nquick\nmax_allowed_packet = 100M\n\n[mysql]\nno-auto-rehash\n# Remove the next comment character if you are not familiar with SQL\n#safe-updates\n\n[myisamchk]\nkey_buffer_size = 256M\nsort_buffer_size = 256M\nread_buffer = 2M\nwrite_buffer = 2M\n\n[mysqlhotcopy]\ninteractive-timeout\n```\n\n```shell\n# （5）创建管理mysql的用户mysql\n[root@localhost mysql]# useradd mysql\n\n# （6）创建mysql相关数据目录，并修改文件权限\n[root@localhost mysql]# mkdir data sql_log undo\n[root@localhost mysql]# chown -R mysql:mysql data sql_log undo\n[root@localhost mysql]# ll\ntotal 300\ndrwxr-xr-x.  2  7161 31415   4096 Sep 14 01:50 bin\ndrwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 data\ndrwxr-xr-x.  2  7161 31415     55 Sep 14 01:50 docs\ndrwxr-xr-x.  3  7161 31415   4096 Sep 14 01:50 include\ndrwxr-xr-x.  6  7161 31415    201 Sep 14 01:50 lib\n-rw-r--r--.  1  7161 31415 287627 Sep 14 00:15 LICENSE\ndrwxr-xr-x.  4  7161 31415     30 Sep 14 01:50 man\n-rw-r--r--.  1  7161 31415    666 Sep 14 00:15 README\ndrwxr-xr-x. 28  7161 31415   4096 Sep 14 01:50 share\ndrwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 sql_log\ndrwxr-xr-x.  2  7161 31415     77 Sep 14 01:50 support-files\ndrwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 undo\n\n# （7）配置mysql的环境变量\n[root@localhost mysql]# vim /etc/profile\n# 在 /etc/profile 文件末尾添加如下内容\nexport PATH=$PATH:/usr/local/mysql/bin\n\n[root@localhost mysql]# source /etc/profile\n\n# （8）初始化mysql数据库\n[root@localhost mysql]# mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\n# 验证：数据库初始化成功后，会在data目录下有相关文件生成\n\n# （9）拷贝数据库启动脚本\n[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld\n\n# 至此，mysql数据库安装完成\n```\n\n<br>\n\n<br>\n\n## MySQL 启动\n\n```mysql\n[root@localhost mysql]# /etc/init.d/mysqld start\nStarting MySQL.. SUCCESS!\n\n# 获取mysql的初始密码\n[root@localhost mysql]# grep password sql_log/mysql-error.log\n\n# 登录mysql后，修改mysql的密码\nmysql> alter user user() identified by 'root';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 数据库设计\n\n- 业务分析\t=》\t逻辑设计\t=》\t数据类型\t=》\t对象命名\t=》 建立库表\n\n\n\n## 逻辑设计\n\n### 宽表模式存在的问题\n\n- 宽表模式：指把所有需求字段设计在一张表中\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkqourzzp40.webp\" width=\"70%\">\n\n<br>\n\n<br>\n\n#### 数据冗余\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.693sty7axdk0.webp\" width=\"80%\">\n\n<br>\n\n- 相同数据在一个表中出现了多次（增加数据占用空间）\n- 需要对数据进行多次维护（如果讲师的职位发生了变化，就需要对多条数据进行维护，如果有数据没有维护，就会导致数据不一致）\n\n<br>\n\n<br>\n\n#### 宽表模式的应用场景\n\n- 配合列存储的数据报表应用\n\n<br>\n\n<br>\n\n## 数据库设计范式\n\n- 第一范式：要求有主键，并且要求每一个字段原子性不可再分\n- 第二范式：表中必须存在业务主键，并且非主键全部依赖于业务主键\n- 第三范式：表中的非主键列之间不能相互依赖\n\n<br>\n\n<br>\n\n- 反反范式化设计\n  - 范式化设计存在的问题：为了满足范式化设计要求，我们对表拆分的很细。但是在查询时候关联的表会很多，影响性能\n  - 为了提高查询性能，我们需要反范式化设计\n\n<br>\n\n<br>\n\n## 物理设计\n\n### MySQL常见的存储引擎\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pqx87bjieq0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### InnoDB存储引擎的特点\n\n- 事物型存储引擎支持ACID\n- 数据按主键聚集存储\n- 支持行级锁及MVCC\n- 支持Btree和自适应Hash索引\n- 支持全文和空间索引\n\n<br>\n\n<br>\n\n### 整数类型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75n135ulfk00.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### 实数类型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4d7mn2i88vq0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### 常用时间类型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5e3m2d5s8yc0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### 字符串类型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.618wwafqys00.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n### 选择合适的数据类型\n\n- 优先选择符合存储数据需求的最小数据类型\n- 谨慎使用ENUM,TEXT字符串类型\n- 同财务相关的数据类型，必须使用decimal类型\n\n<br>\n\n<br>\n\n### 数据库对象命名原则\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6bx7vkwrtgc0.webp\" width=\"60%\">\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.58c8x2q3kq80.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n<br>\n\n# MySQL 访问数据库\n\n## MySQL 访问异常处理\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6si7f2uku6w0.webp\" width=\"80%\">\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4zrntdxrjtk0.webp\" width=\"80%\">\n\n<br>\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1. 数据类型这块还需要加强一下呢\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"80%\">\n\n<br>\n\n","slug":"《MySQL-8-0详解与实战》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnf0011dcta6qbxgixf","content":"<h1 id=\"数据库选型\"><a href=\"#数据库选型\" class=\"headerlink\" title=\"数据库选型\"></a>数据库选型</h1><h2 id=\"SQL-VS-NOSQL\"><a href=\"#SQL-VS-NOSQL\" class=\"headerlink\" title=\"SQL VS NOSQL\"></a>SQL VS NOSQL</h2><table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">示例</th>\n<th align=\"left\">特点</th>\n<th align=\"left\">适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SQL</td>\n<td align=\"center\">MySQL<br>Oracle<br>SQLServer<br>PostGreSQL</td>\n<td align=\"left\">数据结构化存储在二维表格中。<br/>支持事务的 ACID 特性。<br/>支持使用SQL语言对存储在其中的数据进行操作</td>\n<td align=\"left\">数据之间存在着一定关系，需要关联查询数据的场景。<br/>需要事务支持的业务场景。<br/>需要使用SQL语言灵活操作数据的场景。</td>\n</tr>\n<tr>\n<td align=\"center\">NOSQL</td>\n<td align=\"center\">HBase<br>MongoDB<br>Redis<br>Hadoop</td>\n<td align=\"left\">存储结构灵活，没有固定的存储结构<br/>对事务的支持比较弱，但对数据的并发处理性能高<br/>大多不使用SQL语言操作数据</td>\n<td align=\"left\">数据结构不固定的场景<br/>对事务要求不高，但读写并发比较大的场景。<br/>对数据处理操作比较简单的场景</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"关系数据库选型原则\"><a href=\"#关系数据库选型原则\" class=\"headerlink\" title=\"关系数据库选型原则\"></a>关系数据库选型原则</h2><ul>\n<li><p>数据库使用的广泛性</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4hxh96wd6lc0.webp\" width=\"80%\"></li>\n<li><p>数据库的可扩展性</p>\n<ul>\n<li>支持基于二进制日志的逻辑复制</li>\n<li>存在多种第三方数据库中间件，支持读写分离，分库分表</li>\n</ul>\n</li>\n<li><p>数据库的安全性和稳定性</p>\n<ul>\n<li>MySQL主从复制集群可达到99%的可用性</li>\n<li>配合主从复制高可用架构，可达到99%的可用性</li>\n<li>支持对存储在MySQL的数据，进行分级安全控制</li>\n</ul>\n</li>\n<li><p>数据库所支持的系统</p>\n<ul>\n<li>支持Linux操作系统</li>\n<li>支持windows操作系统</li>\n</ul>\n</li>\n<li><p>数据库的使用成本</p>\n<ul>\n<li>社区版本免费</li>\n<li>使用人员众多，社区活跃，可以方便获取技术支持</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"MySQL-8-x-的安装\"><a href=\"#MySQL-8-x-的安装\" class=\"headerlink\" title=\"MySQL 8.x 的安装\"></a>MySQL 8.x 的安装</h2><ul>\n<li>服务器环境：CentOS 7 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）下载mysql的安装包</span></span><br><span class=\"line\">[root@localhost ~]# cd /install/</span><br><span class=\"line\">[root@localhost install]# wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.31-el7-x86_64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（2）解压</span></span><br><span class=\"line\">[root@localhost install]# tar -zxvf mysql-8.0.31-el7-x86_64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（3）移动mysql的位置，创建软连接（便于管理）</span></span><br><span class=\"line\">[root@localhost install]# mv mysql-8.0.31-el7-x86_64 /usr/local/</span><br><span class=\"line\">[root@localhost install]# cd /usr/local/</span><br><span class=\"line\">[root@localhost local]# ln -s mysql-8.0.31-el7-x86_64/ mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（4）配置mysql</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先备份原 /etc/my.cnf 文件</span></span><br><span class=\"line\">[root@localhost mysql]# cp /etc/my.cnf /etc/my.cnf.bak</span><br><span class=\"line\">[root@localhost mysql]# vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">port            = 3306</span><br><span class=\"line\">socket          = /usr/local/mysql/data/mysql.sock</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"># Skip #</span><br><span class=\"line\">skip_name_resolve              = 1</span><br><span class=\"line\">skip_external_locking          = 1 </span><br><span class=\"line\">skip_symbolic_links     = 1</span><br><span class=\"line\"># GENERAL #</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">default_storage_engine = InnoDB</span><br><span class=\"line\">character-set-server = utf8</span><br><span class=\"line\">socket  = /usr/local/mysql/data/mysql.sock</span><br><span class=\"line\">pid_file = /usr/local/mysql/data/mysqld.pid</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">bind-address = 0.0.0.0</span><br><span class=\"line\">explicit_defaults_for_timestamp = off</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class=\"line\">#read_only=on</span><br><span class=\"line\"># MyISAM #</span><br><span class=\"line\">key_buffer_size                = 32M</span><br><span class=\"line\">#myisam_recover                 = FORCE,BACKUP</span><br><span class=\"line\"></span><br><span class=\"line\"># undo log #</span><br><span class=\"line\">innodb_undo_directory = /usr/local/mysql/undo</span><br><span class=\"line\">innodb_undo_tablespaces = 8</span><br><span class=\"line\"></span><br><span class=\"line\"># SAFETY #</span><br><span class=\"line\">max_allowed_packet             = 100M</span><br><span class=\"line\">max_connect_errors             = 1000000</span><br><span class=\"line\">sysdate_is_now                 = 1</span><br><span class=\"line\">#innodb = FORCE</span><br><span class=\"line\">#innodb_strict_mode = 1</span><br><span class=\"line\">secure-file-priv=&#x27;/tmp&#x27;</span><br><span class=\"line\">default_authentication_plugin=&#x27;mysql_native_password&#x27;</span><br><span class=\"line\"># Replice #</span><br><span class=\"line\"> server-id = 1001</span><br><span class=\"line\"> relay_log = mysqld-relay-bin</span><br><span class=\"line\"> gtid_mode = on</span><br><span class=\"line\"> enforce-gtid-consistency</span><br><span class=\"line\"> log-slave-updates = on</span><br><span class=\"line\"> master_info_repository =TABLE</span><br><span class=\"line\"> relay_log_info_repository =TABLE</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># DATA STORAGE #</span><br><span class=\"line\"> datadir = /usr/local/mysql/data/</span><br><span class=\"line\"> tmpdir = /tmp</span><br><span class=\"line\"> </span><br><span class=\"line\"># BINARY LOGGING #</span><br><span class=\"line\"> log_bin = /usr/local/mysql/sql_log/mysql-bin</span><br><span class=\"line\"> max_binlog_size = 1000M</span><br><span class=\"line\"> binlog_format = row</span><br><span class=\"line\"> binlog_expire_logs_seconds=86400</span><br><span class=\"line\"># sync_binlog = 1</span><br><span class=\"line\"></span><br><span class=\"line\"> # CACHES AND LIMITS #</span><br><span class=\"line\"> tmp_table_size                 = 32M</span><br><span class=\"line\"> max_heap_table_size            = 32M</span><br><span class=\"line\"> max_connections                = 4000</span><br><span class=\"line\"> thread_cache_size              = 2048</span><br><span class=\"line\"> open_files_limit               = 65535</span><br><span class=\"line\"> table_definition_cache         = 4096</span><br><span class=\"line\"> table_open_cache               = 4096</span><br><span class=\"line\"> sort_buffer_size               = 2M</span><br><span class=\"line\"> read_buffer_size               = 2M</span><br><span class=\"line\"> read_rnd_buffer_size           = 2M</span><br><span class=\"line\"># thread_concurrency             = 24</span><br><span class=\"line\"> join_buffer_size = 1M</span><br><span class=\"line\"># table_cache = 32768</span><br><span class=\"line\"> thread_stack = 512k</span><br><span class=\"line\"> max_length_for_sort_data = 16k</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> # INNODB #</span><br><span class=\"line\"> innodb_flush_method            = O_DIRECT</span><br><span class=\"line\"> innodb_log_buffer_size = 16M</span><br><span class=\"line\"> innodb_flush_log_at_trx_commit = 2</span><br><span class=\"line\"> innodb_file_per_table          = 1</span><br><span class=\"line\"> innodb_buffer_pool_size        = 256M</span><br><span class=\"line\"> #innodb_buffer_pool_instances = 8</span><br><span class=\"line\"> innodb_stats_on_metadata = off</span><br><span class=\"line\"> innodb_open_files = 8192</span><br><span class=\"line\"> innodb_read_io_threads = 16</span><br><span class=\"line\"> innodb_write_io_threads = 16</span><br><span class=\"line\"> innodb_io_capacity = 20000</span><br><span class=\"line\"> innodb_thread_concurrency = 0</span><br><span class=\"line\"> innodb_lock_wait_timeout = 60</span><br><span class=\"line\"> innodb_old_blocks_time=1000</span><br><span class=\"line\"> innodb_use_native_aio = 1</span><br><span class=\"line\"> innodb_purge_threads=1</span><br><span class=\"line\"> innodb_change_buffering=all</span><br><span class=\"line\"> innodb_log_file_size = 64M</span><br><span class=\"line\"> innodb_log_files_in_group = 2</span><br><span class=\"line\"> innodb_data_file_path  = ibdata1:256M:autoextend</span><br><span class=\"line\"> </span><br><span class=\"line\"> innodb_rollback_on_timeout=on</span><br><span class=\"line\"> # LOGGING #</span><br><span class=\"line\"> log_error                      = /usr/local/mysql/sql_log/mysql-error.log</span><br><span class=\"line\"> # log_queries_not_using_indexes  = 1</span><br><span class=\"line\"> # slow_query_log                 = 1</span><br><span class=\"line\">  slow_query_log_file            = /usr/local/mysql/sql_log/slowlog.log</span><br><span class=\"line\"></span><br><span class=\"line\"> # TimeOut #</span><br><span class=\"line\"> #interactive_timeout = 30</span><br><span class=\"line\"> #wait_timeout        = 30</span><br><span class=\"line\"> #net_read_timeout = 60</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqldump]</span><br><span class=\"line\">quick</span><br><span class=\"line\">max_allowed_packet = 100M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">no-auto-rehash</span><br><span class=\"line\"># Remove the next comment character if you are not familiar with SQL</span><br><span class=\"line\">#safe-updates</span><br><span class=\"line\"></span><br><span class=\"line\">[myisamchk]</span><br><span class=\"line\">key_buffer_size = 256M</span><br><span class=\"line\">sort_buffer_size = 256M</span><br><span class=\"line\">read_buffer = 2M</span><br><span class=\"line\">write_buffer = 2M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqlhotcopy]</span><br><span class=\"line\">interactive-timeout</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（5）创建管理mysql的用户mysql</span></span><br><span class=\"line\">[root@localhost mysql]# useradd mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（6）创建mysql相关数据目录，并修改文件权限</span></span><br><span class=\"line\">[root@localhost mysql]# mkdir data sql_log undo</span><br><span class=\"line\">[root@localhost mysql]# chown -R mysql:mysql data sql_log undo</span><br><span class=\"line\">[root@localhost mysql]# ll</span><br><span class=\"line\">total 300</span><br><span class=\"line\">drwxr-xr-x.  2  7161 31415   4096 Sep 14 01:50 bin</span><br><span class=\"line\">drwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 data</span><br><span class=\"line\">drwxr-xr-x.  2  7161 31415     55 Sep 14 01:50 docs</span><br><span class=\"line\">drwxr-xr-x.  3  7161 31415   4096 Sep 14 01:50 include</span><br><span class=\"line\">drwxr-xr-x.  6  7161 31415    201 Sep 14 01:50 lib</span><br><span class=\"line\">-rw-r--r--.  1  7161 31415 287627 Sep 14 00:15 LICENSE</span><br><span class=\"line\">drwxr-xr-x.  4  7161 31415     30 Sep 14 01:50 man</span><br><span class=\"line\">-rw-r--r--.  1  7161 31415    666 Sep 14 00:15 README</span><br><span class=\"line\">drwxr-xr-x. 28  7161 31415   4096 Sep 14 01:50 share</span><br><span class=\"line\">drwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 sql_log</span><br><span class=\"line\">drwxr-xr-x.  2  7161 31415     77 Sep 14 01:50 support-files</span><br><span class=\"line\">drwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 undo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（7）配置mysql的环境变量</span></span><br><span class=\"line\">[root@localhost mysql]# vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 /etc/profile 文件末尾添加如下内容</span></span><br><span class=\"line\">export PATH=$PATH:/usr/local/mysql/bin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql]# source /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（8）初始化mysql数据库</span></span><br><span class=\"line\">[root@localhost mysql]# mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证：数据库初始化成功后，会在data目录下有相关文件生成</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（9）拷贝数据库启动脚本</span></span><br><span class=\"line\">[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">至此，mysql数据库安装完成</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL-启动\"><a href=\"#MySQL-启动\" class=\"headerlink\" title=\"MySQL 启动\"></a>MySQL 启动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]# /etc/init.d/mysqld start</span><br><span class=\"line\">Starting MySQL.. SUCCESS!</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取mysql的初始密码</span><br><span class=\"line\">[root@localhost mysql]# grep password sql_log/mysql-error.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 登录mysql后，修改mysql的密码</span><br><span class=\"line\">mysql&gt; alter user user() identified by &#x27;root&#x27;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h1><ul>\n<li>业务分析    =》    逻辑设计    =》    数据类型    =》    对象命名    =》 建立库表</li>\n</ul>\n<h2 id=\"逻辑设计\"><a href=\"#逻辑设计\" class=\"headerlink\" title=\"逻辑设计\"></a>逻辑设计</h2><h3 id=\"宽表模式存在的问题\"><a href=\"#宽表模式存在的问题\" class=\"headerlink\" title=\"宽表模式存在的问题\"></a>宽表模式存在的问题</h3><ul>\n<li>宽表模式：指把所有需求字段设计在一张表中</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkqourzzp40.webp\" width=\"70%\">\n\n<br>\n\n<br>\n\n<h4 id=\"数据冗余\"><a href=\"#数据冗余\" class=\"headerlink\" title=\"数据冗余\"></a>数据冗余</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.693sty7axdk0.webp\" width=\"80%\">\n\n<br>\n\n<ul>\n<li>相同数据在一个表中出现了多次（增加数据占用空间）</li>\n<li>需要对数据进行多次维护（如果讲师的职位发生了变化，就需要对多条数据进行维护，如果有数据没有维护，就会导致数据不一致）</li>\n</ul>\n<br>\n\n<br>\n\n<h4 id=\"宽表模式的应用场景\"><a href=\"#宽表模式的应用场景\" class=\"headerlink\" title=\"宽表模式的应用场景\"></a>宽表模式的应用场景</h4><ul>\n<li>配合列存储的数据报表应用</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"数据库设计范式\"><a href=\"#数据库设计范式\" class=\"headerlink\" title=\"数据库设计范式\"></a>数据库设计范式</h2><ul>\n<li>第一范式：要求有主键，并且要求每一个字段原子性不可再分</li>\n<li>第二范式：表中必须存在业务主键，并且非主键全部依赖于业务主键</li>\n<li>第三范式：表中的非主键列之间不能相互依赖</li>\n</ul>\n<br>\n\n<br>\n\n<ul>\n<li>反反范式化设计<ul>\n<li>范式化设计存在的问题：为了满足范式化设计要求，我们对表拆分的很细。但是在查询时候关联的表会很多，影响性能</li>\n<li>为了提高查询性能，我们需要反范式化设计</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"物理设计\"><a href=\"#物理设计\" class=\"headerlink\" title=\"物理设计\"></a>物理设计</h2><h3 id=\"MySQL常见的存储引擎\"><a href=\"#MySQL常见的存储引擎\" class=\"headerlink\" title=\"MySQL常见的存储引擎\"></a>MySQL常见的存储引擎</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pqx87bjieq0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"InnoDB存储引擎的特点\"><a href=\"#InnoDB存储引擎的特点\" class=\"headerlink\" title=\"InnoDB存储引擎的特点\"></a>InnoDB存储引擎的特点</h3><ul>\n<li>事物型存储引擎支持ACID</li>\n<li>数据按主键聚集存储</li>\n<li>支持行级锁及MVCC</li>\n<li>支持Btree和自适应Hash索引</li>\n<li>支持全文和空间索引</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75n135ulfk00.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"实数类型\"><a href=\"#实数类型\" class=\"headerlink\" title=\"实数类型\"></a>实数类型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4d7mn2i88vq0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"常用时间类型\"><a href=\"#常用时间类型\" class=\"headerlink\" title=\"常用时间类型\"></a>常用时间类型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5e3m2d5s8yc0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.618wwafqys00.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"选择合适的数据类型\"><a href=\"#选择合适的数据类型\" class=\"headerlink\" title=\"选择合适的数据类型\"></a>选择合适的数据类型</h3><ul>\n<li>优先选择符合存储数据需求的最小数据类型</li>\n<li>谨慎使用ENUM,TEXT字符串类型</li>\n<li>同财务相关的数据类型，必须使用decimal类型</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"数据库对象命名原则\"><a href=\"#数据库对象命名原则\" class=\"headerlink\" title=\"数据库对象命名原则\"></a>数据库对象命名原则</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6bx7vkwrtgc0.webp\" width=\"60%\">\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.58c8x2q3kq80.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"MySQL-访问数据库\"><a href=\"#MySQL-访问数据库\" class=\"headerlink\" title=\"MySQL 访问数据库\"></a>MySQL 访问数据库</h1><h2 id=\"MySQL-访问异常处理\"><a href=\"#MySQL-访问异常处理\" class=\"headerlink\" title=\"MySQL 访问异常处理\"></a>MySQL 访问异常处理</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6si7f2uku6w0.webp\" width=\"80%\">\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4zrntdxrjtk0.webp\" width=\"80%\">\n\n<br>\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>数据类型这块还需要加强一下呢</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"80%\">\n\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据库选型\"><a href=\"#数据库选型\" class=\"headerlink\" title=\"数据库选型\"></a>数据库选型</h1><h2 id=\"SQL-VS-NOSQL\"><a href=\"#SQL-VS-NOSQL\" class=\"headerlink\" title=\"SQL VS NOSQL\"></a>SQL VS NOSQL</h2><table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">示例</th>\n<th align=\"left\">特点</th>\n<th align=\"left\">适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SQL</td>\n<td align=\"center\">MySQL<br>Oracle<br>SQLServer<br>PostGreSQL</td>\n<td align=\"left\">数据结构化存储在二维表格中。<br/>支持事务的 ACID 特性。<br/>支持使用SQL语言对存储在其中的数据进行操作</td>\n<td align=\"left\">数据之间存在着一定关系，需要关联查询数据的场景。<br/>需要事务支持的业务场景。<br/>需要使用SQL语言灵活操作数据的场景。</td>\n</tr>\n<tr>\n<td align=\"center\">NOSQL</td>\n<td align=\"center\">HBase<br>MongoDB<br>Redis<br>Hadoop</td>\n<td align=\"left\">存储结构灵活，没有固定的存储结构<br/>对事务的支持比较弱，但对数据的并发处理性能高<br/>大多不使用SQL语言操作数据</td>\n<td align=\"left\">数据结构不固定的场景<br/>对事务要求不高，但读写并发比较大的场景。<br/>对数据处理操作比较简单的场景</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"关系数据库选型原则\"><a href=\"#关系数据库选型原则\" class=\"headerlink\" title=\"关系数据库选型原则\"></a>关系数据库选型原则</h2><ul>\n<li><p>数据库使用的广泛性</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4hxh96wd6lc0.webp\" width=\"80%\"></li>\n<li><p>数据库的可扩展性</p>\n<ul>\n<li>支持基于二进制日志的逻辑复制</li>\n<li>存在多种第三方数据库中间件，支持读写分离，分库分表</li>\n</ul>\n</li>\n<li><p>数据库的安全性和稳定性</p>\n<ul>\n<li>MySQL主从复制集群可达到99%的可用性</li>\n<li>配合主从复制高可用架构，可达到99%的可用性</li>\n<li>支持对存储在MySQL的数据，进行分级安全控制</li>\n</ul>\n</li>\n<li><p>数据库所支持的系统</p>\n<ul>\n<li>支持Linux操作系统</li>\n<li>支持windows操作系统</li>\n</ul>\n</li>\n<li><p>数据库的使用成本</p>\n<ul>\n<li>社区版本免费</li>\n<li>使用人员众多，社区活跃，可以方便获取技术支持</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"MySQL-8-x-的安装\"><a href=\"#MySQL-8-x-的安装\" class=\"headerlink\" title=\"MySQL 8.x 的安装\"></a>MySQL 8.x 的安装</h2><ul>\n<li>服务器环境：CentOS 7 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）下载mysql的安装包</span></span><br><span class=\"line\">[root@localhost ~]# cd /install/</span><br><span class=\"line\">[root@localhost install]# wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.31-el7-x86_64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（2）解压</span></span><br><span class=\"line\">[root@localhost install]# tar -zxvf mysql-8.0.31-el7-x86_64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（3）移动mysql的位置，创建软连接（便于管理）</span></span><br><span class=\"line\">[root@localhost install]# mv mysql-8.0.31-el7-x86_64 /usr/local/</span><br><span class=\"line\">[root@localhost install]# cd /usr/local/</span><br><span class=\"line\">[root@localhost local]# ln -s mysql-8.0.31-el7-x86_64/ mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（4）配置mysql</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先备份原 /etc/my.cnf 文件</span></span><br><span class=\"line\">[root@localhost mysql]# cp /etc/my.cnf /etc/my.cnf.bak</span><br><span class=\"line\">[root@localhost mysql]# vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">port            = 3306</span><br><span class=\"line\">socket          = /usr/local/mysql/data/mysql.sock</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"># Skip #</span><br><span class=\"line\">skip_name_resolve              = 1</span><br><span class=\"line\">skip_external_locking          = 1 </span><br><span class=\"line\">skip_symbolic_links     = 1</span><br><span class=\"line\"># GENERAL #</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">default_storage_engine = InnoDB</span><br><span class=\"line\">character-set-server = utf8</span><br><span class=\"line\">socket  = /usr/local/mysql/data/mysql.sock</span><br><span class=\"line\">pid_file = /usr/local/mysql/data/mysqld.pid</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">bind-address = 0.0.0.0</span><br><span class=\"line\">explicit_defaults_for_timestamp = off</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class=\"line\">#read_only=on</span><br><span class=\"line\"># MyISAM #</span><br><span class=\"line\">key_buffer_size                = 32M</span><br><span class=\"line\">#myisam_recover                 = FORCE,BACKUP</span><br><span class=\"line\"></span><br><span class=\"line\"># undo log #</span><br><span class=\"line\">innodb_undo_directory = /usr/local/mysql/undo</span><br><span class=\"line\">innodb_undo_tablespaces = 8</span><br><span class=\"line\"></span><br><span class=\"line\"># SAFETY #</span><br><span class=\"line\">max_allowed_packet             = 100M</span><br><span class=\"line\">max_connect_errors             = 1000000</span><br><span class=\"line\">sysdate_is_now                 = 1</span><br><span class=\"line\">#innodb = FORCE</span><br><span class=\"line\">#innodb_strict_mode = 1</span><br><span class=\"line\">secure-file-priv=&#x27;/tmp&#x27;</span><br><span class=\"line\">default_authentication_plugin=&#x27;mysql_native_password&#x27;</span><br><span class=\"line\"># Replice #</span><br><span class=\"line\"> server-id = 1001</span><br><span class=\"line\"> relay_log = mysqld-relay-bin</span><br><span class=\"line\"> gtid_mode = on</span><br><span class=\"line\"> enforce-gtid-consistency</span><br><span class=\"line\"> log-slave-updates = on</span><br><span class=\"line\"> master_info_repository =TABLE</span><br><span class=\"line\"> relay_log_info_repository =TABLE</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># DATA STORAGE #</span><br><span class=\"line\"> datadir = /usr/local/mysql/data/</span><br><span class=\"line\"> tmpdir = /tmp</span><br><span class=\"line\"> </span><br><span class=\"line\"># BINARY LOGGING #</span><br><span class=\"line\"> log_bin = /usr/local/mysql/sql_log/mysql-bin</span><br><span class=\"line\"> max_binlog_size = 1000M</span><br><span class=\"line\"> binlog_format = row</span><br><span class=\"line\"> binlog_expire_logs_seconds=86400</span><br><span class=\"line\"># sync_binlog = 1</span><br><span class=\"line\"></span><br><span class=\"line\"> # CACHES AND LIMITS #</span><br><span class=\"line\"> tmp_table_size                 = 32M</span><br><span class=\"line\"> max_heap_table_size            = 32M</span><br><span class=\"line\"> max_connections                = 4000</span><br><span class=\"line\"> thread_cache_size              = 2048</span><br><span class=\"line\"> open_files_limit               = 65535</span><br><span class=\"line\"> table_definition_cache         = 4096</span><br><span class=\"line\"> table_open_cache               = 4096</span><br><span class=\"line\"> sort_buffer_size               = 2M</span><br><span class=\"line\"> read_buffer_size               = 2M</span><br><span class=\"line\"> read_rnd_buffer_size           = 2M</span><br><span class=\"line\"># thread_concurrency             = 24</span><br><span class=\"line\"> join_buffer_size = 1M</span><br><span class=\"line\"># table_cache = 32768</span><br><span class=\"line\"> thread_stack = 512k</span><br><span class=\"line\"> max_length_for_sort_data = 16k</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> # INNODB #</span><br><span class=\"line\"> innodb_flush_method            = O_DIRECT</span><br><span class=\"line\"> innodb_log_buffer_size = 16M</span><br><span class=\"line\"> innodb_flush_log_at_trx_commit = 2</span><br><span class=\"line\"> innodb_file_per_table          = 1</span><br><span class=\"line\"> innodb_buffer_pool_size        = 256M</span><br><span class=\"line\"> #innodb_buffer_pool_instances = 8</span><br><span class=\"line\"> innodb_stats_on_metadata = off</span><br><span class=\"line\"> innodb_open_files = 8192</span><br><span class=\"line\"> innodb_read_io_threads = 16</span><br><span class=\"line\"> innodb_write_io_threads = 16</span><br><span class=\"line\"> innodb_io_capacity = 20000</span><br><span class=\"line\"> innodb_thread_concurrency = 0</span><br><span class=\"line\"> innodb_lock_wait_timeout = 60</span><br><span class=\"line\"> innodb_old_blocks_time=1000</span><br><span class=\"line\"> innodb_use_native_aio = 1</span><br><span class=\"line\"> innodb_purge_threads=1</span><br><span class=\"line\"> innodb_change_buffering=all</span><br><span class=\"line\"> innodb_log_file_size = 64M</span><br><span class=\"line\"> innodb_log_files_in_group = 2</span><br><span class=\"line\"> innodb_data_file_path  = ibdata1:256M:autoextend</span><br><span class=\"line\"> </span><br><span class=\"line\"> innodb_rollback_on_timeout=on</span><br><span class=\"line\"> # LOGGING #</span><br><span class=\"line\"> log_error                      = /usr/local/mysql/sql_log/mysql-error.log</span><br><span class=\"line\"> # log_queries_not_using_indexes  = 1</span><br><span class=\"line\"> # slow_query_log                 = 1</span><br><span class=\"line\">  slow_query_log_file            = /usr/local/mysql/sql_log/slowlog.log</span><br><span class=\"line\"></span><br><span class=\"line\"> # TimeOut #</span><br><span class=\"line\"> #interactive_timeout = 30</span><br><span class=\"line\"> #wait_timeout        = 30</span><br><span class=\"line\"> #net_read_timeout = 60</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqldump]</span><br><span class=\"line\">quick</span><br><span class=\"line\">max_allowed_packet = 100M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">no-auto-rehash</span><br><span class=\"line\"># Remove the next comment character if you are not familiar with SQL</span><br><span class=\"line\">#safe-updates</span><br><span class=\"line\"></span><br><span class=\"line\">[myisamchk]</span><br><span class=\"line\">key_buffer_size = 256M</span><br><span class=\"line\">sort_buffer_size = 256M</span><br><span class=\"line\">read_buffer = 2M</span><br><span class=\"line\">write_buffer = 2M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqlhotcopy]</span><br><span class=\"line\">interactive-timeout</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（5）创建管理mysql的用户mysql</span></span><br><span class=\"line\">[root@localhost mysql]# useradd mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（6）创建mysql相关数据目录，并修改文件权限</span></span><br><span class=\"line\">[root@localhost mysql]# mkdir data sql_log undo</span><br><span class=\"line\">[root@localhost mysql]# chown -R mysql:mysql data sql_log undo</span><br><span class=\"line\">[root@localhost mysql]# ll</span><br><span class=\"line\">total 300</span><br><span class=\"line\">drwxr-xr-x.  2  7161 31415   4096 Sep 14 01:50 bin</span><br><span class=\"line\">drwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 data</span><br><span class=\"line\">drwxr-xr-x.  2  7161 31415     55 Sep 14 01:50 docs</span><br><span class=\"line\">drwxr-xr-x.  3  7161 31415   4096 Sep 14 01:50 include</span><br><span class=\"line\">drwxr-xr-x.  6  7161 31415    201 Sep 14 01:50 lib</span><br><span class=\"line\">-rw-r--r--.  1  7161 31415 287627 Sep 14 00:15 LICENSE</span><br><span class=\"line\">drwxr-xr-x.  4  7161 31415     30 Sep 14 01:50 man</span><br><span class=\"line\">-rw-r--r--.  1  7161 31415    666 Sep 14 00:15 README</span><br><span class=\"line\">drwxr-xr-x. 28  7161 31415   4096 Sep 14 01:50 share</span><br><span class=\"line\">drwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 sql_log</span><br><span class=\"line\">drwxr-xr-x.  2  7161 31415     77 Sep 14 01:50 support-files</span><br><span class=\"line\">drwxr-xr-x.  2 mysql mysql      6 Oct 24 13:43 undo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（7）配置mysql的环境变量</span></span><br><span class=\"line\">[root@localhost mysql]# vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 /etc/profile 文件末尾添加如下内容</span></span><br><span class=\"line\">export PATH=$PATH:/usr/local/mysql/bin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql]# source /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（8）初始化mysql数据库</span></span><br><span class=\"line\">[root@localhost mysql]# mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证：数据库初始化成功后，会在data目录下有相关文件生成</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（9）拷贝数据库启动脚本</span></span><br><span class=\"line\">[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">至此，mysql数据库安装完成</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL-启动\"><a href=\"#MySQL-启动\" class=\"headerlink\" title=\"MySQL 启动\"></a>MySQL 启动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]# /etc/init.d/mysqld start</span><br><span class=\"line\">Starting MySQL.. SUCCESS!</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取mysql的初始密码</span><br><span class=\"line\">[root@localhost mysql]# grep password sql_log/mysql-error.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 登录mysql后，修改mysql的密码</span><br><span class=\"line\">mysql&gt; alter user user() identified by &#x27;root&#x27;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h1><ul>\n<li>业务分析    =》    逻辑设计    =》    数据类型    =》    对象命名    =》 建立库表</li>\n</ul>\n<h2 id=\"逻辑设计\"><a href=\"#逻辑设计\" class=\"headerlink\" title=\"逻辑设计\"></a>逻辑设计</h2><h3 id=\"宽表模式存在的问题\"><a href=\"#宽表模式存在的问题\" class=\"headerlink\" title=\"宽表模式存在的问题\"></a>宽表模式存在的问题</h3><ul>\n<li>宽表模式：指把所有需求字段设计在一张表中</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkqourzzp40.webp\" width=\"70%\">\n\n<br>\n\n<br>\n\n<h4 id=\"数据冗余\"><a href=\"#数据冗余\" class=\"headerlink\" title=\"数据冗余\"></a>数据冗余</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.693sty7axdk0.webp\" width=\"80%\">\n\n<br>\n\n<ul>\n<li>相同数据在一个表中出现了多次（增加数据占用空间）</li>\n<li>需要对数据进行多次维护（如果讲师的职位发生了变化，就需要对多条数据进行维护，如果有数据没有维护，就会导致数据不一致）</li>\n</ul>\n<br>\n\n<br>\n\n<h4 id=\"宽表模式的应用场景\"><a href=\"#宽表模式的应用场景\" class=\"headerlink\" title=\"宽表模式的应用场景\"></a>宽表模式的应用场景</h4><ul>\n<li>配合列存储的数据报表应用</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"数据库设计范式\"><a href=\"#数据库设计范式\" class=\"headerlink\" title=\"数据库设计范式\"></a>数据库设计范式</h2><ul>\n<li>第一范式：要求有主键，并且要求每一个字段原子性不可再分</li>\n<li>第二范式：表中必须存在业务主键，并且非主键全部依赖于业务主键</li>\n<li>第三范式：表中的非主键列之间不能相互依赖</li>\n</ul>\n<br>\n\n<br>\n\n<ul>\n<li>反反范式化设计<ul>\n<li>范式化设计存在的问题：为了满足范式化设计要求，我们对表拆分的很细。但是在查询时候关联的表会很多，影响性能</li>\n<li>为了提高查询性能，我们需要反范式化设计</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"物理设计\"><a href=\"#物理设计\" class=\"headerlink\" title=\"物理设计\"></a>物理设计</h2><h3 id=\"MySQL常见的存储引擎\"><a href=\"#MySQL常见的存储引擎\" class=\"headerlink\" title=\"MySQL常见的存储引擎\"></a>MySQL常见的存储引擎</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pqx87bjieq0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"InnoDB存储引擎的特点\"><a href=\"#InnoDB存储引擎的特点\" class=\"headerlink\" title=\"InnoDB存储引擎的特点\"></a>InnoDB存储引擎的特点</h3><ul>\n<li>事物型存储引擎支持ACID</li>\n<li>数据按主键聚集存储</li>\n<li>支持行级锁及MVCC</li>\n<li>支持Btree和自适应Hash索引</li>\n<li>支持全文和空间索引</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75n135ulfk00.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"实数类型\"><a href=\"#实数类型\" class=\"headerlink\" title=\"实数类型\"></a>实数类型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4d7mn2i88vq0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"常用时间类型\"><a href=\"#常用时间类型\" class=\"headerlink\" title=\"常用时间类型\"></a>常用时间类型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5e3m2d5s8yc0.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.618wwafqys00.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<h3 id=\"选择合适的数据类型\"><a href=\"#选择合适的数据类型\" class=\"headerlink\" title=\"选择合适的数据类型\"></a>选择合适的数据类型</h3><ul>\n<li>优先选择符合存储数据需求的最小数据类型</li>\n<li>谨慎使用ENUM,TEXT字符串类型</li>\n<li>同财务相关的数据类型，必须使用decimal类型</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"数据库对象命名原则\"><a href=\"#数据库对象命名原则\" class=\"headerlink\" title=\"数据库对象命名原则\"></a>数据库对象命名原则</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6bx7vkwrtgc0.webp\" width=\"60%\">\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.58c8x2q3kq80.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"MySQL-访问数据库\"><a href=\"#MySQL-访问数据库\" class=\"headerlink\" title=\"MySQL 访问数据库\"></a>MySQL 访问数据库</h1><h2 id=\"MySQL-访问异常处理\"><a href=\"#MySQL-访问异常处理\" class=\"headerlink\" title=\"MySQL 访问异常处理\"></a>MySQL 访问异常处理</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6si7f2uku6w0.webp\" width=\"80%\">\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4zrntdxrjtk0.webp\" width=\"80%\">\n\n<br>\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>数据类型这块还需要加强一下呢</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"80%\">\n\n<br>\n\n"},{"title":"《Nginx 核心知识 150 讲》study notes","author":"ratears","date":"2022-10-06T15:07:51.000Z","updated":"2022-10-06T15:07:51.000Z","_content":"\n# 初识Nginx\n\n## Nginx的三个主要应用场景\n\n- 静态资源服务\n  - 通过本地文件系统提供服务\n\n- 反向代理服务\n  - Nginx的强大性能\n  - 缓存\n  - 负载均衡\n\n- API服务\n  - OpenResty\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ie7urbi69s0.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n## Nginx出现的历史背景\n\n- 互联网的数据量快速增长\n  - 互联网的快速普及\n  - 全球化\n  - 物联网\n- 摩尔定律：性能提升\n- 低效的Apache\n  - 一个连接对应一个进程\n\n<br>\n\n<br>\n\n## Nginx的5个主要优点\n\n（1）高并发，高性能\n\n（2）可扩展性好\n\n（3）高可靠性\n\n（4）热部署\n\n（5）BSD许可证\n\n<br>\n\n<br>\n\n## Nginx的4个主要组成部分\n\n（1）Nginx 二进制可执行文件\n\n> 由各模块源码编译出的一个文件\n\n（2）Nginx.conf 配置文件\n\n> 控制 Nginx 的行为\n\n（3）access.log 访问日志\n\n> 记录每一条 http 请求信息\n\n（4）error.log 错误日志\n\n> 定位问题\n\n<br>\n\n<br>\n\n## Nginx的版本发布历史\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.cmiy02n409c.webp\" width=\"60%\">\n\n<br>\n\n- 开源免费的Nginx与商业版Nginx Plus\n- 阿里巴巴的Tengine\n- 免费OpenResty与商业版OpenResty\n\n<br>\n\n<br>\n\n## 编译Nginx\n\n- 如果要扩展第三方功能，可以使用编译方式安装nginx\n\n```shell\n# （1）下载nginx\nwget https://nginx.org/download/nginx-1.22.0.tar.gz\n\ntar -zxvf nginx-1.22.0.tar.gz\n\n# 安装相关依赖库\nyum install -y pcre pcre-devel gcc zlib zlib-devel\n\n# （2）编译安装\n[root@bogon nginx-1.22.0]# ./configure --prefix=/usr/local/nginx\n\n[root@bogon nginx-1.22.0]# make\n\n[root@bogon nginx-1.22.0]# make install\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1. 课程介绍中的问题\n> 2. \n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","source":"_posts/2022/《Nginx-核心知识-150-讲》study-notes.md","raw":"---\ntitle: 《Nginx 核心知识 150 讲》study notes\nauthor: ratears\ncategories:\n\t- [Nginx]\ntags:\n\t- Nginx\n\t- study-notes\ndate: 2022-10-06 23:07:51\nupdated: 2022-10-06 23:07:51\n---\n\n# 初识Nginx\n\n## Nginx的三个主要应用场景\n\n- 静态资源服务\n  - 通过本地文件系统提供服务\n\n- 反向代理服务\n  - Nginx的强大性能\n  - 缓存\n  - 负载均衡\n\n- API服务\n  - OpenResty\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ie7urbi69s0.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n## Nginx出现的历史背景\n\n- 互联网的数据量快速增长\n  - 互联网的快速普及\n  - 全球化\n  - 物联网\n- 摩尔定律：性能提升\n- 低效的Apache\n  - 一个连接对应一个进程\n\n<br>\n\n<br>\n\n## Nginx的5个主要优点\n\n（1）高并发，高性能\n\n（2）可扩展性好\n\n（3）高可靠性\n\n（4）热部署\n\n（5）BSD许可证\n\n<br>\n\n<br>\n\n## Nginx的4个主要组成部分\n\n（1）Nginx 二进制可执行文件\n\n> 由各模块源码编译出的一个文件\n\n（2）Nginx.conf 配置文件\n\n> 控制 Nginx 的行为\n\n（3）access.log 访问日志\n\n> 记录每一条 http 请求信息\n\n（4）error.log 错误日志\n\n> 定位问题\n\n<br>\n\n<br>\n\n## Nginx的版本发布历史\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.cmiy02n409c.webp\" width=\"60%\">\n\n<br>\n\n- 开源免费的Nginx与商业版Nginx Plus\n- 阿里巴巴的Tengine\n- 免费OpenResty与商业版OpenResty\n\n<br>\n\n<br>\n\n## 编译Nginx\n\n- 如果要扩展第三方功能，可以使用编译方式安装nginx\n\n```shell\n# （1）下载nginx\nwget https://nginx.org/download/nginx-1.22.0.tar.gz\n\ntar -zxvf nginx-1.22.0.tar.gz\n\n# 安装相关依赖库\nyum install -y pcre pcre-devel gcc zlib zlib-devel\n\n# （2）编译安装\n[root@bogon nginx-1.22.0]# ./configure --prefix=/usr/local/nginx\n\n[root@bogon nginx-1.22.0]# make\n\n[root@bogon nginx-1.22.0]# make install\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1. 课程介绍中的问题\n> 2. \n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","slug":"《Nginx-核心知识-150-讲》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsng0013dcta3t829c33","content":"<h1 id=\"初识Nginx\"><a href=\"#初识Nginx\" class=\"headerlink\" title=\"初识Nginx\"></a>初识Nginx</h1><h2 id=\"Nginx的三个主要应用场景\"><a href=\"#Nginx的三个主要应用场景\" class=\"headerlink\" title=\"Nginx的三个主要应用场景\"></a>Nginx的三个主要应用场景</h2><ul>\n<li><p>静态资源服务</p>\n<ul>\n<li>通过本地文件系统提供服务</li>\n</ul>\n</li>\n<li><p>反向代理服务</p>\n<ul>\n<li>Nginx的强大性能</li>\n<li>缓存</li>\n<li>负载均衡</li>\n</ul>\n</li>\n<li><p>API服务</p>\n<ul>\n<li>OpenResty</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ie7urbi69s0.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx出现的历史背景\"><a href=\"#Nginx出现的历史背景\" class=\"headerlink\" title=\"Nginx出现的历史背景\"></a>Nginx出现的历史背景</h2><ul>\n<li>互联网的数据量快速增长<ul>\n<li>互联网的快速普及</li>\n<li>全球化</li>\n<li>物联网</li>\n</ul>\n</li>\n<li>摩尔定律：性能提升</li>\n<li>低效的Apache<ul>\n<li>一个连接对应一个进程</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"Nginx的5个主要优点\"><a href=\"#Nginx的5个主要优点\" class=\"headerlink\" title=\"Nginx的5个主要优点\"></a>Nginx的5个主要优点</h2><p>（1）高并发，高性能</p>\n<p>（2）可扩展性好</p>\n<p>（3）高可靠性</p>\n<p>（4）热部署</p>\n<p>（5）BSD许可证</p>\n<br>\n\n<br>\n\n<h2 id=\"Nginx的4个主要组成部分\"><a href=\"#Nginx的4个主要组成部分\" class=\"headerlink\" title=\"Nginx的4个主要组成部分\"></a>Nginx的4个主要组成部分</h2><p>（1）Nginx 二进制可执行文件</p>\n<blockquote>\n<p>由各模块源码编译出的一个文件</p>\n</blockquote>\n<p>（2）Nginx.conf 配置文件</p>\n<blockquote>\n<p>控制 Nginx 的行为</p>\n</blockquote>\n<p>（3）access.log 访问日志</p>\n<blockquote>\n<p>记录每一条 http 请求信息</p>\n</blockquote>\n<p>（4）error.log 错误日志</p>\n<blockquote>\n<p>定位问题</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"Nginx的版本发布历史\"><a href=\"#Nginx的版本发布历史\" class=\"headerlink\" title=\"Nginx的版本发布历史\"></a>Nginx的版本发布历史</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.cmiy02n409c.webp\" width=\"60%\">\n\n<br>\n\n<ul>\n<li>开源免费的Nginx与商业版Nginx Plus</li>\n<li>阿里巴巴的Tengine</li>\n<li>免费OpenResty与商业版OpenResty</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"编译Nginx\"><a href=\"#编译Nginx\" class=\"headerlink\" title=\"编译Nginx\"></a>编译Nginx</h2><ul>\n<li>如果要扩展第三方功能，可以使用编译方式安装nginx</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）下载nginx</span></span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.22.0.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf nginx-1.22.0.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装相关依赖库</span></span><br><span class=\"line\">yum install -y pcre pcre-devel gcc zlib zlib-devel</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（2）编译安装</span></span><br><span class=\"line\">[root@bogon nginx-1.22.0]# ./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]# make</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]# make install</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>课程介绍中的问题</li>\n<li></li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"初识Nginx\"><a href=\"#初识Nginx\" class=\"headerlink\" title=\"初识Nginx\"></a>初识Nginx</h1><h2 id=\"Nginx的三个主要应用场景\"><a href=\"#Nginx的三个主要应用场景\" class=\"headerlink\" title=\"Nginx的三个主要应用场景\"></a>Nginx的三个主要应用场景</h2><ul>\n<li><p>静态资源服务</p>\n<ul>\n<li>通过本地文件系统提供服务</li>\n</ul>\n</li>\n<li><p>反向代理服务</p>\n<ul>\n<li>Nginx的强大性能</li>\n<li>缓存</li>\n<li>负载均衡</li>\n</ul>\n</li>\n<li><p>API服务</p>\n<ul>\n<li>OpenResty</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ie7urbi69s0.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx出现的历史背景\"><a href=\"#Nginx出现的历史背景\" class=\"headerlink\" title=\"Nginx出现的历史背景\"></a>Nginx出现的历史背景</h2><ul>\n<li>互联网的数据量快速增长<ul>\n<li>互联网的快速普及</li>\n<li>全球化</li>\n<li>物联网</li>\n</ul>\n</li>\n<li>摩尔定律：性能提升</li>\n<li>低效的Apache<ul>\n<li>一个连接对应一个进程</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"Nginx的5个主要优点\"><a href=\"#Nginx的5个主要优点\" class=\"headerlink\" title=\"Nginx的5个主要优点\"></a>Nginx的5个主要优点</h2><p>（1）高并发，高性能</p>\n<p>（2）可扩展性好</p>\n<p>（3）高可靠性</p>\n<p>（4）热部署</p>\n<p>（5）BSD许可证</p>\n<br>\n\n<br>\n\n<h2 id=\"Nginx的4个主要组成部分\"><a href=\"#Nginx的4个主要组成部分\" class=\"headerlink\" title=\"Nginx的4个主要组成部分\"></a>Nginx的4个主要组成部分</h2><p>（1）Nginx 二进制可执行文件</p>\n<blockquote>\n<p>由各模块源码编译出的一个文件</p>\n</blockquote>\n<p>（2）Nginx.conf 配置文件</p>\n<blockquote>\n<p>控制 Nginx 的行为</p>\n</blockquote>\n<p>（3）access.log 访问日志</p>\n<blockquote>\n<p>记录每一条 http 请求信息</p>\n</blockquote>\n<p>（4）error.log 错误日志</p>\n<blockquote>\n<p>定位问题</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"Nginx的版本发布历史\"><a href=\"#Nginx的版本发布历史\" class=\"headerlink\" title=\"Nginx的版本发布历史\"></a>Nginx的版本发布历史</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.cmiy02n409c.webp\" width=\"60%\">\n\n<br>\n\n<ul>\n<li>开源免费的Nginx与商业版Nginx Plus</li>\n<li>阿里巴巴的Tengine</li>\n<li>免费OpenResty与商业版OpenResty</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"编译Nginx\"><a href=\"#编译Nginx\" class=\"headerlink\" title=\"编译Nginx\"></a>编译Nginx</h2><ul>\n<li>如果要扩展第三方功能，可以使用编译方式安装nginx</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）下载nginx</span></span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.22.0.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf nginx-1.22.0.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装相关依赖库</span></span><br><span class=\"line\">yum install -y pcre pcre-devel gcc zlib zlib-devel</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（2）编译安装</span></span><br><span class=\"line\">[root@bogon nginx-1.22.0]# ./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]# make</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]# make install</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>课程介绍中的问题</li>\n<li></li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>"},{"title":"《Spring Data JPA 原理与实战》study notes","auth":"ratears","date":"2022-09-05T20:08:46.000Z","update":"2022-09-05T20:08:46.000Z","_content":"\n\n\n# Spring Data JPA基础知识\n\n## Spring Data JPA优势\n\n- 某些大公司的大部分项目都在用 Spring Data JPA，究其原因，主要缘于它具有以下 4 点优势\n\n### 第一，大势所趋，大厂必备技能\n\n> 近两年由于 Spring Cloud、Spring Boot 逐渐统一 Java 的框架江湖，而与 Spring Boot 天然集成的 Spring Data JPA 也逐渐走进了 Java 开发者的视野，大量尝鲜者享受到了这门技术带来的便利与功能。JPA 可以使团队在框架约定下进行开发，几乎很难出现有性能瓶颈的 SQL。因此你会发现很多大厂，如阿里、腾讯、抖音等公司，近几年在招聘的时候写明了要熟悉 JPA，这些大厂以及业内很多开源的新项目都在使用 JPA\n\n<br>\n\n### 第二，提升开发效率\n\n> 现在有很多人知道什么是 Spring Data JPA，但是却觉得 JPA 很难用，使用中发现 Bug 不知道原因，本来用 JPA 是为了提升开发效率的，不会使用反倒踩了很多坑，所以我们需要体系化地学习。当你遇到复杂问题，比如平时你可能要花几个小时去想方法名、SQL 逻辑，如果你可以熟练使用 JPA，那么半小时甚至几分钟就可以写好查询方法了；再配合测试用例，你的开发质量也会明显提高很多，系统地学习可以让你少走很多弯路\n\n<br>\n\n### 第三，提高技术水平\n\n> Spring Data 对数据操作进行了大统一，统一了抽象关系型数据库和非关系型数据的接口、公共的部分，你会发现当掌握了 Spring Data JPA 框架后，你的开发水平几乎可以达到——轻易实现 Redis、MongoDB 等 NoSQL 的操作，因为它们都有统一的 Spring Data Common。如下图所示，从中你可以看到 Spring Data 和 JPA 的全景位置关系，这样一来，你可以清楚地知道 JPA 的重要作用，方便你了解 JPA 的脉络，从而更好地学习\n\n\n\n<img src=\"https://git.poker/ratears/image-hosting/blob/main/blog-img-bed/image.55f368bvsmc0.webp?raw=true\" width=\"65%\" />\n\n<br>\n\n### 第四，求职加分项\n\n> 如果简历中突出 Spring Data JPA 框架的使用，面试官会眼前一亮。因为掌握了 JPA，就意味着掌握了很多原理，比如 Session 原理、事务原理、PersistenceContext 原理等，而掌握了底层原理对于技术人员来说可以在开发中解决很多问题。因此，公司可以由此更好地过滤和筛选人才，也能从侧面看出求职者是否对技术足够感兴趣、有追求\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 备注\n\n> 1. 第一篇需要动手跟着学习构建","source":"_posts/2022/《Spring-Data-JPA-原理与实战》study-notes.md","raw":"---\ntitle: 《Spring Data JPA 原理与实战》study notes\nauth: ratears\ndate: 2022-09-06 04:08:46\nupdate: 2022-09-06 04:08:46\ncategories:\n\t- [spring,jpa]\ntags:\n\t- jpa\n\t- spring\n---\n\n\n\n# Spring Data JPA基础知识\n\n## Spring Data JPA优势\n\n- 某些大公司的大部分项目都在用 Spring Data JPA，究其原因，主要缘于它具有以下 4 点优势\n\n### 第一，大势所趋，大厂必备技能\n\n> 近两年由于 Spring Cloud、Spring Boot 逐渐统一 Java 的框架江湖，而与 Spring Boot 天然集成的 Spring Data JPA 也逐渐走进了 Java 开发者的视野，大量尝鲜者享受到了这门技术带来的便利与功能。JPA 可以使团队在框架约定下进行开发，几乎很难出现有性能瓶颈的 SQL。因此你会发现很多大厂，如阿里、腾讯、抖音等公司，近几年在招聘的时候写明了要熟悉 JPA，这些大厂以及业内很多开源的新项目都在使用 JPA\n\n<br>\n\n### 第二，提升开发效率\n\n> 现在有很多人知道什么是 Spring Data JPA，但是却觉得 JPA 很难用，使用中发现 Bug 不知道原因，本来用 JPA 是为了提升开发效率的，不会使用反倒踩了很多坑，所以我们需要体系化地学习。当你遇到复杂问题，比如平时你可能要花几个小时去想方法名、SQL 逻辑，如果你可以熟练使用 JPA，那么半小时甚至几分钟就可以写好查询方法了；再配合测试用例，你的开发质量也会明显提高很多，系统地学习可以让你少走很多弯路\n\n<br>\n\n### 第三，提高技术水平\n\n> Spring Data 对数据操作进行了大统一，统一了抽象关系型数据库和非关系型数据的接口、公共的部分，你会发现当掌握了 Spring Data JPA 框架后，你的开发水平几乎可以达到——轻易实现 Redis、MongoDB 等 NoSQL 的操作，因为它们都有统一的 Spring Data Common。如下图所示，从中你可以看到 Spring Data 和 JPA 的全景位置关系，这样一来，你可以清楚地知道 JPA 的重要作用，方便你了解 JPA 的脉络，从而更好地学习\n\n\n\n<img src=\"https://git.poker/ratears/image-hosting/blob/main/blog-img-bed/image.55f368bvsmc0.webp?raw=true\" width=\"65%\" />\n\n<br>\n\n### 第四，求职加分项\n\n> 如果简历中突出 Spring Data JPA 框架的使用，面试官会眼前一亮。因为掌握了 JPA，就意味着掌握了很多原理，比如 Session 原理、事务原理、PersistenceContext 原理等，而掌握了底层原理对于技术人员来说可以在开发中解决很多问题。因此，公司可以由此更好地过滤和筛选人才，也能从侧面看出求职者是否对技术足够感兴趣、有追求\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 备注\n\n> 1. 第一篇需要动手跟着学习构建","slug":"《Spring-Data-JPA-原理与实战》study-notes","published":1,"updated":"2022-09-05T20:47:52.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnh0018dctagup2aezd","content":"<h1 id=\"Spring-Data-JPA基础知识\"><a href=\"#Spring-Data-JPA基础知识\" class=\"headerlink\" title=\"Spring Data JPA基础知识\"></a>Spring Data JPA基础知识</h1><h2 id=\"Spring-Data-JPA优势\"><a href=\"#Spring-Data-JPA优势\" class=\"headerlink\" title=\"Spring Data JPA优势\"></a>Spring Data JPA优势</h2><ul>\n<li>某些大公司的大部分项目都在用 Spring Data JPA，究其原因，主要缘于它具有以下 4 点优势</li>\n</ul>\n<h3 id=\"第一，大势所趋，大厂必备技能\"><a href=\"#第一，大势所趋，大厂必备技能\" class=\"headerlink\" title=\"第一，大势所趋，大厂必备技能\"></a>第一，大势所趋，大厂必备技能</h3><blockquote>\n<p>近两年由于 Spring Cloud、Spring Boot 逐渐统一 Java 的框架江湖，而与 Spring Boot 天然集成的 Spring Data JPA 也逐渐走进了 Java 开发者的视野，大量尝鲜者享受到了这门技术带来的便利与功能。JPA 可以使团队在框架约定下进行开发，几乎很难出现有性能瓶颈的 SQL。因此你会发现很多大厂，如阿里、腾讯、抖音等公司，近几年在招聘的时候写明了要熟悉 JPA，这些大厂以及业内很多开源的新项目都在使用 JPA</p>\n</blockquote>\n<br>\n\n<h3 id=\"第二，提升开发效率\"><a href=\"#第二，提升开发效率\" class=\"headerlink\" title=\"第二，提升开发效率\"></a>第二，提升开发效率</h3><blockquote>\n<p>现在有很多人知道什么是 Spring Data JPA，但是却觉得 JPA 很难用，使用中发现 Bug 不知道原因，本来用 JPA 是为了提升开发效率的，不会使用反倒踩了很多坑，所以我们需要体系化地学习。当你遇到复杂问题，比如平时你可能要花几个小时去想方法名、SQL 逻辑，如果你可以熟练使用 JPA，那么半小时甚至几分钟就可以写好查询方法了；再配合测试用例，你的开发质量也会明显提高很多，系统地学习可以让你少走很多弯路</p>\n</blockquote>\n<br>\n\n<h3 id=\"第三，提高技术水平\"><a href=\"#第三，提高技术水平\" class=\"headerlink\" title=\"第三，提高技术水平\"></a>第三，提高技术水平</h3><blockquote>\n<p>Spring Data 对数据操作进行了大统一，统一了抽象关系型数据库和非关系型数据的接口、公共的部分，你会发现当掌握了 Spring Data JPA 框架后，你的开发水平几乎可以达到——轻易实现 Redis、MongoDB 等 NoSQL 的操作，因为它们都有统一的 Spring Data Common。如下图所示，从中你可以看到 Spring Data 和 JPA 的全景位置关系，这样一来，你可以清楚地知道 JPA 的重要作用，方便你了解 JPA 的脉络，从而更好地学习</p>\n</blockquote>\n<img src=\"https://git.poker/ratears/image-hosting/blob/main/blog-img-bed/image.55f368bvsmc0.webp?raw=true\" width=\"65%\" />\n\n<br>\n\n<h3 id=\"第四，求职加分项\"><a href=\"#第四，求职加分项\" class=\"headerlink\" title=\"第四，求职加分项\"></a>第四，求职加分项</h3><blockquote>\n<p>如果简历中突出 Spring Data JPA 框架的使用，面试官会眼前一亮。因为掌握了 JPA，就意味着掌握了很多原理，比如 Session 原理、事务原理、PersistenceContext 原理等，而掌握了底层原理对于技术人员来说可以在开发中解决很多问题。因此，公司可以由此更好地过滤和筛选人才，也能从侧面看出求职者是否对技术足够感兴趣、有追求</p>\n</blockquote>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><blockquote>\n<ol>\n<li>第一篇需要动手跟着学习构建</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-Data-JPA基础知识\"><a href=\"#Spring-Data-JPA基础知识\" class=\"headerlink\" title=\"Spring Data JPA基础知识\"></a>Spring Data JPA基础知识</h1><h2 id=\"Spring-Data-JPA优势\"><a href=\"#Spring-Data-JPA优势\" class=\"headerlink\" title=\"Spring Data JPA优势\"></a>Spring Data JPA优势</h2><ul>\n<li>某些大公司的大部分项目都在用 Spring Data JPA，究其原因，主要缘于它具有以下 4 点优势</li>\n</ul>\n<h3 id=\"第一，大势所趋，大厂必备技能\"><a href=\"#第一，大势所趋，大厂必备技能\" class=\"headerlink\" title=\"第一，大势所趋，大厂必备技能\"></a>第一，大势所趋，大厂必备技能</h3><blockquote>\n<p>近两年由于 Spring Cloud、Spring Boot 逐渐统一 Java 的框架江湖，而与 Spring Boot 天然集成的 Spring Data JPA 也逐渐走进了 Java 开发者的视野，大量尝鲜者享受到了这门技术带来的便利与功能。JPA 可以使团队在框架约定下进行开发，几乎很难出现有性能瓶颈的 SQL。因此你会发现很多大厂，如阿里、腾讯、抖音等公司，近几年在招聘的时候写明了要熟悉 JPA，这些大厂以及业内很多开源的新项目都在使用 JPA</p>\n</blockquote>\n<br>\n\n<h3 id=\"第二，提升开发效率\"><a href=\"#第二，提升开发效率\" class=\"headerlink\" title=\"第二，提升开发效率\"></a>第二，提升开发效率</h3><blockquote>\n<p>现在有很多人知道什么是 Spring Data JPA，但是却觉得 JPA 很难用，使用中发现 Bug 不知道原因，本来用 JPA 是为了提升开发效率的，不会使用反倒踩了很多坑，所以我们需要体系化地学习。当你遇到复杂问题，比如平时你可能要花几个小时去想方法名、SQL 逻辑，如果你可以熟练使用 JPA，那么半小时甚至几分钟就可以写好查询方法了；再配合测试用例，你的开发质量也会明显提高很多，系统地学习可以让你少走很多弯路</p>\n</blockquote>\n<br>\n\n<h3 id=\"第三，提高技术水平\"><a href=\"#第三，提高技术水平\" class=\"headerlink\" title=\"第三，提高技术水平\"></a>第三，提高技术水平</h3><blockquote>\n<p>Spring Data 对数据操作进行了大统一，统一了抽象关系型数据库和非关系型数据的接口、公共的部分，你会发现当掌握了 Spring Data JPA 框架后，你的开发水平几乎可以达到——轻易实现 Redis、MongoDB 等 NoSQL 的操作，因为它们都有统一的 Spring Data Common。如下图所示，从中你可以看到 Spring Data 和 JPA 的全景位置关系，这样一来，你可以清楚地知道 JPA 的重要作用，方便你了解 JPA 的脉络，从而更好地学习</p>\n</blockquote>\n<img src=\"https://git.poker/ratears/image-hosting/blob/main/blog-img-bed/image.55f368bvsmc0.webp?raw=true\" width=\"65%\" />\n\n<br>\n\n<h3 id=\"第四，求职加分项\"><a href=\"#第四，求职加分项\" class=\"headerlink\" title=\"第四，求职加分项\"></a>第四，求职加分项</h3><blockquote>\n<p>如果简历中突出 Spring Data JPA 框架的使用，面试官会眼前一亮。因为掌握了 JPA，就意味着掌握了很多原理，比如 Session 原理、事务原理、PersistenceContext 原理等，而掌握了底层原理对于技术人员来说可以在开发中解决很多问题。因此，公司可以由此更好地过滤和筛选人才，也能从侧面看出求职者是否对技术足够感兴趣、有追求</p>\n</blockquote>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><blockquote>\n<ol>\n<li>第一篇需要动手跟着学习构建</li>\n</ol>\n</blockquote>\n"},{"title":"《Web 协议详解与抓包实战》study notes","author":"ratears","date":"2022-06-13T18:00:24.000Z","updated":"2022-06-13T18:00:24.000Z","_content":"\n\n\n# HTTP/1.1协议\n\n## 浏览器发起 HTTP 请求的典型场景\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4fdm1gdg9660.webp\" width=\"70%\">\n\n<br>\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5ln9wca3rqw0.webp\" width=\"70%\">\n\n<br>\n\n## Hypertext Transfer Protocol (HTTP) 协议\n\n- a stateless application-level request/response protocol that uses\n  extensible semantics and self-descriptive message payloads for flexible\n  interaction with network-based hypertext information systems\n  （RFC7230 2014.6）\n- 一种无状态的、应用层的、以请求/应答方式运行的协议，它使用可扩展的\n  语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动\n\n<br>\n\n## HTTP 协议格式\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.37se393k1h20.webp\" width=\"70%\">\n\n<br>\n\n## ABNF （扩充巴科斯-瑙尔范式）\n\n### 操作符\n\n- 空白字符：用来分隔定义中的各个元素\n  - method SP request-target SP HTTP-version CRLF\n- 选择 /：表示多个规则都是可供选择的规则\n  - start-line = request-line / status-line\n- 值范围 %c##-## ：\n  - OCTAL = “0” / “1” / “2” / “3” / “4” / “5” / “6” / “7” 与 OCTAL = %x30-37 等价\n- 序列组合 ()：将规则组合起来，视为单个元素\n- 不定量重复 m*n：\n  - 元素表示零个或更多元素： *( header-field CRLF )\n  - 1* 元素表示一个或更多元素，2*4 元素表示两个至四个元素\n- 可选序列 []：\n  - [ message-body ]\n\n<br>\n\n### 核心规则\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4p8vbzjyq9a0.webp\" width=\"80%\">\n\n<br>\n\n## 基于 ABNF 描述的 HTTP 协议格式\n\nHTTP-message = start-line *( header-field CRLF ) CRLF [ message-body ]\n\n- start-line = request-line / status-line\n  - request-line = method SP request-target SP HTTP-version CRLF\n  - status-line = HTTP-version SP status-code SP reason-phrase CRLF\n- header-field = field-name \":\" OWS field-value OWS\n  - OWS = *( SP / HTAB )\n  - field-name = token\n  - field-value = *( field-content / obs-fold )\n- message-body = *OCTET\n\n<br>\n\n## OSI（Open System Interconnection Reference Model）概念模型\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4zpowyuqy1o0.webp\" width=\"70%\">\n\n<br>\n\n## OSI 模型与 TCP/IP 模型对照\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7bh90wjw4980.webp\" width=\"70%\">\n\n\n\n## Wireshark 抓包及分析工具\n\n\n\n## 报文头部\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6w78b2tep5k0.webp\" width=\"70%\">\n\n## Roy Thomas Fielding 与 HTTP/1.1\n\n- 参与制订 HTTP/1.0 规范（1996.5）\n- 参与制订 URI 规范（1998.8）\n- 主导制订 HTTP/1.1 规范（1999.6）\n- 2000 年发布指导 HTTP/1.1 规范制订的论文\n  - 《Architectural Style and the Design of Network-based Software\n    Architectures》，即我们常谈的Representational State Transfer (REST)架构\n\n- Apache基金会（The Apache Software Foundation）共同创始人\n  - 参与开发Apache httpd服务\n\n## Form Follows Function：HTTP 协议为什么是现在这个样子\n\n- HTTP 协议\n\n  - Roy Thomas Fielding：HTTP 主要作者，REST 架构作者\n\n- URI：统一资源标识符\n\n  \n\n  <img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5k1vc39i85k0.webp\" width=\"70%\">\n\n  \n\n## HTTP 解决了什么问题？\n\n#### 解决 WWW 信息交互必须面对的需求：\n\n• 低门槛\n• 可扩展性：巨大的用户群体，超长的寿命\n• 分布式系统下的 Hypermedia：大粒度数据的网络传输\n• Internet 规模\n• 无法控制的 scalability\n• 不可预测的负载、非法格式的数据、恶意消息\n• 客户端不能保持所有服务器信息，服务器不能保持多个请求间的状态信息\n• 独立的组件部署：新老组件并存\n• 向前兼容：自 1993 年起 HTTP0.9\\1.0（1996）已经被广泛使用\n\n## 评估 Web 架构的关键属性\n\n### HTTP 协议应当在以下属性中取得可接受的均衡：\n\n1. 性能 Performance：影响高可用的关键因素\n2. 可伸缩性 Scalability：支持部署可以互相交互的大量组件\n3. 简单性 Simplicity：易理解、易实现、易验证\n4. 可见性 Visiable：对两个组件间的交互进行监视或者仲裁的能力。如缓存、分层设计等\n5. 可移植性 Portability：在不同的环境下运行的能力\n6. 可靠性 Reliability：出现部分故障时，对整体影响的程度\n7. 可修改性 Modifiability：对系统作出修改的难易程度，由可进化性、可定制性、可扩展\n   性、可配置性、可重用性构成\n\n<br>\n\n## 架构属性：性能\n\n- 网络性能 Network Performance\n  - Throughput 吞吐量：小于等于带宽 bandwidth\n  - Overhead 开销：首次开销，每次开销\n- 用户感知到的性能 User-perceived Performance\n  - Latency 延迟：发起请求到接收到响应的时间\n  - Completion 完成时间：完成一个应用动作所花费的时间\n- 网络效率 Network Efficiency\n  - 重用缓存、减少交互次数、数据传输距离更近、COD\n\n<br>\n\n## 架构属性：可修改性\n\n• 可进化性 Evolvability：一个组件独立升级而不影响其他组件\n• 可扩展性 Extensibility ：向系统添加功能，而不会影响到系统的其他部分\n• 可定制性 Customizability ：临时性、定制性地更改某一要素来提供服务，\n不对常规客户产生影响\n• 可配置性 Configurability ：应用部署后可通过修改配置提供新的功能\n• 可重用性 Reusabilit ：组件可以不做修改在其他应用在使用\n\n<br>\n\n## \n\n\n\n## 5 种架构风格\n\n- 数据流风格 Data-flow Styles\n  - 优点：简单性、可进化性、可扩展性、可配置性、可重用性\n- 复制风格 Replication Styles\n  - 优点：用户可察觉的性能、可伸缩性，网络效率、可靠性也可以提到提升\n- 分层风格 Hierarchical Styles\n  - 优点：简单性、可进化性、可伸缩性\n- 移动代码风格 Mobile Code Styles\n  - 优点：可移植性、可扩展性、网络效率\n- 点对点风格 Peer-to-Peer Styles\n  - 优点：可进化性、可重用性、可扩展性、可配置性\n\n<br>\n\n## Chrome 抓包：快速定位 HTTP 协议问题\n\n[chrome-devtools](https://developers.google.com/web/tools/chrome-devtools/network/)\n\n### Chrome 抓包：Network 面板\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.ae6gkxyy8ws.webp\" width=\"90%\">\n\n- 控制器：控制面板的外观与功能\n- 过滤器：过滤请求列表中显示的资源\n  - 按住 Command （Mac）或 Ctrl （Window / Linux），然后点击过滤器可以\n    同时选择多个过滤器\n- 概览：显示 HTTP 请求、响应的时间轴\n- 请求列表：默认时间排序，可选择显示列\n- 概要：请求总数、总数据量、总花费时间等\n\n### 控制器\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4sak4sx7bko0.webp\" width=\"60%\">\n\n### 过滤器：按类型\n\n- XHR、JS、CSS、Img、Media、Font、Doc、WS (WebSocket)、Manifest 或 Other\n  （此处未列出的任何其他类型）\n- 多类型，按住 Command (Mac) 或 Ctrl（Windows、Linux）\n- 按时间过滤：概览面板，拖动滚动条\n- 隐藏 Data URLs：CSS 图片等小文件以 BASE64 格式嵌入 HTML 中，以减少 HTTP\n  请求数\n\n### 过滤器：属性过滤\n\n- domain：仅显示来自指定域的资源。 您可以使用通配符字符 (*) 纳入多个域\n- has-response-header：显示包含指定 HTTP 响应标头的资源\n- is：使用 is:running 可以查找 WebSocket 资源，is:from-cache 可查找缓存读出的资源\n- larger-than： 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为\n  1k\n- method：显示通过指定 HTTP 方法类型检索的资源\n- mime-type：显示指定 MIME 类型的资源\n\n- mixed-content：显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源\n  (mixed-content:displayed)。\n- scheme：显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资\n  源。\n- set-cookie-domain：显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。\n- set-cookie-name：显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。\n- set-cookie-value：显示具有 Set-Cookie 标头并且值与指定值匹配的资源。\n- status-code：仅显示 HTTP 状态代码与指定代码匹配的资源。\n\n**多属性间通过空格实现 AND 操作**\n\n### 请求列表的排序\n\n- 时间排序，默认\n- 按列排序\n- 按活动时间排序\n  - Start Time：发出的第一个请求位于顶部\n  - Response Time：开始下载的第一个请求位于顶部\n  - End Time：完成的第一个请求位于顶部\n  - Total Duration：连接设置时间和请求/响应时间最短的请求位于顶部\n  - Latency：等待最短响应时间的请求位于顶部\n\n### 请求列表\n\n- Name : 资源的名称\n- Status : HTTP 状态代码\n- Type : 请求的资源的 MIME 类型\n- Initiator : 发起请求的对象或进程。它可能有以下几种值：\n  - Parser （解析器） : Chrome的 HTML 解析器发起了请求\n    - 鼠标悬停显示 JS 脚本\n  - Redirect （重定向） : HTTP 重定向启动了请求\n  - Script （脚本） : 脚本启动了请求\n  - Other （其他） : 一些其他进程或动作发起请求，例如用户点击链接跳转到\n    页面或在地址栏中输入网址\n- Size : 服务器返回的响应大小（包括头部和包体），可显示解压后大小\n- Time : 总持续时间，从请求的开始到接收响应中的最后一个字节\n- Waterfall：各请求相关活动的直观分析图\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.27b9wyvwjz9c.webp\" width=\"70%\">\n\n\n\n### 预览请求内容\n\n- 查看头部\n- 查看 cookie\n- 预览响应正文：查看图像用\n- 查看响应正文\n- 时间详细分布\n- 导出数据为 HAR 格式\n- 查看未压缩的资源大小：Use Large Request Rows\n\n\n\n- 浏览器加载时间（概览、概要、请求列表）\n  - DOMContentLoaded 事件的颜色设置为蓝色，而 load 事件设置为红色\n- 将请求数据复制到剪贴版\n  - Copy Link Address: 将请求的网址复制到剪贴板\n  - Copy Response: 将响应包体复制到剪贴板\n  - Copy as cURL: 以 cURL 命令形式复制请求\n  - Copy All as cURL: 以一系列 cURL 命令形式复制所有请求\n  - Copy All as HAR: 以 HAR 数据形式复制所有请求\n\n- 查看请求上下游：按住 shift 键悬停请求上，绿色是上游，红色是下游\n\n### 浏览器加载时间\n\n- 触发流程：\n  - 解析 HTML 结构\n  - 加载外部脚本和样式表文件\n  - 解析并执行脚本代码 // 部分脚本会阻塞页面的加载\n  - DOM 树构建完成 // DOMContentLoaded 事件\n  - 加载图片等外部文件\n  - 页面加载完毕 // load 事件\n\n### 请求时间详细分布\n\n- Queueing: 浏览器在以下情况下对请求排队\n  - 存在更高优先级的请求\n  - 此源已打开六个 TCP 连接，达到限值，仅适用于 HTTP/1.0 和 HTTP/1.1\n  - 浏览器正在短暂分配磁盘缓存中的空间\n- Stalled: 请求可能会因 Queueing 中描述的任何原因而停止\n- DNS Lookup: 浏览器正在解析请求的 IP 地址\n- Proxy Negotiation: 浏览器正在与代理服务器协商请求\n- Request sent: 正在发送请求\n- ServiceWorker Preparation: 浏览器正在启动 Service Worker\n- Request to ServiceWorker: 正在将请求发送到 Service Worker\n- Waiting (TTFB): 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte\n  （至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时\n  间\n- Content Download: 浏览器正在接收响应\n- Receiving Push: 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据\n- Reading Push: 浏览器正在读取之前收到的本地数据\n\n## URI的基本格式以及与URL的区别\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1. nginx -s 发送信号，做日志切割这个需要理解，需要了解课程中的日志切割shell\n> 2. 如何让配置文件语法高亮\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>\n\n","source":"_posts/2022/《Web-协议详解与抓包实战》study-notes.md","raw":"---\ntitle: 《Web 协议详解与抓包实战》study notes\nauthor: ratears\ndate: 2022-06-14 02:00:24\nupdated: 2022-06-14 02:00:24\ncategories:\n  - network\ntags:\n\t- wireshark\n\t- network\n\t- study-notes\n---\n\n\n\n# HTTP/1.1协议\n\n## 浏览器发起 HTTP 请求的典型场景\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4fdm1gdg9660.webp\" width=\"70%\">\n\n<br>\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5ln9wca3rqw0.webp\" width=\"70%\">\n\n<br>\n\n## Hypertext Transfer Protocol (HTTP) 协议\n\n- a stateless application-level request/response protocol that uses\n  extensible semantics and self-descriptive message payloads for flexible\n  interaction with network-based hypertext information systems\n  （RFC7230 2014.6）\n- 一种无状态的、应用层的、以请求/应答方式运行的协议，它使用可扩展的\n  语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动\n\n<br>\n\n## HTTP 协议格式\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.37se393k1h20.webp\" width=\"70%\">\n\n<br>\n\n## ABNF （扩充巴科斯-瑙尔范式）\n\n### 操作符\n\n- 空白字符：用来分隔定义中的各个元素\n  - method SP request-target SP HTTP-version CRLF\n- 选择 /：表示多个规则都是可供选择的规则\n  - start-line = request-line / status-line\n- 值范围 %c##-## ：\n  - OCTAL = “0” / “1” / “2” / “3” / “4” / “5” / “6” / “7” 与 OCTAL = %x30-37 等价\n- 序列组合 ()：将规则组合起来，视为单个元素\n- 不定量重复 m*n：\n  - 元素表示零个或更多元素： *( header-field CRLF )\n  - 1* 元素表示一个或更多元素，2*4 元素表示两个至四个元素\n- 可选序列 []：\n  - [ message-body ]\n\n<br>\n\n### 核心规则\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4p8vbzjyq9a0.webp\" width=\"80%\">\n\n<br>\n\n## 基于 ABNF 描述的 HTTP 协议格式\n\nHTTP-message = start-line *( header-field CRLF ) CRLF [ message-body ]\n\n- start-line = request-line / status-line\n  - request-line = method SP request-target SP HTTP-version CRLF\n  - status-line = HTTP-version SP status-code SP reason-phrase CRLF\n- header-field = field-name \":\" OWS field-value OWS\n  - OWS = *( SP / HTAB )\n  - field-name = token\n  - field-value = *( field-content / obs-fold )\n- message-body = *OCTET\n\n<br>\n\n## OSI（Open System Interconnection Reference Model）概念模型\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4zpowyuqy1o0.webp\" width=\"70%\">\n\n<br>\n\n## OSI 模型与 TCP/IP 模型对照\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7bh90wjw4980.webp\" width=\"70%\">\n\n\n\n## Wireshark 抓包及分析工具\n\n\n\n## 报文头部\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6w78b2tep5k0.webp\" width=\"70%\">\n\n## Roy Thomas Fielding 与 HTTP/1.1\n\n- 参与制订 HTTP/1.0 规范（1996.5）\n- 参与制订 URI 规范（1998.8）\n- 主导制订 HTTP/1.1 规范（1999.6）\n- 2000 年发布指导 HTTP/1.1 规范制订的论文\n  - 《Architectural Style and the Design of Network-based Software\n    Architectures》，即我们常谈的Representational State Transfer (REST)架构\n\n- Apache基金会（The Apache Software Foundation）共同创始人\n  - 参与开发Apache httpd服务\n\n## Form Follows Function：HTTP 协议为什么是现在这个样子\n\n- HTTP 协议\n\n  - Roy Thomas Fielding：HTTP 主要作者，REST 架构作者\n\n- URI：统一资源标识符\n\n  \n\n  <img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5k1vc39i85k0.webp\" width=\"70%\">\n\n  \n\n## HTTP 解决了什么问题？\n\n#### 解决 WWW 信息交互必须面对的需求：\n\n• 低门槛\n• 可扩展性：巨大的用户群体，超长的寿命\n• 分布式系统下的 Hypermedia：大粒度数据的网络传输\n• Internet 规模\n• 无法控制的 scalability\n• 不可预测的负载、非法格式的数据、恶意消息\n• 客户端不能保持所有服务器信息，服务器不能保持多个请求间的状态信息\n• 独立的组件部署：新老组件并存\n• 向前兼容：自 1993 年起 HTTP0.9\\1.0（1996）已经被广泛使用\n\n## 评估 Web 架构的关键属性\n\n### HTTP 协议应当在以下属性中取得可接受的均衡：\n\n1. 性能 Performance：影响高可用的关键因素\n2. 可伸缩性 Scalability：支持部署可以互相交互的大量组件\n3. 简单性 Simplicity：易理解、易实现、易验证\n4. 可见性 Visiable：对两个组件间的交互进行监视或者仲裁的能力。如缓存、分层设计等\n5. 可移植性 Portability：在不同的环境下运行的能力\n6. 可靠性 Reliability：出现部分故障时，对整体影响的程度\n7. 可修改性 Modifiability：对系统作出修改的难易程度，由可进化性、可定制性、可扩展\n   性、可配置性、可重用性构成\n\n<br>\n\n## 架构属性：性能\n\n- 网络性能 Network Performance\n  - Throughput 吞吐量：小于等于带宽 bandwidth\n  - Overhead 开销：首次开销，每次开销\n- 用户感知到的性能 User-perceived Performance\n  - Latency 延迟：发起请求到接收到响应的时间\n  - Completion 完成时间：完成一个应用动作所花费的时间\n- 网络效率 Network Efficiency\n  - 重用缓存、减少交互次数、数据传输距离更近、COD\n\n<br>\n\n## 架构属性：可修改性\n\n• 可进化性 Evolvability：一个组件独立升级而不影响其他组件\n• 可扩展性 Extensibility ：向系统添加功能，而不会影响到系统的其他部分\n• 可定制性 Customizability ：临时性、定制性地更改某一要素来提供服务，\n不对常规客户产生影响\n• 可配置性 Configurability ：应用部署后可通过修改配置提供新的功能\n• 可重用性 Reusabilit ：组件可以不做修改在其他应用在使用\n\n<br>\n\n## \n\n\n\n## 5 种架构风格\n\n- 数据流风格 Data-flow Styles\n  - 优点：简单性、可进化性、可扩展性、可配置性、可重用性\n- 复制风格 Replication Styles\n  - 优点：用户可察觉的性能、可伸缩性，网络效率、可靠性也可以提到提升\n- 分层风格 Hierarchical Styles\n  - 优点：简单性、可进化性、可伸缩性\n- 移动代码风格 Mobile Code Styles\n  - 优点：可移植性、可扩展性、网络效率\n- 点对点风格 Peer-to-Peer Styles\n  - 优点：可进化性、可重用性、可扩展性、可配置性\n\n<br>\n\n## Chrome 抓包：快速定位 HTTP 协议问题\n\n[chrome-devtools](https://developers.google.com/web/tools/chrome-devtools/network/)\n\n### Chrome 抓包：Network 面板\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.ae6gkxyy8ws.webp\" width=\"90%\">\n\n- 控制器：控制面板的外观与功能\n- 过滤器：过滤请求列表中显示的资源\n  - 按住 Command （Mac）或 Ctrl （Window / Linux），然后点击过滤器可以\n    同时选择多个过滤器\n- 概览：显示 HTTP 请求、响应的时间轴\n- 请求列表：默认时间排序，可选择显示列\n- 概要：请求总数、总数据量、总花费时间等\n\n### 控制器\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4sak4sx7bko0.webp\" width=\"60%\">\n\n### 过滤器：按类型\n\n- XHR、JS、CSS、Img、Media、Font、Doc、WS (WebSocket)、Manifest 或 Other\n  （此处未列出的任何其他类型）\n- 多类型，按住 Command (Mac) 或 Ctrl（Windows、Linux）\n- 按时间过滤：概览面板，拖动滚动条\n- 隐藏 Data URLs：CSS 图片等小文件以 BASE64 格式嵌入 HTML 中，以减少 HTTP\n  请求数\n\n### 过滤器：属性过滤\n\n- domain：仅显示来自指定域的资源。 您可以使用通配符字符 (*) 纳入多个域\n- has-response-header：显示包含指定 HTTP 响应标头的资源\n- is：使用 is:running 可以查找 WebSocket 资源，is:from-cache 可查找缓存读出的资源\n- larger-than： 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为\n  1k\n- method：显示通过指定 HTTP 方法类型检索的资源\n- mime-type：显示指定 MIME 类型的资源\n\n- mixed-content：显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源\n  (mixed-content:displayed)。\n- scheme：显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资\n  源。\n- set-cookie-domain：显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。\n- set-cookie-name：显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。\n- set-cookie-value：显示具有 Set-Cookie 标头并且值与指定值匹配的资源。\n- status-code：仅显示 HTTP 状态代码与指定代码匹配的资源。\n\n**多属性间通过空格实现 AND 操作**\n\n### 请求列表的排序\n\n- 时间排序，默认\n- 按列排序\n- 按活动时间排序\n  - Start Time：发出的第一个请求位于顶部\n  - Response Time：开始下载的第一个请求位于顶部\n  - End Time：完成的第一个请求位于顶部\n  - Total Duration：连接设置时间和请求/响应时间最短的请求位于顶部\n  - Latency：等待最短响应时间的请求位于顶部\n\n### 请求列表\n\n- Name : 资源的名称\n- Status : HTTP 状态代码\n- Type : 请求的资源的 MIME 类型\n- Initiator : 发起请求的对象或进程。它可能有以下几种值：\n  - Parser （解析器） : Chrome的 HTML 解析器发起了请求\n    - 鼠标悬停显示 JS 脚本\n  - Redirect （重定向） : HTTP 重定向启动了请求\n  - Script （脚本） : 脚本启动了请求\n  - Other （其他） : 一些其他进程或动作发起请求，例如用户点击链接跳转到\n    页面或在地址栏中输入网址\n- Size : 服务器返回的响应大小（包括头部和包体），可显示解压后大小\n- Time : 总持续时间，从请求的开始到接收响应中的最后一个字节\n- Waterfall：各请求相关活动的直观分析图\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.27b9wyvwjz9c.webp\" width=\"70%\">\n\n\n\n### 预览请求内容\n\n- 查看头部\n- 查看 cookie\n- 预览响应正文：查看图像用\n- 查看响应正文\n- 时间详细分布\n- 导出数据为 HAR 格式\n- 查看未压缩的资源大小：Use Large Request Rows\n\n\n\n- 浏览器加载时间（概览、概要、请求列表）\n  - DOMContentLoaded 事件的颜色设置为蓝色，而 load 事件设置为红色\n- 将请求数据复制到剪贴版\n  - Copy Link Address: 将请求的网址复制到剪贴板\n  - Copy Response: 将响应包体复制到剪贴板\n  - Copy as cURL: 以 cURL 命令形式复制请求\n  - Copy All as cURL: 以一系列 cURL 命令形式复制所有请求\n  - Copy All as HAR: 以 HAR 数据形式复制所有请求\n\n- 查看请求上下游：按住 shift 键悬停请求上，绿色是上游，红色是下游\n\n### 浏览器加载时间\n\n- 触发流程：\n  - 解析 HTML 结构\n  - 加载外部脚本和样式表文件\n  - 解析并执行脚本代码 // 部分脚本会阻塞页面的加载\n  - DOM 树构建完成 // DOMContentLoaded 事件\n  - 加载图片等外部文件\n  - 页面加载完毕 // load 事件\n\n### 请求时间详细分布\n\n- Queueing: 浏览器在以下情况下对请求排队\n  - 存在更高优先级的请求\n  - 此源已打开六个 TCP 连接，达到限值，仅适用于 HTTP/1.0 和 HTTP/1.1\n  - 浏览器正在短暂分配磁盘缓存中的空间\n- Stalled: 请求可能会因 Queueing 中描述的任何原因而停止\n- DNS Lookup: 浏览器正在解析请求的 IP 地址\n- Proxy Negotiation: 浏览器正在与代理服务器协商请求\n- Request sent: 正在发送请求\n- ServiceWorker Preparation: 浏览器正在启动 Service Worker\n- Request to ServiceWorker: 正在将请求发送到 Service Worker\n- Waiting (TTFB): 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte\n  （至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时\n  间\n- Content Download: 浏览器正在接收响应\n- Receiving Push: 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据\n- Reading Push: 浏览器正在读取之前收到的本地数据\n\n## URI的基本格式以及与URL的区别\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1. nginx -s 发送信号，做日志切割这个需要理解，需要了解课程中的日志切割shell\n> 2. 如何让配置文件语法高亮\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>\n\n","slug":"《Web-协议详解与抓包实战》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsni001bdctaeprm0y7b","content":"<h1 id=\"HTTP-1-1协议\"><a href=\"#HTTP-1-1协议\" class=\"headerlink\" title=\"HTTP/1.1协议\"></a>HTTP/1.1协议</h1><h2 id=\"浏览器发起-HTTP-请求的典型场景\"><a href=\"#浏览器发起-HTTP-请求的典型场景\" class=\"headerlink\" title=\"浏览器发起 HTTP 请求的典型场景\"></a>浏览器发起 HTTP 请求的典型场景</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4fdm1gdg9660.webp\" width=\"70%\">\n\n<br>\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5ln9wca3rqw0.webp\" width=\"70%\">\n\n<br>\n\n<h2 id=\"Hypertext-Transfer-Protocol-HTTP-协议\"><a href=\"#Hypertext-Transfer-Protocol-HTTP-协议\" class=\"headerlink\" title=\"Hypertext Transfer Protocol (HTTP) 协议\"></a>Hypertext Transfer Protocol (HTTP) 协议</h2><ul>\n<li>a stateless application-level request/response protocol that uses<br>extensible semantics and self-descriptive message payloads for flexible<br>interaction with network-based hypertext information systems<br>（RFC7230 2014.6）</li>\n<li>一种无状态的、应用层的、以请求/应答方式运行的协议，它使用可扩展的<br>语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动</li>\n</ul>\n<br>\n\n<h2 id=\"HTTP-协议格式\"><a href=\"#HTTP-协议格式\" class=\"headerlink\" title=\"HTTP 协议格式\"></a>HTTP 协议格式</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.37se393k1h20.webp\" width=\"70%\">\n\n<br>\n\n<h2 id=\"ABNF-（扩充巴科斯-瑙尔范式）\"><a href=\"#ABNF-（扩充巴科斯-瑙尔范式）\" class=\"headerlink\" title=\"ABNF （扩充巴科斯-瑙尔范式）\"></a>ABNF （扩充巴科斯-瑙尔范式）</h2><h3 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h3><ul>\n<li>空白字符：用来分隔定义中的各个元素<ul>\n<li>method SP request-target SP HTTP-version CRLF</li>\n</ul>\n</li>\n<li>选择 /：表示多个规则都是可供选择的规则<ul>\n<li>start-line = request-line / status-line</li>\n</ul>\n</li>\n<li>值范围 %c##-## ：<ul>\n<li>OCTAL = “0” / “1” / “2” / “3” / “4” / “5” / “6” / “7” 与 OCTAL = %x30-37 等价</li>\n</ul>\n</li>\n<li>序列组合 ()：将规则组合起来，视为单个元素</li>\n<li>不定量重复 m*n：<ul>\n<li>元素表示零个或更多元素： *( header-field CRLF )</li>\n<li>1* 元素表示一个或更多元素，2*4 元素表示两个至四个元素</li>\n</ul>\n</li>\n<li>可选序列 []：<ul>\n<li>[ message-body ]</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"核心规则\"><a href=\"#核心规则\" class=\"headerlink\" title=\"核心规则\"></a>核心规则</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4p8vbzjyq9a0.webp\" width=\"80%\">\n\n<br>\n\n<h2 id=\"基于-ABNF-描述的-HTTP-协议格式\"><a href=\"#基于-ABNF-描述的-HTTP-协议格式\" class=\"headerlink\" title=\"基于 ABNF 描述的 HTTP 协议格式\"></a>基于 ABNF 描述的 HTTP 协议格式</h2><p>HTTP-message = start-line *( header-field CRLF ) CRLF [ message-body ]</p>\n<ul>\n<li>start-line = request-line / status-line<ul>\n<li>request-line = method SP request-target SP HTTP-version CRLF</li>\n<li>status-line = HTTP-version SP status-code SP reason-phrase CRLF</li>\n</ul>\n</li>\n<li>header-field = field-name “:” OWS field-value OWS<ul>\n<li>OWS = *( SP / HTAB )</li>\n<li>field-name = token</li>\n<li>field-value = *( field-content / obs-fold )</li>\n</ul>\n</li>\n<li>message-body = *OCTET</li>\n</ul>\n<br>\n\n<h2 id=\"OSI（Open-System-Interconnection-Reference-Model）概念模型\"><a href=\"#OSI（Open-System-Interconnection-Reference-Model）概念模型\" class=\"headerlink\" title=\"OSI（Open System Interconnection Reference Model）概念模型\"></a>OSI（Open System Interconnection Reference Model）概念模型</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4zpowyuqy1o0.webp\" width=\"70%\">\n\n<br>\n\n<h2 id=\"OSI-模型与-TCP-IP-模型对照\"><a href=\"#OSI-模型与-TCP-IP-模型对照\" class=\"headerlink\" title=\"OSI 模型与 TCP/IP 模型对照\"></a>OSI 模型与 TCP/IP 模型对照</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7bh90wjw4980.webp\" width=\"70%\">\n\n\n\n<h2 id=\"Wireshark-抓包及分析工具\"><a href=\"#Wireshark-抓包及分析工具\" class=\"headerlink\" title=\"Wireshark 抓包及分析工具\"></a>Wireshark 抓包及分析工具</h2><h2 id=\"报文头部\"><a href=\"#报文头部\" class=\"headerlink\" title=\"报文头部\"></a>报文头部</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6w78b2tep5k0.webp\" width=\"70%\">\n\n<h2 id=\"Roy-Thomas-Fielding-与-HTTP-1-1\"><a href=\"#Roy-Thomas-Fielding-与-HTTP-1-1\" class=\"headerlink\" title=\"Roy Thomas Fielding 与 HTTP/1.1\"></a>Roy Thomas Fielding 与 HTTP/1.1</h2><ul>\n<li><p>参与制订 HTTP/1.0 规范（1996.5）</p>\n</li>\n<li><p>参与制订 URI 规范（1998.8）</p>\n</li>\n<li><p>主导制订 HTTP/1.1 规范（1999.6）</p>\n</li>\n<li><p>2000 年发布指导 HTTP/1.1 规范制订的论文</p>\n<ul>\n<li>《Architectural Style and the Design of Network-based Software<br>Architectures》，即我们常谈的Representational State Transfer (REST)架构</li>\n</ul>\n</li>\n<li><p>Apache基金会（The Apache Software Foundation）共同创始人</p>\n<ul>\n<li>参与开发Apache httpd服务</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Form-Follows-Function：HTTP-协议为什么是现在这个样子\"><a href=\"#Form-Follows-Function：HTTP-协议为什么是现在这个样子\" class=\"headerlink\" title=\"Form Follows Function：HTTP 协议为什么是现在这个样子\"></a>Form Follows Function：HTTP 协议为什么是现在这个样子</h2><ul>\n<li><p>HTTP 协议</p>\n<ul>\n<li>Roy Thomas Fielding：HTTP 主要作者，REST 架构作者</li>\n</ul>\n</li>\n<li><p>URI：统一资源标识符</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5k1vc39i85k0.webp\" width=\"70%\"></li>\n</ul>\n<h2 id=\"HTTP-解决了什么问题？\"><a href=\"#HTTP-解决了什么问题？\" class=\"headerlink\" title=\"HTTP 解决了什么问题？\"></a>HTTP 解决了什么问题？</h2><h4 id=\"解决-WWW-信息交互必须面对的需求：\"><a href=\"#解决-WWW-信息交互必须面对的需求：\" class=\"headerlink\" title=\"解决 WWW 信息交互必须面对的需求：\"></a>解决 WWW 信息交互必须面对的需求：</h4><p>• 低门槛<br>• 可扩展性：巨大的用户群体，超长的寿命<br>• 分布式系统下的 Hypermedia：大粒度数据的网络传输<br>• Internet 规模<br>• 无法控制的 scalability<br>• 不可预测的负载、非法格式的数据、恶意消息<br>• 客户端不能保持所有服务器信息，服务器不能保持多个请求间的状态信息<br>• 独立的组件部署：新老组件并存<br>• 向前兼容：自 1993 年起 HTTP0.9\\1.0（1996）已经被广泛使用</p>\n<h2 id=\"评估-Web-架构的关键属性\"><a href=\"#评估-Web-架构的关键属性\" class=\"headerlink\" title=\"评估 Web 架构的关键属性\"></a>评估 Web 架构的关键属性</h2><h3 id=\"HTTP-协议应当在以下属性中取得可接受的均衡：\"><a href=\"#HTTP-协议应当在以下属性中取得可接受的均衡：\" class=\"headerlink\" title=\"HTTP 协议应当在以下属性中取得可接受的均衡：\"></a>HTTP 协议应当在以下属性中取得可接受的均衡：</h3><ol>\n<li>性能 Performance：影响高可用的关键因素</li>\n<li>可伸缩性 Scalability：支持部署可以互相交互的大量组件</li>\n<li>简单性 Simplicity：易理解、易实现、易验证</li>\n<li>可见性 Visiable：对两个组件间的交互进行监视或者仲裁的能力。如缓存、分层设计等</li>\n<li>可移植性 Portability：在不同的环境下运行的能力</li>\n<li>可靠性 Reliability：出现部分故障时，对整体影响的程度</li>\n<li>可修改性 Modifiability：对系统作出修改的难易程度，由可进化性、可定制性、可扩展<br>性、可配置性、可重用性构成</li>\n</ol>\n<br>\n\n<h2 id=\"架构属性：性能\"><a href=\"#架构属性：性能\" class=\"headerlink\" title=\"架构属性：性能\"></a>架构属性：性能</h2><ul>\n<li>网络性能 Network Performance<ul>\n<li>Throughput 吞吐量：小于等于带宽 bandwidth</li>\n<li>Overhead 开销：首次开销，每次开销</li>\n</ul>\n</li>\n<li>用户感知到的性能 User-perceived Performance<ul>\n<li>Latency 延迟：发起请求到接收到响应的时间</li>\n<li>Completion 完成时间：完成一个应用动作所花费的时间</li>\n</ul>\n</li>\n<li>网络效率 Network Efficiency<ul>\n<li>重用缓存、减少交互次数、数据传输距离更近、COD</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h2 id=\"架构属性：可修改性\"><a href=\"#架构属性：可修改性\" class=\"headerlink\" title=\"架构属性：可修改性\"></a>架构属性：可修改性</h2><p>• 可进化性 Evolvability：一个组件独立升级而不影响其他组件<br>• 可扩展性 Extensibility ：向系统添加功能，而不会影响到系统的其他部分<br>• 可定制性 Customizability ：临时性、定制性地更改某一要素来提供服务，<br>不对常规客户产生影响<br>• 可配置性 Configurability ：应用部署后可通过修改配置提供新的功能<br>• 可重用性 Reusabilit ：组件可以不做修改在其他应用在使用</p>\n<br>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"5-种架构风格\"><a href=\"#5-种架构风格\" class=\"headerlink\" title=\"5 种架构风格\"></a>5 种架构风格</h2><ul>\n<li>数据流风格 Data-flow Styles<ul>\n<li>优点：简单性、可进化性、可扩展性、可配置性、可重用性</li>\n</ul>\n</li>\n<li>复制风格 Replication Styles<ul>\n<li>优点：用户可察觉的性能、可伸缩性，网络效率、可靠性也可以提到提升</li>\n</ul>\n</li>\n<li>分层风格 Hierarchical Styles<ul>\n<li>优点：简单性、可进化性、可伸缩性</li>\n</ul>\n</li>\n<li>移动代码风格 Mobile Code Styles<ul>\n<li>优点：可移植性、可扩展性、网络效率</li>\n</ul>\n</li>\n<li>点对点风格 Peer-to-Peer Styles<ul>\n<li>优点：可进化性、可重用性、可扩展性、可配置性</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h2 id=\"Chrome-抓包：快速定位-HTTP-协议问题\"><a href=\"#Chrome-抓包：快速定位-HTTP-协议问题\" class=\"headerlink\" title=\"Chrome 抓包：快速定位 HTTP 协议问题\"></a>Chrome 抓包：快速定位 HTTP 协议问题</h2><p><a class=\"link\"   href=\"https://developers.google.com/web/tools/chrome-devtools/network/\" >chrome-devtools<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Chrome-抓包：Network-面板\"><a href=\"#Chrome-抓包：Network-面板\" class=\"headerlink\" title=\"Chrome 抓包：Network 面板\"></a>Chrome 抓包：Network 面板</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.ae6gkxyy8ws.webp\" width=\"90%\">\n\n<ul>\n<li>控制器：控制面板的外观与功能</li>\n<li>过滤器：过滤请求列表中显示的资源<ul>\n<li>按住 Command （Mac）或 Ctrl （Window / Linux），然后点击过滤器可以<br>同时选择多个过滤器</li>\n</ul>\n</li>\n<li>概览：显示 HTTP 请求、响应的时间轴</li>\n<li>请求列表：默认时间排序，可选择显示列</li>\n<li>概要：请求总数、总数据量、总花费时间等</li>\n</ul>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4sak4sx7bko0.webp\" width=\"60%\">\n\n<h3 id=\"过滤器：按类型\"><a href=\"#过滤器：按类型\" class=\"headerlink\" title=\"过滤器：按类型\"></a>过滤器：按类型</h3><ul>\n<li>XHR、JS、CSS、Img、Media、Font、Doc、WS (WebSocket)、Manifest 或 Other<br>（此处未列出的任何其他类型）</li>\n<li>多类型，按住 Command (Mac) 或 Ctrl（Windows、Linux）</li>\n<li>按时间过滤：概览面板，拖动滚动条</li>\n<li>隐藏 Data URLs：CSS 图片等小文件以 BASE64 格式嵌入 HTML 中，以减少 HTTP<br>请求数</li>\n</ul>\n<h3 id=\"过滤器：属性过滤\"><a href=\"#过滤器：属性过滤\" class=\"headerlink\" title=\"过滤器：属性过滤\"></a>过滤器：属性过滤</h3><ul>\n<li><p>domain：仅显示来自指定域的资源。 您可以使用通配符字符 (*) 纳入多个域</p>\n</li>\n<li><p>has-response-header：显示包含指定 HTTP 响应标头的资源</p>\n</li>\n<li><p>is：使用 is:running 可以查找 WebSocket 资源，is:from-cache 可查找缓存读出的资源</p>\n</li>\n<li><p>larger-than： 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为<br>1k</p>\n</li>\n<li><p>method：显示通过指定 HTTP 方法类型检索的资源</p>\n</li>\n<li><p>mime-type：显示指定 MIME 类型的资源</p>\n</li>\n<li><p>mixed-content：显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源<br>(mixed-content:displayed)。</p>\n</li>\n<li><p>scheme：显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资<br>源。</p>\n</li>\n<li><p>set-cookie-domain：显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。</p>\n</li>\n<li><p>set-cookie-name：显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。</p>\n</li>\n<li><p>set-cookie-value：显示具有 Set-Cookie 标头并且值与指定值匹配的资源。</p>\n</li>\n<li><p>status-code：仅显示 HTTP 状态代码与指定代码匹配的资源。</p>\n</li>\n</ul>\n<p><strong>多属性间通过空格实现 AND 操作</strong></p>\n<h3 id=\"请求列表的排序\"><a href=\"#请求列表的排序\" class=\"headerlink\" title=\"请求列表的排序\"></a>请求列表的排序</h3><ul>\n<li>时间排序，默认</li>\n<li>按列排序</li>\n<li>按活动时间排序<ul>\n<li>Start Time：发出的第一个请求位于顶部</li>\n<li>Response Time：开始下载的第一个请求位于顶部</li>\n<li>End Time：完成的第一个请求位于顶部</li>\n<li>Total Duration：连接设置时间和请求/响应时间最短的请求位于顶部</li>\n<li>Latency：等待最短响应时间的请求位于顶部</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"请求列表\"><a href=\"#请求列表\" class=\"headerlink\" title=\"请求列表\"></a>请求列表</h3><ul>\n<li>Name : 资源的名称</li>\n<li>Status : HTTP 状态代码</li>\n<li>Type : 请求的资源的 MIME 类型</li>\n<li>Initiator : 发起请求的对象或进程。它可能有以下几种值：<ul>\n<li>Parser （解析器） : Chrome的 HTML 解析器发起了请求<ul>\n<li>鼠标悬停显示 JS 脚本</li>\n</ul>\n</li>\n<li>Redirect （重定向） : HTTP 重定向启动了请求</li>\n<li>Script （脚本） : 脚本启动了请求</li>\n<li>Other （其他） : 一些其他进程或动作发起请求，例如用户点击链接跳转到<br>页面或在地址栏中输入网址</li>\n</ul>\n</li>\n<li>Size : 服务器返回的响应大小（包括头部和包体），可显示解压后大小</li>\n<li>Time : 总持续时间，从请求的开始到接收响应中的最后一个字节</li>\n<li>Waterfall：各请求相关活动的直观分析图</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.27b9wyvwjz9c.webp\" width=\"70%\">\n\n\n\n<h3 id=\"预览请求内容\"><a href=\"#预览请求内容\" class=\"headerlink\" title=\"预览请求内容\"></a>预览请求内容</h3><ul>\n<li>查看头部</li>\n<li>查看 cookie</li>\n<li>预览响应正文：查看图像用</li>\n<li>查看响应正文</li>\n<li>时间详细分布</li>\n<li>导出数据为 HAR 格式</li>\n<li>查看未压缩的资源大小：Use Large Request Rows</li>\n</ul>\n<ul>\n<li><p>浏览器加载时间（概览、概要、请求列表）</p>\n<ul>\n<li>DOMContentLoaded 事件的颜色设置为蓝色，而 load 事件设置为红色</li>\n</ul>\n</li>\n<li><p>将请求数据复制到剪贴版</p>\n<ul>\n<li>Copy Link Address: 将请求的网址复制到剪贴板</li>\n<li>Copy Response: 将响应包体复制到剪贴板</li>\n<li>Copy as cURL: 以 cURL 命令形式复制请求</li>\n<li>Copy All as cURL: 以一系列 cURL 命令形式复制所有请求</li>\n<li>Copy All as HAR: 以 HAR 数据形式复制所有请求</li>\n</ul>\n</li>\n<li><p>查看请求上下游：按住 shift 键悬停请求上，绿色是上游，红色是下游</p>\n</li>\n</ul>\n<h3 id=\"浏览器加载时间\"><a href=\"#浏览器加载时间\" class=\"headerlink\" title=\"浏览器加载时间\"></a>浏览器加载时间</h3><ul>\n<li>触发流程：<ul>\n<li>解析 HTML 结构</li>\n<li>加载外部脚本和样式表文件</li>\n<li>解析并执行脚本代码 // 部分脚本会阻塞页面的加载</li>\n<li>DOM 树构建完成 // DOMContentLoaded 事件</li>\n<li>加载图片等外部文件</li>\n<li>页面加载完毕 // load 事件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"请求时间详细分布\"><a href=\"#请求时间详细分布\" class=\"headerlink\" title=\"请求时间详细分布\"></a>请求时间详细分布</h3><ul>\n<li>Queueing: 浏览器在以下情况下对请求排队<ul>\n<li>存在更高优先级的请求</li>\n<li>此源已打开六个 TCP 连接，达到限值，仅适用于 HTTP/1.0 和 HTTP/1.1</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled: 请求可能会因 Queueing 中描述的任何原因而停止</li>\n<li>DNS Lookup: 浏览器正在解析请求的 IP 地址</li>\n<li>Proxy Negotiation: 浏览器正在与代理服务器协商请求</li>\n<li>Request sent: 正在发送请求</li>\n<li>ServiceWorker Preparation: 浏览器正在启动 Service Worker</li>\n<li>Request to ServiceWorker: 正在将请求发送到 Service Worker</li>\n<li>Waiting (TTFB): 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte<br>（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时<br>间</li>\n<li>Content Download: 浏览器正在接收响应</li>\n<li>Receiving Push: 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据</li>\n<li>Reading Push: 浏览器正在读取之前收到的本地数据</li>\n</ul>\n<h2 id=\"URI的基本格式以及与URL的区别\"><a href=\"#URI的基本格式以及与URL的区别\" class=\"headerlink\" title=\"URI的基本格式以及与URL的区别\"></a>URI的基本格式以及与URL的区别</h2><br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>nginx -s 发送信号，做日志切割这个需要理解，需要了解课程中的日志切割shell</li>\n<li>如何让配置文件语法高亮</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTTP-1-1协议\"><a href=\"#HTTP-1-1协议\" class=\"headerlink\" title=\"HTTP/1.1协议\"></a>HTTP/1.1协议</h1><h2 id=\"浏览器发起-HTTP-请求的典型场景\"><a href=\"#浏览器发起-HTTP-请求的典型场景\" class=\"headerlink\" title=\"浏览器发起 HTTP 请求的典型场景\"></a>浏览器发起 HTTP 请求的典型场景</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4fdm1gdg9660.webp\" width=\"70%\">\n\n<br>\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5ln9wca3rqw0.webp\" width=\"70%\">\n\n<br>\n\n<h2 id=\"Hypertext-Transfer-Protocol-HTTP-协议\"><a href=\"#Hypertext-Transfer-Protocol-HTTP-协议\" class=\"headerlink\" title=\"Hypertext Transfer Protocol (HTTP) 协议\"></a>Hypertext Transfer Protocol (HTTP) 协议</h2><ul>\n<li>a stateless application-level request/response protocol that uses<br>extensible semantics and self-descriptive message payloads for flexible<br>interaction with network-based hypertext information systems<br>（RFC7230 2014.6）</li>\n<li>一种无状态的、应用层的、以请求/应答方式运行的协议，它使用可扩展的<br>语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动</li>\n</ul>\n<br>\n\n<h2 id=\"HTTP-协议格式\"><a href=\"#HTTP-协议格式\" class=\"headerlink\" title=\"HTTP 协议格式\"></a>HTTP 协议格式</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.37se393k1h20.webp\" width=\"70%\">\n\n<br>\n\n<h2 id=\"ABNF-（扩充巴科斯-瑙尔范式）\"><a href=\"#ABNF-（扩充巴科斯-瑙尔范式）\" class=\"headerlink\" title=\"ABNF （扩充巴科斯-瑙尔范式）\"></a>ABNF （扩充巴科斯-瑙尔范式）</h2><h3 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h3><ul>\n<li>空白字符：用来分隔定义中的各个元素<ul>\n<li>method SP request-target SP HTTP-version CRLF</li>\n</ul>\n</li>\n<li>选择 /：表示多个规则都是可供选择的规则<ul>\n<li>start-line = request-line / status-line</li>\n</ul>\n</li>\n<li>值范围 %c##-## ：<ul>\n<li>OCTAL = “0” / “1” / “2” / “3” / “4” / “5” / “6” / “7” 与 OCTAL = %x30-37 等价</li>\n</ul>\n</li>\n<li>序列组合 ()：将规则组合起来，视为单个元素</li>\n<li>不定量重复 m*n：<ul>\n<li>元素表示零个或更多元素： *( header-field CRLF )</li>\n<li>1* 元素表示一个或更多元素，2*4 元素表示两个至四个元素</li>\n</ul>\n</li>\n<li>可选序列 []：<ul>\n<li>[ message-body ]</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"核心规则\"><a href=\"#核心规则\" class=\"headerlink\" title=\"核心规则\"></a>核心规则</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4p8vbzjyq9a0.webp\" width=\"80%\">\n\n<br>\n\n<h2 id=\"基于-ABNF-描述的-HTTP-协议格式\"><a href=\"#基于-ABNF-描述的-HTTP-协议格式\" class=\"headerlink\" title=\"基于 ABNF 描述的 HTTP 协议格式\"></a>基于 ABNF 描述的 HTTP 协议格式</h2><p>HTTP-message = start-line *( header-field CRLF ) CRLF [ message-body ]</p>\n<ul>\n<li>start-line = request-line / status-line<ul>\n<li>request-line = method SP request-target SP HTTP-version CRLF</li>\n<li>status-line = HTTP-version SP status-code SP reason-phrase CRLF</li>\n</ul>\n</li>\n<li>header-field = field-name “:” OWS field-value OWS<ul>\n<li>OWS = *( SP / HTAB )</li>\n<li>field-name = token</li>\n<li>field-value = *( field-content / obs-fold )</li>\n</ul>\n</li>\n<li>message-body = *OCTET</li>\n</ul>\n<br>\n\n<h2 id=\"OSI（Open-System-Interconnection-Reference-Model）概念模型\"><a href=\"#OSI（Open-System-Interconnection-Reference-Model）概念模型\" class=\"headerlink\" title=\"OSI（Open System Interconnection Reference Model）概念模型\"></a>OSI（Open System Interconnection Reference Model）概念模型</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4zpowyuqy1o0.webp\" width=\"70%\">\n\n<br>\n\n<h2 id=\"OSI-模型与-TCP-IP-模型对照\"><a href=\"#OSI-模型与-TCP-IP-模型对照\" class=\"headerlink\" title=\"OSI 模型与 TCP/IP 模型对照\"></a>OSI 模型与 TCP/IP 模型对照</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.7bh90wjw4980.webp\" width=\"70%\">\n\n\n\n<h2 id=\"Wireshark-抓包及分析工具\"><a href=\"#Wireshark-抓包及分析工具\" class=\"headerlink\" title=\"Wireshark 抓包及分析工具\"></a>Wireshark 抓包及分析工具</h2><h2 id=\"报文头部\"><a href=\"#报文头部\" class=\"headerlink\" title=\"报文头部\"></a>报文头部</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.6w78b2tep5k0.webp\" width=\"70%\">\n\n<h2 id=\"Roy-Thomas-Fielding-与-HTTP-1-1\"><a href=\"#Roy-Thomas-Fielding-与-HTTP-1-1\" class=\"headerlink\" title=\"Roy Thomas Fielding 与 HTTP/1.1\"></a>Roy Thomas Fielding 与 HTTP/1.1</h2><ul>\n<li><p>参与制订 HTTP/1.0 规范（1996.5）</p>\n</li>\n<li><p>参与制订 URI 规范（1998.8）</p>\n</li>\n<li><p>主导制订 HTTP/1.1 规范（1999.6）</p>\n</li>\n<li><p>2000 年发布指导 HTTP/1.1 规范制订的论文</p>\n<ul>\n<li>《Architectural Style and the Design of Network-based Software<br>Architectures》，即我们常谈的Representational State Transfer (REST)架构</li>\n</ul>\n</li>\n<li><p>Apache基金会（The Apache Software Foundation）共同创始人</p>\n<ul>\n<li>参与开发Apache httpd服务</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Form-Follows-Function：HTTP-协议为什么是现在这个样子\"><a href=\"#Form-Follows-Function：HTTP-协议为什么是现在这个样子\" class=\"headerlink\" title=\"Form Follows Function：HTTP 协议为什么是现在这个样子\"></a>Form Follows Function：HTTP 协议为什么是现在这个样子</h2><ul>\n<li><p>HTTP 协议</p>\n<ul>\n<li>Roy Thomas Fielding：HTTP 主要作者，REST 架构作者</li>\n</ul>\n</li>\n<li><p>URI：统一资源标识符</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.5k1vc39i85k0.webp\" width=\"70%\"></li>\n</ul>\n<h2 id=\"HTTP-解决了什么问题？\"><a href=\"#HTTP-解决了什么问题？\" class=\"headerlink\" title=\"HTTP 解决了什么问题？\"></a>HTTP 解决了什么问题？</h2><h4 id=\"解决-WWW-信息交互必须面对的需求：\"><a href=\"#解决-WWW-信息交互必须面对的需求：\" class=\"headerlink\" title=\"解决 WWW 信息交互必须面对的需求：\"></a>解决 WWW 信息交互必须面对的需求：</h4><p>• 低门槛<br>• 可扩展性：巨大的用户群体，超长的寿命<br>• 分布式系统下的 Hypermedia：大粒度数据的网络传输<br>• Internet 规模<br>• 无法控制的 scalability<br>• 不可预测的负载、非法格式的数据、恶意消息<br>• 客户端不能保持所有服务器信息，服务器不能保持多个请求间的状态信息<br>• 独立的组件部署：新老组件并存<br>• 向前兼容：自 1993 年起 HTTP0.9\\1.0（1996）已经被广泛使用</p>\n<h2 id=\"评估-Web-架构的关键属性\"><a href=\"#评估-Web-架构的关键属性\" class=\"headerlink\" title=\"评估 Web 架构的关键属性\"></a>评估 Web 架构的关键属性</h2><h3 id=\"HTTP-协议应当在以下属性中取得可接受的均衡：\"><a href=\"#HTTP-协议应当在以下属性中取得可接受的均衡：\" class=\"headerlink\" title=\"HTTP 协议应当在以下属性中取得可接受的均衡：\"></a>HTTP 协议应当在以下属性中取得可接受的均衡：</h3><ol>\n<li>性能 Performance：影响高可用的关键因素</li>\n<li>可伸缩性 Scalability：支持部署可以互相交互的大量组件</li>\n<li>简单性 Simplicity：易理解、易实现、易验证</li>\n<li>可见性 Visiable：对两个组件间的交互进行监视或者仲裁的能力。如缓存、分层设计等</li>\n<li>可移植性 Portability：在不同的环境下运行的能力</li>\n<li>可靠性 Reliability：出现部分故障时，对整体影响的程度</li>\n<li>可修改性 Modifiability：对系统作出修改的难易程度，由可进化性、可定制性、可扩展<br>性、可配置性、可重用性构成</li>\n</ol>\n<br>\n\n<h2 id=\"架构属性：性能\"><a href=\"#架构属性：性能\" class=\"headerlink\" title=\"架构属性：性能\"></a>架构属性：性能</h2><ul>\n<li>网络性能 Network Performance<ul>\n<li>Throughput 吞吐量：小于等于带宽 bandwidth</li>\n<li>Overhead 开销：首次开销，每次开销</li>\n</ul>\n</li>\n<li>用户感知到的性能 User-perceived Performance<ul>\n<li>Latency 延迟：发起请求到接收到响应的时间</li>\n<li>Completion 完成时间：完成一个应用动作所花费的时间</li>\n</ul>\n</li>\n<li>网络效率 Network Efficiency<ul>\n<li>重用缓存、减少交互次数、数据传输距离更近、COD</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h2 id=\"架构属性：可修改性\"><a href=\"#架构属性：可修改性\" class=\"headerlink\" title=\"架构属性：可修改性\"></a>架构属性：可修改性</h2><p>• 可进化性 Evolvability：一个组件独立升级而不影响其他组件<br>• 可扩展性 Extensibility ：向系统添加功能，而不会影响到系统的其他部分<br>• 可定制性 Customizability ：临时性、定制性地更改某一要素来提供服务，<br>不对常规客户产生影响<br>• 可配置性 Configurability ：应用部署后可通过修改配置提供新的功能<br>• 可重用性 Reusabilit ：组件可以不做修改在其他应用在使用</p>\n<br>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"5-种架构风格\"><a href=\"#5-种架构风格\" class=\"headerlink\" title=\"5 种架构风格\"></a>5 种架构风格</h2><ul>\n<li>数据流风格 Data-flow Styles<ul>\n<li>优点：简单性、可进化性、可扩展性、可配置性、可重用性</li>\n</ul>\n</li>\n<li>复制风格 Replication Styles<ul>\n<li>优点：用户可察觉的性能、可伸缩性，网络效率、可靠性也可以提到提升</li>\n</ul>\n</li>\n<li>分层风格 Hierarchical Styles<ul>\n<li>优点：简单性、可进化性、可伸缩性</li>\n</ul>\n</li>\n<li>移动代码风格 Mobile Code Styles<ul>\n<li>优点：可移植性、可扩展性、网络效率</li>\n</ul>\n</li>\n<li>点对点风格 Peer-to-Peer Styles<ul>\n<li>优点：可进化性、可重用性、可扩展性、可配置性</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h2 id=\"Chrome-抓包：快速定位-HTTP-协议问题\"><a href=\"#Chrome-抓包：快速定位-HTTP-协议问题\" class=\"headerlink\" title=\"Chrome 抓包：快速定位 HTTP 协议问题\"></a>Chrome 抓包：快速定位 HTTP 协议问题</h2><p><a class=\"link\"   href=\"https://developers.google.com/web/tools/chrome-devtools/network/\" >chrome-devtools<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Chrome-抓包：Network-面板\"><a href=\"#Chrome-抓包：Network-面板\" class=\"headerlink\" title=\"Chrome 抓包：Network 面板\"></a>Chrome 抓包：Network 面板</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.ae6gkxyy8ws.webp\" width=\"90%\">\n\n<ul>\n<li>控制器：控制面板的外观与功能</li>\n<li>过滤器：过滤请求列表中显示的资源<ul>\n<li>按住 Command （Mac）或 Ctrl （Window / Linux），然后点击过滤器可以<br>同时选择多个过滤器</li>\n</ul>\n</li>\n<li>概览：显示 HTTP 请求、响应的时间轴</li>\n<li>请求列表：默认时间排序，可选择显示列</li>\n<li>概要：请求总数、总数据量、总花费时间等</li>\n</ul>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.4sak4sx7bko0.webp\" width=\"60%\">\n\n<h3 id=\"过滤器：按类型\"><a href=\"#过滤器：按类型\" class=\"headerlink\" title=\"过滤器：按类型\"></a>过滤器：按类型</h3><ul>\n<li>XHR、JS、CSS、Img、Media、Font、Doc、WS (WebSocket)、Manifest 或 Other<br>（此处未列出的任何其他类型）</li>\n<li>多类型，按住 Command (Mac) 或 Ctrl（Windows、Linux）</li>\n<li>按时间过滤：概览面板，拖动滚动条</li>\n<li>隐藏 Data URLs：CSS 图片等小文件以 BASE64 格式嵌入 HTML 中，以减少 HTTP<br>请求数</li>\n</ul>\n<h3 id=\"过滤器：属性过滤\"><a href=\"#过滤器：属性过滤\" class=\"headerlink\" title=\"过滤器：属性过滤\"></a>过滤器：属性过滤</h3><ul>\n<li><p>domain：仅显示来自指定域的资源。 您可以使用通配符字符 (*) 纳入多个域</p>\n</li>\n<li><p>has-response-header：显示包含指定 HTTP 响应标头的资源</p>\n</li>\n<li><p>is：使用 is:running 可以查找 WebSocket 资源，is:from-cache 可查找缓存读出的资源</p>\n</li>\n<li><p>larger-than： 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为<br>1k</p>\n</li>\n<li><p>method：显示通过指定 HTTP 方法类型检索的资源</p>\n</li>\n<li><p>mime-type：显示指定 MIME 类型的资源</p>\n</li>\n<li><p>mixed-content：显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源<br>(mixed-content:displayed)。</p>\n</li>\n<li><p>scheme：显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资<br>源。</p>\n</li>\n<li><p>set-cookie-domain：显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。</p>\n</li>\n<li><p>set-cookie-name：显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。</p>\n</li>\n<li><p>set-cookie-value：显示具有 Set-Cookie 标头并且值与指定值匹配的资源。</p>\n</li>\n<li><p>status-code：仅显示 HTTP 状态代码与指定代码匹配的资源。</p>\n</li>\n</ul>\n<p><strong>多属性间通过空格实现 AND 操作</strong></p>\n<h3 id=\"请求列表的排序\"><a href=\"#请求列表的排序\" class=\"headerlink\" title=\"请求列表的排序\"></a>请求列表的排序</h3><ul>\n<li>时间排序，默认</li>\n<li>按列排序</li>\n<li>按活动时间排序<ul>\n<li>Start Time：发出的第一个请求位于顶部</li>\n<li>Response Time：开始下载的第一个请求位于顶部</li>\n<li>End Time：完成的第一个请求位于顶部</li>\n<li>Total Duration：连接设置时间和请求/响应时间最短的请求位于顶部</li>\n<li>Latency：等待最短响应时间的请求位于顶部</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"请求列表\"><a href=\"#请求列表\" class=\"headerlink\" title=\"请求列表\"></a>请求列表</h3><ul>\n<li>Name : 资源的名称</li>\n<li>Status : HTTP 状态代码</li>\n<li>Type : 请求的资源的 MIME 类型</li>\n<li>Initiator : 发起请求的对象或进程。它可能有以下几种值：<ul>\n<li>Parser （解析器） : Chrome的 HTML 解析器发起了请求<ul>\n<li>鼠标悬停显示 JS 脚本</li>\n</ul>\n</li>\n<li>Redirect （重定向） : HTTP 重定向启动了请求</li>\n<li>Script （脚本） : 脚本启动了请求</li>\n<li>Other （其他） : 一些其他进程或动作发起请求，例如用户点击链接跳转到<br>页面或在地址栏中输入网址</li>\n</ul>\n</li>\n<li>Size : 服务器返回的响应大小（包括头部和包体），可显示解压后大小</li>\n<li>Time : 总持续时间，从请求的开始到接收响应中的最后一个字节</li>\n<li>Waterfall：各请求相关活动的直观分析图</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/gitee-blog/image.27b9wyvwjz9c.webp\" width=\"70%\">\n\n\n\n<h3 id=\"预览请求内容\"><a href=\"#预览请求内容\" class=\"headerlink\" title=\"预览请求内容\"></a>预览请求内容</h3><ul>\n<li>查看头部</li>\n<li>查看 cookie</li>\n<li>预览响应正文：查看图像用</li>\n<li>查看响应正文</li>\n<li>时间详细分布</li>\n<li>导出数据为 HAR 格式</li>\n<li>查看未压缩的资源大小：Use Large Request Rows</li>\n</ul>\n<ul>\n<li><p>浏览器加载时间（概览、概要、请求列表）</p>\n<ul>\n<li>DOMContentLoaded 事件的颜色设置为蓝色，而 load 事件设置为红色</li>\n</ul>\n</li>\n<li><p>将请求数据复制到剪贴版</p>\n<ul>\n<li>Copy Link Address: 将请求的网址复制到剪贴板</li>\n<li>Copy Response: 将响应包体复制到剪贴板</li>\n<li>Copy as cURL: 以 cURL 命令形式复制请求</li>\n<li>Copy All as cURL: 以一系列 cURL 命令形式复制所有请求</li>\n<li>Copy All as HAR: 以 HAR 数据形式复制所有请求</li>\n</ul>\n</li>\n<li><p>查看请求上下游：按住 shift 键悬停请求上，绿色是上游，红色是下游</p>\n</li>\n</ul>\n<h3 id=\"浏览器加载时间\"><a href=\"#浏览器加载时间\" class=\"headerlink\" title=\"浏览器加载时间\"></a>浏览器加载时间</h3><ul>\n<li>触发流程：<ul>\n<li>解析 HTML 结构</li>\n<li>加载外部脚本和样式表文件</li>\n<li>解析并执行脚本代码 // 部分脚本会阻塞页面的加载</li>\n<li>DOM 树构建完成 // DOMContentLoaded 事件</li>\n<li>加载图片等外部文件</li>\n<li>页面加载完毕 // load 事件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"请求时间详细分布\"><a href=\"#请求时间详细分布\" class=\"headerlink\" title=\"请求时间详细分布\"></a>请求时间详细分布</h3><ul>\n<li>Queueing: 浏览器在以下情况下对请求排队<ul>\n<li>存在更高优先级的请求</li>\n<li>此源已打开六个 TCP 连接，达到限值，仅适用于 HTTP/1.0 和 HTTP/1.1</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled: 请求可能会因 Queueing 中描述的任何原因而停止</li>\n<li>DNS Lookup: 浏览器正在解析请求的 IP 地址</li>\n<li>Proxy Negotiation: 浏览器正在与代理服务器协商请求</li>\n<li>Request sent: 正在发送请求</li>\n<li>ServiceWorker Preparation: 浏览器正在启动 Service Worker</li>\n<li>Request to ServiceWorker: 正在将请求发送到 Service Worker</li>\n<li>Waiting (TTFB): 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte<br>（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时<br>间</li>\n<li>Content Download: 浏览器正在接收响应</li>\n<li>Receiving Push: 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据</li>\n<li>Reading Push: 浏览器正在读取之前收到的本地数据</li>\n</ul>\n<h2 id=\"URI的基本格式以及与URL的区别\"><a href=\"#URI的基本格式以及与URL的区别\" class=\"headerlink\" title=\"URI的基本格式以及与URL的区别\"></a>URI的基本格式以及与URL的区别</h2><br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>nginx -s 发送信号，做日志切割这个需要理解，需要了解课程中的日志切割shell</li>\n<li>如何让配置文件语法高亮</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>\n\n"},{"title":"《快速上手Linux 玩转典型应用》study notes","author":"ratears","date":"2022-07-01T21:54:04.000Z","updated":"2022-07-01T21:54:04.000Z","_content":"\n\n\n\n\n# WebServer安装和配置讲解\n\n## Apache\n\n- 下载httpd\n\n```\nyum install -y httpd\n```\n\n- 配置虚拟主机\n\n","source":"_posts/2022/《快速上手Linux-玩转典型应用》study-notes.md","raw":"---\ntitle: 《快速上手Linux 玩转典型应用》study notes\nauthor: ratears\ndate: 2022-07-02 05:54:04\nupdated: 2022-07-02 05:54:04\ncategories:\n  - [linux]\ntags:\n  - linux\n---\n\n\n\n\n\n# WebServer安装和配置讲解\n\n## Apache\n\n- 下载httpd\n\n```\nyum install -y httpd\n```\n\n- 配置虚拟主机\n\n","slug":"《快速上手Linux-玩转典型应用》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnj001gdctageo62rb1","content":"<h1 id=\"WebServer安装和配置讲解\"><a href=\"#WebServer安装和配置讲解\" class=\"headerlink\" title=\"WebServer安装和配置讲解\"></a>WebServer安装和配置讲解</h1><h2 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h2><ul>\n<li>下载httpd</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y httpd</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置虚拟主机</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"WebServer安装和配置讲解\"><a href=\"#WebServer安装和配置讲解\" class=\"headerlink\" title=\"WebServer安装和配置讲解\"></a>WebServer安装和配置讲解</h1><h2 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h2><ul>\n<li>下载httpd</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y httpd</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置虚拟主机</li>\n</ul>\n"},{"title":"《扛得住的MySQL数据库架构》study notes","author":"ratears","date":"2022-10-18T03:17:42.000Z","updated":"2022-10-18T03:17:42.000Z","_content":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","source":"_posts/2022/《扛得住的MySQL数据库架构》study-notes.md","raw":"---\ntitle: 《扛得住的MySQL数据库架构》study notes\nauthor: ratears\ndate: 2022-10-18 11:17:42\nupdated: 2022-10-18 11:17:42\ncategories:\n  - [database,MySQL]\ntags:\n  - MySQL\n  - database\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","slug":"《扛得住的MySQL数据库架构》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnk001jdctagl4wecsb","content":"<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","site":{"data":{}},"excerpt":"","more":"<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>"},{"title":"《深入拆解 Java 虚拟机》study notes","date":"2022-11-29T08:50:47.000Z","author":"ratears","updated":"2022-11-29T08:50:47.000Z","_content":"\n\n\n\n\n# 开篇词 (1讲)\n\n## 开篇词 | 为什么我们要学习Java虚拟机？\n\n- **学习 Java 虚拟机的本质，更多是了解 Java 程序是如何被执行且优化的。**(这样一来，才可以从内部入手，达到高效编程的目的。与此同时，也可以为学习更深层级、更为核心的 Java 技术打好基础。)\n\n\n\n- 了解学习 Java 虚拟机有如下（但不限于）好处\n  - 可以针对自己的应用，最优化匹配运行参数（Java 虚拟机提供了许多配置参数，用于满足不同应用场景下，对程序性能的需求。）\n  - 可以更好地规避它在使用中的 Bug，也可以更快地识别出 Java 虚拟机中的错误\n  - Java 虚拟机发展到了今天，已经脱离 Java 语言，形成了一套相对独立的、高性能的执行方案。除了 Java 外，Scala、Clojure、Groovy，以及时下热门的 Kotlin，这些语言都可以运行在 Java 虚拟机之上\n\n\n\n- 整个专栏将分为四大模块\n  - **基本原理**：剖析 Java 虚拟机的运行机制，逐一介绍 Java 虚拟机的设计决策以及工程实现；\n  - **高效实现**：探索 Java 编译器，以及内嵌于 Java 虚拟机中的即时编译器，帮助你更好地理解 Java 语言特性，继而写出简洁高效的代码；\n  - **代码优化**：介绍如何利用工具定位并解决代码中的问题，以及在已有工具不适用的情况下，如何打造专属轮子；\n  - **虚拟机黑科技**：介绍甲骨文实验室近年来的前沿工作之一 GraalVM。包括如何在 JVM 上高效运行其他语言；如何混搭这些语言，实现 Polyglot；如何将这些语言事前编译（Ahead-Of-Time，AOT）成机器指令，单独运行甚至嵌入至数据库中运行。\n\n\n\n- 知识框架图\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3q88hqo431w0.webp\" width=\"100%\">\n\n<br>\n\n<br>\n\n<br>\n\n# 模块一：Java虚拟机基本原理 (12讲)\n\n## 01 | Java代码是怎么运行的？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","source":"_posts/2022/《深入拆解-Java-虚拟机》study-notes.md","raw":"---\ntitle: 《深入拆解 Java 虚拟机》study notes\ndate: 2022-11-29 16:50:47\nauthor: ratears\ncategories:\n\t- [Java,jvm]\ntags:\n\t- jvm\nupdated: 2022-11-29 16:50:47\n---\n\n\n\n\n\n# 开篇词 (1讲)\n\n## 开篇词 | 为什么我们要学习Java虚拟机？\n\n- **学习 Java 虚拟机的本质，更多是了解 Java 程序是如何被执行且优化的。**(这样一来，才可以从内部入手，达到高效编程的目的。与此同时，也可以为学习更深层级、更为核心的 Java 技术打好基础。)\n\n\n\n- 了解学习 Java 虚拟机有如下（但不限于）好处\n  - 可以针对自己的应用，最优化匹配运行参数（Java 虚拟机提供了许多配置参数，用于满足不同应用场景下，对程序性能的需求。）\n  - 可以更好地规避它在使用中的 Bug，也可以更快地识别出 Java 虚拟机中的错误\n  - Java 虚拟机发展到了今天，已经脱离 Java 语言，形成了一套相对独立的、高性能的执行方案。除了 Java 外，Scala、Clojure、Groovy，以及时下热门的 Kotlin，这些语言都可以运行在 Java 虚拟机之上\n\n\n\n- 整个专栏将分为四大模块\n  - **基本原理**：剖析 Java 虚拟机的运行机制，逐一介绍 Java 虚拟机的设计决策以及工程实现；\n  - **高效实现**：探索 Java 编译器，以及内嵌于 Java 虚拟机中的即时编译器，帮助你更好地理解 Java 语言特性，继而写出简洁高效的代码；\n  - **代码优化**：介绍如何利用工具定位并解决代码中的问题，以及在已有工具不适用的情况下，如何打造专属轮子；\n  - **虚拟机黑科技**：介绍甲骨文实验室近年来的前沿工作之一 GraalVM。包括如何在 JVM 上高效运行其他语言；如何混搭这些语言，实现 Polyglot；如何将这些语言事前编译（Ahead-Of-Time，AOT）成机器指令，单独运行甚至嵌入至数据库中运行。\n\n\n\n- 知识框架图\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3q88hqo431w0.webp\" width=\"100%\">\n\n<br>\n\n<br>\n\n<br>\n\n# 模块一：Java虚拟机基本原理 (12讲)\n\n## 01 | Java代码是怎么运行的？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","slug":"《深入拆解-Java-虚拟机》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnl001ndctaahg39fpi","content":"<h1 id=\"开篇词-1讲\"><a href=\"#开篇词-1讲\" class=\"headerlink\" title=\"开篇词 (1讲)\"></a>开篇词 (1讲)</h1><h2 id=\"开篇词-为什么我们要学习Java虚拟机？\"><a href=\"#开篇词-为什么我们要学习Java虚拟机？\" class=\"headerlink\" title=\"开篇词 | 为什么我们要学习Java虚拟机？\"></a>开篇词 | 为什么我们要学习Java虚拟机？</h2><ul>\n<li><strong>学习 Java 虚拟机的本质，更多是了解 Java 程序是如何被执行且优化的。</strong>(这样一来，才可以从内部入手，达到高效编程的目的。与此同时，也可以为学习更深层级、更为核心的 Java 技术打好基础。)</li>\n</ul>\n<ul>\n<li>了解学习 Java 虚拟机有如下（但不限于）好处<ul>\n<li>可以针对自己的应用，最优化匹配运行参数（Java 虚拟机提供了许多配置参数，用于满足不同应用场景下，对程序性能的需求。）</li>\n<li>可以更好地规避它在使用中的 Bug，也可以更快地识别出 Java 虚拟机中的错误</li>\n<li>Java 虚拟机发展到了今天，已经脱离 Java 语言，形成了一套相对独立的、高性能的执行方案。除了 Java 外，Scala、Clojure、Groovy，以及时下热门的 Kotlin，这些语言都可以运行在 Java 虚拟机之上</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>整个专栏将分为四大模块<ul>\n<li><strong>基本原理</strong>：剖析 Java 虚拟机的运行机制，逐一介绍 Java 虚拟机的设计决策以及工程实现；</li>\n<li><strong>高效实现</strong>：探索 Java 编译器，以及内嵌于 Java 虚拟机中的即时编译器，帮助你更好地理解 Java 语言特性，继而写出简洁高效的代码；</li>\n<li><strong>代码优化</strong>：介绍如何利用工具定位并解决代码中的问题，以及在已有工具不适用的情况下，如何打造专属轮子；</li>\n<li><strong>虚拟机黑科技</strong>：介绍甲骨文实验室近年来的前沿工作之一 GraalVM。包括如何在 JVM 上高效运行其他语言；如何混搭这些语言，实现 Polyglot；如何将这些语言事前编译（Ahead-Of-Time，AOT）成机器指令，单独运行甚至嵌入至数据库中运行。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>知识框架图</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3q88hqo431w0.webp\" width=\"100%\">\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"模块一：Java虚拟机基本原理-12讲\"><a href=\"#模块一：Java虚拟机基本原理-12讲\" class=\"headerlink\" title=\"模块一：Java虚拟机基本原理 (12讲)\"></a>模块一：Java虚拟机基本原理 (12讲)</h1><h2 id=\"01-Java代码是怎么运行的？\"><a href=\"#01-Java代码是怎么运行的？\" class=\"headerlink\" title=\"01 | Java代码是怎么运行的？\"></a>01 | Java代码是怎么运行的？</h2><br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开篇词-1讲\"><a href=\"#开篇词-1讲\" class=\"headerlink\" title=\"开篇词 (1讲)\"></a>开篇词 (1讲)</h1><h2 id=\"开篇词-为什么我们要学习Java虚拟机？\"><a href=\"#开篇词-为什么我们要学习Java虚拟机？\" class=\"headerlink\" title=\"开篇词 | 为什么我们要学习Java虚拟机？\"></a>开篇词 | 为什么我们要学习Java虚拟机？</h2><ul>\n<li><strong>学习 Java 虚拟机的本质，更多是了解 Java 程序是如何被执行且优化的。</strong>(这样一来，才可以从内部入手，达到高效编程的目的。与此同时，也可以为学习更深层级、更为核心的 Java 技术打好基础。)</li>\n</ul>\n<ul>\n<li>了解学习 Java 虚拟机有如下（但不限于）好处<ul>\n<li>可以针对自己的应用，最优化匹配运行参数（Java 虚拟机提供了许多配置参数，用于满足不同应用场景下，对程序性能的需求。）</li>\n<li>可以更好地规避它在使用中的 Bug，也可以更快地识别出 Java 虚拟机中的错误</li>\n<li>Java 虚拟机发展到了今天，已经脱离 Java 语言，形成了一套相对独立的、高性能的执行方案。除了 Java 外，Scala、Clojure、Groovy，以及时下热门的 Kotlin，这些语言都可以运行在 Java 虚拟机之上</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>整个专栏将分为四大模块<ul>\n<li><strong>基本原理</strong>：剖析 Java 虚拟机的运行机制，逐一介绍 Java 虚拟机的设计决策以及工程实现；</li>\n<li><strong>高效实现</strong>：探索 Java 编译器，以及内嵌于 Java 虚拟机中的即时编译器，帮助你更好地理解 Java 语言特性，继而写出简洁高效的代码；</li>\n<li><strong>代码优化</strong>：介绍如何利用工具定位并解决代码中的问题，以及在已有工具不适用的情况下，如何打造专属轮子；</li>\n<li><strong>虚拟机黑科技</strong>：介绍甲骨文实验室近年来的前沿工作之一 GraalVM。包括如何在 JVM 上高效运行其他语言；如何混搭这些语言，实现 Polyglot；如何将这些语言事前编译（Ahead-Of-Time，AOT）成机器指令，单独运行甚至嵌入至数据库中运行。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>知识框架图</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3q88hqo431w0.webp\" width=\"100%\">\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"模块一：Java虚拟机基本原理-12讲\"><a href=\"#模块一：Java虚拟机基本原理-12讲\" class=\"headerlink\" title=\"模块一：Java虚拟机基本原理 (12讲)\"></a>模块一：Java虚拟机基本原理 (12讲)</h1><h2 id=\"01-Java代码是怎么运行的？\"><a href=\"#01-Java代码是怎么运行的？\" class=\"headerlink\" title=\"01 | Java代码是怎么运行的？\"></a>01 | Java代码是怎么运行的？</h2><br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>"},{"title":"《玩转Java并发工具，精通JUC》 study notes","author":"ratears","date":"2022-08-14T12:37:26.000Z","updated":"2022-08-14T12:37:26.000Z","_content":"\n\n\n# 线程池\n\n## 简介\n\n- 线程池的重要性：\n\n> 1. 很多问题是没有用好线程池导致的\n>\n> 2. 线程池是面试中的高频考点，问题层层递进\n\n\n\n- 为什么要使用线程池\n\n> 1. 反复创建线程开销大\n> 2. 过多的线程会占用太多内存\n\n\n\n- 线程池的好处\n\n> 1. 加快响应速度（不需要反复创建和销毁线程；消除了线程创建带来的延迟，增强用户体验）\n> 2. 合理利用CPU和内存。控制资源总量（每一个Java程序中的线程，会直接对应到操作系统中的线程）（统筹资源，不至于线程过多，内存溢出，也不至于线程过少，浪费CPU资源。达到平衡——效率最高点）\n> 3. 复用线程（解决线程反复创建销毁带来的开销问题）","source":"_posts/2022/《玩转Java并发工具，精通JUC》-study-notes.md","raw":"---\ntitle: 《玩转Java并发工具，精通JUC》 study notes\nauthor: ratears\ndate: 2022-08-14 20:37:26\nupdated: 2022-08-14 20:37:26\ncategories:\n  - [java,concurrent]\ntags:\n  - concurrent\n---\n\n\n\n# 线程池\n\n## 简介\n\n- 线程池的重要性：\n\n> 1. 很多问题是没有用好线程池导致的\n>\n> 2. 线程池是面试中的高频考点，问题层层递进\n\n\n\n- 为什么要使用线程池\n\n> 1. 反复创建线程开销大\n> 2. 过多的线程会占用太多内存\n\n\n\n- 线程池的好处\n\n> 1. 加快响应速度（不需要反复创建和销毁线程；消除了线程创建带来的延迟，增强用户体验）\n> 2. 合理利用CPU和内存。控制资源总量（每一个Java程序中的线程，会直接对应到操作系统中的线程）（统筹资源，不至于线程过多，内存溢出，也不至于线程过少，浪费CPU资源。达到平衡——效率最高点）\n> 3. 复用线程（解决线程反复创建销毁带来的开销问题）","slug":"《玩转Java并发工具，精通JUC》-study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnm001rdctacven2t7x","content":"<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>线程池的重要性：</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>很多问题是没有用好线程池导致的</p>\n</li>\n<li><p>线程池是面试中的高频考点，问题层层递进</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>为什么要使用线程池</li>\n</ul>\n<blockquote>\n<ol>\n<li>反复创建线程开销大</li>\n<li>过多的线程会占用太多内存</li>\n</ol>\n</blockquote>\n<ul>\n<li>线程池的好处</li>\n</ul>\n<blockquote>\n<ol>\n<li>加快响应速度（不需要反复创建和销毁线程；消除了线程创建带来的延迟，增强用户体验）</li>\n<li>合理利用CPU和内存。控制资源总量（每一个Java程序中的线程，会直接对应到操作系统中的线程）（统筹资源，不至于线程过多，内存溢出，也不至于线程过少，浪费CPU资源。达到平衡——效率最高点）</li>\n<li>复用线程（解决线程反复创建销毁带来的开销问题）</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>线程池的重要性：</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>很多问题是没有用好线程池导致的</p>\n</li>\n<li><p>线程池是面试中的高频考点，问题层层递进</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>为什么要使用线程池</li>\n</ul>\n<blockquote>\n<ol>\n<li>反复创建线程开销大</li>\n<li>过多的线程会占用太多内存</li>\n</ol>\n</blockquote>\n<ul>\n<li>线程池的好处</li>\n</ul>\n<blockquote>\n<ol>\n<li>加快响应速度（不需要反复创建和销毁线程；消除了线程创建带来的延迟，增强用户体验）</li>\n<li>合理利用CPU和内存。控制资源总量（每一个Java程序中的线程，会直接对应到操作系统中的线程）（统筹资源，不至于线程过多，内存溢出，也不至于线程过少，浪费CPU资源。达到平衡——效率最高点）</li>\n<li>复用线程（解决线程反复创建销毁带来的开销问题）</li>\n</ol>\n</blockquote>\n"},{"title":"《理论+实战 构建完整JVM知识体系》study notes","author":"sonzonzy","date":"2022-07-01T21:54:04.000Z","updated":"2022-07-01T21:54:04.000Z","_content":"\n\n\n# 认识JVM规范\n\n## JVM概述\n\n- JVM：Java Virtual Machine\n- 所谓虚拟机是指：通过软件模拟的，具有完整硬件系统功能的、运行在一个完全隔离环境中的计算机\n\n- JVM是通过软件来模拟Java字节码的指令集，是Java程序的运行环境\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3luw1u10fja0.webp\" width=\"90%\" />\n\n<br/>\n\n### JVM主要功能\n\n- 通过ClassLoader寻找和加载class文件\n- 解释字节码成机器指令并执行，提供class文件运行环境\n- 进行运行期间的内存分配和垃圾回收\n- 提供与硬件交互的平台\n\n<br/>\n\n### 虚拟机是java平台无关的保障\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.rlwtwx7dsuo.webp\" width=\"70%\" />\n\n<br/>\n\n## JVM规范\n\n### JVM规范的作用\n\n- Java虚拟机规范为不通的硬件平台提供了一种编译Java技术代码的规范\n- 该规范使Java软件独立于平台，因为编译是针对作为虚拟机的 ”一般机器“ 而做\n- 这个 ”一般机器“ ，可用软件模拟，并运行于各种现存的计算机系统，也可用硬件来实现\n\n<br/>\n\n### JVM规范主要内容\n\n- cpu(字节码指令集）\n- class文件格式\n- 数据类型和值\n- 运行时数据区\n- 栈帧\n- 特殊方法\n- 类库\n- 异常\n- 虚拟机的启动、加载、连接和初始化\n\n<br/>\n\n## Class字节码\n\n\n\n\n\n","source":"_posts/2022/《理论-实战-构建完整JVM知识体系》study-notes.md","raw":"---\ntitle: 《理论+实战 构建完整JVM知识体系》study notes\nauthor: sonzonzy\ndate: 2022-07-02 05:54:04\nupdated: 2022-07-02 05:54:04\ncategories:\n  - [java,jvm]\ntags:\n  - jvm\n---\n\n\n\n# 认识JVM规范\n\n## JVM概述\n\n- JVM：Java Virtual Machine\n- 所谓虚拟机是指：通过软件模拟的，具有完整硬件系统功能的、运行在一个完全隔离环境中的计算机\n\n- JVM是通过软件来模拟Java字节码的指令集，是Java程序的运行环境\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3luw1u10fja0.webp\" width=\"90%\" />\n\n<br/>\n\n### JVM主要功能\n\n- 通过ClassLoader寻找和加载class文件\n- 解释字节码成机器指令并执行，提供class文件运行环境\n- 进行运行期间的内存分配和垃圾回收\n- 提供与硬件交互的平台\n\n<br/>\n\n### 虚拟机是java平台无关的保障\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.rlwtwx7dsuo.webp\" width=\"70%\" />\n\n<br/>\n\n## JVM规范\n\n### JVM规范的作用\n\n- Java虚拟机规范为不通的硬件平台提供了一种编译Java技术代码的规范\n- 该规范使Java软件独立于平台，因为编译是针对作为虚拟机的 ”一般机器“ 而做\n- 这个 ”一般机器“ ，可用软件模拟，并运行于各种现存的计算机系统，也可用硬件来实现\n\n<br/>\n\n### JVM规范主要内容\n\n- cpu(字节码指令集）\n- class文件格式\n- 数据类型和值\n- 运行时数据区\n- 栈帧\n- 特殊方法\n- 类库\n- 异常\n- 虚拟机的启动、加载、连接和初始化\n\n<br/>\n\n## Class字节码\n\n\n\n\n\n","slug":"《理论-实战-构建完整JVM知识体系》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnn001udcta75hthtg8","content":"<h1 id=\"认识JVM规范\"><a href=\"#认识JVM规范\" class=\"headerlink\" title=\"认识JVM规范\"></a>认识JVM规范</h1><h2 id=\"JVM概述\"><a href=\"#JVM概述\" class=\"headerlink\" title=\"JVM概述\"></a>JVM概述</h2><ul>\n<li><p>JVM：Java Virtual Machine</p>\n</li>\n<li><p>所谓虚拟机是指：通过软件模拟的，具有完整硬件系统功能的、运行在一个完全隔离环境中的计算机</p>\n</li>\n<li><p>JVM是通过软件来模拟Java字节码的指令集，是Java程序的运行环境</p>\n</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3luw1u10fja0.webp\" width=\"90%\" />\n\n<br/>\n\n<h3 id=\"JVM主要功能\"><a href=\"#JVM主要功能\" class=\"headerlink\" title=\"JVM主要功能\"></a>JVM主要功能</h3><ul>\n<li>通过ClassLoader寻找和加载class文件</li>\n<li>解释字节码成机器指令并执行，提供class文件运行环境</li>\n<li>进行运行期间的内存分配和垃圾回收</li>\n<li>提供与硬件交互的平台</li>\n</ul>\n<br/>\n\n<h3 id=\"虚拟机是java平台无关的保障\"><a href=\"#虚拟机是java平台无关的保障\" class=\"headerlink\" title=\"虚拟机是java平台无关的保障\"></a>虚拟机是java平台无关的保障</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.rlwtwx7dsuo.webp\" width=\"70%\" />\n\n<br/>\n\n<h2 id=\"JVM规范\"><a href=\"#JVM规范\" class=\"headerlink\" title=\"JVM规范\"></a>JVM规范</h2><h3 id=\"JVM规范的作用\"><a href=\"#JVM规范的作用\" class=\"headerlink\" title=\"JVM规范的作用\"></a>JVM规范的作用</h3><ul>\n<li>Java虚拟机规范为不通的硬件平台提供了一种编译Java技术代码的规范</li>\n<li>该规范使Java软件独立于平台，因为编译是针对作为虚拟机的 ”一般机器“ 而做</li>\n<li>这个 ”一般机器“ ，可用软件模拟，并运行于各种现存的计算机系统，也可用硬件来实现</li>\n</ul>\n<br/>\n\n<h3 id=\"JVM规范主要内容\"><a href=\"#JVM规范主要内容\" class=\"headerlink\" title=\"JVM规范主要内容\"></a>JVM规范主要内容</h3><ul>\n<li>cpu(字节码指令集）</li>\n<li>class文件格式</li>\n<li>数据类型和值</li>\n<li>运行时数据区</li>\n<li>栈帧</li>\n<li>特殊方法</li>\n<li>类库</li>\n<li>异常</li>\n<li>虚拟机的启动、加载、连接和初始化</li>\n</ul>\n<br/>\n\n<h2 id=\"Class字节码\"><a href=\"#Class字节码\" class=\"headerlink\" title=\"Class字节码\"></a>Class字节码</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"认识JVM规范\"><a href=\"#认识JVM规范\" class=\"headerlink\" title=\"认识JVM规范\"></a>认识JVM规范</h1><h2 id=\"JVM概述\"><a href=\"#JVM概述\" class=\"headerlink\" title=\"JVM概述\"></a>JVM概述</h2><ul>\n<li><p>JVM：Java Virtual Machine</p>\n</li>\n<li><p>所谓虚拟机是指：通过软件模拟的，具有完整硬件系统功能的、运行在一个完全隔离环境中的计算机</p>\n</li>\n<li><p>JVM是通过软件来模拟Java字节码的指令集，是Java程序的运行环境</p>\n</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3luw1u10fja0.webp\" width=\"90%\" />\n\n<br/>\n\n<h3 id=\"JVM主要功能\"><a href=\"#JVM主要功能\" class=\"headerlink\" title=\"JVM主要功能\"></a>JVM主要功能</h3><ul>\n<li>通过ClassLoader寻找和加载class文件</li>\n<li>解释字节码成机器指令并执行，提供class文件运行环境</li>\n<li>进行运行期间的内存分配和垃圾回收</li>\n<li>提供与硬件交互的平台</li>\n</ul>\n<br/>\n\n<h3 id=\"虚拟机是java平台无关的保障\"><a href=\"#虚拟机是java平台无关的保障\" class=\"headerlink\" title=\"虚拟机是java平台无关的保障\"></a>虚拟机是java平台无关的保障</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.rlwtwx7dsuo.webp\" width=\"70%\" />\n\n<br/>\n\n<h2 id=\"JVM规范\"><a href=\"#JVM规范\" class=\"headerlink\" title=\"JVM规范\"></a>JVM规范</h2><h3 id=\"JVM规范的作用\"><a href=\"#JVM规范的作用\" class=\"headerlink\" title=\"JVM规范的作用\"></a>JVM规范的作用</h3><ul>\n<li>Java虚拟机规范为不通的硬件平台提供了一种编译Java技术代码的规范</li>\n<li>该规范使Java软件独立于平台，因为编译是针对作为虚拟机的 ”一般机器“ 而做</li>\n<li>这个 ”一般机器“ ，可用软件模拟，并运行于各种现存的计算机系统，也可用硬件来实现</li>\n</ul>\n<br/>\n\n<h3 id=\"JVM规范主要内容\"><a href=\"#JVM规范主要内容\" class=\"headerlink\" title=\"JVM规范主要内容\"></a>JVM规范主要内容</h3><ul>\n<li>cpu(字节码指令集）</li>\n<li>class文件格式</li>\n<li>数据类型和值</li>\n<li>运行时数据区</li>\n<li>栈帧</li>\n<li>特殊方法</li>\n<li>类库</li>\n<li>异常</li>\n<li>虚拟机的启动、加载、连接和初始化</li>\n</ul>\n<br/>\n\n<h2 id=\"Class字节码\"><a href=\"#Class字节码\" class=\"headerlink\" title=\"Class字节码\"></a>Class字节码</h2>"},{"title":"《透视 HTTP 协议》study notes","author":"sonzonzy","date":"2022-06-12T13:37:18.000Z","updated":"2022-06-12T13:37:18.000Z","_content":"\n# 开篇词 (1讲)\n\n## 开篇词｜To Be a HTTP Hero\n\n\n\n\n\n\n\n# 备注\n","source":"_posts/2022/《透视-HTTP-协议》study-notes.md","raw":"---\ntitle: 《透视 HTTP 协议》study notes\nauthor: sonzonzy\ndate: 2022-06-12 21:37:18\nupdated: 2022-06-12 21:37:18\ncategories:\n  - [network,http]\ntags:\n  - http\n  - network\n---\n\n# 开篇词 (1讲)\n\n## 开篇词｜To Be a HTTP Hero\n\n\n\n\n\n\n\n# 备注\n","slug":"《透视-HTTP-协议》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsno001zdctaggvw4to7","content":"<h1 id=\"开篇词-1讲\"><a href=\"#开篇词-1讲\" class=\"headerlink\" title=\"开篇词 (1讲)\"></a>开篇词 (1讲)</h1><h2 id=\"开篇词｜To-Be-a-HTTP-Hero\"><a href=\"#开篇词｜To-Be-a-HTTP-Hero\" class=\"headerlink\" title=\"开篇词｜To Be a HTTP Hero\"></a>开篇词｜To Be a HTTP Hero</h2><h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开篇词-1讲\"><a href=\"#开篇词-1讲\" class=\"headerlink\" title=\"开篇词 (1讲)\"></a>开篇词 (1讲)</h1><h2 id=\"开篇词｜To-Be-a-HTTP-Hero\"><a href=\"#开篇词｜To-Be-a-HTTP-Hero\" class=\"headerlink\" title=\"开篇词｜To Be a HTTP Hero\"></a>开篇词｜To Be a HTTP Hero</h2><h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1>"},{"title":"浅析 I/O（1）—— 操作系统内存简介","author":"ratears","date":"2022-09-19T13:56:50.000Z","updated":"2022-09-19T13:56:50.000Z","_content":"\n# 操作系统的应用与内核\n\n&emsp;&emsp;现代计算机是由硬件和操作系统组成，我们的应用程序要操作硬件（如往磁盘上写数据），就需要先与内核交互，然后再由内核与硬件交互；\n\n&emsp;&emsp;操作系统可以划分为：**内核**与**应用**两部分；\n\n&emsp;&emsp;内核提供进程管理、内存管理、网络等底层功能，封装了与硬件交互的接口，通过系统调用提供给上层应用使用。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/6a59c5e5-a44b-444d-b5de-22a47319e41a.5r3m1k43n280.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<br>\n\n# 内核空间与用户空间\n\n&emsp;&emsp;现在操作系统都是采用虚拟地址空间，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间（内核空间），也有访问底层硬件设备的所有权限。\n\n&emsp;&emsp;为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为**内核空间**，一部分为**用户空间**。内核空间是操作系统内核访问的区域，独立于普通的应用程序，是**受保护的内存空间**。用户空间是普通应用程序可访问的内存区域。\n\n&emsp;&emsp;针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23luuh3fhlwg.webp\" width=\"60%\">\n\n&emsp;&emsp;**用户态的程序不能随意操作内核地址空间，即使用户的程序崩溃了，内核也不受影响。这样对操作系统具有一定的安全保护作用。**\n\n<br>\n\n<br>\n\n<br>\n\n# CPU指令等级\n\n&emsp;&emsp;其实早期操作系统是不区分内核空间和用户空间的，但是应用程序能访问任意内存空间，如果程序不稳定常常把系统搞崩溃，比如清除操作系统的内存数据。后来觉得让应用程序随便访问内存太危险了，就按照CPU 指令的重要程度对指令进行了分级；\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5dnygfmt0ow0.webp\" width=\"40%\">\n\n\n\n&emsp;&emsp;CPU指令分为四个级别：Ring0~Ring3，linux 只使用了 Ring0 和 Ring3 两个运行级别，进程运行Ring3级别的指令时运行在用户态，指令只访问用户空间，而运行在 Ring0级别时被称为运行在内核态，可以访问任意内存空间。\n\n<br>\n\n<br>\n\n<br>\n\n# 进程的内核态和用户态\n\n&emsp;&emsp;**当进程运行在内核空间时，它就处于内核态；当进程运行在用户空间时，它就处于用户态。**\n\n- 那什么时候运行再内核空间什么时候运行再用户空间呢？\n\n> 当我们需要进行IO操作时，如读写硬盘文件、读写网卡数据等，进程需要切换到内核态，否则无法进行这样的操作，无论是从内核态切换到用户态，还是从用户态切换到内核态，都需要进行一次上下文的切换。一般情况下，应用不能直接操作内核空间的数据，需要把内核态的数据拷贝到用户空间才能操作。\n\n> 比如我们 Java 中需要新建一个线程，调用 start() 方法时，基于Hotspot Linux 的JVM 源码实现，最终是调`pthread_create`系统方法来创建的线程，这里会从用户态切换到内核态完成系统资源的分配，线程的创建。\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.ymdgdg0666o.webp\" width=\"60%\">\n\n- 当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于内核运行态（内核态）\n\n> Tips：除了系统调用可以实现用户态到内核态的切换，软中断和硬中断也会切换用户态和内核态。\n\n- 在内核态下：进程运行在内核地址空间中，此时 CPU 可以执行任何指令。运行的代码也不受任何的限制，可以自由地访问任何有效地址，也可以直接进行端口的访问。\n- 在用户态下：进程运行在用户地址空间中，被执行的代码要受到 CPU 的很多检查，比如：进程只能访问映射其地址空间的页表项中规定的在用户态下可访问页面的虚拟地址。\n\n<br>\n\n<br>\n\n<br>\n\n# 术语解释\n\n## 核心态/内核态(Kernel model)和用户态(User model)\n\n&emsp;&emsp;核心态(Kernel model)和用户态(User model)，CPU会在两个model之间切换。\n\n- 核心态代码拥有完全的底层资源控制权限，可以执行任何CPU指令，访问任何内存地址，其占有的处理机是不允许被抢占的。内核态的指令包括：启动I/O，内存清零，修改程序状态字，设置时钟，允许/终止中断和停机。内核态的程序崩溃会导致PC停机。\n- 用户态是用户程序能够使用的指令，不能直接访问底层硬件和内存地址。用户态运行的程序必须委托系统调用来访问硬件和内存。用户态的指令包括：控制转移，算数运算，取数指令，访管指令（使用户程序从用户态陷入内核态）。\n\n<br>\n\n<br>\n\n<br>\n\n## 进程切换\n\n&emsp;&emsp;为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：\n\n> 1. 保存处理机上下文，包括程序计数器和其他寄存器。\n> 2. 更新PCB信息。\n> 3. 把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。\n> 4. 选择另一个进程执行，并更新其PCB。\n> 5. 更新内存管理的数据结构。\n> 6. 恢复处理机上下文。\n\n<br>\n\n<br>\n\n<br>\n\n## 文件描述符(fd, File Descriptor)\n\n&emsp;&emsp;FD用于描述指向文件的引用的抽象化概念。文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。\n\n<br>\n\n<br>\n\n<br>","source":"_posts/2022/浅析-I-O（1）——-操作系统内存简介.md","raw":"---\ntitle: 浅析 I/O（1）—— 操作系统内存简介\nauthor: ratears\ncategories:\n\t- [Operating-Systems,I/O]\ntags:\n\t- Operating-Systems\n\t- I/O\ndate: 2022-09-19 21:56:50\nupdated: 2022-09-19 21:56:50\n---\n\n# 操作系统的应用与内核\n\n&emsp;&emsp;现代计算机是由硬件和操作系统组成，我们的应用程序要操作硬件（如往磁盘上写数据），就需要先与内核交互，然后再由内核与硬件交互；\n\n&emsp;&emsp;操作系统可以划分为：**内核**与**应用**两部分；\n\n&emsp;&emsp;内核提供进程管理、内存管理、网络等底层功能，封装了与硬件交互的接口，通过系统调用提供给上层应用使用。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/6a59c5e5-a44b-444d-b5de-22a47319e41a.5r3m1k43n280.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<br>\n\n# 内核空间与用户空间\n\n&emsp;&emsp;现在操作系统都是采用虚拟地址空间，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间（内核空间），也有访问底层硬件设备的所有权限。\n\n&emsp;&emsp;为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为**内核空间**，一部分为**用户空间**。内核空间是操作系统内核访问的区域，独立于普通的应用程序，是**受保护的内存空间**。用户空间是普通应用程序可访问的内存区域。\n\n&emsp;&emsp;针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23luuh3fhlwg.webp\" width=\"60%\">\n\n&emsp;&emsp;**用户态的程序不能随意操作内核地址空间，即使用户的程序崩溃了，内核也不受影响。这样对操作系统具有一定的安全保护作用。**\n\n<br>\n\n<br>\n\n<br>\n\n# CPU指令等级\n\n&emsp;&emsp;其实早期操作系统是不区分内核空间和用户空间的，但是应用程序能访问任意内存空间，如果程序不稳定常常把系统搞崩溃，比如清除操作系统的内存数据。后来觉得让应用程序随便访问内存太危险了，就按照CPU 指令的重要程度对指令进行了分级；\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5dnygfmt0ow0.webp\" width=\"40%\">\n\n\n\n&emsp;&emsp;CPU指令分为四个级别：Ring0~Ring3，linux 只使用了 Ring0 和 Ring3 两个运行级别，进程运行Ring3级别的指令时运行在用户态，指令只访问用户空间，而运行在 Ring0级别时被称为运行在内核态，可以访问任意内存空间。\n\n<br>\n\n<br>\n\n<br>\n\n# 进程的内核态和用户态\n\n&emsp;&emsp;**当进程运行在内核空间时，它就处于内核态；当进程运行在用户空间时，它就处于用户态。**\n\n- 那什么时候运行再内核空间什么时候运行再用户空间呢？\n\n> 当我们需要进行IO操作时，如读写硬盘文件、读写网卡数据等，进程需要切换到内核态，否则无法进行这样的操作，无论是从内核态切换到用户态，还是从用户态切换到内核态，都需要进行一次上下文的切换。一般情况下，应用不能直接操作内核空间的数据，需要把内核态的数据拷贝到用户空间才能操作。\n\n> 比如我们 Java 中需要新建一个线程，调用 start() 方法时，基于Hotspot Linux 的JVM 源码实现，最终是调`pthread_create`系统方法来创建的线程，这里会从用户态切换到内核态完成系统资源的分配，线程的创建。\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.ymdgdg0666o.webp\" width=\"60%\">\n\n- 当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于内核运行态（内核态）\n\n> Tips：除了系统调用可以实现用户态到内核态的切换，软中断和硬中断也会切换用户态和内核态。\n\n- 在内核态下：进程运行在内核地址空间中，此时 CPU 可以执行任何指令。运行的代码也不受任何的限制，可以自由地访问任何有效地址，也可以直接进行端口的访问。\n- 在用户态下：进程运行在用户地址空间中，被执行的代码要受到 CPU 的很多检查，比如：进程只能访问映射其地址空间的页表项中规定的在用户态下可访问页面的虚拟地址。\n\n<br>\n\n<br>\n\n<br>\n\n# 术语解释\n\n## 核心态/内核态(Kernel model)和用户态(User model)\n\n&emsp;&emsp;核心态(Kernel model)和用户态(User model)，CPU会在两个model之间切换。\n\n- 核心态代码拥有完全的底层资源控制权限，可以执行任何CPU指令，访问任何内存地址，其占有的处理机是不允许被抢占的。内核态的指令包括：启动I/O，内存清零，修改程序状态字，设置时钟，允许/终止中断和停机。内核态的程序崩溃会导致PC停机。\n- 用户态是用户程序能够使用的指令，不能直接访问底层硬件和内存地址。用户态运行的程序必须委托系统调用来访问硬件和内存。用户态的指令包括：控制转移，算数运算，取数指令，访管指令（使用户程序从用户态陷入内核态）。\n\n<br>\n\n<br>\n\n<br>\n\n## 进程切换\n\n&emsp;&emsp;为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：\n\n> 1. 保存处理机上下文，包括程序计数器和其他寄存器。\n> 2. 更新PCB信息。\n> 3. 把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。\n> 4. 选择另一个进程执行，并更新其PCB。\n> 5. 更新内存管理的数据结构。\n> 6. 恢复处理机上下文。\n\n<br>\n\n<br>\n\n<br>\n\n## 文件描述符(fd, File Descriptor)\n\n&emsp;&emsp;FD用于描述指向文件的引用的抽象化概念。文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。\n\n<br>\n\n<br>\n\n<br>","slug":"浅析-I-O（1）——-操作系统内存简介","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnp0022dctab9ztfzxx","content":"<h1 id=\"操作系统的应用与内核\"><a href=\"#操作系统的应用与内核\" class=\"headerlink\" title=\"操作系统的应用与内核\"></a>操作系统的应用与内核</h1><p>&emsp;&emsp;现代计算机是由硬件和操作系统组成，我们的应用程序要操作硬件（如往磁盘上写数据），就需要先与内核交互，然后再由内核与硬件交互；</p>\n<p>&emsp;&emsp;操作系统可以划分为：<strong>内核</strong>与<strong>应用</strong>两部分；</p>\n<p>&emsp;&emsp;内核提供进程管理、内存管理、网络等底层功能，封装了与硬件交互的接口，通过系统调用提供给上层应用使用。</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/6a59c5e5-a44b-444d-b5de-22a47319e41a.5r3m1k43n280.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"内核空间与用户空间\"><a href=\"#内核空间与用户空间\" class=\"headerlink\" title=\"内核空间与用户空间\"></a>内核空间与用户空间</h1><p>&emsp;&emsp;现在操作系统都是采用虚拟地址空间，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间（内核空间），也有访问底层硬件设备的所有权限。</p>\n<p>&emsp;&emsp;为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为<strong>内核空间</strong>，一部分为<strong>用户空间</strong>。内核空间是操作系统内核访问的区域，独立于普通的应用程序，是<strong>受保护的内存空间</strong>。用户空间是普通应用程序可访问的内存区域。</p>\n<p>&emsp;&emsp;针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23luuh3fhlwg.webp\" width=\"60%\">\n\n<p>&emsp;&emsp;<strong>用户态的程序不能随意操作内核地址空间，即使用户的程序崩溃了，内核也不受影响。这样对操作系统具有一定的安全保护作用。</strong></p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"CPU指令等级\"><a href=\"#CPU指令等级\" class=\"headerlink\" title=\"CPU指令等级\"></a>CPU指令等级</h1><p>&emsp;&emsp;其实早期操作系统是不区分内核空间和用户空间的，但是应用程序能访问任意内存空间，如果程序不稳定常常把系统搞崩溃，比如清除操作系统的内存数据。后来觉得让应用程序随便访问内存太危险了，就按照CPU 指令的重要程度对指令进行了分级；</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5dnygfmt0ow0.webp\" width=\"40%\">\n\n\n\n<p>&emsp;&emsp;CPU指令分为四个级别：Ring0~Ring3，linux 只使用了 Ring0 和 Ring3 两个运行级别，进程运行Ring3级别的指令时运行在用户态，指令只访问用户空间，而运行在 Ring0级别时被称为运行在内核态，可以访问任意内存空间。</p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"进程的内核态和用户态\"><a href=\"#进程的内核态和用户态\" class=\"headerlink\" title=\"进程的内核态和用户态\"></a>进程的内核态和用户态</h1><p>&emsp;&emsp;<strong>当进程运行在内核空间时，它就处于内核态；当进程运行在用户空间时，它就处于用户态。</strong></p>\n<ul>\n<li>那什么时候运行再内核空间什么时候运行再用户空间呢？</li>\n</ul>\n<blockquote>\n<p>当我们需要进行IO操作时，如读写硬盘文件、读写网卡数据等，进程需要切换到内核态，否则无法进行这样的操作，无论是从内核态切换到用户态，还是从用户态切换到内核态，都需要进行一次上下文的切换。一般情况下，应用不能直接操作内核空间的数据，需要把内核态的数据拷贝到用户空间才能操作。</p>\n</blockquote>\n<blockquote>\n<p>比如我们 Java 中需要新建一个线程，调用 start() 方法时，基于Hotspot Linux 的JVM 源码实现，最终是调<code>pthread_create</code>系统方法来创建的线程，这里会从用户态切换到内核态完成系统资源的分配，线程的创建。</p>\n</blockquote>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.ymdgdg0666o.webp\" width=\"60%\">\n\n<ul>\n<li>当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于内核运行态（内核态）</li>\n</ul>\n<blockquote>\n<p>Tips：除了系统调用可以实现用户态到内核态的切换，软中断和硬中断也会切换用户态和内核态。</p>\n</blockquote>\n<ul>\n<li>在内核态下：进程运行在内核地址空间中，此时 CPU 可以执行任何指令。运行的代码也不受任何的限制，可以自由地访问任何有效地址，也可以直接进行端口的访问。</li>\n<li>在用户态下：进程运行在用户地址空间中，被执行的代码要受到 CPU 的很多检查，比如：进程只能访问映射其地址空间的页表项中规定的在用户态下可访问页面的虚拟地址。</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"术语解释\"><a href=\"#术语解释\" class=\"headerlink\" title=\"术语解释\"></a>术语解释</h1><h2 id=\"核心态-内核态-Kernel-model-和用户态-User-model\"><a href=\"#核心态-内核态-Kernel-model-和用户态-User-model\" class=\"headerlink\" title=\"核心态/内核态(Kernel model)和用户态(User model)\"></a>核心态/内核态(Kernel model)和用户态(User model)</h2><p>&emsp;&emsp;核心态(Kernel model)和用户态(User model)，CPU会在两个model之间切换。</p>\n<ul>\n<li>核心态代码拥有完全的底层资源控制权限，可以执行任何CPU指令，访问任何内存地址，其占有的处理机是不允许被抢占的。内核态的指令包括：启动I/O，内存清零，修改程序状态字，设置时钟，允许/终止中断和停机。内核态的程序崩溃会导致PC停机。</li>\n<li>用户态是用户程序能够使用的指令，不能直接访问底层硬件和内存地址。用户态运行的程序必须委托系统调用来访问硬件和内存。用户态的指令包括：控制转移，算数运算，取数指令，访管指令（使用户程序从用户态陷入内核态）。</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"进程切换\"><a href=\"#进程切换\" class=\"headerlink\" title=\"进程切换\"></a>进程切换</h2><p>&emsp;&emsp;为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p>\n<blockquote>\n<ol>\n<li>保存处理机上下文，包括程序计数器和其他寄存器。</li>\n<li>更新PCB信息。</li>\n<li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</li>\n<li>选择另一个进程执行，并更新其PCB。</li>\n<li>更新内存管理的数据结构。</li>\n<li>恢复处理机上下文。</li>\n</ol>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"文件描述符-fd-File-Descriptor\"><a href=\"#文件描述符-fd-File-Descriptor\" class=\"headerlink\" title=\"文件描述符(fd, File Descriptor)\"></a>文件描述符(fd, File Descriptor)</h2><p>&emsp;&emsp;FD用于描述指向文件的引用的抽象化概念。文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p>\n<br>\n\n<br>\n\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"操作系统的应用与内核\"><a href=\"#操作系统的应用与内核\" class=\"headerlink\" title=\"操作系统的应用与内核\"></a>操作系统的应用与内核</h1><p>&emsp;&emsp;现代计算机是由硬件和操作系统组成，我们的应用程序要操作硬件（如往磁盘上写数据），就需要先与内核交互，然后再由内核与硬件交互；</p>\n<p>&emsp;&emsp;操作系统可以划分为：<strong>内核</strong>与<strong>应用</strong>两部分；</p>\n<p>&emsp;&emsp;内核提供进程管理、内存管理、网络等底层功能，封装了与硬件交互的接口，通过系统调用提供给上层应用使用。</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/6a59c5e5-a44b-444d-b5de-22a47319e41a.5r3m1k43n280.webp\" width=\"80%\">\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"内核空间与用户空间\"><a href=\"#内核空间与用户空间\" class=\"headerlink\" title=\"内核空间与用户空间\"></a>内核空间与用户空间</h1><p>&emsp;&emsp;现在操作系统都是采用虚拟地址空间，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间（内核空间），也有访问底层硬件设备的所有权限。</p>\n<p>&emsp;&emsp;为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为<strong>内核空间</strong>，一部分为<strong>用户空间</strong>。内核空间是操作系统内核访问的区域，独立于普通的应用程序，是<strong>受保护的内存空间</strong>。用户空间是普通应用程序可访问的内存区域。</p>\n<p>&emsp;&emsp;针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23luuh3fhlwg.webp\" width=\"60%\">\n\n<p>&emsp;&emsp;<strong>用户态的程序不能随意操作内核地址空间，即使用户的程序崩溃了，内核也不受影响。这样对操作系统具有一定的安全保护作用。</strong></p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"CPU指令等级\"><a href=\"#CPU指令等级\" class=\"headerlink\" title=\"CPU指令等级\"></a>CPU指令等级</h1><p>&emsp;&emsp;其实早期操作系统是不区分内核空间和用户空间的，但是应用程序能访问任意内存空间，如果程序不稳定常常把系统搞崩溃，比如清除操作系统的内存数据。后来觉得让应用程序随便访问内存太危险了，就按照CPU 指令的重要程度对指令进行了分级；</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5dnygfmt0ow0.webp\" width=\"40%\">\n\n\n\n<p>&emsp;&emsp;CPU指令分为四个级别：Ring0~Ring3，linux 只使用了 Ring0 和 Ring3 两个运行级别，进程运行Ring3级别的指令时运行在用户态，指令只访问用户空间，而运行在 Ring0级别时被称为运行在内核态，可以访问任意内存空间。</p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"进程的内核态和用户态\"><a href=\"#进程的内核态和用户态\" class=\"headerlink\" title=\"进程的内核态和用户态\"></a>进程的内核态和用户态</h1><p>&emsp;&emsp;<strong>当进程运行在内核空间时，它就处于内核态；当进程运行在用户空间时，它就处于用户态。</strong></p>\n<ul>\n<li>那什么时候运行再内核空间什么时候运行再用户空间呢？</li>\n</ul>\n<blockquote>\n<p>当我们需要进行IO操作时，如读写硬盘文件、读写网卡数据等，进程需要切换到内核态，否则无法进行这样的操作，无论是从内核态切换到用户态，还是从用户态切换到内核态，都需要进行一次上下文的切换。一般情况下，应用不能直接操作内核空间的数据，需要把内核态的数据拷贝到用户空间才能操作。</p>\n</blockquote>\n<blockquote>\n<p>比如我们 Java 中需要新建一个线程，调用 start() 方法时，基于Hotspot Linux 的JVM 源码实现，最终是调<code>pthread_create</code>系统方法来创建的线程，这里会从用户态切换到内核态完成系统资源的分配，线程的创建。</p>\n</blockquote>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.ymdgdg0666o.webp\" width=\"60%\">\n\n<ul>\n<li>当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于内核运行态（内核态）</li>\n</ul>\n<blockquote>\n<p>Tips：除了系统调用可以实现用户态到内核态的切换，软中断和硬中断也会切换用户态和内核态。</p>\n</blockquote>\n<ul>\n<li>在内核态下：进程运行在内核地址空间中，此时 CPU 可以执行任何指令。运行的代码也不受任何的限制，可以自由地访问任何有效地址，也可以直接进行端口的访问。</li>\n<li>在用户态下：进程运行在用户地址空间中，被执行的代码要受到 CPU 的很多检查，比如：进程只能访问映射其地址空间的页表项中规定的在用户态下可访问页面的虚拟地址。</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"术语解释\"><a href=\"#术语解释\" class=\"headerlink\" title=\"术语解释\"></a>术语解释</h1><h2 id=\"核心态-内核态-Kernel-model-和用户态-User-model\"><a href=\"#核心态-内核态-Kernel-model-和用户态-User-model\" class=\"headerlink\" title=\"核心态/内核态(Kernel model)和用户态(User model)\"></a>核心态/内核态(Kernel model)和用户态(User model)</h2><p>&emsp;&emsp;核心态(Kernel model)和用户态(User model)，CPU会在两个model之间切换。</p>\n<ul>\n<li>核心态代码拥有完全的底层资源控制权限，可以执行任何CPU指令，访问任何内存地址，其占有的处理机是不允许被抢占的。内核态的指令包括：启动I/O，内存清零，修改程序状态字，设置时钟，允许/终止中断和停机。内核态的程序崩溃会导致PC停机。</li>\n<li>用户态是用户程序能够使用的指令，不能直接访问底层硬件和内存地址。用户态运行的程序必须委托系统调用来访问硬件和内存。用户态的指令包括：控制转移，算数运算，取数指令，访管指令（使用户程序从用户态陷入内核态）。</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"进程切换\"><a href=\"#进程切换\" class=\"headerlink\" title=\"进程切换\"></a>进程切换</h2><p>&emsp;&emsp;为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p>\n<blockquote>\n<ol>\n<li>保存处理机上下文，包括程序计数器和其他寄存器。</li>\n<li>更新PCB信息。</li>\n<li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</li>\n<li>选择另一个进程执行，并更新其PCB。</li>\n<li>更新内存管理的数据结构。</li>\n<li>恢复处理机上下文。</li>\n</ol>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"文件描述符-fd-File-Descriptor\"><a href=\"#文件描述符-fd-File-Descriptor\" class=\"headerlink\" title=\"文件描述符(fd, File Descriptor)\"></a>文件描述符(fd, File Descriptor)</h2><p>&emsp;&emsp;FD用于描述指向文件的引用的抽象化概念。文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p>\n<br>\n\n<br>\n\n<br>"},{"title":"字符集和字符编码（Charset & Encoding）","date":"2022-09-10T13:03:57.000Z","auth":"ratears","update":"2022-08-30T18:12:50.000Z","_content":"\n# 引言\n\n- 复习Java I/O知识的时候，关于转换流有涉及到字符集的知识。于是想深入理解一下字符集和编码。（毕竟，字符编码是计算机技术、编程的基石，包括编程中涉及到的国际化问题，就必须懂得一点字符编码的知识）查阅相关资料后，并做了笔记\n\n<br>\n\n```java\n// charsetName：指定字符编码 \npublic InputStreamReader(InputStream in, String charsetName)\npublic OutputStreamWriter(OutputStream out, String charsetName)\n```\n\n```java\nInputStreamReader isr = new InputStreamReader(fis, \"GBK\");\nOutputStreamWriter osw = new OutputStreamWriter(fos, \"GBK\");\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 基础知识\n\n## 编码和解码\n\n- 编码：信息按照一定的规则从一种形式或格式转换为另一种形式的过程\n- 解码：是一个编码的逆转换过程\n\n> <font color=\"red\">编码解码都是有一套预先规定的方案,无论是在编码过程还是解码过程,都要遵守这套规则来运算</font>\n\n<br>\n\n<br>\n\n## 为什要编码解码\n\n- 在计算机中，是不能直接存储字符的，计算机中储存的信息都是用二进制数表示的；而我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，如'a'用什么表示，称为\"编码\"；反之，将存储在计算机中的二进制数解析显示出来，称为\"解码\"，如同密码学中的加密和解密。在解码过程中，如果使用了错误的解码规则，则导致'a'解析成'b'或者**乱码**\n- 编码解码在不同的场景中具有不同的意义，比如常见的字符编码解码,URL编码解码等\n\n> 计算机为什么采用二进制：有很多原因.在这里简单的说几点,在技术上易实现,因为我们可以使用双稳态电路来表示1和0,高电平为1,低电平为0.且因为只有1和0,所以在传输和处理的过程中不容易出错.另外二进制的运算规则也相对来说简单.综合各方面因素,最终计算机采用二进制\n\n<br>\n\n<br>\n\n## 字符集（Charset）\n\n- 字符集（Charset）是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等\n\n<br>\n\n<br>\n\n## 字符编码（Character Encoding）\n\n- 字符编码（Character Encoding）是一套法则，使用该法则能够对自然语言的字符的一个集合（如字母表或音节表），与其他东西的一个集合（如号码或电脉冲）进行配对。即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码（通俗的讲：计算机字符编码就是将 计算机里展示的字符集 和 计算机能理解的二进制数 对应起来）\n\n<br>\n\n<br>\n\n## 乱码\n\n- 乱码就是因为使用了不对应的字符集导致部分或所有字符没法被正确阅读。（就比如我告诉你,打开新华字典的xx页的xx行,就是我想对你说的话.结果你拿了本牛津英汉字典,那你当然不能正确获取到我想对你说的话）\n\n<br>\n\n<br>\n\n### 为什么有时候乱码都是 ? 号\n\n- 在 `Java` 开发中，经常会碰到乱码显示为 `?` 号，比如下面这个例子：\n\n```java\nString name = \"双子孤狼\";\nbyte[] bytes = name.getBytes(StandardCharsets.ISO_8859_1);\nSystem.out.println(new String(bytes));//输出：????\n```\n\n- 这个输出结果的原因是中文无法用 `ISO_8859_1` 编码进行存储，而示例中却强制用 `ISO_8859_1` 编码进行解码\n\n> 在 `Java` 中提供了一个 `ISO_8859_1` 类用来解码，解码时当发现当前字符转成十进制之后大于 `255` 时就会直接不进行解码，转而直接赋一个默认值 `63`，所以上面的示例中的 `byte` 数组结果就是 `63 63 63 63`，而`63` 在 `ASCII` 中就恰好就对应了 `?` 号。\n>\n> 所以一般我们看到编码出现 `?` 基本就说明当前是采用 `ISO_8859_1` 进行的解码，而当前的字符又大于 `255`\n\n<br>\n\n<br>\n\n<br>\n\n# 常用字符集和字符编码\n\n- 常见字符集名称：ASCII字符集、GB2312字符集、BIG5字符集、GB18030字符集、Unicode字符集等。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/微信图片_20220910225027-(1).2kjjnk2mwyy0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n## ASCII字符集&编码\n\n- 计算机最开始诞生于美国，而且计算机只能识别二进制，所以我们就需要把常用语言和二进制关联起来。美国人把英文里面常用的字符以及一些控制字符转换成了二进制数据，形成了一个编码对应关系表，这就是ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）字符集和ASCII编码\n- ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被Unicode追上的迹象），并等同于国际标准ISO/IEC 646\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6hglwgjozx80.webp\" width=\"70%\"/>\n\n<br>\n\n- **ASCII字符集：**主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）\n- **ASCII编码：**将ASCII字符集转换为计算机可以接受的数字系统的数的规则\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qu3exerer80.webp\" width=\"60%\"/>\n\n<br>\n\n> 使用7位（bits）表示一个字符，共128字符；但是7位编码的字符集只能支持128个字符，为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用8位（bits）表示一个字符，共256字符\n\n<br>\n\n- ASCII编码表\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.632akue1h1s0.webp\" width=\"70%\"/>\n\n<br>\n\n- 扩展ASCII编码表\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4selgy9t3da0.webp\" width=\"70%\"/>\n\n<br>\n\n> <font color=\"red\">ASCII的最大缺点是只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部份西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的苹果电脑已经抛弃ASCII而转用Unicode</font>\n\n<br>\n\n<br>\n\n## GBXXXX字符集&编码\n\n- 当天朝也有了计算机之后，ASCII字符集（编码）不够用。为了显示中文，必须设计一套编码规则用于将汉字转换为计算机可以接受的数字系统的数\n- 天朝专家把那些127号之后的奇异符号们（即EASCII）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的\"全角\"字符，而原来在127号以下的那些就叫\"半角\"字符了\n\n<br>\n\n<br>\n\n### GB2312字符集&编码\n\n#### GB2312字符集设计\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.376tsyyf9wu0.webp\" width=\"70%\"/>\n\n<br>\n\n- 01~09区表示除汉子外的682个字符\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3x9vnc4ax1c0.webp\" width=\"70%\"/>\n\n<br>\n\n- 10~15区是空白区\n\n- 16~55区收录3755个一级汉字，按拼音排序\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1g8kw6mqnk80.webp\" width=\"70%\"/>\n\n<br>\n\n- 56~87区收录了3008个二级汉字，按部首/笔画排序（不太常用的、生僻汉字）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.x9xgkbmfbhc.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n#### GB2312字符编码设计\n\n- 规定如何在计算机中存储\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lyrzte8k8o.webp\" width=\"70%\"/>\n\n<br>\n\n> 以`侃`这个字为例，`侃`这个字的码位是 `5709`，按前两位和后两位分开（`57`和`09`）并将其转化为16进制（`0x39`和`0x09`），再分别加上`0xA0`，得到`0xD9`和`0xA9`，再将其组合到一起得到`0xD90xA9`，`0xD90xA9`便是`侃`这个字的GB2312编码值。即计算机使用GB2312编码时，`侃`这个字在计算机中存储的16进制形式是：`D9A9`\n\n- Java获取某个汉字的GB2312编码值\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.46qrewk6ons0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n### GB2312字符集扩展\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.585csd88dpw0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n## Unicode字符集&UTF编码\n\n- Unicode 只是一个字符集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储\n\n- unicode是一个标准，其包含了对应的字符集和编码规则。UTF-32/ UTF-16/ UTF-8是三种字符编码方案（即：UTF-8 是 Unicode 的实现方式之一）\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6film7n2p0s0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n### UTF-8 编码\n\n- UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的**可变长度字符编码（定长码）**，也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用\n\n- UTF-8编码是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度（每次传送8位数据）\n- UTF-8 的编码规则（存储规范）：\n  - 对于单字节的符号，字节的第一位设为`0`，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的\n  - 对于`n`字节的符号（`n > 1`），第一个字节的前`n`位都设为`1`，第`n + 1`位设为`0`，后面字节的前两位一律设为`10`。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码\n\n| Unicode符号范围（十六进制） | UTF-8编码方式（二进制）             |\n| :-------------------------: | :---------------------------------- |\n|  0x0000 0000 - 0x0000 007F  | 0xxxxxxx                            |\n|  0x0000 0080 - 0x0000 07FF  | 110xxxxx 10xxxxxx                   |\n|  0x0000 0800 - 0x0000 FFFF  | 1110xxxx 10xxxxxx 10xxxxxx          |\n|  0x0001 0000 - 0x0010 FFFF  | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx |\n\n> 跟据上表（字母x表示可用编码的位），解读 UTF-8 编码非常简单。如果一个字节的第一位是`0`，则这个字节单独就是一个字符；如果第一位是`1`，则连续有多少个`1`，就表示当前字符占用多少个字节\n\n- 以汉字`严`为例，演示如何实现 UTF-8 编码\n\n> `严`的 Unicode 是`4E25`（`100111000100101`），根据上表，可以发现`4E25`处在第三行的范围内（`0000 0800 - 0000 FFFF`），因此`严`的 UTF-8 编码需要三个字节，即格式是`1110xxxx 10xxxxxx 10xxxxxx`。然后，从`严`的最后一个二进制位开始，依次从后向前填入格式中的`x`，多出的位补`0`。这样就得到了，`严`的 UTF-8 编码是`11100100 10111000 10100101`，转换成十六进制就是`E4B8A5`。（即：计算机使用`Unicode`编码时，`严`这个字在计算机中存储的16进制形式是：`E4B8A5`）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hiq48s9b7k.webp\" width=\"70%\"/>\n\n<br>\n\n# 参考与延伸\n\n- 阮一峰博客：[字符编码笔记：ASCII，Unicode 和 UTF-8](https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\n- runoob（菜鸟教程）：[字符集和字符编码](https://www.runoob.com/w3cnote/charset-encoding.html)\n- [字符集历史](https://www.cnblogs.com/lonely-wolf/p/14676335.html)\n\n<br>","source":"_posts/2022/字符集和字符编码（Charset-Encoding）.md","raw":"---\ntitle: 字符集和字符编码（Charset & Encoding）\ndate: 2022-09-10 21:03:57\nauth: ratears\nupdate: 2022-08-31 02:12:50\ncategories:\n\t- [computer,character encoding]\ntags:\n\t- computer\n\t- character encoding\n---\n\n# 引言\n\n- 复习Java I/O知识的时候，关于转换流有涉及到字符集的知识。于是想深入理解一下字符集和编码。（毕竟，字符编码是计算机技术、编程的基石，包括编程中涉及到的国际化问题，就必须懂得一点字符编码的知识）查阅相关资料后，并做了笔记\n\n<br>\n\n```java\n// charsetName：指定字符编码 \npublic InputStreamReader(InputStream in, String charsetName)\npublic OutputStreamWriter(OutputStream out, String charsetName)\n```\n\n```java\nInputStreamReader isr = new InputStreamReader(fis, \"GBK\");\nOutputStreamWriter osw = new OutputStreamWriter(fos, \"GBK\");\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 基础知识\n\n## 编码和解码\n\n- 编码：信息按照一定的规则从一种形式或格式转换为另一种形式的过程\n- 解码：是一个编码的逆转换过程\n\n> <font color=\"red\">编码解码都是有一套预先规定的方案,无论是在编码过程还是解码过程,都要遵守这套规则来运算</font>\n\n<br>\n\n<br>\n\n## 为什要编码解码\n\n- 在计算机中，是不能直接存储字符的，计算机中储存的信息都是用二进制数表示的；而我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，如'a'用什么表示，称为\"编码\"；反之，将存储在计算机中的二进制数解析显示出来，称为\"解码\"，如同密码学中的加密和解密。在解码过程中，如果使用了错误的解码规则，则导致'a'解析成'b'或者**乱码**\n- 编码解码在不同的场景中具有不同的意义，比如常见的字符编码解码,URL编码解码等\n\n> 计算机为什么采用二进制：有很多原因.在这里简单的说几点,在技术上易实现,因为我们可以使用双稳态电路来表示1和0,高电平为1,低电平为0.且因为只有1和0,所以在传输和处理的过程中不容易出错.另外二进制的运算规则也相对来说简单.综合各方面因素,最终计算机采用二进制\n\n<br>\n\n<br>\n\n## 字符集（Charset）\n\n- 字符集（Charset）是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等\n\n<br>\n\n<br>\n\n## 字符编码（Character Encoding）\n\n- 字符编码（Character Encoding）是一套法则，使用该法则能够对自然语言的字符的一个集合（如字母表或音节表），与其他东西的一个集合（如号码或电脉冲）进行配对。即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码（通俗的讲：计算机字符编码就是将 计算机里展示的字符集 和 计算机能理解的二进制数 对应起来）\n\n<br>\n\n<br>\n\n## 乱码\n\n- 乱码就是因为使用了不对应的字符集导致部分或所有字符没法被正确阅读。（就比如我告诉你,打开新华字典的xx页的xx行,就是我想对你说的话.结果你拿了本牛津英汉字典,那你当然不能正确获取到我想对你说的话）\n\n<br>\n\n<br>\n\n### 为什么有时候乱码都是 ? 号\n\n- 在 `Java` 开发中，经常会碰到乱码显示为 `?` 号，比如下面这个例子：\n\n```java\nString name = \"双子孤狼\";\nbyte[] bytes = name.getBytes(StandardCharsets.ISO_8859_1);\nSystem.out.println(new String(bytes));//输出：????\n```\n\n- 这个输出结果的原因是中文无法用 `ISO_8859_1` 编码进行存储，而示例中却强制用 `ISO_8859_1` 编码进行解码\n\n> 在 `Java` 中提供了一个 `ISO_8859_1` 类用来解码，解码时当发现当前字符转成十进制之后大于 `255` 时就会直接不进行解码，转而直接赋一个默认值 `63`，所以上面的示例中的 `byte` 数组结果就是 `63 63 63 63`，而`63` 在 `ASCII` 中就恰好就对应了 `?` 号。\n>\n> 所以一般我们看到编码出现 `?` 基本就说明当前是采用 `ISO_8859_1` 进行的解码，而当前的字符又大于 `255`\n\n<br>\n\n<br>\n\n<br>\n\n# 常用字符集和字符编码\n\n- 常见字符集名称：ASCII字符集、GB2312字符集、BIG5字符集、GB18030字符集、Unicode字符集等。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/微信图片_20220910225027-(1).2kjjnk2mwyy0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n## ASCII字符集&编码\n\n- 计算机最开始诞生于美国，而且计算机只能识别二进制，所以我们就需要把常用语言和二进制关联起来。美国人把英文里面常用的字符以及一些控制字符转换成了二进制数据，形成了一个编码对应关系表，这就是ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）字符集和ASCII编码\n- ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被Unicode追上的迹象），并等同于国际标准ISO/IEC 646\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6hglwgjozx80.webp\" width=\"70%\"/>\n\n<br>\n\n- **ASCII字符集：**主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）\n- **ASCII编码：**将ASCII字符集转换为计算机可以接受的数字系统的数的规则\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qu3exerer80.webp\" width=\"60%\"/>\n\n<br>\n\n> 使用7位（bits）表示一个字符，共128字符；但是7位编码的字符集只能支持128个字符，为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用8位（bits）表示一个字符，共256字符\n\n<br>\n\n- ASCII编码表\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.632akue1h1s0.webp\" width=\"70%\"/>\n\n<br>\n\n- 扩展ASCII编码表\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4selgy9t3da0.webp\" width=\"70%\"/>\n\n<br>\n\n> <font color=\"red\">ASCII的最大缺点是只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部份西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的苹果电脑已经抛弃ASCII而转用Unicode</font>\n\n<br>\n\n<br>\n\n## GBXXXX字符集&编码\n\n- 当天朝也有了计算机之后，ASCII字符集（编码）不够用。为了显示中文，必须设计一套编码规则用于将汉字转换为计算机可以接受的数字系统的数\n- 天朝专家把那些127号之后的奇异符号们（即EASCII）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的\"全角\"字符，而原来在127号以下的那些就叫\"半角\"字符了\n\n<br>\n\n<br>\n\n### GB2312字符集&编码\n\n#### GB2312字符集设计\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.376tsyyf9wu0.webp\" width=\"70%\"/>\n\n<br>\n\n- 01~09区表示除汉子外的682个字符\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3x9vnc4ax1c0.webp\" width=\"70%\"/>\n\n<br>\n\n- 10~15区是空白区\n\n- 16~55区收录3755个一级汉字，按拼音排序\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1g8kw6mqnk80.webp\" width=\"70%\"/>\n\n<br>\n\n- 56~87区收录了3008个二级汉字，按部首/笔画排序（不太常用的、生僻汉字）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.x9xgkbmfbhc.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n#### GB2312字符编码设计\n\n- 规定如何在计算机中存储\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lyrzte8k8o.webp\" width=\"70%\"/>\n\n<br>\n\n> 以`侃`这个字为例，`侃`这个字的码位是 `5709`，按前两位和后两位分开（`57`和`09`）并将其转化为16进制（`0x39`和`0x09`），再分别加上`0xA0`，得到`0xD9`和`0xA9`，再将其组合到一起得到`0xD90xA9`，`0xD90xA9`便是`侃`这个字的GB2312编码值。即计算机使用GB2312编码时，`侃`这个字在计算机中存储的16进制形式是：`D9A9`\n\n- Java获取某个汉字的GB2312编码值\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.46qrewk6ons0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n### GB2312字符集扩展\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.585csd88dpw0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n## Unicode字符集&UTF编码\n\n- Unicode 只是一个字符集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储\n\n- unicode是一个标准，其包含了对应的字符集和编码规则。UTF-32/ UTF-16/ UTF-8是三种字符编码方案（即：UTF-8 是 Unicode 的实现方式之一）\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6film7n2p0s0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n### UTF-8 编码\n\n- UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的**可变长度字符编码（定长码）**，也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用\n\n- UTF-8编码是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度（每次传送8位数据）\n- UTF-8 的编码规则（存储规范）：\n  - 对于单字节的符号，字节的第一位设为`0`，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的\n  - 对于`n`字节的符号（`n > 1`），第一个字节的前`n`位都设为`1`，第`n + 1`位设为`0`，后面字节的前两位一律设为`10`。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码\n\n| Unicode符号范围（十六进制） | UTF-8编码方式（二进制）             |\n| :-------------------------: | :---------------------------------- |\n|  0x0000 0000 - 0x0000 007F  | 0xxxxxxx                            |\n|  0x0000 0080 - 0x0000 07FF  | 110xxxxx 10xxxxxx                   |\n|  0x0000 0800 - 0x0000 FFFF  | 1110xxxx 10xxxxxx 10xxxxxx          |\n|  0x0001 0000 - 0x0010 FFFF  | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx |\n\n> 跟据上表（字母x表示可用编码的位），解读 UTF-8 编码非常简单。如果一个字节的第一位是`0`，则这个字节单独就是一个字符；如果第一位是`1`，则连续有多少个`1`，就表示当前字符占用多少个字节\n\n- 以汉字`严`为例，演示如何实现 UTF-8 编码\n\n> `严`的 Unicode 是`4E25`（`100111000100101`），根据上表，可以发现`4E25`处在第三行的范围内（`0000 0800 - 0000 FFFF`），因此`严`的 UTF-8 编码需要三个字节，即格式是`1110xxxx 10xxxxxx 10xxxxxx`。然后，从`严`的最后一个二进制位开始，依次从后向前填入格式中的`x`，多出的位补`0`。这样就得到了，`严`的 UTF-8 编码是`11100100 10111000 10100101`，转换成十六进制就是`E4B8A5`。（即：计算机使用`Unicode`编码时，`严`这个字在计算机中存储的16进制形式是：`E4B8A5`）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hiq48s9b7k.webp\" width=\"70%\"/>\n\n<br>\n\n# 参考与延伸\n\n- 阮一峰博客：[字符编码笔记：ASCII，Unicode 和 UTF-8](https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\n- runoob（菜鸟教程）：[字符集和字符编码](https://www.runoob.com/w3cnote/charset-encoding.html)\n- [字符集历史](https://www.cnblogs.com/lonely-wolf/p/14676335.html)\n\n<br>","slug":"字符集和字符编码（Charset-Encoding）","published":1,"updated":"2022-09-10T17:35:45.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnq0027dcta4kbmba59","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><ul>\n<li>复习Java I/O知识的时候，关于转换流有涉及到字符集的知识。于是想深入理解一下字符集和编码。（毕竟，字符编码是计算机技术、编程的基石，包括编程中涉及到的国际化问题，就必须懂得一点字符编码的知识）查阅相关资料后，并做了笔记</li>\n</ul>\n<br>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// charsetName：指定字符编码 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">InputStreamReader</span><span class=\"params\">(InputStream in, String charsetName)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">OutputStreamWriter</span><span class=\"params\">(OutputStream out, String charsetName)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InputStreamReader</span> <span class=\"variable\">isr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fis, <span class=\"string\">&quot;GBK&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">osw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(fos, <span class=\"string\">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"编码和解码\"><a href=\"#编码和解码\" class=\"headerlink\" title=\"编码和解码\"></a>编码和解码</h2><ul>\n<li>编码：信息按照一定的规则从一种形式或格式转换为另一种形式的过程</li>\n<li>解码：是一个编码的逆转换过程</li>\n</ul>\n<blockquote>\n<p><font color=\"red\">编码解码都是有一套预先规定的方案,无论是在编码过程还是解码过程,都要遵守这套规则来运算</font></p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"为什要编码解码\"><a href=\"#为什要编码解码\" class=\"headerlink\" title=\"为什要编码解码\"></a>为什要编码解码</h2><ul>\n<li>在计算机中，是不能直接存储字符的，计算机中储存的信息都是用二进制数表示的；而我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，如’a’用什么表示，称为”编码”；反之，将存储在计算机中的二进制数解析显示出来，称为”解码”，如同密码学中的加密和解密。在解码过程中，如果使用了错误的解码规则，则导致’a’解析成’b’或者<strong>乱码</strong></li>\n<li>编码解码在不同的场景中具有不同的意义，比如常见的字符编码解码,URL编码解码等</li>\n</ul>\n<blockquote>\n<p>计算机为什么采用二进制：有很多原因.在这里简单的说几点,在技术上易实现,因为我们可以使用双稳态电路来表示1和0,高电平为1,低电平为0.且因为只有1和0,所以在传输和处理的过程中不容易出错.另外二进制的运算规则也相对来说简单.综合各方面因素,最终计算机采用二进制</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"字符集（Charset）\"><a href=\"#字符集（Charset）\" class=\"headerlink\" title=\"字符集（Charset）\"></a>字符集（Charset）</h2><ul>\n<li>字符集（Charset）是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"字符编码（Character-Encoding）\"><a href=\"#字符编码（Character-Encoding）\" class=\"headerlink\" title=\"字符编码（Character Encoding）\"></a>字符编码（Character Encoding）</h2><ul>\n<li>字符编码（Character Encoding）是一套法则，使用该法则能够对自然语言的字符的一个集合（如字母表或音节表），与其他东西的一个集合（如号码或电脉冲）进行配对。即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码（通俗的讲：计算机字符编码就是将 计算机里展示的字符集 和 计算机能理解的二进制数 对应起来）</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"乱码\"><a href=\"#乱码\" class=\"headerlink\" title=\"乱码\"></a>乱码</h2><ul>\n<li>乱码就是因为使用了不对应的字符集导致部分或所有字符没法被正确阅读。（就比如我告诉你,打开新华字典的xx页的xx行,就是我想对你说的话.结果你拿了本牛津英汉字典,那你当然不能正确获取到我想对你说的话）</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"为什么有时候乱码都是-号\"><a href=\"#为什么有时候乱码都是-号\" class=\"headerlink\" title=\"为什么有时候乱码都是 ? 号\"></a>为什么有时候乱码都是 ? 号</h3><ul>\n<li>在 <code>Java</code> 开发中，经常会碰到乱码显示为 <code>?</code> 号，比如下面这个例子：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;双子孤狼&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span>[] bytes = name.getBytes(StandardCharsets.ISO_8859_1);</span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes));<span class=\"comment\">//输出：????</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这个输出结果的原因是中文无法用 <code>ISO_8859_1</code> 编码进行存储，而示例中却强制用 <code>ISO_8859_1</code> 编码进行解码</li>\n</ul>\n<blockquote>\n<p>在 <code>Java</code> 中提供了一个 <code>ISO_8859_1</code> 类用来解码，解码时当发现当前字符转成十进制之后大于 <code>255</code> 时就会直接不进行解码，转而直接赋一个默认值 <code>63</code>，所以上面的示例中的 <code>byte</code> 数组结果就是 <code>63 63 63 63</code>，而<code>63</code> 在 <code>ASCII</code> 中就恰好就对应了 <code>?</code> 号。</p>\n<p>所以一般我们看到编码出现 <code>?</code> 基本就说明当前是采用 <code>ISO_8859_1</code> 进行的解码，而当前的字符又大于 <code>255</code></p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"常用字符集和字符编码\"><a href=\"#常用字符集和字符编码\" class=\"headerlink\" title=\"常用字符集和字符编码\"></a>常用字符集和字符编码</h1><ul>\n<li>常见字符集名称：ASCII字符集、GB2312字符集、BIG5字符集、GB18030字符集、Unicode字符集等。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/微信图片_20220910225027-(1).2kjjnk2mwyy0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"ASCII字符集-amp-编码\"><a href=\"#ASCII字符集-amp-编码\" class=\"headerlink\" title=\"ASCII字符集&amp;编码\"></a>ASCII字符集&amp;编码</h2><ul>\n<li>计算机最开始诞生于美国，而且计算机只能识别二进制，所以我们就需要把常用语言和二进制关联起来。美国人把英文里面常用的字符以及一些控制字符转换成了二进制数据，形成了一个编码对应关系表，这就是ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）字符集和ASCII编码</li>\n<li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被Unicode追上的迹象），并等同于国际标准ISO/IEC 646</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6hglwgjozx80.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li><strong>ASCII字符集：</strong>主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）</li>\n<li><strong>ASCII编码：</strong>将ASCII字符集转换为计算机可以接受的数字系统的数的规则</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qu3exerer80.webp\" width=\"60%\"/>\n\n<br>\n\n<blockquote>\n<p>使用7位（bits）表示一个字符，共128字符；但是7位编码的字符集只能支持128个字符，为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用8位（bits）表示一个字符，共256字符</p>\n</blockquote>\n<br>\n\n<ul>\n<li>ASCII编码表</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.632akue1h1s0.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li>扩展ASCII编码表</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4selgy9t3da0.webp\" width=\"70%\"/>\n\n<br>\n\n<blockquote>\n<p><font color=\"red\">ASCII的最大缺点是只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部份西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的苹果电脑已经抛弃ASCII而转用Unicode</font></p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"GBXXXX字符集-amp-编码\"><a href=\"#GBXXXX字符集-amp-编码\" class=\"headerlink\" title=\"GBXXXX字符集&amp;编码\"></a>GBXXXX字符集&amp;编码</h2><ul>\n<li>当天朝也有了计算机之后，ASCII字符集（编码）不够用。为了显示中文，必须设计一套编码规则用于将汉字转换为计算机可以接受的数字系统的数</li>\n<li>天朝专家把那些127号之后的奇异符号们（即EASCII）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"GB2312字符集-amp-编码\"><a href=\"#GB2312字符集-amp-编码\" class=\"headerlink\" title=\"GB2312字符集&amp;编码\"></a>GB2312字符集&amp;编码</h3><h4 id=\"GB2312字符集设计\"><a href=\"#GB2312字符集设计\" class=\"headerlink\" title=\"GB2312字符集设计\"></a>GB2312字符集设计</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.376tsyyf9wu0.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li>01~09区表示除汉子外的682个字符</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3x9vnc4ax1c0.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li><p>10~15区是空白区</p>\n</li>\n<li><p>16~55区收录3755个一级汉字，按拼音排序</p>\n</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1g8kw6mqnk80.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li>56~87区收录了3008个二级汉字，按部首/笔画排序（不太常用的、生僻汉字）</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.x9xgkbmfbhc.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<h4 id=\"GB2312字符编码设计\"><a href=\"#GB2312字符编码设计\" class=\"headerlink\" title=\"GB2312字符编码设计\"></a>GB2312字符编码设计</h4><ul>\n<li>规定如何在计算机中存储</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lyrzte8k8o.webp\" width=\"70%\"/>\n\n<br>\n\n<blockquote>\n<p>以<code>侃</code>这个字为例，<code>侃</code>这个字的码位是 <code>5709</code>，按前两位和后两位分开（<code>57</code>和<code>09</code>）并将其转化为16进制（<code>0x39</code>和<code>0x09</code>），再分别加上<code>0xA0</code>，得到<code>0xD9</code>和<code>0xA9</code>，再将其组合到一起得到<code>0xD90xA9</code>，<code>0xD90xA9</code>便是<code>侃</code>这个字的GB2312编码值。即计算机使用GB2312编码时，<code>侃</code>这个字在计算机中存储的16进制形式是：<code>D9A9</code></p>\n</blockquote>\n<ul>\n<li>Java获取某个汉字的GB2312编码值</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.46qrewk6ons0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<h3 id=\"GB2312字符集扩展\"><a href=\"#GB2312字符集扩展\" class=\"headerlink\" title=\"GB2312字符集扩展\"></a>GB2312字符集扩展</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.585csd88dpw0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"Unicode字符集-amp-UTF编码\"><a href=\"#Unicode字符集-amp-UTF编码\" class=\"headerlink\" title=\"Unicode字符集&amp;UTF编码\"></a>Unicode字符集&amp;UTF编码</h2><ul>\n<li><p>Unicode 只是一个字符集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</p>\n</li>\n<li><p>unicode是一个标准，其包含了对应的字符集和编码规则。UTF-32/ UTF-16/ UTF-8是三种字符编码方案（即：UTF-8 是 Unicode 的实现方式之一）</p>\n</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6film7n2p0s0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<h3 id=\"UTF-8-编码\"><a href=\"#UTF-8-编码\" class=\"headerlink\" title=\"UTF-8 编码\"></a>UTF-8 编码</h3><ul>\n<li><p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的<strong>可变长度字符编码（定长码）</strong>，也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用</p>\n</li>\n<li><p>UTF-8编码是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度（每次传送8位数据）</p>\n</li>\n<li><p>UTF-8 的编码规则（存储规范）：</p>\n<ul>\n<li>对于单字节的符号，字节的第一位设为<code>0</code>，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的</li>\n<li>对于<code>n</code>字节的符号（<code>n &gt; 1</code>），第一个字节的前<code>n</code>位都设为<code>1</code>，第<code>n + 1</code>位设为<code>0</code>，后面字节的前两位一律设为<code>10</code>。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Unicode符号范围（十六进制）</th>\n<th align=\"left\">UTF-8编码方式（二进制）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x0000 0000 - 0x0000 007F</td>\n<td align=\"left\">0xxxxxxx</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000 0080 - 0x0000 07FF</td>\n<td align=\"left\">110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000 0800 - 0x0000 FFFF</td>\n<td align=\"left\">1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td align=\"center\">0x0001 0000 - 0x0010 FFFF</td>\n<td align=\"left\">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>跟据上表（字母x表示可用编码的位），解读 UTF-8 编码非常简单。如果一个字节的第一位是<code>0</code>，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则连续有多少个<code>1</code>，就表示当前字符占用多少个字节</p>\n</blockquote>\n<ul>\n<li>以汉字<code>严</code>为例，演示如何实现 UTF-8 编码</li>\n</ul>\n<blockquote>\n<p><code>严</code>的 Unicode 是<code>4E25</code>（<code>100111000100101</code>），根据上表，可以发现<code>4E25</code>处在第三行的范围内（<code>0000 0800 - 0000 FFFF</code>），因此<code>严</code>的 UTF-8 编码需要三个字节，即格式是<code>1110xxxx 10xxxxxx 10xxxxxx</code>。然后，从<code>严</code>的最后一个二进制位开始，依次从后向前填入格式中的<code>x</code>，多出的位补<code>0</code>。这样就得到了，<code>严</code>的 UTF-8 编码是<code>11100100 10111000 10100101</code>，转换成十六进制就是<code>E4B8A5</code>。（即：计算机使用<code>Unicode</code>编码时，<code>严</code>这个字在计算机中存储的16进制形式是：<code>E4B8A5</code>）</p>\n</blockquote>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hiq48s9b7k.webp\" width=\"70%\"/>\n\n<br>\n\n<h1 id=\"参考与延伸\"><a href=\"#参考与延伸\" class=\"headerlink\" title=\"参考与延伸\"></a>参考与延伸</h1><ul>\n<li>阮一峰博客：<a class=\"link\"   href=\"https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\" >字符编码笔记：ASCII，Unicode 和 UTF-8<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>runoob（菜鸟教程）：<a class=\"link\"   href=\"https://www.runoob.com/w3cnote/charset-encoding.html\" >字符集和字符编码<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/lonely-wolf/p/14676335.html\" >字符集历史<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><ul>\n<li>复习Java I/O知识的时候，关于转换流有涉及到字符集的知识。于是想深入理解一下字符集和编码。（毕竟，字符编码是计算机技术、编程的基石，包括编程中涉及到的国际化问题，就必须懂得一点字符编码的知识）查阅相关资料后，并做了笔记</li>\n</ul>\n<br>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// charsetName：指定字符编码 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">InputStreamReader</span><span class=\"params\">(InputStream in, String charsetName)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">OutputStreamWriter</span><span class=\"params\">(OutputStream out, String charsetName)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InputStreamReader</span> <span class=\"variable\">isr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fis, <span class=\"string\">&quot;GBK&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">osw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(fos, <span class=\"string\">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"编码和解码\"><a href=\"#编码和解码\" class=\"headerlink\" title=\"编码和解码\"></a>编码和解码</h2><ul>\n<li>编码：信息按照一定的规则从一种形式或格式转换为另一种形式的过程</li>\n<li>解码：是一个编码的逆转换过程</li>\n</ul>\n<blockquote>\n<p><font color=\"red\">编码解码都是有一套预先规定的方案,无论是在编码过程还是解码过程,都要遵守这套规则来运算</font></p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"为什要编码解码\"><a href=\"#为什要编码解码\" class=\"headerlink\" title=\"为什要编码解码\"></a>为什要编码解码</h2><ul>\n<li>在计算机中，是不能直接存储字符的，计算机中储存的信息都是用二进制数表示的；而我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，如’a’用什么表示，称为”编码”；反之，将存储在计算机中的二进制数解析显示出来，称为”解码”，如同密码学中的加密和解密。在解码过程中，如果使用了错误的解码规则，则导致’a’解析成’b’或者<strong>乱码</strong></li>\n<li>编码解码在不同的场景中具有不同的意义，比如常见的字符编码解码,URL编码解码等</li>\n</ul>\n<blockquote>\n<p>计算机为什么采用二进制：有很多原因.在这里简单的说几点,在技术上易实现,因为我们可以使用双稳态电路来表示1和0,高电平为1,低电平为0.且因为只有1和0,所以在传输和处理的过程中不容易出错.另外二进制的运算规则也相对来说简单.综合各方面因素,最终计算机采用二进制</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"字符集（Charset）\"><a href=\"#字符集（Charset）\" class=\"headerlink\" title=\"字符集（Charset）\"></a>字符集（Charset）</h2><ul>\n<li>字符集（Charset）是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"字符编码（Character-Encoding）\"><a href=\"#字符编码（Character-Encoding）\" class=\"headerlink\" title=\"字符编码（Character Encoding）\"></a>字符编码（Character Encoding）</h2><ul>\n<li>字符编码（Character Encoding）是一套法则，使用该法则能够对自然语言的字符的一个集合（如字母表或音节表），与其他东西的一个集合（如号码或电脉冲）进行配对。即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码（通俗的讲：计算机字符编码就是将 计算机里展示的字符集 和 计算机能理解的二进制数 对应起来）</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"乱码\"><a href=\"#乱码\" class=\"headerlink\" title=\"乱码\"></a>乱码</h2><ul>\n<li>乱码就是因为使用了不对应的字符集导致部分或所有字符没法被正确阅读。（就比如我告诉你,打开新华字典的xx页的xx行,就是我想对你说的话.结果你拿了本牛津英汉字典,那你当然不能正确获取到我想对你说的话）</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"为什么有时候乱码都是-号\"><a href=\"#为什么有时候乱码都是-号\" class=\"headerlink\" title=\"为什么有时候乱码都是 ? 号\"></a>为什么有时候乱码都是 ? 号</h3><ul>\n<li>在 <code>Java</code> 开发中，经常会碰到乱码显示为 <code>?</code> 号，比如下面这个例子：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;双子孤狼&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span>[] bytes = name.getBytes(StandardCharsets.ISO_8859_1);</span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes));<span class=\"comment\">//输出：????</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这个输出结果的原因是中文无法用 <code>ISO_8859_1</code> 编码进行存储，而示例中却强制用 <code>ISO_8859_1</code> 编码进行解码</li>\n</ul>\n<blockquote>\n<p>在 <code>Java</code> 中提供了一个 <code>ISO_8859_1</code> 类用来解码，解码时当发现当前字符转成十进制之后大于 <code>255</code> 时就会直接不进行解码，转而直接赋一个默认值 <code>63</code>，所以上面的示例中的 <code>byte</code> 数组结果就是 <code>63 63 63 63</code>，而<code>63</code> 在 <code>ASCII</code> 中就恰好就对应了 <code>?</code> 号。</p>\n<p>所以一般我们看到编码出现 <code>?</code> 基本就说明当前是采用 <code>ISO_8859_1</code> 进行的解码，而当前的字符又大于 <code>255</code></p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"常用字符集和字符编码\"><a href=\"#常用字符集和字符编码\" class=\"headerlink\" title=\"常用字符集和字符编码\"></a>常用字符集和字符编码</h1><ul>\n<li>常见字符集名称：ASCII字符集、GB2312字符集、BIG5字符集、GB18030字符集、Unicode字符集等。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/微信图片_20220910225027-(1).2kjjnk2mwyy0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"ASCII字符集-amp-编码\"><a href=\"#ASCII字符集-amp-编码\" class=\"headerlink\" title=\"ASCII字符集&amp;编码\"></a>ASCII字符集&amp;编码</h2><ul>\n<li>计算机最开始诞生于美国，而且计算机只能识别二进制，所以我们就需要把常用语言和二进制关联起来。美国人把英文里面常用的字符以及一些控制字符转换成了二进制数据，形成了一个编码对应关系表，这就是ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）字符集和ASCII编码</li>\n<li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被Unicode追上的迹象），并等同于国际标准ISO/IEC 646</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6hglwgjozx80.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li><strong>ASCII字符集：</strong>主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）</li>\n<li><strong>ASCII编码：</strong>将ASCII字符集转换为计算机可以接受的数字系统的数的规则</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qu3exerer80.webp\" width=\"60%\"/>\n\n<br>\n\n<blockquote>\n<p>使用7位（bits）表示一个字符，共128字符；但是7位编码的字符集只能支持128个字符，为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用8位（bits）表示一个字符，共256字符</p>\n</blockquote>\n<br>\n\n<ul>\n<li>ASCII编码表</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.632akue1h1s0.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li>扩展ASCII编码表</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4selgy9t3da0.webp\" width=\"70%\"/>\n\n<br>\n\n<blockquote>\n<p><font color=\"red\">ASCII的最大缺点是只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部份西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的苹果电脑已经抛弃ASCII而转用Unicode</font></p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"GBXXXX字符集-amp-编码\"><a href=\"#GBXXXX字符集-amp-编码\" class=\"headerlink\" title=\"GBXXXX字符集&amp;编码\"></a>GBXXXX字符集&amp;编码</h2><ul>\n<li>当天朝也有了计算机之后，ASCII字符集（编码）不够用。为了显示中文，必须设计一套编码规则用于将汉字转换为计算机可以接受的数字系统的数</li>\n<li>天朝专家把那些127号之后的奇异符号们（即EASCII）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"GB2312字符集-amp-编码\"><a href=\"#GB2312字符集-amp-编码\" class=\"headerlink\" title=\"GB2312字符集&amp;编码\"></a>GB2312字符集&amp;编码</h3><h4 id=\"GB2312字符集设计\"><a href=\"#GB2312字符集设计\" class=\"headerlink\" title=\"GB2312字符集设计\"></a>GB2312字符集设计</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.376tsyyf9wu0.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li>01~09区表示除汉子外的682个字符</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3x9vnc4ax1c0.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li><p>10~15区是空白区</p>\n</li>\n<li><p>16~55区收录3755个一级汉字，按拼音排序</p>\n</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1g8kw6mqnk80.webp\" width=\"70%\"/>\n\n<br>\n\n<ul>\n<li>56~87区收录了3008个二级汉字，按部首/笔画排序（不太常用的、生僻汉字）</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.x9xgkbmfbhc.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<h4 id=\"GB2312字符编码设计\"><a href=\"#GB2312字符编码设计\" class=\"headerlink\" title=\"GB2312字符编码设计\"></a>GB2312字符编码设计</h4><ul>\n<li>规定如何在计算机中存储</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lyrzte8k8o.webp\" width=\"70%\"/>\n\n<br>\n\n<blockquote>\n<p>以<code>侃</code>这个字为例，<code>侃</code>这个字的码位是 <code>5709</code>，按前两位和后两位分开（<code>57</code>和<code>09</code>）并将其转化为16进制（<code>0x39</code>和<code>0x09</code>），再分别加上<code>0xA0</code>，得到<code>0xD9</code>和<code>0xA9</code>，再将其组合到一起得到<code>0xD90xA9</code>，<code>0xD90xA9</code>便是<code>侃</code>这个字的GB2312编码值。即计算机使用GB2312编码时，<code>侃</code>这个字在计算机中存储的16进制形式是：<code>D9A9</code></p>\n</blockquote>\n<ul>\n<li>Java获取某个汉字的GB2312编码值</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.46qrewk6ons0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<h3 id=\"GB2312字符集扩展\"><a href=\"#GB2312字符集扩展\" class=\"headerlink\" title=\"GB2312字符集扩展\"></a>GB2312字符集扩展</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.585csd88dpw0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<br>\n\n<h2 id=\"Unicode字符集-amp-UTF编码\"><a href=\"#Unicode字符集-amp-UTF编码\" class=\"headerlink\" title=\"Unicode字符集&amp;UTF编码\"></a>Unicode字符集&amp;UTF编码</h2><ul>\n<li><p>Unicode 只是一个字符集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</p>\n</li>\n<li><p>unicode是一个标准，其包含了对应的字符集和编码规则。UTF-32/ UTF-16/ UTF-8是三种字符编码方案（即：UTF-8 是 Unicode 的实现方式之一）</p>\n</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6film7n2p0s0.webp\" width=\"70%\"/>\n\n<br>\n\n<br>\n\n<h3 id=\"UTF-8-编码\"><a href=\"#UTF-8-编码\" class=\"headerlink\" title=\"UTF-8 编码\"></a>UTF-8 编码</h3><ul>\n<li><p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的<strong>可变长度字符编码（定长码）</strong>，也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用</p>\n</li>\n<li><p>UTF-8编码是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度（每次传送8位数据）</p>\n</li>\n<li><p>UTF-8 的编码规则（存储规范）：</p>\n<ul>\n<li>对于单字节的符号，字节的第一位设为<code>0</code>，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的</li>\n<li>对于<code>n</code>字节的符号（<code>n &gt; 1</code>），第一个字节的前<code>n</code>位都设为<code>1</code>，第<code>n + 1</code>位设为<code>0</code>，后面字节的前两位一律设为<code>10</code>。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Unicode符号范围（十六进制）</th>\n<th align=\"left\">UTF-8编码方式（二进制）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x0000 0000 - 0x0000 007F</td>\n<td align=\"left\">0xxxxxxx</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000 0080 - 0x0000 07FF</td>\n<td align=\"left\">110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td align=\"center\">0x0000 0800 - 0x0000 FFFF</td>\n<td align=\"left\">1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td align=\"center\">0x0001 0000 - 0x0010 FFFF</td>\n<td align=\"left\">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>跟据上表（字母x表示可用编码的位），解读 UTF-8 编码非常简单。如果一个字节的第一位是<code>0</code>，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则连续有多少个<code>1</code>，就表示当前字符占用多少个字节</p>\n</blockquote>\n<ul>\n<li>以汉字<code>严</code>为例，演示如何实现 UTF-8 编码</li>\n</ul>\n<blockquote>\n<p><code>严</code>的 Unicode 是<code>4E25</code>（<code>100111000100101</code>），根据上表，可以发现<code>4E25</code>处在第三行的范围内（<code>0000 0800 - 0000 FFFF</code>），因此<code>严</code>的 UTF-8 编码需要三个字节，即格式是<code>1110xxxx 10xxxxxx 10xxxxxx</code>。然后，从<code>严</code>的最后一个二进制位开始，依次从后向前填入格式中的<code>x</code>，多出的位补<code>0</code>。这样就得到了，<code>严</code>的 UTF-8 编码是<code>11100100 10111000 10100101</code>，转换成十六进制就是<code>E4B8A5</code>。（即：计算机使用<code>Unicode</code>编码时，<code>严</code>这个字在计算机中存储的16进制形式是：<code>E4B8A5</code>）</p>\n</blockquote>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hiq48s9b7k.webp\" width=\"70%\"/>\n\n<br>\n\n<h1 id=\"参考与延伸\"><a href=\"#参考与延伸\" class=\"headerlink\" title=\"参考与延伸\"></a>参考与延伸</h1><ul>\n<li>阮一峰博客：<a class=\"link\"   href=\"https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\" >字符编码笔记：ASCII，Unicode 和 UTF-8<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>runoob（菜鸟教程）：<a class=\"link\"   href=\"https://www.runoob.com/w3cnote/charset-encoding.html\" >字符集和字符编码<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/lonely-wolf/p/14676335.html\" >字符集历史<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<br>"},{"title":"浅析 I/O（3）—— I/O模型","author":"ratears","date":"2022-09-19T14:06:09.000Z","updated":"2022-09-19T14:06:09.000Z","_content":"\n<br>\n\n- 网络通信中，最底层的就是内核中的网络 I/O 模型了。\n\n> 随着技术的发展，操作系统内核的网络模型衍生出了**五种 I/O 模型**，《UNIX网络编程》一书将这五种 I/O 模型分为 `阻塞式 I/O`、`非阻塞式 I/O`、`I/O 复用`、`信号驱动式 I/O` 和 `异步 I/O`。每一种 I/O 模型的出现，都是基于前一种 I/O 模型的优化升级。\n\n<br>\n\n<br>\n\n<br>\n\n# ① 阻塞IO模型\n\n- 阻塞式 IO （Blocking IO）：应用进程从发起 IO 系统调用，至内核返回成功标识，这整个期间是处于阻塞状态的。\n\n> 当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。\n\n> **Tips：我们之前所学过的所有的套接字，默认都是阻塞方式。**\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7wrvgu36e5k.webp\" width=\"75%\">\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.qd7jcvl1as0.webp\" width=\"75%\">\n\n\n\n\n- 优点：开发相对简单，在阻塞期间，用户线程被挂起，挂起期间不会占用CPU资源；\n- 缺点：\n  - 1）连接利用率不高，内核如果没有响应数据，则该连接一直处于阻塞状态，占用连接资源\n  - 2）一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；\n\n<br>\n\n<br>\n\n<br>\n\n# ② 非阻塞IO模型\n\n- 非阻塞式IO（Non-Blocking IO）：应用进程可以将 Socket 设置为非阻塞，这样应用进程在发起 IO 系统调用后，会立刻返回。应用进程可以轮询的发起 IO 系统调用，直到内核返回成功标识。\n\n> 当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3utzrtza30.webp\" width=\"70%\">\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.79dq8pifksg0.webp\" width=\"60%\">\n\n\n\n- 优点：每次发起IO调用去内核获取数据时，在内核等待数据的过程中可以立即返回，用户线程不会被阻塞，实时性较好；\n- 缺点：\n  - 1）当用户线程A没有获取到数据时，不断轮询内核，查看是否有新的数据，占用大量CPU时间，效率不高；\n  - 2）和阻塞IO一样，一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；\n\n<br>\n\n<br>\n\n<br>\n\n# ③ 复用IO模型（IO多路复用模型）\n\n- IO 多路复用（IO Multiplexin）：可以将多个应用进程的 Socket 注册到一个 Select（多路复用器）上，然后使用一个进程来监听该 Select（该操作会阻塞），Select 会监听所有注册进来的 Socket。只要有一个 Socket 的数据准备好，就会返回该Socket。再由应用进程发起 IO 系统调用，来完成数据读取。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5bxxajmccj00.webp\" width=\"60%\">\n\n\n\n<br>\n\n<br>\n\n&emsp;&emsp;如果在并发的环境下，可能会N个人向应用B发送消息，这种情况下我们的应用就必须创建多个线程去接收N个人发送过来的请求，每个请求都是一个独立的线程来处理；在并发量呈线性增长时，我们需要创建的线程数也随之而然的激增；\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4qf0gyqhcao0.webp\" width=\"70%\">\n\n\n\n&emsp;&emsp;这种情况下应用B就需要创建N个线程去读取数据，同时又因为应用线程是不知道什么时候会有数据读取，为了保证消息能及时读取到，那么这些线程自己必须不断的向内核发送请求来读取数据（非阻塞式）；\n\n&emsp;&emsp;这么多的线程不断请求数据，先不说服务器能不能扛得住这么多线程，就算扛得住那么很明显这种方式是不是太浪费资源了，线程是我们操作系统的宝贵资源，大量的线程用来去读取数据了，那么就意味着能做其它事情的线程就会少。\n\n&emsp;&emsp;后来，有人就提出了一个思路，能不能提供一种方式，可以由一个线程监控多个网络请求（**linux系统把所有网络请求以一个fd来标识，我们后面将称为fd即文件描述符**），这样就可以只需要一个或几个线程就可以完成数据状态询问的操作，当有数据准备就绪之后再分配对应的线程去读取数据，这么做就可以节省出大量的线程资源出来，这个就是**IO复用模型**的思路。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4gods2kobxu0.webp\" width=\"70%\">\n\n\n\n&emsp;&emsp;IO复用模型的思路就是系统提供了一种函数（select/poll/epoll）可以同时监控多个fd的操作，有了这个函数后，应用线程通过调用select函数就可以同时监控多个fd，如果select监听的fd都没有可读数据，**select调用进程会被阻塞**；而只要有任何一个fd准备就绪了，select函数就会返回可读状态，这时询问线程再去通知处理数据的线程，对应的线程此时再发起请求去读取内核中准备好的数据；\n\n> **Tips：在IO复用模型下，允许单线程内处理多个IO请求；**\n\n<br>\n\n<br>\n\n- <font color=\"red\">**Linux中IO复用的实现方式主要有select，poll和epoll**</font>\n\n## 1）select\n\n- **线性轮询扫描所有的fd**，不管他们是否活跃，监听的IO最大连接数不能多于FD_ SIZE（32位操作系统1024，64位操作系统2048）。\n- 时间复杂度O(n)\n\n\n\n> **Tips：select方式仅仅知道有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），用户线程只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。**\n\n\n\n<br>\n\n## 2）poll\n\n- 原理和select相似，poll底层需要分配一个pollfd结构数组，维护在内核中，它没有数量限制，但IO数量大，扫描线性性能下降。\n- 时间复杂度O(n)\n\n\n\n<br>\n\n## 3）epoll\n\n- 用于代替poll和select，没有大小限制。**epoll采用事件驱动代替了轮询**，epoll会把哪个流发生了怎样的I/O事件通知用户线程，所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时用户线程对这些流的操作都是有意义的。（复杂度降低到了O(1)），另外epoll模型采用mmap内存映射实现内核与用户空间的消息传递，减少用户态和内核态数据传输的开销，epoll模型在Linux2.6后内核支持。\n- 时间复杂度O(1)\n\n\n\n<br>\n\n---\n\n- <font color=\"red\">select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符准备就绪，能够通知程序进行相应的读写操作。**但select，poll，epoll本质上都是同步I/O**，因为他们都需要在读写事件就绪后自己负责进行读写(一个个的处理)，也就是说这个读写过程是**阻塞的**，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</font>\n\n> Tips：epoll跟select都能提供多路I/O复用的解决方案。在现在的Linux内核里有都能够支持，其中epoll是Linux所特有，而select则应该是POSIX所规定，一般操作系统均有实现\n\n\n\n<br>\n\n## 复用IO模型小结\n\n- 关于IO复用模型，下面这个例子可以很好的说明IO复用模型的原理：\n\n> 某教室有10名学生和1名老师，这些学生上课会不停的提问，所以一个老师处理不了这么多的问题。那么学校为每个学生都配一名老师，也就是这个教室目前有10名老师。此后，只要有新的转校生，那么就会为这个学生专门分配一个老师，因为转校生也喜欢提问题。如果把以上例子中的学生比作客户端，那么老师就是负责进行数据交换的服务端。则该例子可以比作是多进程的方式。\n>\n> 后来有一天，来了一位具有超能力的老师，这位老师回答问题非常迅速，并且可以应对所有的问题。而这位老师采用的方式是学生提问前必须先举手，确认举手学生后在回答问题。则现在的情况就是IO复用。\n\n\n\n- **IO复用模型的优点**：系统不必创建和维护大量的线程，只使用一个或几个线程来监听select选择器的操作，而一个选择器可同时处理成千上万个连接，大大减少了系统的开销；\n- **IO复用模型的缺点**：select本质上还是同步阻塞模式；\n\n\n\n&emsp;&emsp;**总结：** 复用IO的基本思路就是通过select或poll、epoll来监控多fd ，来达到不必为每个fd创建一个对应的监控线程，从而减少线程资源创建的目的。**复用IO模型的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。**\n\n<br>\n\n<br>\n\n<br>\n\n# ④ 信号驱动IO模型\n\n- 信号驱动 IO（Signal Driven IO）：可以为 Socket 开启信号驱动 IO 功能，应用进程需向内核注册一个信号处理程序，该操作并立即返回。当内核中有数据准备好，会发送一个信号给应用进程，应用进程便可以在信号处理程序中发起 IO 系统调用，来完成数据读取了。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75x9qhoc2nk0.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n&emsp;&emsp;当进程发起一个IO操作，系统调用sigaction执行一个信号处理函数，该函数向内核注册一个信号处理函数（回调函数），然后进程返回，并且不阻塞当前进程；当内核数据准备好时，内核使用信号（SIGIO）通知应用线程调用recvfrom来读取数据（运行回调函数）。\n\n&emsp;&emsp;信号驱动IO它也可以看成是一种**异步非阻塞IO**\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1qy5yemvy6rk.webp\" width=\"60%\">\n\n\n\n&emsp;&emsp;我们说信号驱动IO模型是一种异步非阻塞IO模型，指的是用户线程去内核空间请求数据时，直接注册一个信号处理函数，然后用户线程返回（异步），而内核空间接收到请求后，开始处理（此时并不会阻塞，内核空间可以同时接收多个请求，注册多个信号处理函数）；\n\n&emsp;&emsp;但是，等到内核空间读取到数据之后，应用线程需要将数据从内核空间拷贝到用户空间，**此时是用户线程是阻塞的；**也就是说：**应用程序将数据从内核态拷贝到用户态的过程是阻塞等待的，这是和异步IO的本质区别；**\n\n<br>\n\n<br>\n\n<br>\n\n# ⑤ 异步IO模型\n\n- 异步 IO（Asynchronous IO）： 应用进程发起 IO 系统调用后，会立即返回。当内核中数据完全准备后，并且也复制到了用户空间，会产生一个信号来通知应用进程。\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.448rjyvy1va0.webp\" width=\"70%\">\n\n\n\n<br>\n\n<br>\n\n&emsp;&emsp;在前面几种IO模型中，应用线程要获取数据总是先发送请求到内核，然后进行如下处理：\n\n> 1）**阻塞IO**：应用线程等待内核响应数据，期间什么都不能做\n>\n> 2）**非阻塞IO**：应用线程立即响应，可以去处理其他事情，但需要不断轮询内核去获取数据\n>\n> 3）**复用IO**：采用IO复用机制，请求都先交给select函数，由应用线程调用select函数来轮询所有的请求，当有请求需要获取数据时，应用线程再去内核获取数据；\n>\n> 4）**信号驱动IO**：系统注册一个信号处理函数（回调函数），然后应用线程返回（不阻塞）；当内核中准备好数据后，应用线程需要把内核中的数据拷贝到用户空间，**此时用户线程是阻塞的**；\n\n&emsp;&emsp;在以上4种IO模型中，每次要去读取数据时都是事先发送请求询问内核是否有可读数据，然后再发起真正的读取数据请求；\n\n&emsp;&emsp;在异步IO模型中，应用只需要向内核发送一个请求，告诉内核它要读取数据后即刻返回；内核收到请求后会建立一个信号联系，当数据准备就绪，**内核会主动把数据从内核复制到用户空间**（而信号驱动是告诉应用程序何时可以开始拷贝数据），异步IO模型真正的做到了完完全全的非阻塞；\n\n> Tips：异步IO模型和前面模型最大的区别是：**前4个都是阻塞的**，需要自己把用户准备好的数据，去内核拷贝到用户空间。而全异步不同，用户线程完全不需要关心实际的整个IO操作是如何进行的，只需要先发起一个请求，当接收内核返回的成功信号时表示IO操作已经完成，可以直接去使用数据，它是最理想的模型。\n\n<br>\n\n<br>\n\n<br>\n\n# 总结\n\n&emsp;&emsp;从上述五种 IO 模型可以看出，应用进程对内核发起 IO 系统调用后，内核会经过两个阶段来完成数据的传输：\n\n- 第一阶段：等待数据。即应用进程发起 IO 系统调用后，会一直等待数据；当有数据传入服务器，会将数据放入内核空间，此时数据准备好。\n- 第二阶段：将数据从内核空间复制到用户空间，并返回给应用程序成功标识。\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i7o657cwvsw.webp\" width=\"60%\">\n\n\n\n&emsp;&emsp;前四种模型的第二阶段是相同的，都是处于阻塞状态，其主要区别在第一阶段。而异步 IO 模型则不同，应用进程在这两个阶段是完全不阻塞的。\n\n|   IO 模型    |    第一阶段    | 第二阶段 |\n| :----------: | :------------: | :------: |\n|   阻塞式IO   |      阻塞      |   阻塞   |\n|  非阻塞式IO  |     非阻塞     |   阻塞   |\n| IO多路程复用 | 阻塞（Select） |   阻塞   |\n| 信号驱动式IO |      异步      |   阻塞   |\n|    异步IO    |      异步      |   异步   |\n\n<br>\n\n<br>\n\n<br>\n\n# Reference\n\n- segmentfault：[浅聊Linux的五种IO模型](https://segmentfault.com/a/1190000039898780)\n- w3cjava：[五种IO模型：操作系统五种IO模型大全](https://www.w3cjava.com/e-book/operate-system/124699009.html)\n\n<br>\n\n","source":"_posts/2022/浅析-I-O（3）——-I-O模型.md","raw":"---\ntitle: 浅析 I/O（3）—— I/O模型\nauthor: ratears\ncategories:\n\t- [Operating-Systems,I/O]\ntags:\n\t- Operating-Systems\n\t- I/O\ndate: 2022-09-19 22:06:09\nupdated: 2022-09-19 22:06:09\n---\n\n<br>\n\n- 网络通信中，最底层的就是内核中的网络 I/O 模型了。\n\n> 随着技术的发展，操作系统内核的网络模型衍生出了**五种 I/O 模型**，《UNIX网络编程》一书将这五种 I/O 模型分为 `阻塞式 I/O`、`非阻塞式 I/O`、`I/O 复用`、`信号驱动式 I/O` 和 `异步 I/O`。每一种 I/O 模型的出现，都是基于前一种 I/O 模型的优化升级。\n\n<br>\n\n<br>\n\n<br>\n\n# ① 阻塞IO模型\n\n- 阻塞式 IO （Blocking IO）：应用进程从发起 IO 系统调用，至内核返回成功标识，这整个期间是处于阻塞状态的。\n\n> 当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。\n\n> **Tips：我们之前所学过的所有的套接字，默认都是阻塞方式。**\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7wrvgu36e5k.webp\" width=\"75%\">\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.qd7jcvl1as0.webp\" width=\"75%\">\n\n\n\n\n- 优点：开发相对简单，在阻塞期间，用户线程被挂起，挂起期间不会占用CPU资源；\n- 缺点：\n  - 1）连接利用率不高，内核如果没有响应数据，则该连接一直处于阻塞状态，占用连接资源\n  - 2）一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；\n\n<br>\n\n<br>\n\n<br>\n\n# ② 非阻塞IO模型\n\n- 非阻塞式IO（Non-Blocking IO）：应用进程可以将 Socket 设置为非阻塞，这样应用进程在发起 IO 系统调用后，会立刻返回。应用进程可以轮询的发起 IO 系统调用，直到内核返回成功标识。\n\n> 当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3utzrtza30.webp\" width=\"70%\">\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.79dq8pifksg0.webp\" width=\"60%\">\n\n\n\n- 优点：每次发起IO调用去内核获取数据时，在内核等待数据的过程中可以立即返回，用户线程不会被阻塞，实时性较好；\n- 缺点：\n  - 1）当用户线程A没有获取到数据时，不断轮询内核，查看是否有新的数据，占用大量CPU时间，效率不高；\n  - 2）和阻塞IO一样，一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；\n\n<br>\n\n<br>\n\n<br>\n\n# ③ 复用IO模型（IO多路复用模型）\n\n- IO 多路复用（IO Multiplexin）：可以将多个应用进程的 Socket 注册到一个 Select（多路复用器）上，然后使用一个进程来监听该 Select（该操作会阻塞），Select 会监听所有注册进来的 Socket。只要有一个 Socket 的数据准备好，就会返回该Socket。再由应用进程发起 IO 系统调用，来完成数据读取。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5bxxajmccj00.webp\" width=\"60%\">\n\n\n\n<br>\n\n<br>\n\n&emsp;&emsp;如果在并发的环境下，可能会N个人向应用B发送消息，这种情况下我们的应用就必须创建多个线程去接收N个人发送过来的请求，每个请求都是一个独立的线程来处理；在并发量呈线性增长时，我们需要创建的线程数也随之而然的激增；\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4qf0gyqhcao0.webp\" width=\"70%\">\n\n\n\n&emsp;&emsp;这种情况下应用B就需要创建N个线程去读取数据，同时又因为应用线程是不知道什么时候会有数据读取，为了保证消息能及时读取到，那么这些线程自己必须不断的向内核发送请求来读取数据（非阻塞式）；\n\n&emsp;&emsp;这么多的线程不断请求数据，先不说服务器能不能扛得住这么多线程，就算扛得住那么很明显这种方式是不是太浪费资源了，线程是我们操作系统的宝贵资源，大量的线程用来去读取数据了，那么就意味着能做其它事情的线程就会少。\n\n&emsp;&emsp;后来，有人就提出了一个思路，能不能提供一种方式，可以由一个线程监控多个网络请求（**linux系统把所有网络请求以一个fd来标识，我们后面将称为fd即文件描述符**），这样就可以只需要一个或几个线程就可以完成数据状态询问的操作，当有数据准备就绪之后再分配对应的线程去读取数据，这么做就可以节省出大量的线程资源出来，这个就是**IO复用模型**的思路。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4gods2kobxu0.webp\" width=\"70%\">\n\n\n\n&emsp;&emsp;IO复用模型的思路就是系统提供了一种函数（select/poll/epoll）可以同时监控多个fd的操作，有了这个函数后，应用线程通过调用select函数就可以同时监控多个fd，如果select监听的fd都没有可读数据，**select调用进程会被阻塞**；而只要有任何一个fd准备就绪了，select函数就会返回可读状态，这时询问线程再去通知处理数据的线程，对应的线程此时再发起请求去读取内核中准备好的数据；\n\n> **Tips：在IO复用模型下，允许单线程内处理多个IO请求；**\n\n<br>\n\n<br>\n\n- <font color=\"red\">**Linux中IO复用的实现方式主要有select，poll和epoll**</font>\n\n## 1）select\n\n- **线性轮询扫描所有的fd**，不管他们是否活跃，监听的IO最大连接数不能多于FD_ SIZE（32位操作系统1024，64位操作系统2048）。\n- 时间复杂度O(n)\n\n\n\n> **Tips：select方式仅仅知道有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），用户线程只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。**\n\n\n\n<br>\n\n## 2）poll\n\n- 原理和select相似，poll底层需要分配一个pollfd结构数组，维护在内核中，它没有数量限制，但IO数量大，扫描线性性能下降。\n- 时间复杂度O(n)\n\n\n\n<br>\n\n## 3）epoll\n\n- 用于代替poll和select，没有大小限制。**epoll采用事件驱动代替了轮询**，epoll会把哪个流发生了怎样的I/O事件通知用户线程，所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时用户线程对这些流的操作都是有意义的。（复杂度降低到了O(1)），另外epoll模型采用mmap内存映射实现内核与用户空间的消息传递，减少用户态和内核态数据传输的开销，epoll模型在Linux2.6后内核支持。\n- 时间复杂度O(1)\n\n\n\n<br>\n\n---\n\n- <font color=\"red\">select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符准备就绪，能够通知程序进行相应的读写操作。**但select，poll，epoll本质上都是同步I/O**，因为他们都需要在读写事件就绪后自己负责进行读写(一个个的处理)，也就是说这个读写过程是**阻塞的**，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</font>\n\n> Tips：epoll跟select都能提供多路I/O复用的解决方案。在现在的Linux内核里有都能够支持，其中epoll是Linux所特有，而select则应该是POSIX所规定，一般操作系统均有实现\n\n\n\n<br>\n\n## 复用IO模型小结\n\n- 关于IO复用模型，下面这个例子可以很好的说明IO复用模型的原理：\n\n> 某教室有10名学生和1名老师，这些学生上课会不停的提问，所以一个老师处理不了这么多的问题。那么学校为每个学生都配一名老师，也就是这个教室目前有10名老师。此后，只要有新的转校生，那么就会为这个学生专门分配一个老师，因为转校生也喜欢提问题。如果把以上例子中的学生比作客户端，那么老师就是负责进行数据交换的服务端。则该例子可以比作是多进程的方式。\n>\n> 后来有一天，来了一位具有超能力的老师，这位老师回答问题非常迅速，并且可以应对所有的问题。而这位老师采用的方式是学生提问前必须先举手，确认举手学生后在回答问题。则现在的情况就是IO复用。\n\n\n\n- **IO复用模型的优点**：系统不必创建和维护大量的线程，只使用一个或几个线程来监听select选择器的操作，而一个选择器可同时处理成千上万个连接，大大减少了系统的开销；\n- **IO复用模型的缺点**：select本质上还是同步阻塞模式；\n\n\n\n&emsp;&emsp;**总结：** 复用IO的基本思路就是通过select或poll、epoll来监控多fd ，来达到不必为每个fd创建一个对应的监控线程，从而减少线程资源创建的目的。**复用IO模型的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。**\n\n<br>\n\n<br>\n\n<br>\n\n# ④ 信号驱动IO模型\n\n- 信号驱动 IO（Signal Driven IO）：可以为 Socket 开启信号驱动 IO 功能，应用进程需向内核注册一个信号处理程序，该操作并立即返回。当内核中有数据准备好，会发送一个信号给应用进程，应用进程便可以在信号处理程序中发起 IO 系统调用，来完成数据读取了。\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75x9qhoc2nk0.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n&emsp;&emsp;当进程发起一个IO操作，系统调用sigaction执行一个信号处理函数，该函数向内核注册一个信号处理函数（回调函数），然后进程返回，并且不阻塞当前进程；当内核数据准备好时，内核使用信号（SIGIO）通知应用线程调用recvfrom来读取数据（运行回调函数）。\n\n&emsp;&emsp;信号驱动IO它也可以看成是一种**异步非阻塞IO**\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1qy5yemvy6rk.webp\" width=\"60%\">\n\n\n\n&emsp;&emsp;我们说信号驱动IO模型是一种异步非阻塞IO模型，指的是用户线程去内核空间请求数据时，直接注册一个信号处理函数，然后用户线程返回（异步），而内核空间接收到请求后，开始处理（此时并不会阻塞，内核空间可以同时接收多个请求，注册多个信号处理函数）；\n\n&emsp;&emsp;但是，等到内核空间读取到数据之后，应用线程需要将数据从内核空间拷贝到用户空间，**此时是用户线程是阻塞的；**也就是说：**应用程序将数据从内核态拷贝到用户态的过程是阻塞等待的，这是和异步IO的本质区别；**\n\n<br>\n\n<br>\n\n<br>\n\n# ⑤ 异步IO模型\n\n- 异步 IO（Asynchronous IO）： 应用进程发起 IO 系统调用后，会立即返回。当内核中数据完全准备后，并且也复制到了用户空间，会产生一个信号来通知应用进程。\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.448rjyvy1va0.webp\" width=\"70%\">\n\n\n\n<br>\n\n<br>\n\n&emsp;&emsp;在前面几种IO模型中，应用线程要获取数据总是先发送请求到内核，然后进行如下处理：\n\n> 1）**阻塞IO**：应用线程等待内核响应数据，期间什么都不能做\n>\n> 2）**非阻塞IO**：应用线程立即响应，可以去处理其他事情，但需要不断轮询内核去获取数据\n>\n> 3）**复用IO**：采用IO复用机制，请求都先交给select函数，由应用线程调用select函数来轮询所有的请求，当有请求需要获取数据时，应用线程再去内核获取数据；\n>\n> 4）**信号驱动IO**：系统注册一个信号处理函数（回调函数），然后应用线程返回（不阻塞）；当内核中准备好数据后，应用线程需要把内核中的数据拷贝到用户空间，**此时用户线程是阻塞的**；\n\n&emsp;&emsp;在以上4种IO模型中，每次要去读取数据时都是事先发送请求询问内核是否有可读数据，然后再发起真正的读取数据请求；\n\n&emsp;&emsp;在异步IO模型中，应用只需要向内核发送一个请求，告诉内核它要读取数据后即刻返回；内核收到请求后会建立一个信号联系，当数据准备就绪，**内核会主动把数据从内核复制到用户空间**（而信号驱动是告诉应用程序何时可以开始拷贝数据），异步IO模型真正的做到了完完全全的非阻塞；\n\n> Tips：异步IO模型和前面模型最大的区别是：**前4个都是阻塞的**，需要自己把用户准备好的数据，去内核拷贝到用户空间。而全异步不同，用户线程完全不需要关心实际的整个IO操作是如何进行的，只需要先发起一个请求，当接收内核返回的成功信号时表示IO操作已经完成，可以直接去使用数据，它是最理想的模型。\n\n<br>\n\n<br>\n\n<br>\n\n# 总结\n\n&emsp;&emsp;从上述五种 IO 模型可以看出，应用进程对内核发起 IO 系统调用后，内核会经过两个阶段来完成数据的传输：\n\n- 第一阶段：等待数据。即应用进程发起 IO 系统调用后，会一直等待数据；当有数据传入服务器，会将数据放入内核空间，此时数据准备好。\n- 第二阶段：将数据从内核空间复制到用户空间，并返回给应用程序成功标识。\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i7o657cwvsw.webp\" width=\"60%\">\n\n\n\n&emsp;&emsp;前四种模型的第二阶段是相同的，都是处于阻塞状态，其主要区别在第一阶段。而异步 IO 模型则不同，应用进程在这两个阶段是完全不阻塞的。\n\n|   IO 模型    |    第一阶段    | 第二阶段 |\n| :----------: | :------------: | :------: |\n|   阻塞式IO   |      阻塞      |   阻塞   |\n|  非阻塞式IO  |     非阻塞     |   阻塞   |\n| IO多路程复用 | 阻塞（Select） |   阻塞   |\n| 信号驱动式IO |      异步      |   阻塞   |\n|    异步IO    |      异步      |   异步   |\n\n<br>\n\n<br>\n\n<br>\n\n# Reference\n\n- segmentfault：[浅聊Linux的五种IO模型](https://segmentfault.com/a/1190000039898780)\n- w3cjava：[五种IO模型：操作系统五种IO模型大全](https://www.w3cjava.com/e-book/operate-system/124699009.html)\n\n<br>\n\n","slug":"浅析-I-O（3）——-I-O模型","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnr0029dcta9kz0c11e","content":"<br>\n\n<ul>\n<li>网络通信中，最底层的就是内核中的网络 I/O 模型了。</li>\n</ul>\n<blockquote>\n<p>随着技术的发展，操作系统内核的网络模型衍生出了<strong>五种 I/O 模型</strong>，《UNIX网络编程》一书将这五种 I/O 模型分为 <code>阻塞式 I/O</code>、<code>非阻塞式 I/O</code>、<code>I/O 复用</code>、<code>信号驱动式 I/O</code> 和 <code>异步 I/O</code>。每一种 I/O 模型的出现，都是基于前一种 I/O 模型的优化升级。</p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"①-阻塞IO模型\"><a href=\"#①-阻塞IO模型\" class=\"headerlink\" title=\"① 阻塞IO模型\"></a>① 阻塞IO模型</h1><ul>\n<li>阻塞式 IO （Blocking IO）：应用进程从发起 IO 系统调用，至内核返回成功标识，这整个期间是处于阻塞状态的。</li>\n</ul>\n<blockquote>\n<p>当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。</p>\n</blockquote>\n<blockquote>\n<p><strong>Tips：我们之前所学过的所有的套接字，默认都是阻塞方式。</strong></p>\n</blockquote>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7wrvgu36e5k.webp\" width=\"75%\">\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.qd7jcvl1as0.webp\" width=\"75%\">\n\n\n\n\n<ul>\n<li>优点：开发相对简单，在阻塞期间，用户线程被挂起，挂起期间不会占用CPU资源；</li>\n<li>缺点：<ul>\n<li>1）连接利用率不高，内核如果没有响应数据，则该连接一直处于阻塞状态，占用连接资源</li>\n<li>2）一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"②-非阻塞IO模型\"><a href=\"#②-非阻塞IO模型\" class=\"headerlink\" title=\"② 非阻塞IO模型\"></a>② 非阻塞IO模型</h1><ul>\n<li>非阻塞式IO（Non-Blocking IO）：应用进程可以将 Socket 设置为非阻塞，这样应用进程在发起 IO 系统调用后，会立刻返回。应用进程可以轮询的发起 IO 系统调用，直到内核返回成功标识。</li>\n</ul>\n<blockquote>\n<p>当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。</p>\n</blockquote>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3utzrtza30.webp\" width=\"70%\">\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.79dq8pifksg0.webp\" width=\"60%\">\n\n\n\n<ul>\n<li>优点：每次发起IO调用去内核获取数据时，在内核等待数据的过程中可以立即返回，用户线程不会被阻塞，实时性较好；</li>\n<li>缺点：<ul>\n<li>1）当用户线程A没有获取到数据时，不断轮询内核，查看是否有新的数据，占用大量CPU时间，效率不高；</li>\n<li>2）和阻塞IO一样，一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"③-复用IO模型（IO多路复用模型）\"><a href=\"#③-复用IO模型（IO多路复用模型）\" class=\"headerlink\" title=\"③ 复用IO模型（IO多路复用模型）\"></a>③ 复用IO模型（IO多路复用模型）</h1><ul>\n<li>IO 多路复用（IO Multiplexin）：可以将多个应用进程的 Socket 注册到一个 Select（多路复用器）上，然后使用一个进程来监听该 Select（该操作会阻塞），Select 会监听所有注册进来的 Socket。只要有一个 Socket 的数据准备好，就会返回该Socket。再由应用进程发起 IO 系统调用，来完成数据读取。</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5bxxajmccj00.webp\" width=\"60%\">\n\n\n\n<br>\n\n<br>\n\n<p>&emsp;&emsp;如果在并发的环境下，可能会N个人向应用B发送消息，这种情况下我们的应用就必须创建多个线程去接收N个人发送过来的请求，每个请求都是一个独立的线程来处理；在并发量呈线性增长时，我们需要创建的线程数也随之而然的激增；</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4qf0gyqhcao0.webp\" width=\"70%\">\n\n\n\n<p>&emsp;&emsp;这种情况下应用B就需要创建N个线程去读取数据，同时又因为应用线程是不知道什么时候会有数据读取，为了保证消息能及时读取到，那么这些线程自己必须不断的向内核发送请求来读取数据（非阻塞式）；</p>\n<p>&emsp;&emsp;这么多的线程不断请求数据，先不说服务器能不能扛得住这么多线程，就算扛得住那么很明显这种方式是不是太浪费资源了，线程是我们操作系统的宝贵资源，大量的线程用来去读取数据了，那么就意味着能做其它事情的线程就会少。</p>\n<p>&emsp;&emsp;后来，有人就提出了一个思路，能不能提供一种方式，可以由一个线程监控多个网络请求（<strong>linux系统把所有网络请求以一个fd来标识，我们后面将称为fd即文件描述符</strong>），这样就可以只需要一个或几个线程就可以完成数据状态询问的操作，当有数据准备就绪之后再分配对应的线程去读取数据，这么做就可以节省出大量的线程资源出来，这个就是<strong>IO复用模型</strong>的思路。</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4gods2kobxu0.webp\" width=\"70%\">\n\n\n\n<p>&emsp;&emsp;IO复用模型的思路就是系统提供了一种函数（select/poll/epoll）可以同时监控多个fd的操作，有了这个函数后，应用线程通过调用select函数就可以同时监控多个fd，如果select监听的fd都没有可读数据，<strong>select调用进程会被阻塞</strong>；而只要有任何一个fd准备就绪了，select函数就会返回可读状态，这时询问线程再去通知处理数据的线程，对应的线程此时再发起请求去读取内核中准备好的数据；</p>\n<blockquote>\n<p><strong>Tips：在IO复用模型下，允许单线程内处理多个IO请求；</strong></p>\n</blockquote>\n<br>\n\n<br>\n\n<ul>\n<li><font color=\"red\"><strong>Linux中IO复用的实现方式主要有select，poll和epoll</strong></font></li>\n</ul>\n<h2 id=\"1）select\"><a href=\"#1）select\" class=\"headerlink\" title=\"1）select\"></a>1）select</h2><ul>\n<li><strong>线性轮询扫描所有的fd</strong>，不管他们是否活跃，监听的IO最大连接数不能多于FD_ SIZE（32位操作系统1024，64位操作系统2048）。</li>\n<li>时间复杂度O(n)</li>\n</ul>\n<blockquote>\n<p><strong>Tips：select方式仅仅知道有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），用户线程只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。</strong></p>\n</blockquote>\n<br>\n\n<h2 id=\"2）poll\"><a href=\"#2）poll\" class=\"headerlink\" title=\"2）poll\"></a>2）poll</h2><ul>\n<li>原理和select相似，poll底层需要分配一个pollfd结构数组，维护在内核中，它没有数量限制，但IO数量大，扫描线性性能下降。</li>\n<li>时间复杂度O(n)</li>\n</ul>\n<br>\n\n<h2 id=\"3）epoll\"><a href=\"#3）epoll\" class=\"headerlink\" title=\"3）epoll\"></a>3）epoll</h2><ul>\n<li>用于代替poll和select，没有大小限制。<strong>epoll采用事件驱动代替了轮询</strong>，epoll会把哪个流发生了怎样的I/O事件通知用户线程，所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时用户线程对这些流的操作都是有意义的。（复杂度降低到了O(1)），另外epoll模型采用mmap内存映射实现内核与用户空间的消息传递，减少用户态和内核态数据传输的开销，epoll模型在Linux2.6后内核支持。</li>\n<li>时间复杂度O(1)</li>\n</ul>\n<br>\n\n<hr>\n<ul>\n<li><font color=\"red\">select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符准备就绪，能够通知程序进行相应的读写操作。<strong>但select，poll，epoll本质上都是同步I/O</strong>，因为他们都需要在读写事件就绪后自己负责进行读写(一个个的处理)，也就是说这个读写过程是<strong>阻塞的</strong>，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</font></li>\n</ul>\n<blockquote>\n<p>Tips：epoll跟select都能提供多路I/O复用的解决方案。在现在的Linux内核里有都能够支持，其中epoll是Linux所特有，而select则应该是POSIX所规定，一般操作系统均有实现</p>\n</blockquote>\n<br>\n\n<h2 id=\"复用IO模型小结\"><a href=\"#复用IO模型小结\" class=\"headerlink\" title=\"复用IO模型小结\"></a>复用IO模型小结</h2><ul>\n<li>关于IO复用模型，下面这个例子可以很好的说明IO复用模型的原理：</li>\n</ul>\n<blockquote>\n<p>某教室有10名学生和1名老师，这些学生上课会不停的提问，所以一个老师处理不了这么多的问题。那么学校为每个学生都配一名老师，也就是这个教室目前有10名老师。此后，只要有新的转校生，那么就会为这个学生专门分配一个老师，因为转校生也喜欢提问题。如果把以上例子中的学生比作客户端，那么老师就是负责进行数据交换的服务端。则该例子可以比作是多进程的方式。</p>\n<p>后来有一天，来了一位具有超能力的老师，这位老师回答问题非常迅速，并且可以应对所有的问题。而这位老师采用的方式是学生提问前必须先举手，确认举手学生后在回答问题。则现在的情况就是IO复用。</p>\n</blockquote>\n<ul>\n<li><strong>IO复用模型的优点</strong>：系统不必创建和维护大量的线程，只使用一个或几个线程来监听select选择器的操作，而一个选择器可同时处理成千上万个连接，大大减少了系统的开销；</li>\n<li><strong>IO复用模型的缺点</strong>：select本质上还是同步阻塞模式；</li>\n</ul>\n<p>&emsp;&emsp;<strong>总结：</strong> 复用IO的基本思路就是通过select或poll、epoll来监控多fd ，来达到不必为每个fd创建一个对应的监控线程，从而减少线程资源创建的目的。<strong>复用IO模型的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</strong></p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"④-信号驱动IO模型\"><a href=\"#④-信号驱动IO模型\" class=\"headerlink\" title=\"④ 信号驱动IO模型\"></a>④ 信号驱动IO模型</h1><ul>\n<li>信号驱动 IO（Signal Driven IO）：可以为 Socket 开启信号驱动 IO 功能，应用进程需向内核注册一个信号处理程序，该操作并立即返回。当内核中有数据准备好，会发送一个信号给应用进程，应用进程便可以在信号处理程序中发起 IO 系统调用，来完成数据读取了。</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75x9qhoc2nk0.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n<p>&emsp;&emsp;当进程发起一个IO操作，系统调用sigaction执行一个信号处理函数，该函数向内核注册一个信号处理函数（回调函数），然后进程返回，并且不阻塞当前进程；当内核数据准备好时，内核使用信号（SIGIO）通知应用线程调用recvfrom来读取数据（运行回调函数）。</p>\n<p>&emsp;&emsp;信号驱动IO它也可以看成是一种<strong>异步非阻塞IO</strong></p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1qy5yemvy6rk.webp\" width=\"60%\">\n\n\n\n<p>&emsp;&emsp;我们说信号驱动IO模型是一种异步非阻塞IO模型，指的是用户线程去内核空间请求数据时，直接注册一个信号处理函数，然后用户线程返回（异步），而内核空间接收到请求后，开始处理（此时并不会阻塞，内核空间可以同时接收多个请求，注册多个信号处理函数）；</p>\n<p>&emsp;&emsp;但是，等到内核空间读取到数据之后，应用线程需要将数据从内核空间拷贝到用户空间，<strong>此时是用户线程是阻塞的；</strong>也就是说：<strong>应用程序将数据从内核态拷贝到用户态的过程是阻塞等待的，这是和异步IO的本质区别；</strong></p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"⑤-异步IO模型\"><a href=\"#⑤-异步IO模型\" class=\"headerlink\" title=\"⑤ 异步IO模型\"></a>⑤ 异步IO模型</h1><ul>\n<li>异步 IO（Asynchronous IO）： 应用进程发起 IO 系统调用后，会立即返回。当内核中数据完全准备后，并且也复制到了用户空间，会产生一个信号来通知应用进程。</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.448rjyvy1va0.webp\" width=\"70%\">\n\n\n\n<br>\n\n<br>\n\n<p>&emsp;&emsp;在前面几种IO模型中，应用线程要获取数据总是先发送请求到内核，然后进行如下处理：</p>\n<blockquote>\n<p>1）<strong>阻塞IO</strong>：应用线程等待内核响应数据，期间什么都不能做</p>\n<p>2）<strong>非阻塞IO</strong>：应用线程立即响应，可以去处理其他事情，但需要不断轮询内核去获取数据</p>\n<p>3）<strong>复用IO</strong>：采用IO复用机制，请求都先交给select函数，由应用线程调用select函数来轮询所有的请求，当有请求需要获取数据时，应用线程再去内核获取数据；</p>\n<p>4）<strong>信号驱动IO</strong>：系统注册一个信号处理函数（回调函数），然后应用线程返回（不阻塞）；当内核中准备好数据后，应用线程需要把内核中的数据拷贝到用户空间，<strong>此时用户线程是阻塞的</strong>；</p>\n</blockquote>\n<p>&emsp;&emsp;在以上4种IO模型中，每次要去读取数据时都是事先发送请求询问内核是否有可读数据，然后再发起真正的读取数据请求；</p>\n<p>&emsp;&emsp;在异步IO模型中，应用只需要向内核发送一个请求，告诉内核它要读取数据后即刻返回；内核收到请求后会建立一个信号联系，当数据准备就绪，<strong>内核会主动把数据从内核复制到用户空间</strong>（而信号驱动是告诉应用程序何时可以开始拷贝数据），异步IO模型真正的做到了完完全全的非阻塞；</p>\n<blockquote>\n<p>Tips：异步IO模型和前面模型最大的区别是：<strong>前4个都是阻塞的</strong>，需要自己把用户准备好的数据，去内核拷贝到用户空间。而全异步不同，用户线程完全不需要关心实际的整个IO操作是如何进行的，只需要先发起一个请求，当接收内核返回的成功信号时表示IO操作已经完成，可以直接去使用数据，它是最理想的模型。</p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>&emsp;&emsp;从上述五种 IO 模型可以看出，应用进程对内核发起 IO 系统调用后，内核会经过两个阶段来完成数据的传输：</p>\n<ul>\n<li>第一阶段：等待数据。即应用进程发起 IO 系统调用后，会一直等待数据；当有数据传入服务器，会将数据放入内核空间，此时数据准备好。</li>\n<li>第二阶段：将数据从内核空间复制到用户空间，并返回给应用程序成功标识。</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i7o657cwvsw.webp\" width=\"60%\">\n\n\n\n<p>&emsp;&emsp;前四种模型的第二阶段是相同的，都是处于阻塞状态，其主要区别在第一阶段。而异步 IO 模型则不同，应用进程在这两个阶段是完全不阻塞的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">IO 模型</th>\n<th align=\"center\">第一阶段</th>\n<th align=\"center\">第二阶段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">阻塞式IO</td>\n<td align=\"center\">阻塞</td>\n<td align=\"center\">阻塞</td>\n</tr>\n<tr>\n<td align=\"center\">非阻塞式IO</td>\n<td align=\"center\">非阻塞</td>\n<td align=\"center\">阻塞</td>\n</tr>\n<tr>\n<td align=\"center\">IO多路程复用</td>\n<td align=\"center\">阻塞（Select）</td>\n<td align=\"center\">阻塞</td>\n</tr>\n<tr>\n<td align=\"center\">信号驱动式IO</td>\n<td align=\"center\">异步</td>\n<td align=\"center\">阻塞</td>\n</tr>\n<tr>\n<td align=\"center\">异步IO</td>\n<td align=\"center\">异步</td>\n<td align=\"center\">异步</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>segmentfault：<a class=\"link\"   href=\"https://segmentfault.com/a/1190000039898780\" >浅聊Linux的五种IO模型<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>w3cjava：<a class=\"link\"   href=\"https://www.w3cjava.com/e-book/operate-system/124699009.html\" >五种IO模型：操作系统五种IO模型大全<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<br>\n\n<ul>\n<li>网络通信中，最底层的就是内核中的网络 I/O 模型了。</li>\n</ul>\n<blockquote>\n<p>随着技术的发展，操作系统内核的网络模型衍生出了<strong>五种 I/O 模型</strong>，《UNIX网络编程》一书将这五种 I/O 模型分为 <code>阻塞式 I/O</code>、<code>非阻塞式 I/O</code>、<code>I/O 复用</code>、<code>信号驱动式 I/O</code> 和 <code>异步 I/O</code>。每一种 I/O 模型的出现，都是基于前一种 I/O 模型的优化升级。</p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"①-阻塞IO模型\"><a href=\"#①-阻塞IO模型\" class=\"headerlink\" title=\"① 阻塞IO模型\"></a>① 阻塞IO模型</h1><ul>\n<li>阻塞式 IO （Blocking IO）：应用进程从发起 IO 系统调用，至内核返回成功标识，这整个期间是处于阻塞状态的。</li>\n</ul>\n<blockquote>\n<p>当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。</p>\n</blockquote>\n<blockquote>\n<p><strong>Tips：我们之前所学过的所有的套接字，默认都是阻塞方式。</strong></p>\n</blockquote>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7wrvgu36e5k.webp\" width=\"75%\">\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.qd7jcvl1as0.webp\" width=\"75%\">\n\n\n\n\n<ul>\n<li>优点：开发相对简单，在阻塞期间，用户线程被挂起，挂起期间不会占用CPU资源；</li>\n<li>缺点：<ul>\n<li>1）连接利用率不高，内核如果没有响应数据，则该连接一直处于阻塞状态，占用连接资源</li>\n<li>2）一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"②-非阻塞IO模型\"><a href=\"#②-非阻塞IO模型\" class=\"headerlink\" title=\"② 非阻塞IO模型\"></a>② 非阻塞IO模型</h1><ul>\n<li>非阻塞式IO（Non-Blocking IO）：应用进程可以将 Socket 设置为非阻塞，这样应用进程在发起 IO 系统调用后，会立刻返回。应用进程可以轮询的发起 IO 系统调用，直到内核返回成功标识。</li>\n</ul>\n<blockquote>\n<p>当应用A发起读取数据申请时，在内核数据没有准备好之前，应用A会一直处于等待数据状态，直到内核把数据准备好了交给应用A才结束。</p>\n</blockquote>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3utzrtza30.webp\" width=\"70%\">\n\n\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.79dq8pifksg0.webp\" width=\"60%\">\n\n\n\n<ul>\n<li>优点：每次发起IO调用去内核获取数据时，在内核等待数据的过程中可以立即返回，用户线程不会被阻塞，实时性较好；</li>\n<li>缺点：<ul>\n<li>1）当用户线程A没有获取到数据时，不断轮询内核，查看是否有新的数据，占用大量CPU时间，效率不高；</li>\n<li>2）和阻塞IO一样，一个线程维护一个IO资源，当用大量并发请求时，需要创建等价的线程来处理请求，不适合用于高并发场景；</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"③-复用IO模型（IO多路复用模型）\"><a href=\"#③-复用IO模型（IO多路复用模型）\" class=\"headerlink\" title=\"③ 复用IO模型（IO多路复用模型）\"></a>③ 复用IO模型（IO多路复用模型）</h1><ul>\n<li>IO 多路复用（IO Multiplexin）：可以将多个应用进程的 Socket 注册到一个 Select（多路复用器）上，然后使用一个进程来监听该 Select（该操作会阻塞），Select 会监听所有注册进来的 Socket。只要有一个 Socket 的数据准备好，就会返回该Socket。再由应用进程发起 IO 系统调用，来完成数据读取。</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5bxxajmccj00.webp\" width=\"60%\">\n\n\n\n<br>\n\n<br>\n\n<p>&emsp;&emsp;如果在并发的环境下，可能会N个人向应用B发送消息，这种情况下我们的应用就必须创建多个线程去接收N个人发送过来的请求，每个请求都是一个独立的线程来处理；在并发量呈线性增长时，我们需要创建的线程数也随之而然的激增；</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4qf0gyqhcao0.webp\" width=\"70%\">\n\n\n\n<p>&emsp;&emsp;这种情况下应用B就需要创建N个线程去读取数据，同时又因为应用线程是不知道什么时候会有数据读取，为了保证消息能及时读取到，那么这些线程自己必须不断的向内核发送请求来读取数据（非阻塞式）；</p>\n<p>&emsp;&emsp;这么多的线程不断请求数据，先不说服务器能不能扛得住这么多线程，就算扛得住那么很明显这种方式是不是太浪费资源了，线程是我们操作系统的宝贵资源，大量的线程用来去读取数据了，那么就意味着能做其它事情的线程就会少。</p>\n<p>&emsp;&emsp;后来，有人就提出了一个思路，能不能提供一种方式，可以由一个线程监控多个网络请求（<strong>linux系统把所有网络请求以一个fd来标识，我们后面将称为fd即文件描述符</strong>），这样就可以只需要一个或几个线程就可以完成数据状态询问的操作，当有数据准备就绪之后再分配对应的线程去读取数据，这么做就可以节省出大量的线程资源出来，这个就是<strong>IO复用模型</strong>的思路。</p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4gods2kobxu0.webp\" width=\"70%\">\n\n\n\n<p>&emsp;&emsp;IO复用模型的思路就是系统提供了一种函数（select/poll/epoll）可以同时监控多个fd的操作，有了这个函数后，应用线程通过调用select函数就可以同时监控多个fd，如果select监听的fd都没有可读数据，<strong>select调用进程会被阻塞</strong>；而只要有任何一个fd准备就绪了，select函数就会返回可读状态，这时询问线程再去通知处理数据的线程，对应的线程此时再发起请求去读取内核中准备好的数据；</p>\n<blockquote>\n<p><strong>Tips：在IO复用模型下，允许单线程内处理多个IO请求；</strong></p>\n</blockquote>\n<br>\n\n<br>\n\n<ul>\n<li><font color=\"red\"><strong>Linux中IO复用的实现方式主要有select，poll和epoll</strong></font></li>\n</ul>\n<h2 id=\"1）select\"><a href=\"#1）select\" class=\"headerlink\" title=\"1）select\"></a>1）select</h2><ul>\n<li><strong>线性轮询扫描所有的fd</strong>，不管他们是否活跃，监听的IO最大连接数不能多于FD_ SIZE（32位操作系统1024，64位操作系统2048）。</li>\n<li>时间复杂度O(n)</li>\n</ul>\n<blockquote>\n<p><strong>Tips：select方式仅仅知道有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），用户线程只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。</strong></p>\n</blockquote>\n<br>\n\n<h2 id=\"2）poll\"><a href=\"#2）poll\" class=\"headerlink\" title=\"2）poll\"></a>2）poll</h2><ul>\n<li>原理和select相似，poll底层需要分配一个pollfd结构数组，维护在内核中，它没有数量限制，但IO数量大，扫描线性性能下降。</li>\n<li>时间复杂度O(n)</li>\n</ul>\n<br>\n\n<h2 id=\"3）epoll\"><a href=\"#3）epoll\" class=\"headerlink\" title=\"3）epoll\"></a>3）epoll</h2><ul>\n<li>用于代替poll和select，没有大小限制。<strong>epoll采用事件驱动代替了轮询</strong>，epoll会把哪个流发生了怎样的I/O事件通知用户线程，所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时用户线程对这些流的操作都是有意义的。（复杂度降低到了O(1)），另外epoll模型采用mmap内存映射实现内核与用户空间的消息传递，减少用户态和内核态数据传输的开销，epoll模型在Linux2.6后内核支持。</li>\n<li>时间复杂度O(1)</li>\n</ul>\n<br>\n\n<hr>\n<ul>\n<li><font color=\"red\">select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符准备就绪，能够通知程序进行相应的读写操作。<strong>但select，poll，epoll本质上都是同步I/O</strong>，因为他们都需要在读写事件就绪后自己负责进行读写(一个个的处理)，也就是说这个读写过程是<strong>阻塞的</strong>，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</font></li>\n</ul>\n<blockquote>\n<p>Tips：epoll跟select都能提供多路I/O复用的解决方案。在现在的Linux内核里有都能够支持，其中epoll是Linux所特有，而select则应该是POSIX所规定，一般操作系统均有实现</p>\n</blockquote>\n<br>\n\n<h2 id=\"复用IO模型小结\"><a href=\"#复用IO模型小结\" class=\"headerlink\" title=\"复用IO模型小结\"></a>复用IO模型小结</h2><ul>\n<li>关于IO复用模型，下面这个例子可以很好的说明IO复用模型的原理：</li>\n</ul>\n<blockquote>\n<p>某教室有10名学生和1名老师，这些学生上课会不停的提问，所以一个老师处理不了这么多的问题。那么学校为每个学生都配一名老师，也就是这个教室目前有10名老师。此后，只要有新的转校生，那么就会为这个学生专门分配一个老师，因为转校生也喜欢提问题。如果把以上例子中的学生比作客户端，那么老师就是负责进行数据交换的服务端。则该例子可以比作是多进程的方式。</p>\n<p>后来有一天，来了一位具有超能力的老师，这位老师回答问题非常迅速，并且可以应对所有的问题。而这位老师采用的方式是学生提问前必须先举手，确认举手学生后在回答问题。则现在的情况就是IO复用。</p>\n</blockquote>\n<ul>\n<li><strong>IO复用模型的优点</strong>：系统不必创建和维护大量的线程，只使用一个或几个线程来监听select选择器的操作，而一个选择器可同时处理成千上万个连接，大大减少了系统的开销；</li>\n<li><strong>IO复用模型的缺点</strong>：select本质上还是同步阻塞模式；</li>\n</ul>\n<p>&emsp;&emsp;<strong>总结：</strong> 复用IO的基本思路就是通过select或poll、epoll来监控多fd ，来达到不必为每个fd创建一个对应的监控线程，从而减少线程资源创建的目的。<strong>复用IO模型的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</strong></p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"④-信号驱动IO模型\"><a href=\"#④-信号驱动IO模型\" class=\"headerlink\" title=\"④ 信号驱动IO模型\"></a>④ 信号驱动IO模型</h1><ul>\n<li>信号驱动 IO（Signal Driven IO）：可以为 Socket 开启信号驱动 IO 功能，应用进程需向内核注册一个信号处理程序，该操作并立即返回。当内核中有数据准备好，会发送一个信号给应用进程，应用进程便可以在信号处理程序中发起 IO 系统调用，来完成数据读取了。</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75x9qhoc2nk0.webp\" width=\"60%\">\n\n<br>\n\n<br>\n\n<p>&emsp;&emsp;当进程发起一个IO操作，系统调用sigaction执行一个信号处理函数，该函数向内核注册一个信号处理函数（回调函数），然后进程返回，并且不阻塞当前进程；当内核数据准备好时，内核使用信号（SIGIO）通知应用线程调用recvfrom来读取数据（运行回调函数）。</p>\n<p>&emsp;&emsp;信号驱动IO它也可以看成是一种<strong>异步非阻塞IO</strong></p>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1qy5yemvy6rk.webp\" width=\"60%\">\n\n\n\n<p>&emsp;&emsp;我们说信号驱动IO模型是一种异步非阻塞IO模型，指的是用户线程去内核空间请求数据时，直接注册一个信号处理函数，然后用户线程返回（异步），而内核空间接收到请求后，开始处理（此时并不会阻塞，内核空间可以同时接收多个请求，注册多个信号处理函数）；</p>\n<p>&emsp;&emsp;但是，等到内核空间读取到数据之后，应用线程需要将数据从内核空间拷贝到用户空间，<strong>此时是用户线程是阻塞的；</strong>也就是说：<strong>应用程序将数据从内核态拷贝到用户态的过程是阻塞等待的，这是和异步IO的本质区别；</strong></p>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"⑤-异步IO模型\"><a href=\"#⑤-异步IO模型\" class=\"headerlink\" title=\"⑤ 异步IO模型\"></a>⑤ 异步IO模型</h1><ul>\n<li>异步 IO（Asynchronous IO）： 应用进程发起 IO 系统调用后，会立即返回。当内核中数据完全准备后，并且也复制到了用户空间，会产生一个信号来通知应用进程。</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.448rjyvy1va0.webp\" width=\"70%\">\n\n\n\n<br>\n\n<br>\n\n<p>&emsp;&emsp;在前面几种IO模型中，应用线程要获取数据总是先发送请求到内核，然后进行如下处理：</p>\n<blockquote>\n<p>1）<strong>阻塞IO</strong>：应用线程等待内核响应数据，期间什么都不能做</p>\n<p>2）<strong>非阻塞IO</strong>：应用线程立即响应，可以去处理其他事情，但需要不断轮询内核去获取数据</p>\n<p>3）<strong>复用IO</strong>：采用IO复用机制，请求都先交给select函数，由应用线程调用select函数来轮询所有的请求，当有请求需要获取数据时，应用线程再去内核获取数据；</p>\n<p>4）<strong>信号驱动IO</strong>：系统注册一个信号处理函数（回调函数），然后应用线程返回（不阻塞）；当内核中准备好数据后，应用线程需要把内核中的数据拷贝到用户空间，<strong>此时用户线程是阻塞的</strong>；</p>\n</blockquote>\n<p>&emsp;&emsp;在以上4种IO模型中，每次要去读取数据时都是事先发送请求询问内核是否有可读数据，然后再发起真正的读取数据请求；</p>\n<p>&emsp;&emsp;在异步IO模型中，应用只需要向内核发送一个请求，告诉内核它要读取数据后即刻返回；内核收到请求后会建立一个信号联系，当数据准备就绪，<strong>内核会主动把数据从内核复制到用户空间</strong>（而信号驱动是告诉应用程序何时可以开始拷贝数据），异步IO模型真正的做到了完完全全的非阻塞；</p>\n<blockquote>\n<p>Tips：异步IO模型和前面模型最大的区别是：<strong>前4个都是阻塞的</strong>，需要自己把用户准备好的数据，去内核拷贝到用户空间。而全异步不同，用户线程完全不需要关心实际的整个IO操作是如何进行的，只需要先发起一个请求，当接收内核返回的成功信号时表示IO操作已经完成，可以直接去使用数据，它是最理想的模型。</p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>&emsp;&emsp;从上述五种 IO 模型可以看出，应用进程对内核发起 IO 系统调用后，内核会经过两个阶段来完成数据的传输：</p>\n<ul>\n<li>第一阶段：等待数据。即应用进程发起 IO 系统调用后，会一直等待数据；当有数据传入服务器，会将数据放入内核空间，此时数据准备好。</li>\n<li>第二阶段：将数据从内核空间复制到用户空间，并返回给应用程序成功标识。</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i7o657cwvsw.webp\" width=\"60%\">\n\n\n\n<p>&emsp;&emsp;前四种模型的第二阶段是相同的，都是处于阻塞状态，其主要区别在第一阶段。而异步 IO 模型则不同，应用进程在这两个阶段是完全不阻塞的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">IO 模型</th>\n<th align=\"center\">第一阶段</th>\n<th align=\"center\">第二阶段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">阻塞式IO</td>\n<td align=\"center\">阻塞</td>\n<td align=\"center\">阻塞</td>\n</tr>\n<tr>\n<td align=\"center\">非阻塞式IO</td>\n<td align=\"center\">非阻塞</td>\n<td align=\"center\">阻塞</td>\n</tr>\n<tr>\n<td align=\"center\">IO多路程复用</td>\n<td align=\"center\">阻塞（Select）</td>\n<td align=\"center\">阻塞</td>\n</tr>\n<tr>\n<td align=\"center\">信号驱动式IO</td>\n<td align=\"center\">异步</td>\n<td align=\"center\">阻塞</td>\n</tr>\n<tr>\n<td align=\"center\">异步IO</td>\n<td align=\"center\">异步</td>\n<td align=\"center\">异步</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>segmentfault：<a class=\"link\"   href=\"https://segmentfault.com/a/1190000039898780\" >浅聊Linux的五种IO模型<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>w3cjava：<a class=\"link\"   href=\"https://www.w3cjava.com/e-book/operate-system/124699009.html\" >五种IO模型：操作系统五种IO模型大全<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<br>\n\n"},{"title":"浅析 —— 同步异步&阻塞非阻塞","author":"ratears","date":"2022-09-19T14:14:02.000Z","updated":"2022-09-19T14:14:02.000Z","_content":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","source":"_posts/2022/浅析-——-同步异步-阻塞非阻塞.md","raw":"---\ntitle: 浅析 —— 同步异步&阻塞非阻塞\nauthor: ratears\ncategories:\n\t- [Operating-Systems,I/O]\ntags:\n\t- Operating-Systems\n\t- communication-mechanism\ndate: 2022-09-19 22:14:02\nupdated: 2022-09-19 22:14:02\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","slug":"浅析-——-同步异步-阻塞非阻塞","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnt002ddctabo221ky7","content":"<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","site":{"data":{}},"excerpt":"","more":"<br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>"},{"title":"浅析 I/O（2）—— I/O分类","author":"ratears","date":"2022-09-19T14:05:34.000Z","updated":"2022-09-19T14:05:34.000Z","_content":"\n<br>\n\n- 通常用户进程中的一个完整IO分为两阶段：**用户进程空间<- ->内核空间**、**内核空间<- ->设备空间(磁盘、网络等)**。\n\n<br>\n\n<br>\n\n# 网络IO & 磁盘IO\n\n&emsp;&emsp;IO从读取数据的来源分为**内存IO**、 **网络IO**和**磁盘IO**三种，通常我们说的IO指的是后两者(因为内存IO的读写速度比网络IO和磁盘IO快的多)。\n\n&emsp;&emsp;I/O按照设备来分的话，分为两种：一种是网络I/O，也就是通过网络进行数据的拉取和输出。一种是磁盘I/O，主要是对磁盘进行读写工作。\n\n|  类型  | 概念解释                                                     |\n| :----: | :----------------------------------------------------------- |\n| 网络IO | 等待网络数据到达网卡→把网卡中的数据读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间 |\n| 磁盘IO | 把数据从磁盘中读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间 |\n\n> Tips：**由于CPU和内存的速度远远高于外部设备（网卡，磁盘等）的速度，所以在IO编程中，存在速度严重不匹配的问题。**\n\n<br>\n\n<br>\n\n# 同步IO & 异步IO\n\n|  类型  | 概念解释                                                     |\n| :----: | :----------------------------------------------------------- |\n| 同步IO | A调用B，B的处理是同步的，在处理完之前他不会通知A，只有处理完之后才会明确的通知A。**B在没有处理完A的请求时不能处理其他请求；** |\n| 异步IO | A调用B，B的处理是异步的，B在接到请求后先告诉A我已经接到请求了，然后异步去处理，处理完之后通过回调等方式再通知A。**B在处理A请求的同时，也可以接着处理其他人发送过来的请求；** |\n\n&emsp;&emsp;同步和异步最大的区别就是被调用方的**执行方式**和**返回时机**。同步指的是被调用方做完事情之后再返回，异步指的是被调用方先返回，然后再做事情，做完之后再想办法通知调用方。\n\n<br>\n\n<br>\n\n# 阻塞IO & 非阻塞IO\n\n|   类型   | 概念解释                                         |\n| :------: | :----------------------------------------------- |\n| 非阻塞IO | A调用B，A不用一直等着B的返回，先去忙别的事情了。 |\n|  阻塞IO  | A调用B，A一直等着B的返回，别的事情什么也不干。   |\n\n&emsp;&emsp;阻塞和非阻塞最大的区别就**是在被调用方返回结果之前的这段时间内，调用方是否一直等待**。阻塞指的是调用方一直等待别的事情什么都不做。非阻塞指的是调用方先去忙别的事情。\n\n<br>\n\n> **<font color=\"red\">Tips：同步IO和异步IO强调的是被调用方（B），阻塞IO和非阻塞IO强调的是调用方（A）；</font>**\n\n<br>\n\n<br>\n\n<br>","source":"_posts/2022/浅析-I-O（2）——-I-O分类.md","raw":"---\ntitle: 浅析 I/O（2）—— I/O分类\nauthor: ratears\ncategories:\n\t- [Operating-Systems,I/O]\ntags:\n\t- Operating-Systems\n\t- I/O\ndate: 2022-09-19 22:05:34\nupdated: 2022-09-19 22:05:34\n---\n\n<br>\n\n- 通常用户进程中的一个完整IO分为两阶段：**用户进程空间<- ->内核空间**、**内核空间<- ->设备空间(磁盘、网络等)**。\n\n<br>\n\n<br>\n\n# 网络IO & 磁盘IO\n\n&emsp;&emsp;IO从读取数据的来源分为**内存IO**、 **网络IO**和**磁盘IO**三种，通常我们说的IO指的是后两者(因为内存IO的读写速度比网络IO和磁盘IO快的多)。\n\n&emsp;&emsp;I/O按照设备来分的话，分为两种：一种是网络I/O，也就是通过网络进行数据的拉取和输出。一种是磁盘I/O，主要是对磁盘进行读写工作。\n\n|  类型  | 概念解释                                                     |\n| :----: | :----------------------------------------------------------- |\n| 网络IO | 等待网络数据到达网卡→把网卡中的数据读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间 |\n| 磁盘IO | 把数据从磁盘中读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间 |\n\n> Tips：**由于CPU和内存的速度远远高于外部设备（网卡，磁盘等）的速度，所以在IO编程中，存在速度严重不匹配的问题。**\n\n<br>\n\n<br>\n\n# 同步IO & 异步IO\n\n|  类型  | 概念解释                                                     |\n| :----: | :----------------------------------------------------------- |\n| 同步IO | A调用B，B的处理是同步的，在处理完之前他不会通知A，只有处理完之后才会明确的通知A。**B在没有处理完A的请求时不能处理其他请求；** |\n| 异步IO | A调用B，B的处理是异步的，B在接到请求后先告诉A我已经接到请求了，然后异步去处理，处理完之后通过回调等方式再通知A。**B在处理A请求的同时，也可以接着处理其他人发送过来的请求；** |\n\n&emsp;&emsp;同步和异步最大的区别就是被调用方的**执行方式**和**返回时机**。同步指的是被调用方做完事情之后再返回，异步指的是被调用方先返回，然后再做事情，做完之后再想办法通知调用方。\n\n<br>\n\n<br>\n\n# 阻塞IO & 非阻塞IO\n\n|   类型   | 概念解释                                         |\n| :------: | :----------------------------------------------- |\n| 非阻塞IO | A调用B，A不用一直等着B的返回，先去忙别的事情了。 |\n|  阻塞IO  | A调用B，A一直等着B的返回，别的事情什么也不干。   |\n\n&emsp;&emsp;阻塞和非阻塞最大的区别就**是在被调用方返回结果之前的这段时间内，调用方是否一直等待**。阻塞指的是调用方一直等待别的事情什么都不做。非阻塞指的是调用方先去忙别的事情。\n\n<br>\n\n> **<font color=\"red\">Tips：同步IO和异步IO强调的是被调用方（B），阻塞IO和非阻塞IO强调的是调用方（A）；</font>**\n\n<br>\n\n<br>\n\n<br>","slug":"浅析-I-O（2）——-I-O分类","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsnu002gdcta4gx0d3d4","content":"<br>\n\n<ul>\n<li>通常用户进程中的一个完整IO分为两阶段：<strong>用户进程空间&lt;- -&gt;内核空间</strong>、**内核空间&lt;- -&gt;设备空间(磁盘、网络等)**。</li>\n</ul>\n<br>\n\n<br>\n\n<h1 id=\"网络IO-amp-磁盘IO\"><a href=\"#网络IO-amp-磁盘IO\" class=\"headerlink\" title=\"网络IO &amp; 磁盘IO\"></a>网络IO &amp; 磁盘IO</h1><p>&emsp;&emsp;IO从读取数据的来源分为<strong>内存IO</strong>、 <strong>网络IO</strong>和<strong>磁盘IO</strong>三种，通常我们说的IO指的是后两者(因为内存IO的读写速度比网络IO和磁盘IO快的多)。</p>\n<p>&emsp;&emsp;I/O按照设备来分的话，分为两种：一种是网络I/O，也就是通过网络进行数据的拉取和输出。一种是磁盘I/O，主要是对磁盘进行读写工作。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">概念解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">网络IO</td>\n<td align=\"left\">等待网络数据到达网卡→把网卡中的数据读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间</td>\n</tr>\n<tr>\n<td align=\"center\">磁盘IO</td>\n<td align=\"left\">把数据从磁盘中读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Tips：<strong>由于CPU和内存的速度远远高于外部设备（网卡，磁盘等）的速度，所以在IO编程中，存在速度严重不匹配的问题。</strong></p>\n</blockquote>\n<br>\n\n<br>\n\n<h1 id=\"同步IO-amp-异步IO\"><a href=\"#同步IO-amp-异步IO\" class=\"headerlink\" title=\"同步IO &amp; 异步IO\"></a>同步IO &amp; 异步IO</h1><table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">概念解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">同步IO</td>\n<td align=\"left\">A调用B，B的处理是同步的，在处理完之前他不会通知A，只有处理完之后才会明确的通知A。<strong>B在没有处理完A的请求时不能处理其他请求；</strong></td>\n</tr>\n<tr>\n<td align=\"center\">异步IO</td>\n<td align=\"left\">A调用B，B的处理是异步的，B在接到请求后先告诉A我已经接到请求了，然后异步去处理，处理完之后通过回调等方式再通知A。<strong>B在处理A请求的同时，也可以接着处理其他人发送过来的请求；</strong></td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;同步和异步最大的区别就是被调用方的<strong>执行方式</strong>和<strong>返回时机</strong>。同步指的是被调用方做完事情之后再返回，异步指的是被调用方先返回，然后再做事情，做完之后再想办法通知调用方。</p>\n<br>\n\n<br>\n\n<h1 id=\"阻塞IO-amp-非阻塞IO\"><a href=\"#阻塞IO-amp-非阻塞IO\" class=\"headerlink\" title=\"阻塞IO &amp; 非阻塞IO\"></a>阻塞IO &amp; 非阻塞IO</h1><table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">概念解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">非阻塞IO</td>\n<td align=\"left\">A调用B，A不用一直等着B的返回，先去忙别的事情了。</td>\n</tr>\n<tr>\n<td align=\"center\">阻塞IO</td>\n<td align=\"left\">A调用B，A一直等着B的返回，别的事情什么也不干。</td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;阻塞和非阻塞最大的区别就<strong>是在被调用方返回结果之前的这段时间内，调用方是否一直等待</strong>。阻塞指的是调用方一直等待别的事情什么都不做。非阻塞指的是调用方先去忙别的事情。</p>\n<br>\n\n<blockquote>\n<p><strong><font color=\"red\">Tips：同步IO和异步IO强调的是被调用方（B），阻塞IO和非阻塞IO强调的是调用方（A）；</font></strong></p>\n</blockquote>\n<br>\n\n<br>\n\n<br>","site":{"data":{}},"excerpt":"","more":"<br>\n\n<ul>\n<li>通常用户进程中的一个完整IO分为两阶段：<strong>用户进程空间&lt;- -&gt;内核空间</strong>、**内核空间&lt;- -&gt;设备空间(磁盘、网络等)**。</li>\n</ul>\n<br>\n\n<br>\n\n<h1 id=\"网络IO-amp-磁盘IO\"><a href=\"#网络IO-amp-磁盘IO\" class=\"headerlink\" title=\"网络IO &amp; 磁盘IO\"></a>网络IO &amp; 磁盘IO</h1><p>&emsp;&emsp;IO从读取数据的来源分为<strong>内存IO</strong>、 <strong>网络IO</strong>和<strong>磁盘IO</strong>三种，通常我们说的IO指的是后两者(因为内存IO的读写速度比网络IO和磁盘IO快的多)。</p>\n<p>&emsp;&emsp;I/O按照设备来分的话，分为两种：一种是网络I/O，也就是通过网络进行数据的拉取和输出。一种是磁盘I/O，主要是对磁盘进行读写工作。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">概念解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">网络IO</td>\n<td align=\"left\">等待网络数据到达网卡→把网卡中的数据读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间</td>\n</tr>\n<tr>\n<td align=\"center\">磁盘IO</td>\n<td align=\"left\">把数据从磁盘中读取到内核缓冲区，然后从内核缓冲区复制数据到进程空间</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Tips：<strong>由于CPU和内存的速度远远高于外部设备（网卡，磁盘等）的速度，所以在IO编程中，存在速度严重不匹配的问题。</strong></p>\n</blockquote>\n<br>\n\n<br>\n\n<h1 id=\"同步IO-amp-异步IO\"><a href=\"#同步IO-amp-异步IO\" class=\"headerlink\" title=\"同步IO &amp; 异步IO\"></a>同步IO &amp; 异步IO</h1><table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">概念解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">同步IO</td>\n<td align=\"left\">A调用B，B的处理是同步的，在处理完之前他不会通知A，只有处理完之后才会明确的通知A。<strong>B在没有处理完A的请求时不能处理其他请求；</strong></td>\n</tr>\n<tr>\n<td align=\"center\">异步IO</td>\n<td align=\"left\">A调用B，B的处理是异步的，B在接到请求后先告诉A我已经接到请求了，然后异步去处理，处理完之后通过回调等方式再通知A。<strong>B在处理A请求的同时，也可以接着处理其他人发送过来的请求；</strong></td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;同步和异步最大的区别就是被调用方的<strong>执行方式</strong>和<strong>返回时机</strong>。同步指的是被调用方做完事情之后再返回，异步指的是被调用方先返回，然后再做事情，做完之后再想办法通知调用方。</p>\n<br>\n\n<br>\n\n<h1 id=\"阻塞IO-amp-非阻塞IO\"><a href=\"#阻塞IO-amp-非阻塞IO\" class=\"headerlink\" title=\"阻塞IO &amp; 非阻塞IO\"></a>阻塞IO &amp; 非阻塞IO</h1><table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">概念解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">非阻塞IO</td>\n<td align=\"left\">A调用B，A不用一直等着B的返回，先去忙别的事情了。</td>\n</tr>\n<tr>\n<td align=\"center\">阻塞IO</td>\n<td align=\"left\">A调用B，A一直等着B的返回，别的事情什么也不干。</td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;阻塞和非阻塞最大的区别就<strong>是在被调用方返回结果之前的这段时间内，调用方是否一直等待</strong>。阻塞指的是调用方一直等待别的事情什么都不做。非阻塞指的是调用方先去忙别的事情。</p>\n<br>\n\n<blockquote>\n<p><strong><font color=\"red\">Tips：同步IO和异步IO强调的是被调用方（B），阻塞IO和非阻塞IO强调的是调用方（A）；</font></strong></p>\n</blockquote>\n<br>\n\n<br>\n\n<br>"},{"title":"《Nginx入门到实践－Nginx中间件》study notes","author":"sonzonzy","date":"2022-05-21T02:35:03.000Z","updated":"2022-05-21T02:35:03.000Z","_content":"\n# Nginx起步\n\n## 简介\n\n- Nginx是一个开源且高性能、可靠的http中间件、代理服务\n  - 高效：支持海量的并发请求\n  - 可靠：Nginx的服务是可靠运行的\n  - 开源\n\n<br/>\n\n## 特点（优势）\n\n- IO多路复用epoll\n- 轻量级：功能模块少、代码模块化\n- cpu亲和\n- sendfile\n\n<br/>\n\n## 下载与安装\n\n### 环境准备\n\n- centos7\n- 四项确认\n  - 确认系统网络（可以连接到公网）：\t`ping www.baidu.com`\n  - 确认yum源可用： `yum list|grep gcc`\n  - 确认关闭iptables规则 （规则会对验证HTTP服务造成影响）\n  - 确认停用selinux\n\n<br/>\n\n```bash\n# 查看是否有iptables规则\niptables -L\niptables -t nat -L\n# 关闭规则\niptables -F\niptables -t nat -L\n\n\n\n# 查看SELinux状态，如果SELinux status参数为enabled即为开启状态\ngetenforce\n\n# 临时关闭（不用重启机器）\nsetenforce 0\n\n#设置SELinux 成为permissive模式\n#setenforce 1 设置SELinux 成为enforcing模式\n\n# 修改配置文件需要重启机器\n# 修改/etc/selinux/config 文件\n# 将SELINUX=enforcing改为SELINUX=disabled\n```\n\n- 依赖工具包安装\n\n```bash\nyum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake wget httpd-tools vim\n```\n\n- 一次初始化目录\n\n```bash\n# cd /opt目录下\ncd /opt && mkdir app download logs work backup\n\n# 软件、应用、代码 \t app\t\t\n# 备份文件 \t\t\tbackup\t\t\n# 下载内容\t\t\tdownload\t\n# 自定义日志\t\t   logs\t\t\n# shell脚本\t\t work\t\t\n```\n\n<br/>\n\n### 下载安装\n\n- 使用yum源方式安装\n\n```\n# 基于yum源（这种方式不需要源码一个个编译，加入package参数。这种方式效率高）\ncd /etc/yum.repos.d && touch nginx.repo && vim /etc/yum.repos.d/nginx.repo\n\n# 添加如下内容 $releasever 换成centos版本\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n\nyum list | grep nginx\n\nyum install nginx\n\n# 查看版本\nnginx -v\n\n# 查看编译参数\nnginx -V\n\nrpm -ql nginx\n```\n\n<br/>\n\n## Nginx启停、重载与检查\n\n```linux\nsystemctl start nginx.service\nsystemctl stop nginx.service\nsystemctl restart nginx.service\n\n# 重载服务\nnginx -s reload -c /etc/nginx/nginx.conf\n\n# -t 检查配置文件的正确与否\n# -c 路径检查\nnginx -t -c /etc/nginx/nginx.conf\nnginx -tc /etc/nginx/nginx.conf\n\n```\n\n<br/>\n\n## Nginx目录详解\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1656978bb93c905fb3c43afa17d66c7.1ucnkaxhiihs.webp\" width=\"75%\"/>\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/4e657e9c7d08ca72f6a3fcf6b075202.6t6iyec78d00.webp\" width=\"75%\"/>\n\n<br/>\n\n## Nginx安装编译参数\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.64mpovli4l80.webp\" width=\"75%\" />\n\n\n\n# Nginx基础\n\n## Nginx默认配置语法\n\n### nginx.conf（分三大块）\n\n```nginx\nuser  nginx;\t# 设置nginx服务的系统使用用户\nworker_processes  1;\t# 工作进程数\n\nerror_log  /var/log/nginx/error.log warn;\t# nginx的错误日志\npid        /var/run/nginx.pid;\t# nginx服务启动时候pid\n# （1）以上是全局、服务模块配置\n\nevents {\n    worker_connections  1024;\t# 每个进程允许最大连接数\n    use  1;\t#\t工作进程数\n}\n# （2）以上是事件模块\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\t\t\n\t\t# 包含该文件\n    include /etc/nginx/conf.d/*.conf;\n}\n# （3）以上是http模块\n```\n\n<br/>\n\n### default.conf\n\n```nginx\nserver {\n    listen       80;\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log     main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n\n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n```\n\n<br/>\n\n## Nginx 虚拟主机及实现方式\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.29gkicljqdxc.webp\" width=\"65%\" />\n\n<br/>\n\n### 虚拟机主机配置方式（三种）\n\n#### 一：基于主机多IP方式（两种）\n\n1. 多网卡多IP\n2. 单网卡多IP\n\n```bash\n# 这里我们使用单网卡多ip方式实践，适用于 centos虚拟机\n\n# 临时性的，重启网络后失效\nip a add 192.168.163.202/24 dev ens32\n\n# 配置成功后如下\n[root@localhost backup]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens32: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 00:0c:29:f9:3c:04 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.163.201/24 brd 192.168.163.255 scope global noprefixroute ens32\n       valid_lft forever preferred_lft forever\n    inet 192.168.163.202/24 scope global secondary ens32\n       valid_lft forever preferred_lft forever\n    inet6 fe80::851d:65b2:ca19:571a/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n\n```\n\n- 在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件\n\n```nginx\n\tlisten       192.168.163.201:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_ip_201/;\n        index  index.html index.htm;\n    }\n```\n\n```nginx\n\tlisten       192.168.163.202:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_ip_202/;\n        index  index.html index.htm;\n    }\n```\n\n- 配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果\n\n<br/>\n\n#### 二：基于端口配置方式\n\n- 在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件\n\n```nginx\n \tlisten       81;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_port_81/;\n        index  index.html index.htm;\n    }\n```\n\n```nginx\n\tlisten       82;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_port_82/;\n        index  index.html index.htm;\n    }\n```\n\n- 配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果\n\n<br/>\n\n#### 三：基于多个host名称方式（多域名方式）\n\n```nginx\n# 这里，我们在访问机上配置dns，来实现多域名方式\n# 修改访问机器的hosts文件\n\n192.168.163.201 a.sonzonzy.com\n192.168.163.201 b.sonzonzy.com\n```\n\n- 在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件\n\n```nginx\n\tlisten       80;\n    server_name  a.sonzonzy.com;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_host_a/;\n        index  index.html index.htm;\n    }\n```\n\n```nginx\n\tlisten       80;\n    server_name  b.sonzonzy.com;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_host_b/;\n        index  index.html index.htm;\n    }\n```\n\n- 配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果\n\n<br/>\n\n## \n\n## Nginx日志\n\n- error.log\n  - 处理HTTP请求的错误状态\n  - 以及Nginx错误运行的状态\n\n- access_log\n  - 记录每一次请求的访问状态\n  - 分析请求\n\n<br/>\n\n### log_formate\n\n```shell\nSyntax:\tlog_format name [escape=default|json|none] string ...;\nDefault:\t\nlog_format combined \"...\";\nContext:\thttp\n```\n\n## Nginx 变量\n\n- HTTP 请求变量\n- 内置变量 — Nginx 内置的\n- 自定义变量 — 自己定义\n\n\n\n## Nginx模块\n\n- Nginx官方模块\n- 第三方模块\n\n### ngx_http_stub_status_module\n\n- 查看nginx的连接状态等基本信息\n\n```bash\nSyntax:\tstub_status;\nDefault:\t—\nContext:\tserver, location\n```\n\n```bash\n# 配置示例\nlocation = /basic_status {\n    stub_status;\n}\n```\n\n```bash\n# The current number of active client connections including Waiting connections.\n# nginx当前活跃的连接数\nActive connections: 2 \n# nginx处理的握手次数 连接数 总的请求数\nserver accepts handled requests\n 3 3 3 \n# 当前正在读的数量 正在写的数量 等待总数量（开启长连接时） \nReading: 0 Writing: 1 Waiting: 1 \n```\n\n### ngx_http_random_index_module\n\n- 随机生成首页\n\n- 使用场景：给用户不同的首页展示感觉\n\n```shell\nSyntax:\trandom_index on | off;\nDefault:\t\nrandom_index off;\nContext:\tlocation\n```\n\n```bash\n location /random {\n \t\t# 不会展示隐藏文件\n        root /opt/app/code_random_html;\n        random_index on;\n }\n```\n\n### ngx_http_sub_module\n\n- 指定字符串替换\n\n```bash\nSyntax:\tsub_filter string replacement;\nDefault:\t—\nContext:\thttp, server, location\n\nSyntax:\tsub_filter_last_modified on | off;\nDefault:\t\nsub_filter_last_modified off;\nContext:\thttp, server, location\nThis directive appeared in version 1.5.1.\n\nSyntax:\tsub_filter_once on | off;\nDefault:\t\nsub_filter_once on;\nContext:\thttp, server, location\n\nSyntax:\tsub_filter_types mime-type ...;\nDefault:\t\nsub_filter_types text/html;\nContext:\thttp, server, location\n```\n\n### ngx_http_limit_conn_module & ngx_http_limit_req_module\n\n#### 连接频率限制\n\n```bash\nSyntax:\tlimit_conn_zone key zone=name:size;\nDefault:\t—\nContext:\thttp\n\nSyntax:\tlimit_conn zone number;\nDefault:\t—\nContext:\thttp, server, location\n```\n\n#### 请求频率限制\n\n```bash\nSyntax:\tlimit_req_zone key zone=name:size rate=rate [sync];\nDefault:\t—\nContext:\thttp\n\nSyntax:\tlimit_req zone=name [burst=number] [nodelay | delay=number];\nDefault:\t—\nContext:\thttp, server, location\n```\n\n```bash\nlimit_conn_zone $binary_remote_addr zone=conn_zone:1m;\n# binary_remote_addr 和 remote_addr，都表示客户端地址，binary_remote_addr更节省空间。rate=1r/ 速率 每秒一个。对同一个ip访问，进行速率限制，每秒一个\nlimit_req_zone $binary_remote_addr zone=req_zone:1m rate=1r/s;\n\n\nlocation / {\n\troot /opt/app/code_conn_req\n\t # limit_conn conn_zone 1;\n\t # burst=3 超过请求频率，则 遗留3个到下一秒执行，达到访问限速，延迟响应这样一个效果。nodelay 表示直接返回503\n     limit_req zone=req_zone burst=3 nodelay;\n     # limit_req req_zone burst=3;\n     #  limit_req zone=req_zone;\n\tindex index.html;\n}\n\n```\n\n- 使用工具 `ab`进行测试\n\n```bash\n# -n 请求数 -c 最大并发数\nab -n 20 -c 20 http://192.168.163.201:80/index.html\n```\n\n### ngx_http_access_module （基于IP的访问控制）\n\n```bash\nSyntax:\tallow address | CIDR | unix: | all;\nDefault:\t—\nContext:\thttp, server, location, limit_except\n\nSyntax:\tdeny address | CIDR | unix: | all;\nDefault:\t—\nContext:\thttp, server, location, limit_except\n```\n\n```bash\n location ~ ^/access.html {\n        root /opt/app/code_access;\n        deny 192.168.163.128;\n        deny  192.168.163.201;\n        allow 192.168.163.1;\n        index index.html;\n    }\n```\n\n#### 局限性\n\n- nginx`ngx_http_access_module` 是基于 `$remote_addr` 来识客户端ip的\n\n<img src =\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.46z15z24rj00.webp\" width=\"65%\" />\n\n#### http_x_forwarded_for\n\n- http head 中常用的变量\n\n<img src =\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6vvihm5g7wo0.webp\" width=\"65%\" />\n\n#### http _ access _ module 局限性解决办法\n\n1. 采用别的http头信息控制访问，如：`http_x_forwarded_for` （但这个也有要求，cdn厂商、代理方不一定按照要求做。另外还存在被篡改的可能性）\n2. 结合geo模块\n3. 通过http自定义变量传递（在http头规定一个变量，联系所有上一级设备，手动把 `$remote_addr` 的信息携带到我们规定的变量里面去。这样既可以避免像 `http_x_forwarded_for` 被改写，也可以准确读到客户端的ip地址）\n\n### ngx_http_auth_basic_module （基于用户的信任登录）\n\n```bash\nSyntax:\tauth_basic string | off;\nDefault:\t\nauth_basic off;\nContext:\thttp, server, location, limit_except\n\nSyntax:\tauth_basic_user_file file;\nDefault:\t—\nContext:\thttp, server, location, limit_except\n```\n\n```bash\n[root@localhost nginx]# htpasswd -c ./auth_conf sonzonzy\nNew password:\nRe-type new password:\nAdding password for user sonzonzy\n\n[root@localhost nginx]# cat auth_conf\nsonzonzy:$apr1$VkobqTlq$kdqJWa831J8phMplUdYt90\n```\n\n```bash\n    location ~ ^/access.html {\n        root /opt/app/code_access;\n        auth_basic           \"closed site\";\n        auth_basic_user_file /etc/nginx/auth_conf;\n        index index.html;\n    }\n```\n\n#### 局限性\n\n- 用户信息依赖文件方式\n- 操作管理机械，效率底下\n\n#### 解决局限性\n\n- nginx 结合 lua 实现高效验证\n- nginx和ldap打通，利用 nginx-auth-ldap模块\n\n# 场景实践\n\n## Nginx作为静态资源web服务\n\n### 静态资源web服务相关配置\n\n- 静态资源类型\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/4693d69b183208f24ab65ba1d33028b.slr3oozhg6o.webp\" width=\"80%\"/>\n\n- 静态资源服务场景-CDN\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.ny2gyp55en4.webp\" width=\"80%\"/>\n\n- 文件读取\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.qbmthl454z4.webp\" width=\"60%\"/>\n\n- tcp_nopush（多个传输包进行整合，一次发送出去。适用于大文件场景）\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.39961x4hd340.webp\" width=\"60%\"/>\n\n- tcp_nodelay（不等待，实时发送，适用于对传输实时性比较高的场景）\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3a6n93k83h20.webp\" width=\"60%\" />\n\n- 压缩传输（减少带宽资源，传输文件大小。提高传输效率）\n\n```nginx\nSyntax:\tgzip on | off;\nDefault:\t\ngzip off;\nContext:\thttp, server, location, if in location\n```\n\n```nginx\n# 压缩级别、比率。好处：压缩比率大，传输文件小，效率高。坏处：压缩本身就要耗性能\nSyntax:\tgzip_comp_level level;\nDefault:\t\ngzip_comp_level 1;\nContext:\thttp, server, location\n```\n\n```nginx\n# gzip http 协议版本 主流 1.1\nSyntax:\tgzip_http_version 1.0 | 1.1;\nDefault:\t\ngzip_http_version 1.1;\nContext:\thttp, server, location\n```\n\n```nginx\n# 预读gzip （先去目录下找同名的 gz文件 减少cpu压缩时间，压缩性能损耗）\nSyntax:\tgzip_static on | off | always;\nDefault:\t\ngzip_static off;\nContext:\thttp, server, location\n```\n\n```nginx\n# gunzip 解决部分浏览器无法进行gzip压缩\nSyntax:\tgunzip on | off;\nDefault:\t\ngunzip off;\nContext:\thttp, server, location\n```\n\n```nginx\nserver {\n    listen       80;\n    server_name  localhost;\n\n    sendfile on;\n    #charset koi8-r;\n    access_log  /var/log/nginx/access.log  main;\n\n\n    location ~ .*\\.(jpg|gif|png)$ {\n        gzip off;\n        gzip_http_version 1.1;\n        gzip_comp_level 2;\n        gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n        root  /opt/app/code/images;\n    }\n\n    location ~ .*\\.(txt|xml)$ {\n        gzip off;\n        gzip_http_version 1.1;\n        gzip_comp_level 1;\n        gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n        root  /opt/app/code/doc;\n    }\n\n    location ~ ^/download {\n        gzip_static off;\n        tcp_nopush on;\n        root /opt/app/code;\n    }\n\n    error_page   500 502 503 504 404  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n### 浏览器缓存\n\n- http协议定义的缓存机制（如 Expires；Cache-control）\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.1rsot6o5v5uo.webp\" width=\"80%\"/>\n\n- 缓存校验过期机制（expires http1.0版本 ，Cache-Control http1.1版本）\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5zy4ev2morw.webp\" width=\"80%\"/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5f9qg6jggm0.webp\" width=\"80%\"/>\n\n- expires\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5lpqimpu2p80.webp\" width=\"80%\"/>\n\n### 跨域\n\n- 为什么浏览器禁止跨域访问\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6j59fpj9b140.webp\" width=\"80%\"/>\n\n- 允许跨域\n\n```nginx\nSyntax:\tadd_header name value [always];\nDefault:\t—\nContext:\thttp, server, location, if in location\n\nAccess-Control-Allow-Origin\n```\n\n```nginx\nlocation ~ .*\\.(htm|html)$ {\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n        root  /opt/app/code;\n    }\n```\n\n### 防盗链\n\n- 目的：防止资源被盗用\n- 防盗链设置思路：区别哪些请求是非正常的用户请求\n\n```nginx\nSyntax:\tvalid_referers none | blocked | server_names | string ...;\nDefault:\t—\nContext:\tserver, location\n```\n\n```nginx\nvalid_referers none blocked 116.62.103.228 jeson.imoocc.com ~wei\\.png;\nif ($invalid_referer) {\n    return 403;\n}\nroot  /opt/app/code/images;\n```\n\n## Nginx作为代理服务\n\n### 代理分类\n\n- 按应用场景分为正向代理和反向代理\n\n- 正向代理\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.13yo9bbezcv4.webp\" width=\"50%\"/>\n\n- 反向代理\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.sg1icdn13tc.webp\" width=\"50%\"/>\n\n### Nginx可支持的代理协议\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.1vyne8343hvk.webp\" width=\"65%\"/>\n\n- Nginx作为反向代理支持的协议\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3l728c8m6520.webp\" width=\"65%\" />\n\n- 反向代理模式与nginx代理模块\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.42l3gl0jaba0.webp\" width=\"60%\"/>\n\n- Nginx作为正向代理支持的协议\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4431yi9hnzk0.webp\" width=\"60%\"/>\n\n### http_pass\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.41w6nf29vw60.webp\" width=\"65%\" />\n\n```nginx\n```\n\n\n\n\n\n## Nginx作为缓存服务（代理缓存）\n\n- 缓存：请求集中在前端，减轻后端压力\n- 缓存分类：客户端缓存、代理缓存、服务器缓存\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2i34i938qx20.webp\" width=\"65%\"/>\n\n- **proxy_cache_path**\n\n```nginx\nSyntax:\tproxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [min_free=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];\nDefault:\t—\nContext:\thttp\n```\n\n- **proxy_cache**\n\n```nginx\nSyntax:\tproxy_cache zone | off;\nDefault:\t\nproxy_cache off;\nContext:\thttp, server, location\n```\n\n- **proxy_cache_valid**\n\n```nginx\nSyntax:\tproxy_cache_valid [code ...] time;\nDefault:\t—\nContext:\thttp, server, location\n```\n\n- **proxy_cache_key**\n\n```nginx\nSyntax:\tproxy_cache_key string;\nDefault:\t\nproxy_cache_key $scheme$proxy_host$request_uri;\nContext:\thttp, server, location\n```\n\n\n\n\n\n\n\n\n\n## Nginx作为负载均衡服务\n\n\n\n\n\n\n\n\n\n# 备注\n\n- sendfile需要进一步了解\n- 正向代理这块暂时没办法测试\n- \n","source":"_drafts/《Nginx入门到实践－Nginx中间件》study-notes.md","raw":"---\ntitle: 《Nginx入门到实践－Nginx中间件》study notes\nauthor: sonzonzy\ndate: 2022-05-21 10:35:03\nupdated: 2022-05-21 10:35:03\ncategories:\n  - nginx\ntags:\n  - nginx\n---\n\n# Nginx起步\n\n## 简介\n\n- Nginx是一个开源且高性能、可靠的http中间件、代理服务\n  - 高效：支持海量的并发请求\n  - 可靠：Nginx的服务是可靠运行的\n  - 开源\n\n<br/>\n\n## 特点（优势）\n\n- IO多路复用epoll\n- 轻量级：功能模块少、代码模块化\n- cpu亲和\n- sendfile\n\n<br/>\n\n## 下载与安装\n\n### 环境准备\n\n- centos7\n- 四项确认\n  - 确认系统网络（可以连接到公网）：\t`ping www.baidu.com`\n  - 确认yum源可用： `yum list|grep gcc`\n  - 确认关闭iptables规则 （规则会对验证HTTP服务造成影响）\n  - 确认停用selinux\n\n<br/>\n\n```bash\n# 查看是否有iptables规则\niptables -L\niptables -t nat -L\n# 关闭规则\niptables -F\niptables -t nat -L\n\n\n\n# 查看SELinux状态，如果SELinux status参数为enabled即为开启状态\ngetenforce\n\n# 临时关闭（不用重启机器）\nsetenforce 0\n\n#设置SELinux 成为permissive模式\n#setenforce 1 设置SELinux 成为enforcing模式\n\n# 修改配置文件需要重启机器\n# 修改/etc/selinux/config 文件\n# 将SELINUX=enforcing改为SELINUX=disabled\n```\n\n- 依赖工具包安装\n\n```bash\nyum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake wget httpd-tools vim\n```\n\n- 一次初始化目录\n\n```bash\n# cd /opt目录下\ncd /opt && mkdir app download logs work backup\n\n# 软件、应用、代码 \t app\t\t\n# 备份文件 \t\t\tbackup\t\t\n# 下载内容\t\t\tdownload\t\n# 自定义日志\t\t   logs\t\t\n# shell脚本\t\t work\t\t\n```\n\n<br/>\n\n### 下载安装\n\n- 使用yum源方式安装\n\n```\n# 基于yum源（这种方式不需要源码一个个编译，加入package参数。这种方式效率高）\ncd /etc/yum.repos.d && touch nginx.repo && vim /etc/yum.repos.d/nginx.repo\n\n# 添加如下内容 $releasever 换成centos版本\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n\nyum list | grep nginx\n\nyum install nginx\n\n# 查看版本\nnginx -v\n\n# 查看编译参数\nnginx -V\n\nrpm -ql nginx\n```\n\n<br/>\n\n## Nginx启停、重载与检查\n\n```linux\nsystemctl start nginx.service\nsystemctl stop nginx.service\nsystemctl restart nginx.service\n\n# 重载服务\nnginx -s reload -c /etc/nginx/nginx.conf\n\n# -t 检查配置文件的正确与否\n# -c 路径检查\nnginx -t -c /etc/nginx/nginx.conf\nnginx -tc /etc/nginx/nginx.conf\n\n```\n\n<br/>\n\n## Nginx目录详解\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1656978bb93c905fb3c43afa17d66c7.1ucnkaxhiihs.webp\" width=\"75%\"/>\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/4e657e9c7d08ca72f6a3fcf6b075202.6t6iyec78d00.webp\" width=\"75%\"/>\n\n<br/>\n\n## Nginx安装编译参数\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.64mpovli4l80.webp\" width=\"75%\" />\n\n\n\n# Nginx基础\n\n## Nginx默认配置语法\n\n### nginx.conf（分三大块）\n\n```nginx\nuser  nginx;\t# 设置nginx服务的系统使用用户\nworker_processes  1;\t# 工作进程数\n\nerror_log  /var/log/nginx/error.log warn;\t# nginx的错误日志\npid        /var/run/nginx.pid;\t# nginx服务启动时候pid\n# （1）以上是全局、服务模块配置\n\nevents {\n    worker_connections  1024;\t# 每个进程允许最大连接数\n    use  1;\t#\t工作进程数\n}\n# （2）以上是事件模块\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\t\t\n\t\t# 包含该文件\n    include /etc/nginx/conf.d/*.conf;\n}\n# （3）以上是http模块\n```\n\n<br/>\n\n### default.conf\n\n```nginx\nserver {\n    listen       80;\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log     main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n\n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n```\n\n<br/>\n\n## Nginx 虚拟主机及实现方式\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.29gkicljqdxc.webp\" width=\"65%\" />\n\n<br/>\n\n### 虚拟机主机配置方式（三种）\n\n#### 一：基于主机多IP方式（两种）\n\n1. 多网卡多IP\n2. 单网卡多IP\n\n```bash\n# 这里我们使用单网卡多ip方式实践，适用于 centos虚拟机\n\n# 临时性的，重启网络后失效\nip a add 192.168.163.202/24 dev ens32\n\n# 配置成功后如下\n[root@localhost backup]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens32: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 00:0c:29:f9:3c:04 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.163.201/24 brd 192.168.163.255 scope global noprefixroute ens32\n       valid_lft forever preferred_lft forever\n    inet 192.168.163.202/24 scope global secondary ens32\n       valid_lft forever preferred_lft forever\n    inet6 fe80::851d:65b2:ca19:571a/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n\n```\n\n- 在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件\n\n```nginx\n\tlisten       192.168.163.201:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_ip_201/;\n        index  index.html index.htm;\n    }\n```\n\n```nginx\n\tlisten       192.168.163.202:80;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_ip_202/;\n        index  index.html index.htm;\n    }\n```\n\n- 配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果\n\n<br/>\n\n#### 二：基于端口配置方式\n\n- 在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件\n\n```nginx\n \tlisten       81;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_port_81/;\n        index  index.html index.htm;\n    }\n```\n\n```nginx\n\tlisten       82;\n    server_name  localhost;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_port_82/;\n        index  index.html index.htm;\n    }\n```\n\n- 配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果\n\n<br/>\n\n#### 三：基于多个host名称方式（多域名方式）\n\n```nginx\n# 这里，我们在访问机上配置dns，来实现多域名方式\n# 修改访问机器的hosts文件\n\n192.168.163.201 a.sonzonzy.com\n192.168.163.201 b.sonzonzy.com\n```\n\n- 在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件\n\n```nginx\n\tlisten       80;\n    server_name  a.sonzonzy.com;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_host_a/;\n        index  index.html index.htm;\n    }\n```\n\n```nginx\n\tlisten       80;\n    server_name  b.sonzonzy.com;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /opt/app/code_host_b/;\n        index  index.html index.htm;\n    }\n```\n\n- 配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果\n\n<br/>\n\n## \n\n## Nginx日志\n\n- error.log\n  - 处理HTTP请求的错误状态\n  - 以及Nginx错误运行的状态\n\n- access_log\n  - 记录每一次请求的访问状态\n  - 分析请求\n\n<br/>\n\n### log_formate\n\n```shell\nSyntax:\tlog_format name [escape=default|json|none] string ...;\nDefault:\t\nlog_format combined \"...\";\nContext:\thttp\n```\n\n## Nginx 变量\n\n- HTTP 请求变量\n- 内置变量 — Nginx 内置的\n- 自定义变量 — 自己定义\n\n\n\n## Nginx模块\n\n- Nginx官方模块\n- 第三方模块\n\n### ngx_http_stub_status_module\n\n- 查看nginx的连接状态等基本信息\n\n```bash\nSyntax:\tstub_status;\nDefault:\t—\nContext:\tserver, location\n```\n\n```bash\n# 配置示例\nlocation = /basic_status {\n    stub_status;\n}\n```\n\n```bash\n# The current number of active client connections including Waiting connections.\n# nginx当前活跃的连接数\nActive connections: 2 \n# nginx处理的握手次数 连接数 总的请求数\nserver accepts handled requests\n 3 3 3 \n# 当前正在读的数量 正在写的数量 等待总数量（开启长连接时） \nReading: 0 Writing: 1 Waiting: 1 \n```\n\n### ngx_http_random_index_module\n\n- 随机生成首页\n\n- 使用场景：给用户不同的首页展示感觉\n\n```shell\nSyntax:\trandom_index on | off;\nDefault:\t\nrandom_index off;\nContext:\tlocation\n```\n\n```bash\n location /random {\n \t\t# 不会展示隐藏文件\n        root /opt/app/code_random_html;\n        random_index on;\n }\n```\n\n### ngx_http_sub_module\n\n- 指定字符串替换\n\n```bash\nSyntax:\tsub_filter string replacement;\nDefault:\t—\nContext:\thttp, server, location\n\nSyntax:\tsub_filter_last_modified on | off;\nDefault:\t\nsub_filter_last_modified off;\nContext:\thttp, server, location\nThis directive appeared in version 1.5.1.\n\nSyntax:\tsub_filter_once on | off;\nDefault:\t\nsub_filter_once on;\nContext:\thttp, server, location\n\nSyntax:\tsub_filter_types mime-type ...;\nDefault:\t\nsub_filter_types text/html;\nContext:\thttp, server, location\n```\n\n### ngx_http_limit_conn_module & ngx_http_limit_req_module\n\n#### 连接频率限制\n\n```bash\nSyntax:\tlimit_conn_zone key zone=name:size;\nDefault:\t—\nContext:\thttp\n\nSyntax:\tlimit_conn zone number;\nDefault:\t—\nContext:\thttp, server, location\n```\n\n#### 请求频率限制\n\n```bash\nSyntax:\tlimit_req_zone key zone=name:size rate=rate [sync];\nDefault:\t—\nContext:\thttp\n\nSyntax:\tlimit_req zone=name [burst=number] [nodelay | delay=number];\nDefault:\t—\nContext:\thttp, server, location\n```\n\n```bash\nlimit_conn_zone $binary_remote_addr zone=conn_zone:1m;\n# binary_remote_addr 和 remote_addr，都表示客户端地址，binary_remote_addr更节省空间。rate=1r/ 速率 每秒一个。对同一个ip访问，进行速率限制，每秒一个\nlimit_req_zone $binary_remote_addr zone=req_zone:1m rate=1r/s;\n\n\nlocation / {\n\troot /opt/app/code_conn_req\n\t # limit_conn conn_zone 1;\n\t # burst=3 超过请求频率，则 遗留3个到下一秒执行，达到访问限速，延迟响应这样一个效果。nodelay 表示直接返回503\n     limit_req zone=req_zone burst=3 nodelay;\n     # limit_req req_zone burst=3;\n     #  limit_req zone=req_zone;\n\tindex index.html;\n}\n\n```\n\n- 使用工具 `ab`进行测试\n\n```bash\n# -n 请求数 -c 最大并发数\nab -n 20 -c 20 http://192.168.163.201:80/index.html\n```\n\n### ngx_http_access_module （基于IP的访问控制）\n\n```bash\nSyntax:\tallow address | CIDR | unix: | all;\nDefault:\t—\nContext:\thttp, server, location, limit_except\n\nSyntax:\tdeny address | CIDR | unix: | all;\nDefault:\t—\nContext:\thttp, server, location, limit_except\n```\n\n```bash\n location ~ ^/access.html {\n        root /opt/app/code_access;\n        deny 192.168.163.128;\n        deny  192.168.163.201;\n        allow 192.168.163.1;\n        index index.html;\n    }\n```\n\n#### 局限性\n\n- nginx`ngx_http_access_module` 是基于 `$remote_addr` 来识客户端ip的\n\n<img src =\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.46z15z24rj00.webp\" width=\"65%\" />\n\n#### http_x_forwarded_for\n\n- http head 中常用的变量\n\n<img src =\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6vvihm5g7wo0.webp\" width=\"65%\" />\n\n#### http _ access _ module 局限性解决办法\n\n1. 采用别的http头信息控制访问，如：`http_x_forwarded_for` （但这个也有要求，cdn厂商、代理方不一定按照要求做。另外还存在被篡改的可能性）\n2. 结合geo模块\n3. 通过http自定义变量传递（在http头规定一个变量，联系所有上一级设备，手动把 `$remote_addr` 的信息携带到我们规定的变量里面去。这样既可以避免像 `http_x_forwarded_for` 被改写，也可以准确读到客户端的ip地址）\n\n### ngx_http_auth_basic_module （基于用户的信任登录）\n\n```bash\nSyntax:\tauth_basic string | off;\nDefault:\t\nauth_basic off;\nContext:\thttp, server, location, limit_except\n\nSyntax:\tauth_basic_user_file file;\nDefault:\t—\nContext:\thttp, server, location, limit_except\n```\n\n```bash\n[root@localhost nginx]# htpasswd -c ./auth_conf sonzonzy\nNew password:\nRe-type new password:\nAdding password for user sonzonzy\n\n[root@localhost nginx]# cat auth_conf\nsonzonzy:$apr1$VkobqTlq$kdqJWa831J8phMplUdYt90\n```\n\n```bash\n    location ~ ^/access.html {\n        root /opt/app/code_access;\n        auth_basic           \"closed site\";\n        auth_basic_user_file /etc/nginx/auth_conf;\n        index index.html;\n    }\n```\n\n#### 局限性\n\n- 用户信息依赖文件方式\n- 操作管理机械，效率底下\n\n#### 解决局限性\n\n- nginx 结合 lua 实现高效验证\n- nginx和ldap打通，利用 nginx-auth-ldap模块\n\n# 场景实践\n\n## Nginx作为静态资源web服务\n\n### 静态资源web服务相关配置\n\n- 静态资源类型\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/4693d69b183208f24ab65ba1d33028b.slr3oozhg6o.webp\" width=\"80%\"/>\n\n- 静态资源服务场景-CDN\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.ny2gyp55en4.webp\" width=\"80%\"/>\n\n- 文件读取\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.qbmthl454z4.webp\" width=\"60%\"/>\n\n- tcp_nopush（多个传输包进行整合，一次发送出去。适用于大文件场景）\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.39961x4hd340.webp\" width=\"60%\"/>\n\n- tcp_nodelay（不等待，实时发送，适用于对传输实时性比较高的场景）\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3a6n93k83h20.webp\" width=\"60%\" />\n\n- 压缩传输（减少带宽资源，传输文件大小。提高传输效率）\n\n```nginx\nSyntax:\tgzip on | off;\nDefault:\t\ngzip off;\nContext:\thttp, server, location, if in location\n```\n\n```nginx\n# 压缩级别、比率。好处：压缩比率大，传输文件小，效率高。坏处：压缩本身就要耗性能\nSyntax:\tgzip_comp_level level;\nDefault:\t\ngzip_comp_level 1;\nContext:\thttp, server, location\n```\n\n```nginx\n# gzip http 协议版本 主流 1.1\nSyntax:\tgzip_http_version 1.0 | 1.1;\nDefault:\t\ngzip_http_version 1.1;\nContext:\thttp, server, location\n```\n\n```nginx\n# 预读gzip （先去目录下找同名的 gz文件 减少cpu压缩时间，压缩性能损耗）\nSyntax:\tgzip_static on | off | always;\nDefault:\t\ngzip_static off;\nContext:\thttp, server, location\n```\n\n```nginx\n# gunzip 解决部分浏览器无法进行gzip压缩\nSyntax:\tgunzip on | off;\nDefault:\t\ngunzip off;\nContext:\thttp, server, location\n```\n\n```nginx\nserver {\n    listen       80;\n    server_name  localhost;\n\n    sendfile on;\n    #charset koi8-r;\n    access_log  /var/log/nginx/access.log  main;\n\n\n    location ~ .*\\.(jpg|gif|png)$ {\n        gzip off;\n        gzip_http_version 1.1;\n        gzip_comp_level 2;\n        gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n        root  /opt/app/code/images;\n    }\n\n    location ~ .*\\.(txt|xml)$ {\n        gzip off;\n        gzip_http_version 1.1;\n        gzip_comp_level 1;\n        gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n        root  /opt/app/code/doc;\n    }\n\n    location ~ ^/download {\n        gzip_static off;\n        tcp_nopush on;\n        root /opt/app/code;\n    }\n\n    error_page   500 502 503 504 404  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n### 浏览器缓存\n\n- http协议定义的缓存机制（如 Expires；Cache-control）\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.1rsot6o5v5uo.webp\" width=\"80%\"/>\n\n- 缓存校验过期机制（expires http1.0版本 ，Cache-Control http1.1版本）\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5zy4ev2morw.webp\" width=\"80%\"/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5f9qg6jggm0.webp\" width=\"80%\"/>\n\n- expires\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5lpqimpu2p80.webp\" width=\"80%\"/>\n\n### 跨域\n\n- 为什么浏览器禁止跨域访问\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6j59fpj9b140.webp\" width=\"80%\"/>\n\n- 允许跨域\n\n```nginx\nSyntax:\tadd_header name value [always];\nDefault:\t—\nContext:\thttp, server, location, if in location\n\nAccess-Control-Allow-Origin\n```\n\n```nginx\nlocation ~ .*\\.(htm|html)$ {\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n        root  /opt/app/code;\n    }\n```\n\n### 防盗链\n\n- 目的：防止资源被盗用\n- 防盗链设置思路：区别哪些请求是非正常的用户请求\n\n```nginx\nSyntax:\tvalid_referers none | blocked | server_names | string ...;\nDefault:\t—\nContext:\tserver, location\n```\n\n```nginx\nvalid_referers none blocked 116.62.103.228 jeson.imoocc.com ~wei\\.png;\nif ($invalid_referer) {\n    return 403;\n}\nroot  /opt/app/code/images;\n```\n\n## Nginx作为代理服务\n\n### 代理分类\n\n- 按应用场景分为正向代理和反向代理\n\n- 正向代理\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.13yo9bbezcv4.webp\" width=\"50%\"/>\n\n- 反向代理\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.sg1icdn13tc.webp\" width=\"50%\"/>\n\n### Nginx可支持的代理协议\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.1vyne8343hvk.webp\" width=\"65%\"/>\n\n- Nginx作为反向代理支持的协议\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3l728c8m6520.webp\" width=\"65%\" />\n\n- 反向代理模式与nginx代理模块\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.42l3gl0jaba0.webp\" width=\"60%\"/>\n\n- Nginx作为正向代理支持的协议\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4431yi9hnzk0.webp\" width=\"60%\"/>\n\n### http_pass\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.41w6nf29vw60.webp\" width=\"65%\" />\n\n```nginx\n```\n\n\n\n\n\n## Nginx作为缓存服务（代理缓存）\n\n- 缓存：请求集中在前端，减轻后端压力\n- 缓存分类：客户端缓存、代理缓存、服务器缓存\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2i34i938qx20.webp\" width=\"65%\"/>\n\n- **proxy_cache_path**\n\n```nginx\nSyntax:\tproxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [min_free=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];\nDefault:\t—\nContext:\thttp\n```\n\n- **proxy_cache**\n\n```nginx\nSyntax:\tproxy_cache zone | off;\nDefault:\t\nproxy_cache off;\nContext:\thttp, server, location\n```\n\n- **proxy_cache_valid**\n\n```nginx\nSyntax:\tproxy_cache_valid [code ...] time;\nDefault:\t—\nContext:\thttp, server, location\n```\n\n- **proxy_cache_key**\n\n```nginx\nSyntax:\tproxy_cache_key string;\nDefault:\t\nproxy_cache_key $scheme$proxy_host$request_uri;\nContext:\thttp, server, location\n```\n\n\n\n\n\n\n\n\n\n## Nginx作为负载均衡服务\n\n\n\n\n\n\n\n\n\n# 备注\n\n- sendfile需要进一步了解\n- 正向代理这块暂时没办法测试\n- \n","slug":"《Nginx入门到实践－Nginx中间件》study-notes","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsor005kdcta0fegeghq","content":"<h1 id=\"Nginx起步\"><a href=\"#Nginx起步\" class=\"headerlink\" title=\"Nginx起步\"></a>Nginx起步</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>Nginx是一个开源且高性能、可靠的http中间件、代理服务<ul>\n<li>高效：支持海量的并发请求</li>\n<li>可靠：Nginx的服务是可靠运行的</li>\n<li>开源</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h2 id=\"特点（优势）\"><a href=\"#特点（优势）\" class=\"headerlink\" title=\"特点（优势）\"></a>特点（优势）</h2><ul>\n<li>IO多路复用epoll</li>\n<li>轻量级：功能模块少、代码模块化</li>\n<li>cpu亲和</li>\n<li>sendfile</li>\n</ul>\n<br/>\n\n<h2 id=\"下载与安装\"><a href=\"#下载与安装\" class=\"headerlink\" title=\"下载与安装\"></a>下载与安装</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>centos7</li>\n<li>四项确认<ul>\n<li>确认系统网络（可以连接到公网）：    <code>ping www.baidu.com</code></li>\n<li>确认yum源可用： <code>yum list|grep gcc</code></li>\n<li>确认关闭iptables规则 （规则会对验证HTTP服务造成影响）</li>\n<li>确认停用selinux</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看是否有iptables规则</span></span><br><span class=\"line\">iptables -L</span><br><span class=\"line\">iptables -t nat -L</span><br><span class=\"line\"><span class=\"comment\"># 关闭规则</span></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables -t nat -L</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看SELinux状态，如果SELinux status参数为enabled即为开启状态</span></span><br><span class=\"line\">getenforce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时关闭（不用重启机器）</span></span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置SELinux 成为permissive模式</span></span><br><span class=\"line\"><span class=\"comment\">#setenforce 1 设置SELinux 成为enforcing模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件需要重启机器</span></span><br><span class=\"line\"><span class=\"comment\"># 修改/etc/selinux/config 文件</span></span><br><span class=\"line\"><span class=\"comment\"># 将SELINUX=enforcing改为SELINUX=disabled</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>依赖工具包安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一次初始化目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd /opt目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt &amp;&amp; <span class=\"built_in\">mkdir</span> app download logs work backup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 软件、应用、代码 \t app\t\t</span></span><br><span class=\"line\"><span class=\"comment\"># 备份文件 \t\t\tbackup\t\t</span></span><br><span class=\"line\"><span class=\"comment\"># 下载内容\t\t\tdownload\t</span></span><br><span class=\"line\"><span class=\"comment\"># 自定义日志\t\t   logs\t\t</span></span><br><span class=\"line\"><span class=\"comment\"># shell脚本\t\t work\t\t</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h3><ul>\n<li>使用yum源方式安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 基于yum源（这种方式不需要源码一个个编译，加入package参数。这种方式效率高）</span><br><span class=\"line\">cd /etc/yum.repos.d &amp;&amp; touch nginx.repo &amp;&amp; vim /etc/yum.repos.d/nginx.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加如下内容 $releasever 换成centos版本</span><br><span class=\"line\">[nginx-stable]</span><br><span class=\"line\">name=nginx stable repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yum list | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\">yum install nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看版本</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看编译参数</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Nginx启停、重载与检查\"><a href=\"#Nginx启停、重载与检查\" class=\"headerlink\" title=\"Nginx启停、重载与检查\"></a>Nginx启停、重载与检查</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx.service</span><br><span class=\"line\">systemctl stop nginx.service</span><br><span class=\"line\">systemctl restart nginx.service</span><br><span class=\"line\"></span><br><span class=\"line\"># 重载服务</span><br><span class=\"line\">nginx -s reload -c /etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># -t 检查配置文件的正确与否</span><br><span class=\"line\"># -c 路径检查</span><br><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br><span class=\"line\">nginx -tc /etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Nginx目录详解\"><a href=\"#Nginx目录详解\" class=\"headerlink\" title=\"Nginx目录详解\"></a>Nginx目录详解</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1656978bb93c905fb3c43afa17d66c7.1ucnkaxhiihs.webp\" width=\"75%\"/>\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/4e657e9c7d08ca72f6a3fcf6b075202.6t6iyec78d00.webp\" width=\"75%\"/>\n\n<br/>\n\n<h2 id=\"Nginx安装编译参数\"><a href=\"#Nginx安装编译参数\" class=\"headerlink\" title=\"Nginx安装编译参数\"></a>Nginx安装编译参数</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.64mpovli4l80.webp\" width=\"75%\" />\n\n\n\n<h1 id=\"Nginx基础\"><a href=\"#Nginx基础\" class=\"headerlink\" title=\"Nginx基础\"></a>Nginx基础</h1><h2 id=\"Nginx默认配置语法\"><a href=\"#Nginx默认配置语法\" class=\"headerlink\" title=\"Nginx默认配置语法\"></a>Nginx默认配置语法</h2><h3 id=\"nginx-conf（分三大块）\"><a href=\"#nginx-conf（分三大块）\" class=\"headerlink\" title=\"nginx.conf（分三大块）\"></a>nginx.conf（分三大块）</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx;\t<span class=\"comment\"># 设置nginx服务的系统使用用户</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;\t<span class=\"comment\"># 工作进程数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/<span class=\"literal\">error</span>.log <span class=\"literal\">warn</span>;\t<span class=\"comment\"># nginx的错误日志</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid;\t<span class=\"comment\"># nginx服务启动时候pid</span></span><br><span class=\"line\"><span class=\"comment\"># （1）以上是全局、服务模块配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;\t<span class=\"comment\"># 每个进程允许最大连接数</span></span><br><span class=\"line\">    <span class=\"attribute\">use</span>  <span class=\"number\">1</span>;\t<span class=\"comment\">#\t工作进程数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># （2）以上是事件模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\"># 包含该文件</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/conf.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># （3）以上是http模块</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"default-conf\"><a href=\"#default-conf\" class=\"headerlink\" title=\"default.conf\"></a>default.conf</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\">    <span class=\"comment\">#access_log     main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">        <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"section\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">    <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class=\"line\">    <span class=\"comment\"># concurs with nginx&#x27;s one</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Nginx-虚拟主机及实现方式\"><a href=\"#Nginx-虚拟主机及实现方式\" class=\"headerlink\" title=\"Nginx 虚拟主机及实现方式\"></a>Nginx 虚拟主机及实现方式</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.29gkicljqdxc.webp\" width=\"65%\" />\n\n<br/>\n\n<h3 id=\"虚拟机主机配置方式（三种）\"><a href=\"#虚拟机主机配置方式（三种）\" class=\"headerlink\" title=\"虚拟机主机配置方式（三种）\"></a>虚拟机主机配置方式（三种）</h3><h4 id=\"一：基于主机多IP方式（两种）\"><a href=\"#一：基于主机多IP方式（两种）\" class=\"headerlink\" title=\"一：基于主机多IP方式（两种）\"></a>一：基于主机多IP方式（两种）</h4><ol>\n<li>多网卡多IP</li>\n<li>单网卡多IP</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里我们使用单网卡多ip方式实践，适用于 centos虚拟机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时性的，重启网络后失效</span></span><br><span class=\"line\">ip a add 192.168.163.202/24 dev ens32</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置成功后如下</span></span><br><span class=\"line\">[root@localhost backup]<span class=\"comment\"># ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens32: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 00:0c:29:f9:3c:04 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.163.201/24 brd 192.168.163.255 scope global noprefixroute ens32</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 192.168.163.202/24 scope global secondary ens32</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::851d:65b2:ca19:571a/64 scope <span class=\"built_in\">link</span> noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">192.168.163.201:80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_ip_201/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">192.168.163.202:80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_ip_202/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果</li>\n</ul>\n<br/>\n\n<h4 id=\"二：基于端口配置方式\"><a href=\"#二：基于端口配置方式\" class=\"headerlink\" title=\"二：基于端口配置方式\"></a>二：基于端口配置方式</h4><ul>\n<li>在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">81</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span>   /opt/app/code_port_81/;</span><br><span class=\"line\">      <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">82</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_port_82/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果</li>\n</ul>\n<br/>\n\n<h4 id=\"三：基于多个host名称方式（多域名方式）\"><a href=\"#三：基于多个host名称方式（多域名方式）\" class=\"headerlink\" title=\"三：基于多个host名称方式（多域名方式）\"></a>三：基于多个host名称方式（多域名方式）</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里，我们在访问机上配置dns，来实现多域名方式</span></span><br><span class=\"line\"><span class=\"comment\"># 修改访问机器的hosts文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">192.168.163.201 a.sonzonzy.<span class=\"attribute\">com</span></span><br><span class=\"line\"><span class=\"number\">192.168.163.201</span> b.sonzonzy.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  a.sonzonzy.com;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_host_a/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  b.sonzonzy.com;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_host_b/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果</li>\n</ul>\n<br/>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"Nginx日志\"><a href=\"#Nginx日志\" class=\"headerlink\" title=\"Nginx日志\"></a>Nginx日志</h2><ul>\n<li><p>error.log</p>\n<ul>\n<li>处理HTTP请求的错误状态</li>\n<li>以及Nginx错误运行的状态</li>\n</ul>\n</li>\n<li><p>access_log</p>\n<ul>\n<li>记录每一次请求的访问状态</li>\n<li>分析请求</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h3 id=\"log-formate\"><a href=\"#log-formate\" class=\"headerlink\" title=\"log_formate\"></a>log_formate</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tlog_format name [escape=default|json|none] string ...;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">log_format combined &quot;...&quot;;</span><br><span class=\"line\">Context:\thttp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx-变量\"><a href=\"#Nginx-变量\" class=\"headerlink\" title=\"Nginx 变量\"></a>Nginx 变量</h2><ul>\n<li>HTTP 请求变量</li>\n<li>内置变量 — Nginx 内置的</li>\n<li>自定义变量 — 自己定义</li>\n</ul>\n<h2 id=\"Nginx模块\"><a href=\"#Nginx模块\" class=\"headerlink\" title=\"Nginx模块\"></a>Nginx模块</h2><ul>\n<li>Nginx官方模块</li>\n<li>第三方模块</li>\n</ul>\n<h3 id=\"ngx-http-stub-status-module\"><a href=\"#ngx-http-stub-status-module\" class=\"headerlink\" title=\"ngx_http_stub_status_module\"></a>ngx_http_stub_status_module</h3><ul>\n<li>查看nginx的连接状态等基本信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tstub_status;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\tserver, location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置示例</span></span><br><span class=\"line\">location = /basic_status &#123;</span><br><span class=\"line\">    stub_status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The current number of active client connections including Waiting connections.</span></span><br><span class=\"line\"><span class=\"comment\"># nginx当前活跃的连接数</span></span><br><span class=\"line\">Active connections: 2 </span><br><span class=\"line\"><span class=\"comment\"># nginx处理的握手次数 连接数 总的请求数</span></span><br><span class=\"line\">server accepts handled requests</span><br><span class=\"line\"> 3 3 3 </span><br><span class=\"line\"><span class=\"comment\"># 当前正在读的数量 正在写的数量 等待总数量（开启长连接时） </span></span><br><span class=\"line\">Reading: 0 Writing: 1 Waiting: 1 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ngx-http-random-index-module\"><a href=\"#ngx-http-random-index-module\" class=\"headerlink\" title=\"ngx_http_random_index_module\"></a>ngx_http_random_index_module</h3><ul>\n<li><p>随机生成首页</p>\n</li>\n<li><p>使用场景：给用户不同的首页展示感觉</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\trandom_index on | off;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">random_index off;</span><br><span class=\"line\">Context:\tlocation</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /random &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 不会展示隐藏文件</span></span><br><span class=\"line\">       root /opt/app/code_random_html;</span><br><span class=\"line\">       random_index on;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ngx-http-sub-module\"><a href=\"#ngx-http-sub-module\" class=\"headerlink\" title=\"ngx_http_sub_module\"></a>ngx_http_sub_module</h3><ul>\n<li>指定字符串替换</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tsub_filter string replacement;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tsub_filter_last_modified on | off;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">sub_filter_last_modified off;</span><br><span class=\"line\">Context:\thttp, server, location</span><br><span class=\"line\">This directive appeared <span class=\"keyword\">in</span> version 1.5.1.</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tsub_filter_once on | off;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">sub_filter_once on;</span><br><span class=\"line\">Context:\thttp, server, location</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tsub_filter_types mime-type ...;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">sub_filter_types text/html;</span><br><span class=\"line\">Context:\thttp, server, location</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ngx-http-limit-conn-module-amp-ngx-http-limit-req-module\"><a href=\"#ngx-http-limit-conn-module-amp-ngx-http-limit-req-module\" class=\"headerlink\" title=\"ngx_http_limit_conn_module &amp; ngx_http_limit_req_module\"></a>ngx_http_limit_conn_module &amp; ngx_http_limit_req_module</h3><h4 id=\"连接频率限制\"><a href=\"#连接频率限制\" class=\"headerlink\" title=\"连接频率限制\"></a>连接频率限制</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tlimit_conn_zone key zone=name:size;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tlimit_conn zone number;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"请求频率限制\"><a href=\"#请求频率限制\" class=\"headerlink\" title=\"请求频率限制\"></a>请求频率限制</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tlimit_req_zone key zone=name:size rate=rate [<span class=\"built_in\">sync</span>];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tlimit_req zone=name [burst=number] [nodelay | delay=number];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_conn_zone <span class=\"variable\">$binary_remote_addr</span> zone=conn_zone:1m;</span><br><span class=\"line\"><span class=\"comment\"># binary_remote_addr 和 remote_addr，都表示客户端地址，binary_remote_addr更节省空间。rate=1r/ 速率 每秒一个。对同一个ip访问，进行速率限制，每秒一个</span></span><br><span class=\"line\">limit_req_zone <span class=\"variable\">$binary_remote_addr</span> zone=req_zone:1m rate=1r/s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">\troot /opt/app/code_conn_req</span><br><span class=\"line\">\t <span class=\"comment\"># limit_conn conn_zone 1;</span></span><br><span class=\"line\">\t <span class=\"comment\"># burst=3 超过请求频率，则 遗留3个到下一秒执行，达到访问限速，延迟响应这样一个效果。nodelay 表示直接返回503</span></span><br><span class=\"line\">     limit_req zone=req_zone burst=3 nodelay;</span><br><span class=\"line\">     <span class=\"comment\"># limit_req req_zone burst=3;</span></span><br><span class=\"line\">     <span class=\"comment\">#  limit_req zone=req_zone;</span></span><br><span class=\"line\">\tindex index.html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用工具 <code>ab</code>进行测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -n 请求数 -c 最大并发数</span></span><br><span class=\"line\">ab -n 20 -c 20 http://192.168.163.201:80/index.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ngx-http-access-module-（基于IP的访问控制）\"><a href=\"#ngx-http-access-module-（基于IP的访问控制）\" class=\"headerlink\" title=\"ngx_http_access_module （基于IP的访问控制）\"></a>ngx_http_access_module （基于IP的访问控制）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tallow address | CIDR | unix: | all;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location, limit_except</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tdeny address | CIDR | unix: | all;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location, limit_except</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/access.html &#123;</span><br><span class=\"line\">       root /opt/app/code_access;</span><br><span class=\"line\">       deny 192.168.163.128;</span><br><span class=\"line\">       deny  192.168.163.201;</span><br><span class=\"line\">       allow 192.168.163.1;</span><br><span class=\"line\">       index index.html;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h4><ul>\n<li>nginx<code>ngx_http_access_module</code> 是基于 <code>$remote_addr</code> 来识客户端ip的</li>\n</ul>\n<img src =\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.46z15z24rj00.webp\" width=\"65%\" />\n\n<h4 id=\"http-x-forwarded-for\"><a href=\"#http-x-forwarded-for\" class=\"headerlink\" title=\"http_x_forwarded_for\"></a>http_x_forwarded_for</h4><ul>\n<li>http head 中常用的变量</li>\n</ul>\n<img src =\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6vvihm5g7wo0.webp\" width=\"65%\" />\n\n<h4 id=\"http-access-module-局限性解决办法\"><a href=\"#http-access-module-局限性解决办法\" class=\"headerlink\" title=\"http _ access _ module 局限性解决办法\"></a>http _ access _ module 局限性解决办法</h4><ol>\n<li>采用别的http头信息控制访问，如：<code>http_x_forwarded_for</code> （但这个也有要求，cdn厂商、代理方不一定按照要求做。另外还存在被篡改的可能性）</li>\n<li>结合geo模块</li>\n<li>通过http自定义变量传递（在http头规定一个变量，联系所有上一级设备，手动把 <code>$remote_addr</code> 的信息携带到我们规定的变量里面去。这样既可以避免像 <code>http_x_forwarded_for</code> 被改写，也可以准确读到客户端的ip地址）</li>\n</ol>\n<h3 id=\"ngx-http-auth-basic-module-（基于用户的信任登录）\"><a href=\"#ngx-http-auth-basic-module-（基于用户的信任登录）\" class=\"headerlink\" title=\"ngx_http_auth_basic_module （基于用户的信任登录）\"></a>ngx_http_auth_basic_module （基于用户的信任登录）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tauth_basic string | off;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">auth_basic off;</span><br><span class=\"line\">Context:\thttp, server, location, limit_except</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tauth_basic_user_file file;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location, limit_except</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># htpasswd -c ./auth_conf sonzonzy</span></span><br><span class=\"line\">New password:</span><br><span class=\"line\">Re-<span class=\"built_in\">type</span> new password:</span><br><span class=\"line\">Adding password <span class=\"keyword\">for</span> user sonzonzy</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># cat auth_conf</span></span><br><span class=\"line\">sonzonzy:$apr1$VkobqTlq<span class=\"variable\">$kdqJWa831J8phMplUdYt90</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/access.html &#123;</span><br><span class=\"line\">    root /opt/app/code_access;</span><br><span class=\"line\">    auth_basic           <span class=\"string\">&quot;closed site&quot;</span>;</span><br><span class=\"line\">    auth_basic_user_file /etc/nginx/auth_conf;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"局限性-1\"><a href=\"#局限性-1\" class=\"headerlink\" title=\"局限性\"></a>局限性</h4><ul>\n<li>用户信息依赖文件方式</li>\n<li>操作管理机械，效率底下</li>\n</ul>\n<h4 id=\"解决局限性\"><a href=\"#解决局限性\" class=\"headerlink\" title=\"解决局限性\"></a>解决局限性</h4><ul>\n<li>nginx 结合 lua 实现高效验证</li>\n<li>nginx和ldap打通，利用 nginx-auth-ldap模块</li>\n</ul>\n<h1 id=\"场景实践\"><a href=\"#场景实践\" class=\"headerlink\" title=\"场景实践\"></a>场景实践</h1><h2 id=\"Nginx作为静态资源web服务\"><a href=\"#Nginx作为静态资源web服务\" class=\"headerlink\" title=\"Nginx作为静态资源web服务\"></a>Nginx作为静态资源web服务</h2><h3 id=\"静态资源web服务相关配置\"><a href=\"#静态资源web服务相关配置\" class=\"headerlink\" title=\"静态资源web服务相关配置\"></a>静态资源web服务相关配置</h3><ul>\n<li>静态资源类型</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/4693d69b183208f24ab65ba1d33028b.slr3oozhg6o.webp\" width=\"80%\"/>\n\n<ul>\n<li>静态资源服务场景-CDN</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.ny2gyp55en4.webp\" width=\"80%\"/>\n\n<ul>\n<li>文件读取</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.qbmthl454z4.webp\" width=\"60%\"/>\n\n<ul>\n<li>tcp_nopush（多个传输包进行整合，一次发送出去。适用于大文件场景）</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.39961x4hd340.webp\" width=\"60%\"/>\n\n<ul>\n<li>tcp_nodelay（不等待，实时发送，适用于对传输实时性比较高的场景）</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3a6n93k83h20.webp\" width=\"60%\" />\n\n<ul>\n<li>压缩传输（减少带宽资源，传输文件大小。提高传输效率）</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">gzip</span> <span class=\"literal\">on</span> | <span class=\"literal\">off</span>;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span>, if in <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压缩级别、比率。好处：压缩比率大，传输文件小，效率高。坏处：压缩本身就要耗性能</span></span><br><span class=\"line\">Syntax:\t<span class=\"attribute\">gzip_comp_level</span> level;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gzip http 协议版本 主流 1.1</span></span><br><span class=\"line\">Syntax:\t<span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">0</span> | <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 预读gzip （先去目录下找同名的 gz文件 减少cpu压缩时间，压缩性能损耗）</span></span><br><span class=\"line\">Syntax:\t<span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span> | <span class=\"literal\">off</span> | always;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gzip_static</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gunzip 解决部分浏览器无法进行gzip压缩</span></span><br><span class=\"line\">Syntax:\t<span class=\"attribute\">gunzip</span> <span class=\"literal\">on</span> | <span class=\"literal\">off</span>;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gunzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(jpg|gif|png)$</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>  /opt/app/code/images;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(txt|xml)$</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>  /opt/app/code/doc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/download</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_static</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> <span class=\"number\">404</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"section\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h3><ul>\n<li>http协议定义的缓存机制（如 Expires；Cache-control）</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.1rsot6o5v5uo.webp\" width=\"80%\"/>\n\n<ul>\n<li>缓存校验过期机制（expires http1.0版本 ，Cache-Control http1.1版本）</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5zy4ev2morw.webp\" width=\"80%\"/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5f9qg6jggm0.webp\" width=\"80%\"/>\n\n<ul>\n<li>expires</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5lpqimpu2p80.webp\" width=\"80%\"/>\n\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><ul>\n<li>为什么浏览器禁止跨域访问</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6j59fpj9b140.webp\" width=\"80%\"/>\n\n<ul>\n<li>允许跨域</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">add_header</span> name value [always];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span>, if in <span class=\"section\">location</span></span><br><span class=\"line\"></span><br><span class=\"line\">Access-Control-Allow-Origin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(htm|html)$</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>  /opt/app/code;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"防盗链\"><a href=\"#防盗链\" class=\"headerlink\" title=\"防盗链\"></a>防盗链</h3><ul>\n<li>目的：防止资源被盗用</li>\n<li>防盗链设置思路：区别哪些请求是非正常的用户请求</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">valid_referers</span> <span class=\"literal\">none</span> | <span class=\"literal\">blocked</span> | server_names | string ...;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\tserver, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">valid_referers</span> <span class=\"literal\">none</span> <span class=\"literal\">blocked</span> <span class=\"number\">116.62.103.228</span> jeson.imoocc.com ~wei\\.png;</span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">403</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attribute\">root</span>  /opt/app/code/images;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx作为代理服务\"><a href=\"#Nginx作为代理服务\" class=\"headerlink\" title=\"Nginx作为代理服务\"></a>Nginx作为代理服务</h2><h3 id=\"代理分类\"><a href=\"#代理分类\" class=\"headerlink\" title=\"代理分类\"></a>代理分类</h3><ul>\n<li><p>按应用场景分为正向代理和反向代理</p>\n</li>\n<li><p>正向代理</p>\n</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.13yo9bbezcv4.webp\" width=\"50%\"/>\n\n<ul>\n<li>反向代理</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.sg1icdn13tc.webp\" width=\"50%\"/>\n\n<h3 id=\"Nginx可支持的代理协议\"><a href=\"#Nginx可支持的代理协议\" class=\"headerlink\" title=\"Nginx可支持的代理协议\"></a>Nginx可支持的代理协议</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.1vyne8343hvk.webp\" width=\"65%\"/>\n\n<ul>\n<li>Nginx作为反向代理支持的协议</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3l728c8m6520.webp\" width=\"65%\" />\n\n<ul>\n<li>反向代理模式与nginx代理模块</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.42l3gl0jaba0.webp\" width=\"60%\"/>\n\n<ul>\n<li>Nginx作为正向代理支持的协议</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4431yi9hnzk0.webp\" width=\"60%\"/>\n\n<h3 id=\"http-pass\"><a href=\"#http-pass\" class=\"headerlink\" title=\"http_pass\"></a>http_pass</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.41w6nf29vw60.webp\" width=\"65%\" />\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Nginx作为缓存服务（代理缓存）</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 缓存：请求集中在前端，减轻后端压力</span><br><span class=\"line\">- 缓存分类：客户端缓存、代理缓存、服务器缓存</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"attribute\">img</span> src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting<span class=\"variable\">@main</span>/blog-img-bed/image.2i34i938qx20.webp&quot;</span> width=<span class=\"string\">&quot;65%&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">- **proxy_cache_path**</span><br><span class=\"line\"></span><br><span class=\"line\">```nginx</span><br><span class=\"line\">Syntax:\tproxy_cache_path path [levels=levels] [use_temp_path=<span class=\"literal\">on</span>|<span class=\"literal\">off</span>] keys_zone=name:size [inactive=time] [max_size=size] [min_free=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=<span class=\"literal\">on</span>|<span class=\"literal\">off</span>] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>proxy_cache</strong></li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">proxy_cache</span> zone | <span class=\"literal\">off</span>;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">proxy_cache</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>proxy_cache_valid</strong></li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">proxy_cache_valid</span> [code ...] time;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>proxy_cache_key</strong></li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">proxy_cache_key</span> string;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">proxy_cache_key</span> <span class=\"variable\">$scheme</span><span class=\"variable\">$proxy_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"Nginx作为负载均衡服务\"><a href=\"#Nginx作为负载均衡服务\" class=\"headerlink\" title=\"Nginx作为负载均衡服务\"></a>Nginx作为负载均衡服务</h2><h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><ul>\n<li>sendfile需要进一步了解</li>\n<li>正向代理这块暂时没办法测试</li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nginx起步\"><a href=\"#Nginx起步\" class=\"headerlink\" title=\"Nginx起步\"></a>Nginx起步</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>Nginx是一个开源且高性能、可靠的http中间件、代理服务<ul>\n<li>高效：支持海量的并发请求</li>\n<li>可靠：Nginx的服务是可靠运行的</li>\n<li>开源</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h2 id=\"特点（优势）\"><a href=\"#特点（优势）\" class=\"headerlink\" title=\"特点（优势）\"></a>特点（优势）</h2><ul>\n<li>IO多路复用epoll</li>\n<li>轻量级：功能模块少、代码模块化</li>\n<li>cpu亲和</li>\n<li>sendfile</li>\n</ul>\n<br/>\n\n<h2 id=\"下载与安装\"><a href=\"#下载与安装\" class=\"headerlink\" title=\"下载与安装\"></a>下载与安装</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>centos7</li>\n<li>四项确认<ul>\n<li>确认系统网络（可以连接到公网）：    <code>ping www.baidu.com</code></li>\n<li>确认yum源可用： <code>yum list|grep gcc</code></li>\n<li>确认关闭iptables规则 （规则会对验证HTTP服务造成影响）</li>\n<li>确认停用selinux</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看是否有iptables规则</span></span><br><span class=\"line\">iptables -L</span><br><span class=\"line\">iptables -t nat -L</span><br><span class=\"line\"><span class=\"comment\"># 关闭规则</span></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables -t nat -L</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看SELinux状态，如果SELinux status参数为enabled即为开启状态</span></span><br><span class=\"line\">getenforce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时关闭（不用重启机器）</span></span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置SELinux 成为permissive模式</span></span><br><span class=\"line\"><span class=\"comment\">#setenforce 1 设置SELinux 成为enforcing模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件需要重启机器</span></span><br><span class=\"line\"><span class=\"comment\"># 修改/etc/selinux/config 文件</span></span><br><span class=\"line\"><span class=\"comment\"># 将SELINUX=enforcing改为SELINUX=disabled</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>依赖工具包安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一次初始化目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd /opt目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt &amp;&amp; <span class=\"built_in\">mkdir</span> app download logs work backup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 软件、应用、代码 \t app\t\t</span></span><br><span class=\"line\"><span class=\"comment\"># 备份文件 \t\t\tbackup\t\t</span></span><br><span class=\"line\"><span class=\"comment\"># 下载内容\t\t\tdownload\t</span></span><br><span class=\"line\"><span class=\"comment\"># 自定义日志\t\t   logs\t\t</span></span><br><span class=\"line\"><span class=\"comment\"># shell脚本\t\t work\t\t</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h3><ul>\n<li>使用yum源方式安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 基于yum源（这种方式不需要源码一个个编译，加入package参数。这种方式效率高）</span><br><span class=\"line\">cd /etc/yum.repos.d &amp;&amp; touch nginx.repo &amp;&amp; vim /etc/yum.repos.d/nginx.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加如下内容 $releasever 换成centos版本</span><br><span class=\"line\">[nginx-stable]</span><br><span class=\"line\">name=nginx stable repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yum list | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\">yum install nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看版本</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看编译参数</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Nginx启停、重载与检查\"><a href=\"#Nginx启停、重载与检查\" class=\"headerlink\" title=\"Nginx启停、重载与检查\"></a>Nginx启停、重载与检查</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx.service</span><br><span class=\"line\">systemctl stop nginx.service</span><br><span class=\"line\">systemctl restart nginx.service</span><br><span class=\"line\"></span><br><span class=\"line\"># 重载服务</span><br><span class=\"line\">nginx -s reload -c /etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># -t 检查配置文件的正确与否</span><br><span class=\"line\"># -c 路径检查</span><br><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br><span class=\"line\">nginx -tc /etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Nginx目录详解\"><a href=\"#Nginx目录详解\" class=\"headerlink\" title=\"Nginx目录详解\"></a>Nginx目录详解</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1656978bb93c905fb3c43afa17d66c7.1ucnkaxhiihs.webp\" width=\"75%\"/>\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/4e657e9c7d08ca72f6a3fcf6b075202.6t6iyec78d00.webp\" width=\"75%\"/>\n\n<br/>\n\n<h2 id=\"Nginx安装编译参数\"><a href=\"#Nginx安装编译参数\" class=\"headerlink\" title=\"Nginx安装编译参数\"></a>Nginx安装编译参数</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.64mpovli4l80.webp\" width=\"75%\" />\n\n\n\n<h1 id=\"Nginx基础\"><a href=\"#Nginx基础\" class=\"headerlink\" title=\"Nginx基础\"></a>Nginx基础</h1><h2 id=\"Nginx默认配置语法\"><a href=\"#Nginx默认配置语法\" class=\"headerlink\" title=\"Nginx默认配置语法\"></a>Nginx默认配置语法</h2><h3 id=\"nginx-conf（分三大块）\"><a href=\"#nginx-conf（分三大块）\" class=\"headerlink\" title=\"nginx.conf（分三大块）\"></a>nginx.conf（分三大块）</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx;\t<span class=\"comment\"># 设置nginx服务的系统使用用户</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;\t<span class=\"comment\"># 工作进程数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/<span class=\"literal\">error</span>.log <span class=\"literal\">warn</span>;\t<span class=\"comment\"># nginx的错误日志</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid;\t<span class=\"comment\"># nginx服务启动时候pid</span></span><br><span class=\"line\"><span class=\"comment\"># （1）以上是全局、服务模块配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;\t<span class=\"comment\"># 每个进程允许最大连接数</span></span><br><span class=\"line\">    <span class=\"attribute\">use</span>  <span class=\"number\">1</span>;\t<span class=\"comment\">#\t工作进程数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># （2）以上是事件模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\"># 包含该文件</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/conf.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># （3）以上是http模块</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"default-conf\"><a href=\"#default-conf\" class=\"headerlink\" title=\"default.conf\"></a>default.conf</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\">    <span class=\"comment\">#access_log     main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">        <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"section\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">    <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class=\"line\">    <span class=\"comment\"># concurs with nginx&#x27;s one</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Nginx-虚拟主机及实现方式\"><a href=\"#Nginx-虚拟主机及实现方式\" class=\"headerlink\" title=\"Nginx 虚拟主机及实现方式\"></a>Nginx 虚拟主机及实现方式</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.29gkicljqdxc.webp\" width=\"65%\" />\n\n<br/>\n\n<h3 id=\"虚拟机主机配置方式（三种）\"><a href=\"#虚拟机主机配置方式（三种）\" class=\"headerlink\" title=\"虚拟机主机配置方式（三种）\"></a>虚拟机主机配置方式（三种）</h3><h4 id=\"一：基于主机多IP方式（两种）\"><a href=\"#一：基于主机多IP方式（两种）\" class=\"headerlink\" title=\"一：基于主机多IP方式（两种）\"></a>一：基于主机多IP方式（两种）</h4><ol>\n<li>多网卡多IP</li>\n<li>单网卡多IP</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里我们使用单网卡多ip方式实践，适用于 centos虚拟机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时性的，重启网络后失效</span></span><br><span class=\"line\">ip a add 192.168.163.202/24 dev ens32</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置成功后如下</span></span><br><span class=\"line\">[root@localhost backup]<span class=\"comment\"># ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens32: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 00:0c:29:f9:3c:04 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.163.201/24 brd 192.168.163.255 scope global noprefixroute ens32</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 192.168.163.202/24 scope global secondary ens32</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::851d:65b2:ca19:571a/64 scope <span class=\"built_in\">link</span> noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">192.168.163.201:80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_ip_201/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">192.168.163.202:80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_ip_202/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果</li>\n</ul>\n<br/>\n\n<h4 id=\"二：基于端口配置方式\"><a href=\"#二：基于端口配置方式\" class=\"headerlink\" title=\"二：基于端口配置方式\"></a>二：基于端口配置方式</h4><ul>\n<li>在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">81</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span>   /opt/app/code_port_81/;</span><br><span class=\"line\">      <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">82</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_port_82/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果</li>\n</ul>\n<br/>\n\n<h4 id=\"三：基于多个host名称方式（多域名方式）\"><a href=\"#三：基于多个host名称方式（多域名方式）\" class=\"headerlink\" title=\"三：基于多个host名称方式（多域名方式）\"></a>三：基于多个host名称方式（多域名方式）</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里，我们在访问机上配置dns，来实现多域名方式</span></span><br><span class=\"line\"><span class=\"comment\"># 修改访问机器的hosts文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">192.168.163.201 a.sonzonzy.<span class=\"attribute\">com</span></span><br><span class=\"line\"><span class=\"number\">192.168.163.201</span> b.sonzonzy.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在nginx 的 conf.d 目录下，新建两个配置文件,并做如下配置。另外还需要分别准备对应的访问目录及文件</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  a.sonzonzy.com;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_host_a/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  b.sonzonzy.com;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">       <span class=\"attribute\">root</span>   /opt/app/code_host_b/;</span><br><span class=\"line\">       <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置好后，先检查nginx配置文件的正确与否，然后重载nginx即可访问查看效果</li>\n</ul>\n<br/>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"Nginx日志\"><a href=\"#Nginx日志\" class=\"headerlink\" title=\"Nginx日志\"></a>Nginx日志</h2><ul>\n<li><p>error.log</p>\n<ul>\n<li>处理HTTP请求的错误状态</li>\n<li>以及Nginx错误运行的状态</li>\n</ul>\n</li>\n<li><p>access_log</p>\n<ul>\n<li>记录每一次请求的访问状态</li>\n<li>分析请求</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h3 id=\"log-formate\"><a href=\"#log-formate\" class=\"headerlink\" title=\"log_formate\"></a>log_formate</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tlog_format name [escape=default|json|none] string ...;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">log_format combined &quot;...&quot;;</span><br><span class=\"line\">Context:\thttp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx-变量\"><a href=\"#Nginx-变量\" class=\"headerlink\" title=\"Nginx 变量\"></a>Nginx 变量</h2><ul>\n<li>HTTP 请求变量</li>\n<li>内置变量 — Nginx 内置的</li>\n<li>自定义变量 — 自己定义</li>\n</ul>\n<h2 id=\"Nginx模块\"><a href=\"#Nginx模块\" class=\"headerlink\" title=\"Nginx模块\"></a>Nginx模块</h2><ul>\n<li>Nginx官方模块</li>\n<li>第三方模块</li>\n</ul>\n<h3 id=\"ngx-http-stub-status-module\"><a href=\"#ngx-http-stub-status-module\" class=\"headerlink\" title=\"ngx_http_stub_status_module\"></a>ngx_http_stub_status_module</h3><ul>\n<li>查看nginx的连接状态等基本信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tstub_status;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\tserver, location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置示例</span></span><br><span class=\"line\">location = /basic_status &#123;</span><br><span class=\"line\">    stub_status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The current number of active client connections including Waiting connections.</span></span><br><span class=\"line\"><span class=\"comment\"># nginx当前活跃的连接数</span></span><br><span class=\"line\">Active connections: 2 </span><br><span class=\"line\"><span class=\"comment\"># nginx处理的握手次数 连接数 总的请求数</span></span><br><span class=\"line\">server accepts handled requests</span><br><span class=\"line\"> 3 3 3 </span><br><span class=\"line\"><span class=\"comment\"># 当前正在读的数量 正在写的数量 等待总数量（开启长连接时） </span></span><br><span class=\"line\">Reading: 0 Writing: 1 Waiting: 1 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ngx-http-random-index-module\"><a href=\"#ngx-http-random-index-module\" class=\"headerlink\" title=\"ngx_http_random_index_module\"></a>ngx_http_random_index_module</h3><ul>\n<li><p>随机生成首页</p>\n</li>\n<li><p>使用场景：给用户不同的首页展示感觉</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\trandom_index on | off;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">random_index off;</span><br><span class=\"line\">Context:\tlocation</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /random &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 不会展示隐藏文件</span></span><br><span class=\"line\">       root /opt/app/code_random_html;</span><br><span class=\"line\">       random_index on;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ngx-http-sub-module\"><a href=\"#ngx-http-sub-module\" class=\"headerlink\" title=\"ngx_http_sub_module\"></a>ngx_http_sub_module</h3><ul>\n<li>指定字符串替换</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tsub_filter string replacement;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tsub_filter_last_modified on | off;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">sub_filter_last_modified off;</span><br><span class=\"line\">Context:\thttp, server, location</span><br><span class=\"line\">This directive appeared <span class=\"keyword\">in</span> version 1.5.1.</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tsub_filter_once on | off;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">sub_filter_once on;</span><br><span class=\"line\">Context:\thttp, server, location</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tsub_filter_types mime-type ...;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">sub_filter_types text/html;</span><br><span class=\"line\">Context:\thttp, server, location</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ngx-http-limit-conn-module-amp-ngx-http-limit-req-module\"><a href=\"#ngx-http-limit-conn-module-amp-ngx-http-limit-req-module\" class=\"headerlink\" title=\"ngx_http_limit_conn_module &amp; ngx_http_limit_req_module\"></a>ngx_http_limit_conn_module &amp; ngx_http_limit_req_module</h3><h4 id=\"连接频率限制\"><a href=\"#连接频率限制\" class=\"headerlink\" title=\"连接频率限制\"></a>连接频率限制</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tlimit_conn_zone key zone=name:size;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tlimit_conn zone number;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"请求频率限制\"><a href=\"#请求频率限制\" class=\"headerlink\" title=\"请求频率限制\"></a>请求频率限制</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tlimit_req_zone key zone=name:size rate=rate [<span class=\"built_in\">sync</span>];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tlimit_req zone=name [burst=number] [nodelay | delay=number];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_conn_zone <span class=\"variable\">$binary_remote_addr</span> zone=conn_zone:1m;</span><br><span class=\"line\"><span class=\"comment\"># binary_remote_addr 和 remote_addr，都表示客户端地址，binary_remote_addr更节省空间。rate=1r/ 速率 每秒一个。对同一个ip访问，进行速率限制，每秒一个</span></span><br><span class=\"line\">limit_req_zone <span class=\"variable\">$binary_remote_addr</span> zone=req_zone:1m rate=1r/s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">\troot /opt/app/code_conn_req</span><br><span class=\"line\">\t <span class=\"comment\"># limit_conn conn_zone 1;</span></span><br><span class=\"line\">\t <span class=\"comment\"># burst=3 超过请求频率，则 遗留3个到下一秒执行，达到访问限速，延迟响应这样一个效果。nodelay 表示直接返回503</span></span><br><span class=\"line\">     limit_req zone=req_zone burst=3 nodelay;</span><br><span class=\"line\">     <span class=\"comment\"># limit_req req_zone burst=3;</span></span><br><span class=\"line\">     <span class=\"comment\">#  limit_req zone=req_zone;</span></span><br><span class=\"line\">\tindex index.html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用工具 <code>ab</code>进行测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -n 请求数 -c 最大并发数</span></span><br><span class=\"line\">ab -n 20 -c 20 http://192.168.163.201:80/index.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ngx-http-access-module-（基于IP的访问控制）\"><a href=\"#ngx-http-access-module-（基于IP的访问控制）\" class=\"headerlink\" title=\"ngx_http_access_module （基于IP的访问控制）\"></a>ngx_http_access_module （基于IP的访问控制）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tallow address | CIDR | unix: | all;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location, limit_except</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tdeny address | CIDR | unix: | all;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location, limit_except</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/access.html &#123;</span><br><span class=\"line\">       root /opt/app/code_access;</span><br><span class=\"line\">       deny 192.168.163.128;</span><br><span class=\"line\">       deny  192.168.163.201;</span><br><span class=\"line\">       allow 192.168.163.1;</span><br><span class=\"line\">       index index.html;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h4><ul>\n<li>nginx<code>ngx_http_access_module</code> 是基于 <code>$remote_addr</code> 来识客户端ip的</li>\n</ul>\n<img src =\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.46z15z24rj00.webp\" width=\"65%\" />\n\n<h4 id=\"http-x-forwarded-for\"><a href=\"#http-x-forwarded-for\" class=\"headerlink\" title=\"http_x_forwarded_for\"></a>http_x_forwarded_for</h4><ul>\n<li>http head 中常用的变量</li>\n</ul>\n<img src =\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6vvihm5g7wo0.webp\" width=\"65%\" />\n\n<h4 id=\"http-access-module-局限性解决办法\"><a href=\"#http-access-module-局限性解决办法\" class=\"headerlink\" title=\"http _ access _ module 局限性解决办法\"></a>http _ access _ module 局限性解决办法</h4><ol>\n<li>采用别的http头信息控制访问，如：<code>http_x_forwarded_for</code> （但这个也有要求，cdn厂商、代理方不一定按照要求做。另外还存在被篡改的可能性）</li>\n<li>结合geo模块</li>\n<li>通过http自定义变量传递（在http头规定一个变量，联系所有上一级设备，手动把 <code>$remote_addr</code> 的信息携带到我们规定的变量里面去。这样既可以避免像 <code>http_x_forwarded_for</code> 被改写，也可以准确读到客户端的ip地址）</li>\n</ol>\n<h3 id=\"ngx-http-auth-basic-module-（基于用户的信任登录）\"><a href=\"#ngx-http-auth-basic-module-（基于用户的信任登录）\" class=\"headerlink\" title=\"ngx_http_auth_basic_module （基于用户的信任登录）\"></a>ngx_http_auth_basic_module （基于用户的信任登录）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tauth_basic string | off;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">auth_basic off;</span><br><span class=\"line\">Context:\thttp, server, location, limit_except</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax:\tauth_basic_user_file file;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location, limit_except</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># htpasswd -c ./auth_conf sonzonzy</span></span><br><span class=\"line\">New password:</span><br><span class=\"line\">Re-<span class=\"built_in\">type</span> new password:</span><br><span class=\"line\">Adding password <span class=\"keyword\">for</span> user sonzonzy</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># cat auth_conf</span></span><br><span class=\"line\">sonzonzy:$apr1$VkobqTlq<span class=\"variable\">$kdqJWa831J8phMplUdYt90</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/access.html &#123;</span><br><span class=\"line\">    root /opt/app/code_access;</span><br><span class=\"line\">    auth_basic           <span class=\"string\">&quot;closed site&quot;</span>;</span><br><span class=\"line\">    auth_basic_user_file /etc/nginx/auth_conf;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"局限性-1\"><a href=\"#局限性-1\" class=\"headerlink\" title=\"局限性\"></a>局限性</h4><ul>\n<li>用户信息依赖文件方式</li>\n<li>操作管理机械，效率底下</li>\n</ul>\n<h4 id=\"解决局限性\"><a href=\"#解决局限性\" class=\"headerlink\" title=\"解决局限性\"></a>解决局限性</h4><ul>\n<li>nginx 结合 lua 实现高效验证</li>\n<li>nginx和ldap打通，利用 nginx-auth-ldap模块</li>\n</ul>\n<h1 id=\"场景实践\"><a href=\"#场景实践\" class=\"headerlink\" title=\"场景实践\"></a>场景实践</h1><h2 id=\"Nginx作为静态资源web服务\"><a href=\"#Nginx作为静态资源web服务\" class=\"headerlink\" title=\"Nginx作为静态资源web服务\"></a>Nginx作为静态资源web服务</h2><h3 id=\"静态资源web服务相关配置\"><a href=\"#静态资源web服务相关配置\" class=\"headerlink\" title=\"静态资源web服务相关配置\"></a>静态资源web服务相关配置</h3><ul>\n<li>静态资源类型</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/4693d69b183208f24ab65ba1d33028b.slr3oozhg6o.webp\" width=\"80%\"/>\n\n<ul>\n<li>静态资源服务场景-CDN</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.ny2gyp55en4.webp\" width=\"80%\"/>\n\n<ul>\n<li>文件读取</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.qbmthl454z4.webp\" width=\"60%\"/>\n\n<ul>\n<li>tcp_nopush（多个传输包进行整合，一次发送出去。适用于大文件场景）</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.39961x4hd340.webp\" width=\"60%\"/>\n\n<ul>\n<li>tcp_nodelay（不等待，实时发送，适用于对传输实时性比较高的场景）</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3a6n93k83h20.webp\" width=\"60%\" />\n\n<ul>\n<li>压缩传输（减少带宽资源，传输文件大小。提高传输效率）</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">gzip</span> <span class=\"literal\">on</span> | <span class=\"literal\">off</span>;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span>, if in <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压缩级别、比率。好处：压缩比率大，传输文件小，效率高。坏处：压缩本身就要耗性能</span></span><br><span class=\"line\">Syntax:\t<span class=\"attribute\">gzip_comp_level</span> level;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gzip http 协议版本 主流 1.1</span></span><br><span class=\"line\">Syntax:\t<span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">0</span> | <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 预读gzip （先去目录下找同名的 gz文件 减少cpu压缩时间，压缩性能损耗）</span></span><br><span class=\"line\">Syntax:\t<span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span> | <span class=\"literal\">off</span> | always;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gzip_static</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gunzip 解决部分浏览器无法进行gzip压缩</span></span><br><span class=\"line\">Syntax:\t<span class=\"attribute\">gunzip</span> <span class=\"literal\">on</span> | <span class=\"literal\">off</span>;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">gunzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(jpg|gif|png)$</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>  /opt/app/code/images;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(txt|xml)$</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">gzip</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>  /opt/app/code/doc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/download</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">gzip_static</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> <span class=\"number\">404</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"section\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h3><ul>\n<li>http协议定义的缓存机制（如 Expires；Cache-control）</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.1rsot6o5v5uo.webp\" width=\"80%\"/>\n\n<ul>\n<li>缓存校验过期机制（expires http1.0版本 ，Cache-Control http1.1版本）</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5zy4ev2morw.webp\" width=\"80%\"/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5f9qg6jggm0.webp\" width=\"80%\"/>\n\n<ul>\n<li>expires</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5lpqimpu2p80.webp\" width=\"80%\"/>\n\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><ul>\n<li>为什么浏览器禁止跨域访问</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6j59fpj9b140.webp\" width=\"80%\"/>\n\n<ul>\n<li>允许跨域</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">add_header</span> name value [always];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span>, if in <span class=\"section\">location</span></span><br><span class=\"line\"></span><br><span class=\"line\">Access-Control-Allow-Origin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> <span class=\"regexp\">~ .*\\.(htm|html)$</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>  /opt/app/code;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"防盗链\"><a href=\"#防盗链\" class=\"headerlink\" title=\"防盗链\"></a>防盗链</h3><ul>\n<li>目的：防止资源被盗用</li>\n<li>防盗链设置思路：区别哪些请求是非正常的用户请求</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">valid_referers</span> <span class=\"literal\">none</span> | <span class=\"literal\">blocked</span> | server_names | string ...;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\tserver, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">valid_referers</span> <span class=\"literal\">none</span> <span class=\"literal\">blocked</span> <span class=\"number\">116.62.103.228</span> jeson.imoocc.com ~wei\\.png;</span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">403</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attribute\">root</span>  /opt/app/code/images;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx作为代理服务\"><a href=\"#Nginx作为代理服务\" class=\"headerlink\" title=\"Nginx作为代理服务\"></a>Nginx作为代理服务</h2><h3 id=\"代理分类\"><a href=\"#代理分类\" class=\"headerlink\" title=\"代理分类\"></a>代理分类</h3><ul>\n<li><p>按应用场景分为正向代理和反向代理</p>\n</li>\n<li><p>正向代理</p>\n</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.13yo9bbezcv4.webp\" width=\"50%\"/>\n\n<ul>\n<li>反向代理</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.sg1icdn13tc.webp\" width=\"50%\"/>\n\n<h3 id=\"Nginx可支持的代理协议\"><a href=\"#Nginx可支持的代理协议\" class=\"headerlink\" title=\"Nginx可支持的代理协议\"></a>Nginx可支持的代理协议</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.1vyne8343hvk.webp\" width=\"65%\"/>\n\n<ul>\n<li>Nginx作为反向代理支持的协议</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3l728c8m6520.webp\" width=\"65%\" />\n\n<ul>\n<li>反向代理模式与nginx代理模块</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.42l3gl0jaba0.webp\" width=\"60%\"/>\n\n<ul>\n<li>Nginx作为正向代理支持的协议</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4431yi9hnzk0.webp\" width=\"60%\"/>\n\n<h3 id=\"http-pass\"><a href=\"#http-pass\" class=\"headerlink\" title=\"http_pass\"></a>http_pass</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.41w6nf29vw60.webp\" width=\"65%\" />\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Nginx作为缓存服务（代理缓存）</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 缓存：请求集中在前端，减轻后端压力</span><br><span class=\"line\">- 缓存分类：客户端缓存、代理缓存、服务器缓存</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"attribute\">img</span> src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting<span class=\"variable\">@main</span>/blog-img-bed/image.2i34i938qx20.webp&quot;</span> width=<span class=\"string\">&quot;65%&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">- **proxy_cache_path**</span><br><span class=\"line\"></span><br><span class=\"line\">```nginx</span><br><span class=\"line\">Syntax:\tproxy_cache_path path [levels=levels] [use_temp_path=<span class=\"literal\">on</span>|<span class=\"literal\">off</span>] keys_zone=name:size [inactive=time] [max_size=size] [min_free=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=<span class=\"literal\">on</span>|<span class=\"literal\">off</span>] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>proxy_cache</strong></li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">proxy_cache</span> zone | <span class=\"literal\">off</span>;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">proxy_cache</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>proxy_cache_valid</strong></li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">proxy_cache_valid</span> [code ...] time;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>proxy_cache_key</strong></li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\t<span class=\"attribute\">proxy_cache_key</span> string;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\"><span class=\"attribute\">proxy_cache_key</span> <span class=\"variable\">$scheme</span><span class=\"variable\">$proxy_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">Context:\thttp, server, <span class=\"section\">location</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"Nginx作为负载均衡服务\"><a href=\"#Nginx作为负载均衡服务\" class=\"headerlink\" title=\"Nginx作为负载均衡服务\"></a>Nginx作为负载均衡服务</h2><h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><ul>\n<li>sendfile需要进一步了解</li>\n<li>正向代理这块暂时没办法测试</li>\n<li></li>\n</ul>\n"},{"title":"姜承尧 MySQL DBA实战 study notes","author":"sonzonzy","date":"2022-05-17T17:33:04.000Z","updated":"2022-05-17T17:33:04.000Z","_content":"\n\n\n\n\n# 第01天_Mysql简介与前景\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 第02天_MySQL安装与基本命令\n\n## MySQL安装步骤\n\n- 卸载操作系统自带的mariadb，下载mysql安装的的依赖\n- 创建mysql用户组和用户\n- 配置`/etc/my.cnf`\n- 官网下载mysql数据库\n- 创建目录，设置权限。初始化mysql元数据库\n- 将mysql添加到启动项\n\n<br>\n\n<br>\n\n## MySQL 5.6 安装过程\n\n- 官网MySQL 5.6安装参考手册：[MySQL 5.6 Reference Manual-Installing MySQL on Unix/Linux Using Generic Binaries](https://dev.mysql.com/doc/refman/5.6/en/binary-installation.html)\n\n\n\n- （1）卸载操作系统自带的 mariadb/mysql 数据库\n\n```shell\n[root@localhost ~]# rpm -qa | grep mariadb | xargs yum remove -y\n```\n\n- （2）创建数据目录\n\n```shell\n[root@localhost ~]# mkdir -p /install /backup /data\n```\n\n- （3）创建mysql用户和用户组\n\n```shell\n[root@localhost ~]# useradd mysql\n```\n\n- （4）下载安装过程中可能需要的依赖\n\n```shell\n[root@localhost ~]# yum install -y libaio autoconf\n```\n\n- （5）新建/编辑 `/etc/my.cnf` 文件（需要先配置好这个文件，否则，安装后启动报错）\n\n`vim /etc/my.cnf`\n\n```shell\n[client]\n# 所有客户端登录进去后可以配置的参数\n\n[mysql]\n# mysql这个命名登录进去后配置的参数\n\n\n[mysqld]\n# mysql服务器启动时候的参数\nport = 3306\nuser = mysql\nbasedir = /usr/local/mysql\ndatadir = /data\n```\n\n- （6）下载mysql5.6的安装包，并解压到 `/usr/local/` 目录下，创建软连接（便于管理mysql）\n\n```shell\n[root@localhost install]# wget wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz\n\n# 校验下载的数据库压缩包MD5值，和官网进行比较，辨别是否被篡改过\n[root@localhost install]# md5sum mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz\n\n[root@localhost install]# tar -zxvf mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz -C /usr/local/\n\n[root@localhost local]# cd /usr/local/\n[root@localhost local]# ln -s mysql-5.6.51-linux-glibc2.12-x86_64/ mysql\n```\n\n- （7）设置目录权限\n\n```shell\n[root@localhost local]# chown -R mysql.mysql /data/\n[root@localhost local]# chmod 750 /data/\n```\n\n- （8）初始化mysql\n\n```shell\n[root@localhost local]# cd /usr/local/mysql\n\n# mysql初始化数据库的语句，5.6 和 5.7 是不一样的，需要注意\n[root@localhost mysql]# scripts/mysql_install_db --user=mysql\n\n[root@localhost mysql]# bin/mysqld_safe --user=mysql &\n# 拷贝启动脚本（服务）到指定位置，便于管理、使用\n[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysql.server\n```\n\n<br>\n\n<br>\n\n## MySQL 5.7 安装过程\n\n- 官网MySQL 5.7安装参考手册：[MySQL 5.7 Reference Manual-Installing MySQL on Unix/Linux Using Generic Binaries](https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html)\n\n\n\n- （1）卸载操作系统自带的 mariadb/mysql 数据库\n\n```shell\n[root@localhost ~]# rpm -qa | grep mariadb | xargs yum remove -y\n```\n\n- （2）创建数据目录\n\n```shell\n[root@localhost ~]# mkdir -p /install /backup /data\n```\n\n- （3）创建mysql用户和用户组\n\n```shell\n[root@localhost ~]# useradd mysql\n```\n\n- （4）下载安装过程中可能需要的依赖\n\n```shell\n[root@localhost ~]# yum install -y libaio autoconf\n```\n\n- （5）新建/编辑 `/etc/my.cnf` 文件（需要先配置好这个文件，否则，安装后启动报错）\n\n`vim /etc/my.cnf`\n\n```shell\n[client]\n# 所有客户端登录进去后可以配置的参数\n\n[mysql]\n# mysql这个命令登录进去后配置的参数\n\n\n[mysqld]\n# mysql服务器启动时候的参数\nport = 3306\nuser = mysql\nbasedir = /usr/local/mysql\ndatadir = /data\n```\n\n- （6）上传mysql5.7的安装包，并解压到 `/usr/local/` 目录下，创建软连接（便于管理mysql）\n\n```shell\n[root@localhost install]# tar -zxvf mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz -C /usr/local/\n\n# 校验下载的数据库压缩包MD5值，和官网进行比较，辨别是否被篡改过\n[root@localhost install]# md5sum mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz\n\n[root@localhost local]# cd /usr/local/\n[root@localhost local]# ln -s mysql-5.7.39-linux-glibc2.12-x86_64/ mysql\n```\n\n- （7）设置目录权限\n\n```shell\n[root@localhost local]# chown -R mysql.mysql /data/\n[root@localhost local]# chmod 750 /data/\n```\n\n- （8）初始化mysql\n\n```shell\n[root@localhost local]# cd /usr/local/mysql\n\n# mysql初始化数据库的语句，5.6 和 5.7 是不一样的，需要注意\n[root@localhost mysql]# bin/mysqld --initialize --user=mysql\n\n[root@localhost mysql]# bin/mysqld_safe --user=mysql &\n# 拷贝启动脚本（服务）到指定位置，便于管理、使用\n[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysql.server\n```\n\n<br>\n\n<br>\n\n## MySQL安装成功后进行基础配置\n\n- （1）设置MySQL开机自启动\n\n```bash\n# 把 mysql 的服务加入开机自启动项目\n[root@localhost ~]# chkconfig --add mysql.server\n[root@localhost ~]# chkconfig --list\n```\n\n- （2）配置MySQL环境变量\n\n`vim /etc/profile`\n\n```bash\nexport PATH=/usr/local/mysql/bin:$PATH\n```\n\n`source /etc/profile`\n\n- （3）添加日志文件配置\n\n`vim /etc/my.cnf`\n\n```mysql\n[mysqld]\nlog_error = error.log\n```\n\n- （4）修改初始密码\n\n> 5.7\n\n```mysql\nmysql> set password='root';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n> 5.6\n\n```mysql\nmysql> set password=password(\"root\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n<br>\n\n<br>\n\n## MySQL的其它配置\n\n### 免密登录\n\n`vim /etc/my.cnf`\n\n```mysql\n[client]\n#  mysql这个命令每次启动的时候，会去读配置文件，读到[client]标签，会自动把用户名和密码添加到后面。所以输入 mysql 后回车便可直接登录\nuser = root\npassword = root\n```\n\n<br>\n\n### 定制MySQL终端提示符\n\n`vim /etc/my.cnf`\n\n```mysql\n[mysql]\nprompt = (\\u@\\h) [\\d]>\\_\n```\n\n<br>\n\n### 允许MySQL远程登录\n\n```shell\n(root@localhost) [(none)]> grant all on *.* to root@'%' identified by 'root' with grant option;\nQuery OK, 0 rows affected (0.01 sec)\n\n(root@localhost) [(none)]> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n<br>\n\n<br>\n\n## MySQL 5.6与5.7 安装上的差异\n\n- （1）5.6 安装完没有密码，而5.7初始化完成会有密码\n\n  > 如果希望MySQL5.7安装初始化的时候表现跟MySQL5.6一样-没有密码，则可以在初始化数据库的语句中\t`bin/mysqld --initialize --user=mysql`，把\t`--initialize`\t替换成\t`--initialize-insecure`。（可以通过\t `mysqld --verbose --help | less\t`查看到两个参数的说明）\n\n\n\n\n- （2）初始化命令不一样\n  - 5.6：`scripts/mysql_install_db --user=mysql`\n  - 5.7：`bin/mysqld --initialize --user=mysql`\n\n\n\n\n- （3）设置密码的方式不一样\n  - 5.6：`set password = password(\"mysql\");`\n  - 5.7：`set password='mysql';`\n\n<br>\n\n<br>\n\n## 查看MySQL 安装后的默认参数\n\n```mysql\nmysqld --verbose --help\n```\n\n<br>\n\n<br>\n\n## 作业\n\n> 熟练安装 mysql 5.6、5.7\n>\n> mysql 5.6、5.7 自动安装的脚本。\n\n<br>\n\n<br>\n\n## MySQL 5.6 升级到 5.7\n\n\n\n\n\n\n\n# 第03天_MySQL客户端连接与权限管理\n\n##  mysql最优配置文件参考\n\n[ mysql_best_configuration](https://github.com/jdaaaaaavid/mysql_best_configuration/blob/master/my.cnf)\n\n<br>\n\n<br>\n\n## MySQL可以有多个配置文件\n\n```mysql\n# mysql 在启动的时候会依次去读取下面的文件\n[root@localhost ~]# mysql --verbose --help | grep my.cnf\n                      order of preference, my.cnf, $MYSQL_TCP_PORT,\n/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf\n```\n\n- 遵循参数替换原则。后面的参数会替换前面的参数\n\n<br>\n\n<br>\n\n## MySQL的配置文件参数\n\n```mysql\n[client]\n# 所有客户端登录进去后可以配置的参数\n\n[mysql]\n# mysql这个命令登录进去后配置的参数\n\n[mysqld]\n# mysql服务器启动时候的参数\nport = 3306\nuser = mysql\ndatadir = /data\nlog_error = error.log\n```\n\n- 查看mysql的参数，当前配置的值\n\n```mysql\n# 默认省略了session\nshow variables;\n\nshow session variables;\n```\n\n```mysql\nshow variables like 'log_error';\n\nshow global variables like '%log%';\n```\n\n```mysql\n# 对已经创建的连接不生效，只对新创建的连接生效\nset global long_query_time=5;\n```\n\n\n\n|                             命令                             |             说明             |\n| :----------------------------------------------------------: | :--------------------------: |\n| SHOW [GLOBAL \\|SESSION] VARIABLES [LIKE  'pattern' \\|WHERE expr] | 查看变量，可根据like进行过滤 |\n|            SET [GLOBAL\\|SESSION] VARIABLES = xxx             |  修改global或session的参数   |\n\n\n\n## MySQL的参数分类\n\n- 从作用域上可分为global和session\n  - seesion：只对当前这一个连接有效\n  - global：全局有效\n- 从类型上又可分为可修改和只读参数\n  - 用户可在线修改非只读参数\n  - 只读参数只能通过配置文件修改并重启\n  - 所有参数的修改都不持久化\n\n### 当前会话下，查看其它连接的 variables\n\n- mysql5.7开始，多了一个数据库\t`performance_schema`\n\n```mysql\nuse performance_schema;\n\n\nshow tables like '%variables%';\n\n\n(root@localhost) [performance_schema]> select * from variables_by_thread where variable_name = 'long_query_time';\n+-----------+-----------------+----------------+\n| THREAD_ID | VARIABLE_NAME   | VARIABLE_VALUE |\n+-----------+-----------------+----------------+\n|        31 | long_query_time | 10.000000      |\n|        33 | long_query_time | 10.000000      |\n+-----------+-----------------+----------------+\n2 rows in set (0.00 sec)\n\n\n# 查看当前连接到mysql的线程列表，以及它在做什么事情；\n(root@localhost) [performance_schema]> show processlist;\n+----+------+-----------+--------------------+---------+------+----------+------------------+\n| Id | User | Host      | db                 | Command | Time | State    | Info             |\n+----+------+-----------+--------------------+---------+------+----------+------------------+\n|  6 | root | localhost | performance_schema | Sleep   |  766 |          | NULL             |\n|  8 | root | localhost | performance_schema | Query   |    0 | starting | show processlist |\n+----+------+-----------+--------------------+---------+------+----------+------------------+\n2 rows in set (0.00 sec)\n\n\n# 查看当前连接的id，这个id在processlist 里面\n(root@localhost) [performance_schema]> select connection_id();\n+-----------------+\n| connection_id() |\n+-----------------+\n|               8 |\n+-----------------+\n1 row in set (0.00 sec)\n\n\n\n# 这张表里 有 thread_id 和 processlist_id，通过这张表，做关联查询，则可以查询其它会话的变量值\n(root@localhost) [performance_schema]> select * from threads limit 1\\G\n*************************** 1. row ***************************\n          THREAD_ID: 1\n               NAME: thread/sql/main\n               TYPE: BACKGROUND\n     PROCESSLIST_ID: NULL\n   PROCESSLIST_USER: NULL\n   PROCESSLIST_HOST: NULL\n     PROCESSLIST_DB: NULL\nPROCESSLIST_COMMAND: NULL\n   PROCESSLIST_TIME: 1967\n  PROCESSLIST_STATE: NULL\n   PROCESSLIST_INFO: NULL\n   PARENT_THREAD_ID: NULL\n               ROLE: NULL\n       INSTRUMENTED: YES\n            HISTORY: YES\n    CONNECTION_TYPE: NULL\n       THREAD_OS_ID: 3562\n1 row in set (0.00 sec)\n```\n\n<br>\n\n<br>\n\n## 权限管理\n\n- mysql的权限认证分成：用户名、密码、IP\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1652975371(1).66aoeywjsa80.webp\" />\n\n- mysql的权限分成：全局（所有库）、指定库、指定表、指定列\n- 常用的权限\n  - SQL语句：SELECT、INSERT、UPDATE、DELETE、INDEX\n  - 存储过程：CREATE ROUTINE、ALTER ROUTINE、EXECUTE、TRIGGER\n  - 管理权限：SUPER、RELOAD、SHOW DATABASE、SHUTDOWN、GRANT OPTION\n\n- 常用权限、用户相关sql语句\n\n```mysql\ncreate user 'sao'@'192.168.%.%' identified by 'sao';\n\ndrop user 'sao'@'192.168.%.%';\n\n#显示当前用户的权限 这三个是同一个意思\nshow grants;\nshow grants for current_user;\nshow grants for current_user();\n\ngrant select,update,delete,insert on mysql.* to 'sao'@'192.168.%.%';\n\nshow grants for 'sao'@'192.168.%.%';\n\n\n# 不推荐 使用grant 同时创建权限和用户。\n(root@localhost) [(none)]> grant select,update,delete,insert on mysql.* to 'sa'@'192.168.%.%' identified by 'sa';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\n(root@localhost) [(none)]> show warnings;\n+---------+------+------------------------------------------------------------------------------------------------------------------------------------+\n| Level   | Code | Message                                                                                                                            |\n+---------+------+------------------------------------------------------------------------------------------------------------------------------------+\n| Warning | 1287 | Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement. |\n+---------+------+------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\n\nalter user 'sao'@'192.168.%.%' identified by 'saosao';\n\nrevoke select on mysql.* from 'sao'@'192.168.%.%';\n\ngrant create,index on mysql.* to 'sao'@'192.168.%.%' with grant option;\n```\n\n```mysql\n# mysql 下的 mysql库中的权限表\n# user表中存放全局权限\nuser\ndb\ntables_priv \ncolumns_priv\n```\n\n<font color=\"red\">**注意：不要通过修改权限表来更改用户权限**</font>\n\n```mysql\n# mysql 5.7 密码加密使用的是 password()这个函数\nselect password('456');\n```\n\n## 资源管理\n\n- MAX_QUERIES_PER_HOUR *count*\n- MAX_UPDATES_PER_HOUR *count*\n- MAX_CONNECTIONS_PER_HOUR *count*\n- MAX_USER_CONNECTIONS *count*\n\n```mysql\n# 修改用户的最大连接数\nalter user 'sao'@'192.168.%.%' with MAX_USER_CONNECTIONS 2;\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 第04天_SSL加密连接与密码插件\n\n## 连接MySQL实例\n\n### 通过本地*socket*进行连接\n\n```mysql\n# mysql服务器本地 ，默认使用socket方式连接。 默认省略 -S/tmp/mysql.socket\nmysql -uroot -p -S/tmp/mysql.socket\n```\n\n```mysql\n(root@localhost) [(none)]> show variables like '%socket%'\n    -> ;\n+-----------------------------------------+-----------------+\n| Variable_name                           | Value           |\n+-----------------------------------------+-----------------+\n| performance_schema_max_socket_classes   | 10              |\n| performance_schema_max_socket_instances | -1              |\n| socket                                  | /tmp/mysql.sock |\n+-----------------------------------------+-----------------+\n3 rows in set (0.01 sec)\n```\n\n- 查看当前连接的状态\n\n```mysql\n\n(root@localhost) [mysql]> \\s\n--------------\nmysql  Ver 14.14 Distrib 5.7.37, for linux-glibc2.12 (x86_64) using  EditLine wrapper\n\nConnection id:          2\nCurrent database:       mysql\nCurrent user:           root@localhost\nSSL:                    Not in use\nCurrent pager:          stdout\nUsing outfile:          ''\nUsing delimiter:        ;\nServer version:         5.7.37 MySQL Community Server (GPL)\nProtocol version:       10\nConnection:             Localhost via UNIX socket\nServer characterset:    latin1\nDb     characterset:    latin1\nClient characterset:    utf8\nConn.  characterset:    utf8\nUNIX socket:            /tmp/mysql.sock\nUptime:                 35 sec\n\nThreads: 1  Questions: 41  Slow queries: 0  Opens: 136  Flush tables: 1  Open tables: 129  Queries per second avg: 1.171\n--------------\n\n(root@localhost) [mysql]> status;\n--------------\nmysql  Ver 14.14 Distrib 5.7.37, for linux-glibc2.12 (x86_64) using  EditLine wrapper\n\nConnection id:          2\nCurrent database:       mysql\nCurrent user:           root@localhost\nSSL:                    Not in use\nCurrent pager:          stdout\nUsing outfile:          ''\nUsing delimiter:        ;\nServer version:         5.7.37 MySQL Community Server (GPL)\nProtocol version:       10\nConnection:             Localhost via UNIX socket\nServer characterset:    latin1\nDb     characterset:    latin1\nClient characterset:    utf8\nConn.  characterset:    utf8\nUNIX socket:            /tmp/mysql.sock\nUptime:                 39 sec\n\nThreads: 1  Questions: 44  Slow queries: 0  Opens: 136  Flush tables: 1  Open tables: 129  Queries per second avg: 1.128\n--------------\n\n(root@localhost) [mysql]>\n\n```\n\n\n\n<br/>\n\n### 通过TCP/IP协议远程连接\n\n```mysql\nmysql -uroot -h192.168.163.200 -P3306 -p\n```\n\n### SSL\n\n- mysql 5.7开始 客户端默认使用ssl通信\n  - 只有通过 tcp/ip 的连接的方式 ，ssl才生效，socket方式不会生效\n\n```mysql\n# 开启ssl后，默认使用none\nmysql -uroot -h192.168.163.200 -P3306 -p --ssl-mode=none\n\nmysql -uroot -h192.168.163.200 -P3306 -p --ssl-mode=DISABLED\n\nalter user 'any'@'%' require ssl;\n\n```\n\n- ssl 加密 对性能有影响（影响较小）\n- ssl的另一种方式 x509\n  - 要求：用户名 + 密码 + 启用ssl+公钥 \n\n## 作业\n\n> 了解5.6如何使用ssl\n\n## 密码插件\n\n```mysql\nshow plugins;\n```\n\n- mysql 5.6 开始就有了密码插件 `validate_password`\n\n### validate_password\n\n- `validate_password`插件安装方式有以下两种\n\n```mysql\n# （1）在my.cnf文件中添加如下配置，再重启mysql\n[mysqld]\nplugin-load-add=validate_password.so\n\n# （2）执行如下命令 \nINSTALL PLUGIN validate_password SONAME 'validate_password.so';\n```\n\n```mysql\n# 安装完成插件后，对密码就有要求了\n(root@localhost) [mysql]> alter user 'andy'@'%' identified by 'andy';\nERROR 1819 (HY000): Your password does not satisfy the current policy requirements\n\n\n(root@localhost) [(none)]> show variables like '%validate%';\n+--------------------------------------+--------+\n| Variable_name                        | Value  |\n+--------------------------------------+--------+\n| query_cache_wlock_invalidate         | OFF    |\n| validate_password_check_user_name    | OFF    |\n| validate_password_dictionary_file    |        |\n| validate_password_length             | 8      |\n| validate_password_mixed_case_count   | 1      |\n| validate_password_number_count       | 1      |\n| validate_password_policy             | MEDIUM |\n| validate_password_special_char_count | 1      |\n+--------------------------------------+--------+\n8 rows in set (0.00 sec)\n```\n\n- 建议生产环境使用该插件\n  - 如果使用该插件，则需要在配置文件中做如下配置 \n\n```mysql\n# 默认mysql启动就使用该插件\n[mysqld]\nplugin-load = validate_password.so\n```\n\n| Policy          | Tests Performed                                              |\n| :-------------- | :----------------------------------------------------------- |\n| `0` or `LOW`    | Length                                                       |\n| `1` or `MEDIUM` | Length; numeric, lowercase/uppercase, and special characters |\n| `2` or `STRONG` | Length; numeric, lowercase/uppercase, and special characters; dictionary file |\n\n- Strong中有一个 dictionary file 。该dictionary file 表示，设置的密码中不能包含 dictionary file 文件中的字符串（即dictionary file 中的字符串不能作为密码的一部分）。如果要启动这个策略，那么  `validate_password_policy ` 要设置为 `Strong`\n\n```mysql\n(root@localhost) [(none)]> set global validate_password_dictionary_file = '/mysql_data/dic.file';\nQuery OK, 0 rows affected (0.00 sec)\n\n(root@localhost) [(none)]> exit\nBye\n[root@localhost mysql_data]# vim /mysql_data/dic.file\n[root@localhost mysql_data]# ll /mysql_data/\n总用量 123008\n-rw-r-----. 1 mysql mysql       56 5月  19 00:45 auto.cnf\n-rw-r-----. 1 mysql mysql        5 5月  20 00:06 bogon.pid\n-rw-------. 1 mysql mysql     1680 5月  19 00:45 ca-key.pem\n-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 ca.pem\n-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 client-cert.pem\n-rw-------. 1 mysql mysql     1676 5月  19 00:45 client-key.pem\n-rw-r--r--. 1 root  root        13 5月  21 21:51 dic.file\n-rw-r-----. 1 mysql mysql    47519 5月  21 21:50 error.log\n-rw-r-----. 1 mysql mysql      333 5月  21 21:40 ib_buffer_pool\n-rw-r-----. 1 mysql mysql 12582912 5月  21 21:40 ibdata1\n-rw-r-----. 1 mysql mysql 50331648 5月  21 21:40 ib_logfile0\n-rw-r-----. 1 mysql mysql 50331648 5月  19 00:45 ib_logfile1\n-rw-r-----. 1 mysql mysql 12582912 5月  21 21:40 ibtmp1\n-rw-r-----. 1 mysql mysql        5 5月  21 21:40 localhost.pid\ndrwxr-x---. 2 mysql mysql     4096 5月  19 00:45 mysql\ndrwxr-x---. 2 mysql mysql     8192 5月  19 00:45 performance_schema\n-rw-------. 1 mysql mysql     1680 5月  19 00:45 private_key.pem\n-rw-r--r--. 1 mysql mysql      452 5月  19 00:45 public_key.pem\n-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 server-cert.pem\n-rw-------. 1 mysql mysql     1680 5月  19 00:45 server-key.pem\ndrwxr-x---. 2 mysql mysql     8192 5月  19 00:45 sys\n[root@localhost mysql_data]# chown -R mysql:mysql dic.file\n\n```\n\n- `validate_password_check_user_name ` 这个开启后，表示密码中不能使用用户名，逆序也不行\n- 作为了解。可以看看大厂实际生产环境，如何使用密码的。\n\n## 多实例安装\n\n- 一台服务器上安装多个实例，充分利用硬件资源\n- mysql 原生就支持多实例安装\n- 通过 `mysqld_multi` 实现\n\n### 多实例安装操作流程\n\n- 在配置文件 `my.cnf` 中新增加如下内容\n\n```mysql\n[mysqld1]\nport = 3307\nuser = mysql\ndatadir = /mysql_data1\nsocket = /tmp/mysql1.sock\n```\n\n- 执行 `mysqld --initialize --datadir=/mysql_data1` 会发现生成了 `/mysql_data1/`目录，初始密码在 `error.log`中\n\n- 在配置文件 `my.cnf` 中新增 `mysqld_multi`，并增加如下内容\n\n```mysql\n[mysqld_multi]\nmysqld = /usr/local/mysql/bin/mysqld_safe\nmysqladmin = /usr/local/mysql/bin/mysqladmin\nlog = /usr/local/mysql/mysqld_multi.log\n```\n\n- 执行 ` mysqld_multi report`\n\n```mysql\n[root@localhost mysql]# mysqld_multi report\nReporting MySQL servers\nMySQL server from group: mysqld1 is not running\n```\n\n- 查看运行状态与启停、登录\n\n```mysql\n[root@localhost mysql]# mysqld_multi start 1\n\n[root@localhost mysql]# mysqld_multi report\nReporting MySQL servers\nMySQL server from group: mysqld1 is running\n\n[root@localhost mysql_data1]# mysql -uroot -p'huah5jqpdJ?+' -S/tmp/mysql1.sock\n```\n\n```linux\n# 可以查看到3307 端口已经被占用\n[root@localhost mysql_data1]# netstat -ntl\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN\ntcp6       0      0 :::22                   :::*                    LISTEN\ntcp6       0      0 :::3306                 :::*                    LISTEN\ntcp6       0      0 :::3307                 :::*                    LISTEN\n[root@localhost mysql_data1]#\n```\n\n- 注意：\n  - 最开始安装的 mysql 实例 也可以使用 mysql_multi start 进行启动，配置好便可\n  - 默认 error.log 在各自的mysql data 目录中，所以不需要配置\n\n<br/>\n\n# 第05天_MySQL启动与关闭 & 多实例安装不同版本数据库\n\n## MySQL 的启动与关闭\n\n```mysql\n/etc/init.d/mysql.server start\n\n\n[root@localhost bin]# mysqld --defaults-file=/etc/my.cnf\n\n# 守护进程方式启动mysql，当mysql进程挂了以后，会自动把mysql进程拉起来\n[root@localhost bin]# mysqld_safe --user=mysql &\n```\n\n```mysql\n# 需要密码\n(root@localhost) [(none)]> shutdown;\nQuery OK, 0 rows affected (0.00 sec)\n\n# 不提供用户名和密码\n/etc/init.d/mysql.server stop\n\n\n\n# 需要密码\n[root@localhost bin]# mysqladmin -uroot -proot shutdown\n\n```\n\n- 为什么mysql不需要密码就可以关闭呢？\n\n```mysql\n# 是安全关闭的\n/etc/init.d/mysql.server stop\n\n# 是一个shell执行脚本\n[root@localhost bin]# file /etc/init.d/mysql.server\n/etc/init.d/mysql.server: POSIX shell script, ASCII text executable\n\n# mysql利用了linux中的信号机制 ,查看 /etc/init.d/mysql.server 脚本，可以看到 kill -0 [进程号]\n\n     if (kill -0 $mysqld_pid 2>/dev/null)\n      then\n        echo $echo_n \"Shutting down MySQL\"\n        kill $mysqld_pid\n\n# kill -0 [进程号] 表示 发送一个信号给这个进程。 然后 kill 掉这个进程，所以其是安全关闭的\n```\n\n```mysql\n\n[mysqld_multi]\n# 使用哪个程序来启动mysql\nmysqld = /usr/local/mysql/bin/mysqld_safe\n# 通过mysqladmin 这个命令来关闭数据库\nmysqladmin = /usr/local/mysql/bin/mysqladmin\nlog = /usr/local/mysql/mysqld_multi.log\nuser=root\npass=Root1_2022\n```\n\n<br/>\n\n## MySQL 忘记密码了怎么办\n\n```mysql\n# 编辑 mysql配置文件 my.cnf，添加如下内容\n\n[mysqld]\nskip-grant-tables\n\n# 然后重启数据库\n\n# 此时登录mysql不需要密码,use mysql 然后修改user表的密码字段即可\nupdate mysql set authentication_string = password('root') where user='root' and host = 'localhost';\n\n(root@localhost) [mysql]> flush privileges;\n\n# 再去掉参数，重启数据库即可\n```\n\n## MySQL5.7 的新参数\n\n- `default_password_lifetime`\n\n```mysql\nALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE;\n```\n\n```mysql\n[mysqld]\ndefault_password_lifetime=180\n\n[mysqld]\ndefault_password_lifetime=0\n\nSET GLOBAL default_password_lifetime = 180;\nSET GLOBAL default_password_lifetime = 0;\n```\n\n\n\n\n\n\n\n\n\n# 第07天_数据类型、常用函数、编码\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 学习备注\n\n> 1. 第一天的内容，最后还需要认真学习一遍，做好笔记\n> 2. 权限管理这块，还需要实践，继续熟悉\n\n\n\n<br>\n\n<img src=\"\" width=\"80%\"/>\n\n<br>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 备注\n\n> 熟悉mysql官网\n>\n> hexo new post \"MySQL - 简介、版本特性与选择、安装与初始化配置、升级、启停\"\n","source":"_drafts/姜承尧-MySQL-DBA实战-study-notes.md","raw":"---\ntitle: 姜承尧 MySQL DBA实战 study notes\nauthor: sonzonzy\ndate: 2022-05-18 01:33:04\nupdated: 2022-05-18 01:33:04\ncategories:\n  - [database,mysql]\ntags:\n  mysql\n---\n\n\n\n\n\n# 第01天_Mysql简介与前景\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 第02天_MySQL安装与基本命令\n\n## MySQL安装步骤\n\n- 卸载操作系统自带的mariadb，下载mysql安装的的依赖\n- 创建mysql用户组和用户\n- 配置`/etc/my.cnf`\n- 官网下载mysql数据库\n- 创建目录，设置权限。初始化mysql元数据库\n- 将mysql添加到启动项\n\n<br>\n\n<br>\n\n## MySQL 5.6 安装过程\n\n- 官网MySQL 5.6安装参考手册：[MySQL 5.6 Reference Manual-Installing MySQL on Unix/Linux Using Generic Binaries](https://dev.mysql.com/doc/refman/5.6/en/binary-installation.html)\n\n\n\n- （1）卸载操作系统自带的 mariadb/mysql 数据库\n\n```shell\n[root@localhost ~]# rpm -qa | grep mariadb | xargs yum remove -y\n```\n\n- （2）创建数据目录\n\n```shell\n[root@localhost ~]# mkdir -p /install /backup /data\n```\n\n- （3）创建mysql用户和用户组\n\n```shell\n[root@localhost ~]# useradd mysql\n```\n\n- （4）下载安装过程中可能需要的依赖\n\n```shell\n[root@localhost ~]# yum install -y libaio autoconf\n```\n\n- （5）新建/编辑 `/etc/my.cnf` 文件（需要先配置好这个文件，否则，安装后启动报错）\n\n`vim /etc/my.cnf`\n\n```shell\n[client]\n# 所有客户端登录进去后可以配置的参数\n\n[mysql]\n# mysql这个命名登录进去后配置的参数\n\n\n[mysqld]\n# mysql服务器启动时候的参数\nport = 3306\nuser = mysql\nbasedir = /usr/local/mysql\ndatadir = /data\n```\n\n- （6）下载mysql5.6的安装包，并解压到 `/usr/local/` 目录下，创建软连接（便于管理mysql）\n\n```shell\n[root@localhost install]# wget wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz\n\n# 校验下载的数据库压缩包MD5值，和官网进行比较，辨别是否被篡改过\n[root@localhost install]# md5sum mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz\n\n[root@localhost install]# tar -zxvf mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz -C /usr/local/\n\n[root@localhost local]# cd /usr/local/\n[root@localhost local]# ln -s mysql-5.6.51-linux-glibc2.12-x86_64/ mysql\n```\n\n- （7）设置目录权限\n\n```shell\n[root@localhost local]# chown -R mysql.mysql /data/\n[root@localhost local]# chmod 750 /data/\n```\n\n- （8）初始化mysql\n\n```shell\n[root@localhost local]# cd /usr/local/mysql\n\n# mysql初始化数据库的语句，5.6 和 5.7 是不一样的，需要注意\n[root@localhost mysql]# scripts/mysql_install_db --user=mysql\n\n[root@localhost mysql]# bin/mysqld_safe --user=mysql &\n# 拷贝启动脚本（服务）到指定位置，便于管理、使用\n[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysql.server\n```\n\n<br>\n\n<br>\n\n## MySQL 5.7 安装过程\n\n- 官网MySQL 5.7安装参考手册：[MySQL 5.7 Reference Manual-Installing MySQL on Unix/Linux Using Generic Binaries](https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html)\n\n\n\n- （1）卸载操作系统自带的 mariadb/mysql 数据库\n\n```shell\n[root@localhost ~]# rpm -qa | grep mariadb | xargs yum remove -y\n```\n\n- （2）创建数据目录\n\n```shell\n[root@localhost ~]# mkdir -p /install /backup /data\n```\n\n- （3）创建mysql用户和用户组\n\n```shell\n[root@localhost ~]# useradd mysql\n```\n\n- （4）下载安装过程中可能需要的依赖\n\n```shell\n[root@localhost ~]# yum install -y libaio autoconf\n```\n\n- （5）新建/编辑 `/etc/my.cnf` 文件（需要先配置好这个文件，否则，安装后启动报错）\n\n`vim /etc/my.cnf`\n\n```shell\n[client]\n# 所有客户端登录进去后可以配置的参数\n\n[mysql]\n# mysql这个命令登录进去后配置的参数\n\n\n[mysqld]\n# mysql服务器启动时候的参数\nport = 3306\nuser = mysql\nbasedir = /usr/local/mysql\ndatadir = /data\n```\n\n- （6）上传mysql5.7的安装包，并解压到 `/usr/local/` 目录下，创建软连接（便于管理mysql）\n\n```shell\n[root@localhost install]# tar -zxvf mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz -C /usr/local/\n\n# 校验下载的数据库压缩包MD5值，和官网进行比较，辨别是否被篡改过\n[root@localhost install]# md5sum mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz\n\n[root@localhost local]# cd /usr/local/\n[root@localhost local]# ln -s mysql-5.7.39-linux-glibc2.12-x86_64/ mysql\n```\n\n- （7）设置目录权限\n\n```shell\n[root@localhost local]# chown -R mysql.mysql /data/\n[root@localhost local]# chmod 750 /data/\n```\n\n- （8）初始化mysql\n\n```shell\n[root@localhost local]# cd /usr/local/mysql\n\n# mysql初始化数据库的语句，5.6 和 5.7 是不一样的，需要注意\n[root@localhost mysql]# bin/mysqld --initialize --user=mysql\n\n[root@localhost mysql]# bin/mysqld_safe --user=mysql &\n# 拷贝启动脚本（服务）到指定位置，便于管理、使用\n[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysql.server\n```\n\n<br>\n\n<br>\n\n## MySQL安装成功后进行基础配置\n\n- （1）设置MySQL开机自启动\n\n```bash\n# 把 mysql 的服务加入开机自启动项目\n[root@localhost ~]# chkconfig --add mysql.server\n[root@localhost ~]# chkconfig --list\n```\n\n- （2）配置MySQL环境变量\n\n`vim /etc/profile`\n\n```bash\nexport PATH=/usr/local/mysql/bin:$PATH\n```\n\n`source /etc/profile`\n\n- （3）添加日志文件配置\n\n`vim /etc/my.cnf`\n\n```mysql\n[mysqld]\nlog_error = error.log\n```\n\n- （4）修改初始密码\n\n> 5.7\n\n```mysql\nmysql> set password='root';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n> 5.6\n\n```mysql\nmysql> set password=password(\"root\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n<br>\n\n<br>\n\n## MySQL的其它配置\n\n### 免密登录\n\n`vim /etc/my.cnf`\n\n```mysql\n[client]\n#  mysql这个命令每次启动的时候，会去读配置文件，读到[client]标签，会自动把用户名和密码添加到后面。所以输入 mysql 后回车便可直接登录\nuser = root\npassword = root\n```\n\n<br>\n\n### 定制MySQL终端提示符\n\n`vim /etc/my.cnf`\n\n```mysql\n[mysql]\nprompt = (\\u@\\h) [\\d]>\\_\n```\n\n<br>\n\n### 允许MySQL远程登录\n\n```shell\n(root@localhost) [(none)]> grant all on *.* to root@'%' identified by 'root' with grant option;\nQuery OK, 0 rows affected (0.01 sec)\n\n(root@localhost) [(none)]> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n<br>\n\n<br>\n\n## MySQL 5.6与5.7 安装上的差异\n\n- （1）5.6 安装完没有密码，而5.7初始化完成会有密码\n\n  > 如果希望MySQL5.7安装初始化的时候表现跟MySQL5.6一样-没有密码，则可以在初始化数据库的语句中\t`bin/mysqld --initialize --user=mysql`，把\t`--initialize`\t替换成\t`--initialize-insecure`。（可以通过\t `mysqld --verbose --help | less\t`查看到两个参数的说明）\n\n\n\n\n- （2）初始化命令不一样\n  - 5.6：`scripts/mysql_install_db --user=mysql`\n  - 5.7：`bin/mysqld --initialize --user=mysql`\n\n\n\n\n- （3）设置密码的方式不一样\n  - 5.6：`set password = password(\"mysql\");`\n  - 5.7：`set password='mysql';`\n\n<br>\n\n<br>\n\n## 查看MySQL 安装后的默认参数\n\n```mysql\nmysqld --verbose --help\n```\n\n<br>\n\n<br>\n\n## 作业\n\n> 熟练安装 mysql 5.6、5.7\n>\n> mysql 5.6、5.7 自动安装的脚本。\n\n<br>\n\n<br>\n\n## MySQL 5.6 升级到 5.7\n\n\n\n\n\n\n\n# 第03天_MySQL客户端连接与权限管理\n\n##  mysql最优配置文件参考\n\n[ mysql_best_configuration](https://github.com/jdaaaaaavid/mysql_best_configuration/blob/master/my.cnf)\n\n<br>\n\n<br>\n\n## MySQL可以有多个配置文件\n\n```mysql\n# mysql 在启动的时候会依次去读取下面的文件\n[root@localhost ~]# mysql --verbose --help | grep my.cnf\n                      order of preference, my.cnf, $MYSQL_TCP_PORT,\n/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf\n```\n\n- 遵循参数替换原则。后面的参数会替换前面的参数\n\n<br>\n\n<br>\n\n## MySQL的配置文件参数\n\n```mysql\n[client]\n# 所有客户端登录进去后可以配置的参数\n\n[mysql]\n# mysql这个命令登录进去后配置的参数\n\n[mysqld]\n# mysql服务器启动时候的参数\nport = 3306\nuser = mysql\ndatadir = /data\nlog_error = error.log\n```\n\n- 查看mysql的参数，当前配置的值\n\n```mysql\n# 默认省略了session\nshow variables;\n\nshow session variables;\n```\n\n```mysql\nshow variables like 'log_error';\n\nshow global variables like '%log%';\n```\n\n```mysql\n# 对已经创建的连接不生效，只对新创建的连接生效\nset global long_query_time=5;\n```\n\n\n\n|                             命令                             |             说明             |\n| :----------------------------------------------------------: | :--------------------------: |\n| SHOW [GLOBAL \\|SESSION] VARIABLES [LIKE  'pattern' \\|WHERE expr] | 查看变量，可根据like进行过滤 |\n|            SET [GLOBAL\\|SESSION] VARIABLES = xxx             |  修改global或session的参数   |\n\n\n\n## MySQL的参数分类\n\n- 从作用域上可分为global和session\n  - seesion：只对当前这一个连接有效\n  - global：全局有效\n- 从类型上又可分为可修改和只读参数\n  - 用户可在线修改非只读参数\n  - 只读参数只能通过配置文件修改并重启\n  - 所有参数的修改都不持久化\n\n### 当前会话下，查看其它连接的 variables\n\n- mysql5.7开始，多了一个数据库\t`performance_schema`\n\n```mysql\nuse performance_schema;\n\n\nshow tables like '%variables%';\n\n\n(root@localhost) [performance_schema]> select * from variables_by_thread where variable_name = 'long_query_time';\n+-----------+-----------------+----------------+\n| THREAD_ID | VARIABLE_NAME   | VARIABLE_VALUE |\n+-----------+-----------------+----------------+\n|        31 | long_query_time | 10.000000      |\n|        33 | long_query_time | 10.000000      |\n+-----------+-----------------+----------------+\n2 rows in set (0.00 sec)\n\n\n# 查看当前连接到mysql的线程列表，以及它在做什么事情；\n(root@localhost) [performance_schema]> show processlist;\n+----+------+-----------+--------------------+---------+------+----------+------------------+\n| Id | User | Host      | db                 | Command | Time | State    | Info             |\n+----+------+-----------+--------------------+---------+------+----------+------------------+\n|  6 | root | localhost | performance_schema | Sleep   |  766 |          | NULL             |\n|  8 | root | localhost | performance_schema | Query   |    0 | starting | show processlist |\n+----+------+-----------+--------------------+---------+------+----------+------------------+\n2 rows in set (0.00 sec)\n\n\n# 查看当前连接的id，这个id在processlist 里面\n(root@localhost) [performance_schema]> select connection_id();\n+-----------------+\n| connection_id() |\n+-----------------+\n|               8 |\n+-----------------+\n1 row in set (0.00 sec)\n\n\n\n# 这张表里 有 thread_id 和 processlist_id，通过这张表，做关联查询，则可以查询其它会话的变量值\n(root@localhost) [performance_schema]> select * from threads limit 1\\G\n*************************** 1. row ***************************\n          THREAD_ID: 1\n               NAME: thread/sql/main\n               TYPE: BACKGROUND\n     PROCESSLIST_ID: NULL\n   PROCESSLIST_USER: NULL\n   PROCESSLIST_HOST: NULL\n     PROCESSLIST_DB: NULL\nPROCESSLIST_COMMAND: NULL\n   PROCESSLIST_TIME: 1967\n  PROCESSLIST_STATE: NULL\n   PROCESSLIST_INFO: NULL\n   PARENT_THREAD_ID: NULL\n               ROLE: NULL\n       INSTRUMENTED: YES\n            HISTORY: YES\n    CONNECTION_TYPE: NULL\n       THREAD_OS_ID: 3562\n1 row in set (0.00 sec)\n```\n\n<br>\n\n<br>\n\n## 权限管理\n\n- mysql的权限认证分成：用户名、密码、IP\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1652975371(1).66aoeywjsa80.webp\" />\n\n- mysql的权限分成：全局（所有库）、指定库、指定表、指定列\n- 常用的权限\n  - SQL语句：SELECT、INSERT、UPDATE、DELETE、INDEX\n  - 存储过程：CREATE ROUTINE、ALTER ROUTINE、EXECUTE、TRIGGER\n  - 管理权限：SUPER、RELOAD、SHOW DATABASE、SHUTDOWN、GRANT OPTION\n\n- 常用权限、用户相关sql语句\n\n```mysql\ncreate user 'sao'@'192.168.%.%' identified by 'sao';\n\ndrop user 'sao'@'192.168.%.%';\n\n#显示当前用户的权限 这三个是同一个意思\nshow grants;\nshow grants for current_user;\nshow grants for current_user();\n\ngrant select,update,delete,insert on mysql.* to 'sao'@'192.168.%.%';\n\nshow grants for 'sao'@'192.168.%.%';\n\n\n# 不推荐 使用grant 同时创建权限和用户。\n(root@localhost) [(none)]> grant select,update,delete,insert on mysql.* to 'sa'@'192.168.%.%' identified by 'sa';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\n(root@localhost) [(none)]> show warnings;\n+---------+------+------------------------------------------------------------------------------------------------------------------------------------+\n| Level   | Code | Message                                                                                                                            |\n+---------+------+------------------------------------------------------------------------------------------------------------------------------------+\n| Warning | 1287 | Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement. |\n+---------+------+------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\n\nalter user 'sao'@'192.168.%.%' identified by 'saosao';\n\nrevoke select on mysql.* from 'sao'@'192.168.%.%';\n\ngrant create,index on mysql.* to 'sao'@'192.168.%.%' with grant option;\n```\n\n```mysql\n# mysql 下的 mysql库中的权限表\n# user表中存放全局权限\nuser\ndb\ntables_priv \ncolumns_priv\n```\n\n<font color=\"red\">**注意：不要通过修改权限表来更改用户权限**</font>\n\n```mysql\n# mysql 5.7 密码加密使用的是 password()这个函数\nselect password('456');\n```\n\n## 资源管理\n\n- MAX_QUERIES_PER_HOUR *count*\n- MAX_UPDATES_PER_HOUR *count*\n- MAX_CONNECTIONS_PER_HOUR *count*\n- MAX_USER_CONNECTIONS *count*\n\n```mysql\n# 修改用户的最大连接数\nalter user 'sao'@'192.168.%.%' with MAX_USER_CONNECTIONS 2;\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 第04天_SSL加密连接与密码插件\n\n## 连接MySQL实例\n\n### 通过本地*socket*进行连接\n\n```mysql\n# mysql服务器本地 ，默认使用socket方式连接。 默认省略 -S/tmp/mysql.socket\nmysql -uroot -p -S/tmp/mysql.socket\n```\n\n```mysql\n(root@localhost) [(none)]> show variables like '%socket%'\n    -> ;\n+-----------------------------------------+-----------------+\n| Variable_name                           | Value           |\n+-----------------------------------------+-----------------+\n| performance_schema_max_socket_classes   | 10              |\n| performance_schema_max_socket_instances | -1              |\n| socket                                  | /tmp/mysql.sock |\n+-----------------------------------------+-----------------+\n3 rows in set (0.01 sec)\n```\n\n- 查看当前连接的状态\n\n```mysql\n\n(root@localhost) [mysql]> \\s\n--------------\nmysql  Ver 14.14 Distrib 5.7.37, for linux-glibc2.12 (x86_64) using  EditLine wrapper\n\nConnection id:          2\nCurrent database:       mysql\nCurrent user:           root@localhost\nSSL:                    Not in use\nCurrent pager:          stdout\nUsing outfile:          ''\nUsing delimiter:        ;\nServer version:         5.7.37 MySQL Community Server (GPL)\nProtocol version:       10\nConnection:             Localhost via UNIX socket\nServer characterset:    latin1\nDb     characterset:    latin1\nClient characterset:    utf8\nConn.  characterset:    utf8\nUNIX socket:            /tmp/mysql.sock\nUptime:                 35 sec\n\nThreads: 1  Questions: 41  Slow queries: 0  Opens: 136  Flush tables: 1  Open tables: 129  Queries per second avg: 1.171\n--------------\n\n(root@localhost) [mysql]> status;\n--------------\nmysql  Ver 14.14 Distrib 5.7.37, for linux-glibc2.12 (x86_64) using  EditLine wrapper\n\nConnection id:          2\nCurrent database:       mysql\nCurrent user:           root@localhost\nSSL:                    Not in use\nCurrent pager:          stdout\nUsing outfile:          ''\nUsing delimiter:        ;\nServer version:         5.7.37 MySQL Community Server (GPL)\nProtocol version:       10\nConnection:             Localhost via UNIX socket\nServer characterset:    latin1\nDb     characterset:    latin1\nClient characterset:    utf8\nConn.  characterset:    utf8\nUNIX socket:            /tmp/mysql.sock\nUptime:                 39 sec\n\nThreads: 1  Questions: 44  Slow queries: 0  Opens: 136  Flush tables: 1  Open tables: 129  Queries per second avg: 1.128\n--------------\n\n(root@localhost) [mysql]>\n\n```\n\n\n\n<br/>\n\n### 通过TCP/IP协议远程连接\n\n```mysql\nmysql -uroot -h192.168.163.200 -P3306 -p\n```\n\n### SSL\n\n- mysql 5.7开始 客户端默认使用ssl通信\n  - 只有通过 tcp/ip 的连接的方式 ，ssl才生效，socket方式不会生效\n\n```mysql\n# 开启ssl后，默认使用none\nmysql -uroot -h192.168.163.200 -P3306 -p --ssl-mode=none\n\nmysql -uroot -h192.168.163.200 -P3306 -p --ssl-mode=DISABLED\n\nalter user 'any'@'%' require ssl;\n\n```\n\n- ssl 加密 对性能有影响（影响较小）\n- ssl的另一种方式 x509\n  - 要求：用户名 + 密码 + 启用ssl+公钥 \n\n## 作业\n\n> 了解5.6如何使用ssl\n\n## 密码插件\n\n```mysql\nshow plugins;\n```\n\n- mysql 5.6 开始就有了密码插件 `validate_password`\n\n### validate_password\n\n- `validate_password`插件安装方式有以下两种\n\n```mysql\n# （1）在my.cnf文件中添加如下配置，再重启mysql\n[mysqld]\nplugin-load-add=validate_password.so\n\n# （2）执行如下命令 \nINSTALL PLUGIN validate_password SONAME 'validate_password.so';\n```\n\n```mysql\n# 安装完成插件后，对密码就有要求了\n(root@localhost) [mysql]> alter user 'andy'@'%' identified by 'andy';\nERROR 1819 (HY000): Your password does not satisfy the current policy requirements\n\n\n(root@localhost) [(none)]> show variables like '%validate%';\n+--------------------------------------+--------+\n| Variable_name                        | Value  |\n+--------------------------------------+--------+\n| query_cache_wlock_invalidate         | OFF    |\n| validate_password_check_user_name    | OFF    |\n| validate_password_dictionary_file    |        |\n| validate_password_length             | 8      |\n| validate_password_mixed_case_count   | 1      |\n| validate_password_number_count       | 1      |\n| validate_password_policy             | MEDIUM |\n| validate_password_special_char_count | 1      |\n+--------------------------------------+--------+\n8 rows in set (0.00 sec)\n```\n\n- 建议生产环境使用该插件\n  - 如果使用该插件，则需要在配置文件中做如下配置 \n\n```mysql\n# 默认mysql启动就使用该插件\n[mysqld]\nplugin-load = validate_password.so\n```\n\n| Policy          | Tests Performed                                              |\n| :-------------- | :----------------------------------------------------------- |\n| `0` or `LOW`    | Length                                                       |\n| `1` or `MEDIUM` | Length; numeric, lowercase/uppercase, and special characters |\n| `2` or `STRONG` | Length; numeric, lowercase/uppercase, and special characters; dictionary file |\n\n- Strong中有一个 dictionary file 。该dictionary file 表示，设置的密码中不能包含 dictionary file 文件中的字符串（即dictionary file 中的字符串不能作为密码的一部分）。如果要启动这个策略，那么  `validate_password_policy ` 要设置为 `Strong`\n\n```mysql\n(root@localhost) [(none)]> set global validate_password_dictionary_file = '/mysql_data/dic.file';\nQuery OK, 0 rows affected (0.00 sec)\n\n(root@localhost) [(none)]> exit\nBye\n[root@localhost mysql_data]# vim /mysql_data/dic.file\n[root@localhost mysql_data]# ll /mysql_data/\n总用量 123008\n-rw-r-----. 1 mysql mysql       56 5月  19 00:45 auto.cnf\n-rw-r-----. 1 mysql mysql        5 5月  20 00:06 bogon.pid\n-rw-------. 1 mysql mysql     1680 5月  19 00:45 ca-key.pem\n-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 ca.pem\n-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 client-cert.pem\n-rw-------. 1 mysql mysql     1676 5月  19 00:45 client-key.pem\n-rw-r--r--. 1 root  root        13 5月  21 21:51 dic.file\n-rw-r-----. 1 mysql mysql    47519 5月  21 21:50 error.log\n-rw-r-----. 1 mysql mysql      333 5月  21 21:40 ib_buffer_pool\n-rw-r-----. 1 mysql mysql 12582912 5月  21 21:40 ibdata1\n-rw-r-----. 1 mysql mysql 50331648 5月  21 21:40 ib_logfile0\n-rw-r-----. 1 mysql mysql 50331648 5月  19 00:45 ib_logfile1\n-rw-r-----. 1 mysql mysql 12582912 5月  21 21:40 ibtmp1\n-rw-r-----. 1 mysql mysql        5 5月  21 21:40 localhost.pid\ndrwxr-x---. 2 mysql mysql     4096 5月  19 00:45 mysql\ndrwxr-x---. 2 mysql mysql     8192 5月  19 00:45 performance_schema\n-rw-------. 1 mysql mysql     1680 5月  19 00:45 private_key.pem\n-rw-r--r--. 1 mysql mysql      452 5月  19 00:45 public_key.pem\n-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 server-cert.pem\n-rw-------. 1 mysql mysql     1680 5月  19 00:45 server-key.pem\ndrwxr-x---. 2 mysql mysql     8192 5月  19 00:45 sys\n[root@localhost mysql_data]# chown -R mysql:mysql dic.file\n\n```\n\n- `validate_password_check_user_name ` 这个开启后，表示密码中不能使用用户名，逆序也不行\n- 作为了解。可以看看大厂实际生产环境，如何使用密码的。\n\n## 多实例安装\n\n- 一台服务器上安装多个实例，充分利用硬件资源\n- mysql 原生就支持多实例安装\n- 通过 `mysqld_multi` 实现\n\n### 多实例安装操作流程\n\n- 在配置文件 `my.cnf` 中新增加如下内容\n\n```mysql\n[mysqld1]\nport = 3307\nuser = mysql\ndatadir = /mysql_data1\nsocket = /tmp/mysql1.sock\n```\n\n- 执行 `mysqld --initialize --datadir=/mysql_data1` 会发现生成了 `/mysql_data1/`目录，初始密码在 `error.log`中\n\n- 在配置文件 `my.cnf` 中新增 `mysqld_multi`，并增加如下内容\n\n```mysql\n[mysqld_multi]\nmysqld = /usr/local/mysql/bin/mysqld_safe\nmysqladmin = /usr/local/mysql/bin/mysqladmin\nlog = /usr/local/mysql/mysqld_multi.log\n```\n\n- 执行 ` mysqld_multi report`\n\n```mysql\n[root@localhost mysql]# mysqld_multi report\nReporting MySQL servers\nMySQL server from group: mysqld1 is not running\n```\n\n- 查看运行状态与启停、登录\n\n```mysql\n[root@localhost mysql]# mysqld_multi start 1\n\n[root@localhost mysql]# mysqld_multi report\nReporting MySQL servers\nMySQL server from group: mysqld1 is running\n\n[root@localhost mysql_data1]# mysql -uroot -p'huah5jqpdJ?+' -S/tmp/mysql1.sock\n```\n\n```linux\n# 可以查看到3307 端口已经被占用\n[root@localhost mysql_data1]# netstat -ntl\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN\ntcp6       0      0 :::22                   :::*                    LISTEN\ntcp6       0      0 :::3306                 :::*                    LISTEN\ntcp6       0      0 :::3307                 :::*                    LISTEN\n[root@localhost mysql_data1]#\n```\n\n- 注意：\n  - 最开始安装的 mysql 实例 也可以使用 mysql_multi start 进行启动，配置好便可\n  - 默认 error.log 在各自的mysql data 目录中，所以不需要配置\n\n<br/>\n\n# 第05天_MySQL启动与关闭 & 多实例安装不同版本数据库\n\n## MySQL 的启动与关闭\n\n```mysql\n/etc/init.d/mysql.server start\n\n\n[root@localhost bin]# mysqld --defaults-file=/etc/my.cnf\n\n# 守护进程方式启动mysql，当mysql进程挂了以后，会自动把mysql进程拉起来\n[root@localhost bin]# mysqld_safe --user=mysql &\n```\n\n```mysql\n# 需要密码\n(root@localhost) [(none)]> shutdown;\nQuery OK, 0 rows affected (0.00 sec)\n\n# 不提供用户名和密码\n/etc/init.d/mysql.server stop\n\n\n\n# 需要密码\n[root@localhost bin]# mysqladmin -uroot -proot shutdown\n\n```\n\n- 为什么mysql不需要密码就可以关闭呢？\n\n```mysql\n# 是安全关闭的\n/etc/init.d/mysql.server stop\n\n# 是一个shell执行脚本\n[root@localhost bin]# file /etc/init.d/mysql.server\n/etc/init.d/mysql.server: POSIX shell script, ASCII text executable\n\n# mysql利用了linux中的信号机制 ,查看 /etc/init.d/mysql.server 脚本，可以看到 kill -0 [进程号]\n\n     if (kill -0 $mysqld_pid 2>/dev/null)\n      then\n        echo $echo_n \"Shutting down MySQL\"\n        kill $mysqld_pid\n\n# kill -0 [进程号] 表示 发送一个信号给这个进程。 然后 kill 掉这个进程，所以其是安全关闭的\n```\n\n```mysql\n\n[mysqld_multi]\n# 使用哪个程序来启动mysql\nmysqld = /usr/local/mysql/bin/mysqld_safe\n# 通过mysqladmin 这个命令来关闭数据库\nmysqladmin = /usr/local/mysql/bin/mysqladmin\nlog = /usr/local/mysql/mysqld_multi.log\nuser=root\npass=Root1_2022\n```\n\n<br/>\n\n## MySQL 忘记密码了怎么办\n\n```mysql\n# 编辑 mysql配置文件 my.cnf，添加如下内容\n\n[mysqld]\nskip-grant-tables\n\n# 然后重启数据库\n\n# 此时登录mysql不需要密码,use mysql 然后修改user表的密码字段即可\nupdate mysql set authentication_string = password('root') where user='root' and host = 'localhost';\n\n(root@localhost) [mysql]> flush privileges;\n\n# 再去掉参数，重启数据库即可\n```\n\n## MySQL5.7 的新参数\n\n- `default_password_lifetime`\n\n```mysql\nALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE;\n```\n\n```mysql\n[mysqld]\ndefault_password_lifetime=180\n\n[mysqld]\ndefault_password_lifetime=0\n\nSET GLOBAL default_password_lifetime = 180;\nSET GLOBAL default_password_lifetime = 0;\n```\n\n\n\n\n\n\n\n\n\n# 第07天_数据类型、常用函数、编码\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 学习备注\n\n> 1. 第一天的内容，最后还需要认真学习一遍，做好笔记\n> 2. 权限管理这块，还需要实践，继续熟悉\n\n\n\n<br>\n\n<img src=\"\" width=\"80%\"/>\n\n<br>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 备注\n\n> 熟悉mysql官网\n>\n> hexo new post \"MySQL - 简介、版本特性与选择、安装与初始化配置、升级、启停\"\n","slug":"姜承尧-MySQL-DBA实战-study-notes","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsos005ldctabm2b61cn","content":"<h1 id=\"第01天-Mysql简介与前景\"><a href=\"#第01天-Mysql简介与前景\" class=\"headerlink\" title=\"第01天_Mysql简介与前景\"></a>第01天_Mysql简介与前景</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"第02天-MySQL安装与基本命令\"><a href=\"#第02天-MySQL安装与基本命令\" class=\"headerlink\" title=\"第02天_MySQL安装与基本命令\"></a>第02天_MySQL安装与基本命令</h1><h2 id=\"MySQL安装步骤\"><a href=\"#MySQL安装步骤\" class=\"headerlink\" title=\"MySQL安装步骤\"></a>MySQL安装步骤</h2><ul>\n<li>卸载操作系统自带的mariadb，下载mysql安装的的依赖</li>\n<li>创建mysql用户组和用户</li>\n<li>配置<code>/etc/my.cnf</code></li>\n<li>官网下载mysql数据库</li>\n<li>创建目录，设置权限。初始化mysql元数据库</li>\n<li>将mysql添加到启动项</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"MySQL-5-6-安装过程\"><a href=\"#MySQL-5-6-安装过程\" class=\"headerlink\" title=\"MySQL 5.6 安装过程\"></a>MySQL 5.6 安装过程</h2><ul>\n<li>官网MySQL 5.6安装参考手册：<a class=\"link\"   href=\"https://dev.mysql.com/doc/refman/5.6/en/binary-installation.html\" >MySQL 5.6 Reference Manual-Installing MySQL on Unix/Linux Using Generic Binaries<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<ul>\n<li>（1）卸载操作系统自带的 mariadb/mysql 数据库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -qa | grep mariadb | xargs yum remove -y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（2）创建数据目录</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mkdir -p /install /backup /data</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（3）创建mysql用户和用户组</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd mysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（4）下载安装过程中可能需要的依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum install -y libaio autoconf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（5）新建/编辑 <code>/etc/my.cnf</code> 文件（需要先配置好这个文件，否则，安装后启动报错）</li>\n</ul>\n<p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有客户端登录进去后可以配置的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql这个命名登录进去后配置的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql服务器启动时候的参数</span></span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">datadir = /data</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（6）下载mysql5.6的安装包，并解压到 <code>/usr/local/</code> 目录下，创建软连接（便于管理mysql）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost install]# wget wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">校验下载的数据库压缩包MD5值，和官网进行比较，辨别是否被篡改过</span></span><br><span class=\"line\">[root@localhost install]# md5sum mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost install]# tar -zxvf mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz -C /usr/local/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost local]# cd /usr/local/</span><br><span class=\"line\">[root@localhost local]# ln -s mysql-5.6.51-linux-glibc2.12-x86_64/ mysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（7）设置目录权限</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost local]# chown -R mysql.mysql /data/</span><br><span class=\"line\">[root@localhost local]# chmod 750 /data/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（8）初始化mysql</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost local]# cd /usr/local/mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql初始化数据库的语句，5.6 和 5.7 是不一样的，需要注意</span></span><br><span class=\"line\">[root@localhost mysql]# scripts/mysql_install_db --user=mysql</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql]# bin/mysqld_safe --user=mysql &amp;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝启动脚本（服务）到指定位置，便于管理、使用</span></span><br><span class=\"line\">[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysql.server</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL-5-7-安装过程\"><a href=\"#MySQL-5-7-安装过程\" class=\"headerlink\" title=\"MySQL 5.7 安装过程\"></a>MySQL 5.7 安装过程</h2><ul>\n<li>官网MySQL 5.7安装参考手册：<a class=\"link\"   href=\"https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html\" >MySQL 5.7 Reference Manual-Installing MySQL on Unix/Linux Using Generic Binaries<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<ul>\n<li>（1）卸载操作系统自带的 mariadb/mysql 数据库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -qa | grep mariadb | xargs yum remove -y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（2）创建数据目录</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mkdir -p /install /backup /data</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（3）创建mysql用户和用户组</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd mysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（4）下载安装过程中可能需要的依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum install -y libaio autoconf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（5）新建/编辑 <code>/etc/my.cnf</code> 文件（需要先配置好这个文件，否则，安装后启动报错）</li>\n</ul>\n<p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有客户端登录进去后可以配置的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql这个命令登录进去后配置的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql服务器启动时候的参数</span></span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">datadir = /data</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（6）上传mysql5.7的安装包，并解压到 <code>/usr/local/</code> 目录下，创建软连接（便于管理mysql）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost install]# tar -zxvf mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">校验下载的数据库压缩包MD5值，和官网进行比较，辨别是否被篡改过</span></span><br><span class=\"line\">[root@localhost install]# md5sum mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost local]# cd /usr/local/</span><br><span class=\"line\">[root@localhost local]# ln -s mysql-5.7.39-linux-glibc2.12-x86_64/ mysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（7）设置目录权限</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost local]# chown -R mysql.mysql /data/</span><br><span class=\"line\">[root@localhost local]# chmod 750 /data/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（8）初始化mysql</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost local]# cd /usr/local/mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql初始化数据库的语句，5.6 和 5.7 是不一样的，需要注意</span></span><br><span class=\"line\">[root@localhost mysql]# bin/mysqld --initialize --user=mysql</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql]# bin/mysqld_safe --user=mysql &amp;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝启动脚本（服务）到指定位置，便于管理、使用</span></span><br><span class=\"line\">[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysql.server</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL安装成功后进行基础配置\"><a href=\"#MySQL安装成功后进行基础配置\" class=\"headerlink\" title=\"MySQL安装成功后进行基础配置\"></a>MySQL安装成功后进行基础配置</h2><ul>\n<li>（1）设置MySQL开机自启动</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把 mysql 的服务加入开机自启动项目</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chkconfig --add mysql.server</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chkconfig --list</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（2）配置MySQL环境变量</li>\n</ul>\n<p><code>vim /etc/profile</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/mysql/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p><code>source /etc/profile</code></p>\n<ul>\n<li>（3）添加日志文件配置</li>\n</ul>\n<p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log_error = error.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（4）修改初始密码</li>\n</ul>\n<blockquote>\n<p>5.7</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set password=&#x27;root&#x27;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>5.6</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set password=password(&quot;root&quot;);</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL的其它配置\"><a href=\"#MySQL的其它配置\" class=\"headerlink\" title=\"MySQL的其它配置\"></a>MySQL的其它配置</h2><h3 id=\"免密登录\"><a href=\"#免密登录\" class=\"headerlink\" title=\"免密登录\"></a>免密登录</h3><p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">#  mysql这个命令每次启动的时候，会去读配置文件，读到[client]标签，会自动把用户名和密码添加到后面。所以输入 mysql 后回车便可直接登录</span><br><span class=\"line\">user = root</span><br><span class=\"line\">password = root</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"定制MySQL终端提示符\"><a href=\"#定制MySQL终端提示符\" class=\"headerlink\" title=\"定制MySQL终端提示符\"></a>定制MySQL终端提示符</h3><p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">prompt = (\\u@\\h) [\\d]&gt;\\_</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"允许MySQL远程登录\"><a href=\"#允许MySQL远程登录\" class=\"headerlink\" title=\"允许MySQL远程登录\"></a>允许MySQL远程登录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(root@localhost) [(none)]&gt; grant all on *.* to root@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [(none)]&gt; flush privileges;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL-5-6与5-7-安装上的差异\"><a href=\"#MySQL-5-6与5-7-安装上的差异\" class=\"headerlink\" title=\"MySQL 5.6与5.7 安装上的差异\"></a>MySQL 5.6与5.7 安装上的差异</h2><ul>\n<li><p>（1）5.6 安装完没有密码，而5.7初始化完成会有密码</p>\n<blockquote>\n<p>如果希望MySQL5.7安装初始化的时候表现跟MySQL5.6一样-没有密码，则可以在初始化数据库的语句中    <code>bin/mysqld --initialize --user=mysql</code>，把    <code>--initialize</code>    替换成    <code>--initialize-insecure</code>。（可以通过     <code>mysqld --verbose --help | less    </code>查看到两个参数的说明）</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>（2）初始化命令不一样<ul>\n<li>5.6：<code>scripts/mysql_install_db --user=mysql</code></li>\n<li>5.7：<code>bin/mysqld --initialize --user=mysql</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>（3）设置密码的方式不一样<ul>\n<li>5.6：<code>set password = password(&quot;mysql&quot;);</code></li>\n<li>5.7：<code>set password=&#39;mysql&#39;;</code></li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"查看MySQL-安装后的默认参数\"><a href=\"#查看MySQL-安装后的默认参数\" class=\"headerlink\" title=\"查看MySQL 安装后的默认参数\"></a>查看MySQL 安装后的默认参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --verbose --help</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"作业\"><a href=\"#作业\" class=\"headerlink\" title=\"作业\"></a>作业</h2><blockquote>\n<p>熟练安装 mysql 5.6、5.7</p>\n<p>mysql 5.6、5.7 自动安装的脚本。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"MySQL-5-6-升级到-5-7\"><a href=\"#MySQL-5-6-升级到-5-7\" class=\"headerlink\" title=\"MySQL 5.6 升级到 5.7\"></a>MySQL 5.6 升级到 5.7</h2><h1 id=\"第03天-MySQL客户端连接与权限管理\"><a href=\"#第03天-MySQL客户端连接与权限管理\" class=\"headerlink\" title=\"第03天_MySQL客户端连接与权限管理\"></a>第03天_MySQL客户端连接与权限管理</h1><h2 id=\"mysql最优配置文件参考\"><a href=\"#mysql最优配置文件参考\" class=\"headerlink\" title=\"mysql最优配置文件参考\"></a>mysql最优配置文件参考</h2><p><a class=\"link\"   href=\"https://github.com/jdaaaaaavid/mysql_best_configuration/blob/master/my.cnf\" > mysql_best_configuration<i class=\"fas fa-external-link-alt\"></i></a></p>\n<br>\n\n<br>\n\n<h2 id=\"MySQL可以有多个配置文件\"><a href=\"#MySQL可以有多个配置文件\" class=\"headerlink\" title=\"MySQL可以有多个配置文件\"></a>MySQL可以有多个配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql 在启动的时候会依次去读取下面的文件</span><br><span class=\"line\">[root@localhost ~]# mysql --verbose --help | grep my.cnf</span><br><span class=\"line\">                      order of preference, my.cnf, $MYSQL_TCP_PORT,</span><br><span class=\"line\">/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>遵循参数替换原则。后面的参数会替换前面的参数</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"MySQL的配置文件参数\"><a href=\"#MySQL的配置文件参数\" class=\"headerlink\" title=\"MySQL的配置文件参数\"></a>MySQL的配置文件参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\"># 所有客户端登录进去后可以配置的参数</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\"># mysql这个命令登录进去后配置的参数</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"># mysql服务器启动时候的参数</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">datadir = /data</span><br><span class=\"line\">log_error = error.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看mysql的参数，当前配置的值</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认省略了session</span><br><span class=\"line\">show variables;</span><br><span class=\"line\"></span><br><span class=\"line\">show session variables;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &#x27;log_error&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">show global variables like &#x27;%log%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对已经创建的连接不生效，只对新创建的连接生效</span><br><span class=\"line\">set global long_query_time=5;</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SHOW [GLOBAL |SESSION] VARIABLES [LIKE  ‘pattern’ |WHERE expr]</td>\n<td align=\"center\">查看变量，可根据like进行过滤</td>\n</tr>\n<tr>\n<td align=\"center\">SET [GLOBAL|SESSION] VARIABLES = xxx</td>\n<td align=\"center\">修改global或session的参数</td>\n</tr>\n</tbody></table>\n<h2 id=\"MySQL的参数分类\"><a href=\"#MySQL的参数分类\" class=\"headerlink\" title=\"MySQL的参数分类\"></a>MySQL的参数分类</h2><ul>\n<li>从作用域上可分为global和session<ul>\n<li>seesion：只对当前这一个连接有效</li>\n<li>global：全局有效</li>\n</ul>\n</li>\n<li>从类型上又可分为可修改和只读参数<ul>\n<li>用户可在线修改非只读参数</li>\n<li>只读参数只能通过配置文件修改并重启</li>\n<li>所有参数的修改都不持久化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"当前会话下，查看其它连接的-variables\"><a href=\"#当前会话下，查看其它连接的-variables\" class=\"headerlink\" title=\"当前会话下，查看其它连接的 variables\"></a>当前会话下，查看其它连接的 variables</h3><ul>\n<li>mysql5.7开始，多了一个数据库    <code>performance_schema</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use performance_schema;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">show tables like &#x27;%variables%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [performance_schema]&gt; select * from variables_by_thread where variable_name = &#x27;long_query_time&#x27;;</span><br><span class=\"line\">+-----------+-----------------+----------------+</span><br><span class=\"line\">| THREAD_ID | VARIABLE_NAME   | VARIABLE_VALUE |</span><br><span class=\"line\">+-----------+-----------------+----------------+</span><br><span class=\"line\">|        31 | long_query_time | 10.000000      |</span><br><span class=\"line\">|        33 | long_query_time | 10.000000      |</span><br><span class=\"line\">+-----------+-----------------+----------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前连接到mysql的线程列表，以及它在做什么事情；</span><br><span class=\"line\">(root@localhost) [performance_schema]&gt; show processlist;</span><br><span class=\"line\">+----+------+-----------+--------------------+---------+------+----------+------------------+</span><br><span class=\"line\">| Id | User | Host      | db                 | Command | Time | State    | Info             |</span><br><span class=\"line\">+----+------+-----------+--------------------+---------+------+----------+------------------+</span><br><span class=\"line\">|  6 | root | localhost | performance_schema | Sleep   |  766 |          | NULL             |</span><br><span class=\"line\">|  8 | root | localhost | performance_schema | Query   |    0 | starting | show processlist |</span><br><span class=\"line\">+----+------+-----------+--------------------+---------+------+----------+------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前连接的id，这个id在processlist 里面</span><br><span class=\"line\">(root@localhost) [performance_schema]&gt; select connection_id();</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| connection_id() |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">|               8 |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 这张表里 有 thread_id 和 processlist_id，通过这张表，做关联查询，则可以查询其它会话的变量值</span><br><span class=\"line\">(root@localhost) [performance_schema]&gt; select * from threads limit 1\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">          THREAD_ID: 1</span><br><span class=\"line\">               NAME: thread/sql/main</span><br><span class=\"line\">               TYPE: BACKGROUND</span><br><span class=\"line\">     PROCESSLIST_ID: NULL</span><br><span class=\"line\">   PROCESSLIST_USER: NULL</span><br><span class=\"line\">   PROCESSLIST_HOST: NULL</span><br><span class=\"line\">     PROCESSLIST_DB: NULL</span><br><span class=\"line\">PROCESSLIST_COMMAND: NULL</span><br><span class=\"line\">   PROCESSLIST_TIME: 1967</span><br><span class=\"line\">  PROCESSLIST_STATE: NULL</span><br><span class=\"line\">   PROCESSLIST_INFO: NULL</span><br><span class=\"line\">   PARENT_THREAD_ID: NULL</span><br><span class=\"line\">               ROLE: NULL</span><br><span class=\"line\">       INSTRUMENTED: YES</span><br><span class=\"line\">            HISTORY: YES</span><br><span class=\"line\">    CONNECTION_TYPE: NULL</span><br><span class=\"line\">       THREAD_OS_ID: 3562</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><ul>\n<li>mysql的权限认证分成：用户名、密码、IP</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1652975371(1).66aoeywjsa80.webp\" />\n\n<ul>\n<li><p>mysql的权限分成：全局（所有库）、指定库、指定表、指定列</p>\n</li>\n<li><p>常用的权限</p>\n<ul>\n<li>SQL语句：SELECT、INSERT、UPDATE、DELETE、INDEX</li>\n<li>存储过程：CREATE ROUTINE、ALTER ROUTINE、EXECUTE、TRIGGER</li>\n<li>管理权限：SUPER、RELOAD、SHOW DATABASE、SHUTDOWN、GRANT OPTION</li>\n</ul>\n</li>\n<li><p>常用权限、用户相关sql语句</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user &#x27;sao&#x27;@&#x27;192.168.%.%&#x27; identified by &#x27;sao&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">drop user &#x27;sao&#x27;@&#x27;192.168.%.%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">#显示当前用户的权限 这三个是同一个意思</span><br><span class=\"line\">show grants;</span><br><span class=\"line\">show grants for current_user;</span><br><span class=\"line\">show grants for current_user();</span><br><span class=\"line\"></span><br><span class=\"line\">grant select,update,delete,insert on mysql.* to &#x27;sao&#x27;@&#x27;192.168.%.%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">show grants for &#x27;sao&#x27;@&#x27;192.168.%.%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 不推荐 使用grant 同时创建权限和用户。</span><br><span class=\"line\">(root@localhost) [(none)]&gt; grant select,update,delete,insert on mysql.* to &#x27;sa&#x27;@&#x27;192.168.%.%&#x27; identified by &#x27;sa&#x27;;</span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [(none)]&gt; show warnings;</span><br><span class=\"line\">+---------+------+------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Level   | Code | Message                                                                                                                            |</span><br><span class=\"line\">+---------+------+------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Warning | 1287 | Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement. |</span><br><span class=\"line\">+---------+------+------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;sao&#x27;@&#x27;192.168.%.%&#x27; identified by &#x27;saosao&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">revoke select on mysql.* from &#x27;sao&#x27;@&#x27;192.168.%.%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant create,index on mysql.* to &#x27;sao&#x27;@&#x27;192.168.%.%&#x27; with grant option;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql 下的 mysql库中的权限表</span><br><span class=\"line\"># user表中存放全局权限</span><br><span class=\"line\">user</span><br><span class=\"line\">db</span><br><span class=\"line\">tables_priv </span><br><span class=\"line\">columns_priv</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\"><strong>注意：不要通过修改权限表来更改用户权限</strong></font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql 5.7 密码加密使用的是 password()这个函数</span><br><span class=\"line\">select password(&#x27;456&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h2><ul>\n<li>MAX_QUERIES_PER_HOUR <em>count</em></li>\n<li>MAX_UPDATES_PER_HOUR <em>count</em></li>\n<li>MAX_CONNECTIONS_PER_HOUR <em>count</em></li>\n<li>MAX_USER_CONNECTIONS <em>count</em></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改用户的最大连接数</span><br><span class=\"line\">alter user &#x27;sao&#x27;@&#x27;192.168.%.%&#x27; with MAX_USER_CONNECTIONS 2;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"第04天-SSL加密连接与密码插件\"><a href=\"#第04天-SSL加密连接与密码插件\" class=\"headerlink\" title=\"第04天_SSL加密连接与密码插件\"></a>第04天_SSL加密连接与密码插件</h1><h2 id=\"连接MySQL实例\"><a href=\"#连接MySQL实例\" class=\"headerlink\" title=\"连接MySQL实例\"></a>连接MySQL实例</h2><h3 id=\"通过本地socket进行连接\"><a href=\"#通过本地socket进行连接\" class=\"headerlink\" title=\"通过本地socket进行连接\"></a>通过本地<em>socket</em>进行连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql服务器本地 ，默认使用socket方式连接。 默认省略 -S/tmp/mysql.socket</span><br><span class=\"line\">mysql -uroot -p -S/tmp/mysql.socket</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(root@localhost) [(none)]&gt; show variables like &#x27;%socket%&#x27;</span><br><span class=\"line\">    -&gt; ;</span><br><span class=\"line\">+-----------------------------------------+-----------------+</span><br><span class=\"line\">| Variable_name                           | Value           |</span><br><span class=\"line\">+-----------------------------------------+-----------------+</span><br><span class=\"line\">| performance_schema_max_socket_classes   | 10              |</span><br><span class=\"line\">| performance_schema_max_socket_instances | -1              |</span><br><span class=\"line\">| socket                                  | /tmp/mysql.sock |</span><br><span class=\"line\">+-----------------------------------------+-----------------+</span><br><span class=\"line\">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看当前连接的状态</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [mysql]&gt; \\s</span><br><span class=\"line\">--------------</span><br><span class=\"line\">mysql  Ver 14.14 Distrib 5.7.37, for linux-glibc2.12 (x86_64) using  EditLine wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">Connection id:          2</span><br><span class=\"line\">Current database:       mysql</span><br><span class=\"line\">Current user:           root@localhost</span><br><span class=\"line\">SSL:                    Not in use</span><br><span class=\"line\">Current pager:          stdout</span><br><span class=\"line\">Using outfile:          &#x27;&#x27;</span><br><span class=\"line\">Using delimiter:        ;</span><br><span class=\"line\">Server version:         5.7.37 MySQL Community Server (GPL)</span><br><span class=\"line\">Protocol version:       10</span><br><span class=\"line\">Connection:             Localhost via UNIX socket</span><br><span class=\"line\">Server characterset:    latin1</span><br><span class=\"line\">Db     characterset:    latin1</span><br><span class=\"line\">Client characterset:    utf8</span><br><span class=\"line\">Conn.  characterset:    utf8</span><br><span class=\"line\">UNIX socket:            /tmp/mysql.sock</span><br><span class=\"line\">Uptime:                 35 sec</span><br><span class=\"line\"></span><br><span class=\"line\">Threads: 1  Questions: 41  Slow queries: 0  Opens: 136  Flush tables: 1  Open tables: 129  Queries per second avg: 1.171</span><br><span class=\"line\">--------------</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [mysql]&gt; status;</span><br><span class=\"line\">--------------</span><br><span class=\"line\">mysql  Ver 14.14 Distrib 5.7.37, for linux-glibc2.12 (x86_64) using  EditLine wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">Connection id:          2</span><br><span class=\"line\">Current database:       mysql</span><br><span class=\"line\">Current user:           root@localhost</span><br><span class=\"line\">SSL:                    Not in use</span><br><span class=\"line\">Current pager:          stdout</span><br><span class=\"line\">Using outfile:          &#x27;&#x27;</span><br><span class=\"line\">Using delimiter:        ;</span><br><span class=\"line\">Server version:         5.7.37 MySQL Community Server (GPL)</span><br><span class=\"line\">Protocol version:       10</span><br><span class=\"line\">Connection:             Localhost via UNIX socket</span><br><span class=\"line\">Server characterset:    latin1</span><br><span class=\"line\">Db     characterset:    latin1</span><br><span class=\"line\">Client characterset:    utf8</span><br><span class=\"line\">Conn.  characterset:    utf8</span><br><span class=\"line\">UNIX socket:            /tmp/mysql.sock</span><br><span class=\"line\">Uptime:                 39 sec</span><br><span class=\"line\"></span><br><span class=\"line\">Threads: 1  Questions: 44  Slow queries: 0  Opens: 136  Flush tables: 1  Open tables: 129  Queries per second avg: 1.128</span><br><span class=\"line\">--------------</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [mysql]&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n<h3 id=\"通过TCP-IP协议远程连接\"><a href=\"#通过TCP-IP协议远程连接\" class=\"headerlink\" title=\"通过TCP/IP协议远程连接\"></a>通过TCP/IP协议远程连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -h192.168.163.200 -P3306 -p</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h3><ul>\n<li>mysql 5.7开始 客户端默认使用ssl通信<ul>\n<li>只有通过 tcp/ip 的连接的方式 ，ssl才生效，socket方式不会生效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启ssl后，默认使用none</span><br><span class=\"line\">mysql -uroot -h192.168.163.200 -P3306 -p --ssl-mode=none</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -uroot -h192.168.163.200 -P3306 -p --ssl-mode=DISABLED</span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;any&#x27;@&#x27;%&#x27; require ssl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ssl 加密 对性能有影响（影响较小）</li>\n<li>ssl的另一种方式 x509<ul>\n<li>要求：用户名 + 密码 + 启用ssl+公钥 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"作业-1\"><a href=\"#作业-1\" class=\"headerlink\" title=\"作业\"></a>作业</h2><blockquote>\n<p>了解5.6如何使用ssl</p>\n</blockquote>\n<h2 id=\"密码插件\"><a href=\"#密码插件\" class=\"headerlink\" title=\"密码插件\"></a>密码插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show plugins;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mysql 5.6 开始就有了密码插件 <code>validate_password</code></li>\n</ul>\n<h3 id=\"validate-password\"><a href=\"#validate-password\" class=\"headerlink\" title=\"validate_password\"></a>validate_password</h3><ul>\n<li><code>validate_password</code>插件安装方式有以下两种</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># （1）在my.cnf文件中添加如下配置，再重启mysql</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">plugin-load-add=validate_password.so</span><br><span class=\"line\"></span><br><span class=\"line\"># （2）执行如下命令 </span><br><span class=\"line\">INSTALL PLUGIN validate_password SONAME &#x27;validate_password.so&#x27;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装完成插件后，对密码就有要求了</span><br><span class=\"line\">(root@localhost) [mysql]&gt; alter user &#x27;andy&#x27;@&#x27;%&#x27; identified by &#x27;andy&#x27;;</span><br><span class=\"line\">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [(none)]&gt; show variables like &#x27;%validate%&#x27;;</span><br><span class=\"line\">+--------------------------------------+--------+</span><br><span class=\"line\">| Variable_name                        | Value  |</span><br><span class=\"line\">+--------------------------------------+--------+</span><br><span class=\"line\">| query_cache_wlock_invalidate         | OFF    |</span><br><span class=\"line\">| validate_password_check_user_name    | OFF    |</span><br><span class=\"line\">| validate_password_dictionary_file    |        |</span><br><span class=\"line\">| validate_password_length             | 8      |</span><br><span class=\"line\">| validate_password_mixed_case_count   | 1      |</span><br><span class=\"line\">| validate_password_number_count       | 1      |</span><br><span class=\"line\">| validate_password_policy             | MEDIUM |</span><br><span class=\"line\">| validate_password_special_char_count | 1      |</span><br><span class=\"line\">+--------------------------------------+--------+</span><br><span class=\"line\">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>建议生产环境使用该插件<ul>\n<li>如果使用该插件，则需要在配置文件中做如下配置 </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认mysql启动就使用该插件</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">plugin-load = validate_password.so</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">Policy</th>\n<th align=\"left\">Tests Performed</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>0</code> or <code>LOW</code></td>\n<td align=\"left\">Length</td>\n</tr>\n<tr>\n<td align=\"left\"><code>1</code> or <code>MEDIUM</code></td>\n<td align=\"left\">Length; numeric, lowercase/uppercase, and special characters</td>\n</tr>\n<tr>\n<td align=\"left\"><code>2</code> or <code>STRONG</code></td>\n<td align=\"left\">Length; numeric, lowercase/uppercase, and special characters; dictionary file</td>\n</tr>\n</tbody></table>\n<ul>\n<li>Strong中有一个 dictionary file 。该dictionary file 表示，设置的密码中不能包含 dictionary file 文件中的字符串（即dictionary file 中的字符串不能作为密码的一部分）。如果要启动这个策略，那么  <code>validate_password_policy </code> 要设置为 <code>Strong</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(root@localhost) [(none)]&gt; set global validate_password_dictionary_file = &#x27;/mysql_data/dic.file&#x27;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [(none)]&gt; exit</span><br><span class=\"line\">Bye</span><br><span class=\"line\">[root@localhost mysql_data]# vim /mysql_data/dic.file</span><br><span class=\"line\">[root@localhost mysql_data]# ll /mysql_data/</span><br><span class=\"line\">总用量 123008</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql       56 5月  19 00:45 auto.cnf</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql        5 5月  20 00:06 bogon.pid</span><br><span class=\"line\">-rw-------. 1 mysql mysql     1680 5月  19 00:45 ca-key.pem</span><br><span class=\"line\">-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 ca.pem</span><br><span class=\"line\">-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 client-cert.pem</span><br><span class=\"line\">-rw-------. 1 mysql mysql     1676 5月  19 00:45 client-key.pem</span><br><span class=\"line\">-rw-r--r--. 1 root  root        13 5月  21 21:51 dic.file</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql    47519 5月  21 21:50 error.log</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql      333 5月  21 21:40 ib_buffer_pool</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql 12582912 5月  21 21:40 ibdata1</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql 50331648 5月  21 21:40 ib_logfile0</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql 50331648 5月  19 00:45 ib_logfile1</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql 12582912 5月  21 21:40 ibtmp1</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql        5 5月  21 21:40 localhost.pid</span><br><span class=\"line\">drwxr-x---. 2 mysql mysql     4096 5月  19 00:45 mysql</span><br><span class=\"line\">drwxr-x---. 2 mysql mysql     8192 5月  19 00:45 performance_schema</span><br><span class=\"line\">-rw-------. 1 mysql mysql     1680 5月  19 00:45 private_key.pem</span><br><span class=\"line\">-rw-r--r--. 1 mysql mysql      452 5月  19 00:45 public_key.pem</span><br><span class=\"line\">-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 server-cert.pem</span><br><span class=\"line\">-rw-------. 1 mysql mysql     1680 5月  19 00:45 server-key.pem</span><br><span class=\"line\">drwxr-x---. 2 mysql mysql     8192 5月  19 00:45 sys</span><br><span class=\"line\">[root@localhost mysql_data]# chown -R mysql:mysql dic.file</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>validate_password_check_user_name </code> 这个开启后，表示密码中不能使用用户名，逆序也不行</li>\n<li>作为了解。可以看看大厂实际生产环境，如何使用密码的。</li>\n</ul>\n<h2 id=\"多实例安装\"><a href=\"#多实例安装\" class=\"headerlink\" title=\"多实例安装\"></a>多实例安装</h2><ul>\n<li>一台服务器上安装多个实例，充分利用硬件资源</li>\n<li>mysql 原生就支持多实例安装</li>\n<li>通过 <code>mysqld_multi</code> 实现</li>\n</ul>\n<h3 id=\"多实例安装操作流程\"><a href=\"#多实例安装操作流程\" class=\"headerlink\" title=\"多实例安装操作流程\"></a>多实例安装操作流程</h3><ul>\n<li>在配置文件 <code>my.cnf</code> 中新增加如下内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld1]</span><br><span class=\"line\">port = 3307</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">datadir = /mysql_data1</span><br><span class=\"line\">socket = /tmp/mysql1.sock</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>执行 <code>mysqld --initialize --datadir=/mysql_data1</code> 会发现生成了 <code>/mysql_data1/</code>目录，初始密码在 <code>error.log</code>中</p>\n</li>\n<li><p>在配置文件 <code>my.cnf</code> 中新增 <code>mysqld_multi</code>，并增加如下内容</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld_multi]</span><br><span class=\"line\">mysqld = /usr/local/mysql/bin/mysqld_safe</span><br><span class=\"line\">mysqladmin = /usr/local/mysql/bin/mysqladmin</span><br><span class=\"line\">log = /usr/local/mysql/mysqld_multi.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行 <code> mysqld_multi report</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]# mysqld_multi report</span><br><span class=\"line\">Reporting MySQL servers</span><br><span class=\"line\">MySQL server from group: mysqld1 is not running</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看运行状态与启停、登录</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]# mysqld_multi start 1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql]# mysqld_multi report</span><br><span class=\"line\">Reporting MySQL servers</span><br><span class=\"line\">MySQL server from group: mysqld1 is running</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql_data1]# mysql -uroot -p&#x27;huah5jqpdJ?+&#x27; -S/tmp/mysql1.sock</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 可以查看到3307 端口已经被占用</span><br><span class=\"line\">[root@localhost mysql_data1]# netstat -ntl</span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN</span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN</span><br><span class=\"line\">tcp6       0      0 :::3307                 :::*                    LISTEN</span><br><span class=\"line\">[root@localhost mysql_data1]#</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意：<ul>\n<li>最开始安装的 mysql 实例 也可以使用 mysql_multi start 进行启动，配置好便可</li>\n<li>默认 error.log 在各自的mysql data 目录中，所以不需要配置</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h1 id=\"第05天-MySQL启动与关闭-amp-多实例安装不同版本数据库\"><a href=\"#第05天-MySQL启动与关闭-amp-多实例安装不同版本数据库\" class=\"headerlink\" title=\"第05天_MySQL启动与关闭 &amp; 多实例安装不同版本数据库\"></a>第05天_MySQL启动与关闭 &amp; 多实例安装不同版本数据库</h1><h2 id=\"MySQL-的启动与关闭\"><a href=\"#MySQL-的启动与关闭\" class=\"headerlink\" title=\"MySQL 的启动与关闭\"></a>MySQL 的启动与关闭</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysql.server start</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost bin]# mysqld --defaults-file=/etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"># 守护进程方式启动mysql，当mysql进程挂了以后，会自动把mysql进程拉起来</span><br><span class=\"line\">[root@localhost bin]# mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 需要密码</span><br><span class=\"line\">(root@localhost) [(none)]&gt; shutdown;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"># 不提供用户名和密码</span><br><span class=\"line\">/etc/init.d/mysql.server stop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 需要密码</span><br><span class=\"line\">[root@localhost bin]# mysqladmin -uroot -proot shutdown</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为什么mysql不需要密码就可以关闭呢？</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 是安全关闭的</span><br><span class=\"line\">/etc/init.d/mysql.server stop</span><br><span class=\"line\"></span><br><span class=\"line\"># 是一个shell执行脚本</span><br><span class=\"line\">[root@localhost bin]# file /etc/init.d/mysql.server</span><br><span class=\"line\">/etc/init.d/mysql.server: POSIX shell script, ASCII text executable</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql利用了linux中的信号机制 ,查看 /etc/init.d/mysql.server 脚本，可以看到 kill -0 [进程号]</span><br><span class=\"line\"></span><br><span class=\"line\">     if (kill -0 $mysqld_pid 2&gt;/dev/null)</span><br><span class=\"line\">      then</span><br><span class=\"line\">        echo $echo_n &quot;Shutting down MySQL&quot;</span><br><span class=\"line\">        kill $mysqld_pid</span><br><span class=\"line\"></span><br><span class=\"line\"># kill -0 [进程号] 表示 发送一个信号给这个进程。 然后 kill 掉这个进程，所以其是安全关闭的</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[mysqld_multi]</span><br><span class=\"line\"># 使用哪个程序来启动mysql</span><br><span class=\"line\">mysqld = /usr/local/mysql/bin/mysqld_safe</span><br><span class=\"line\"># 通过mysqladmin 这个命令来关闭数据库</span><br><span class=\"line\">mysqladmin = /usr/local/mysql/bin/mysqladmin</span><br><span class=\"line\">log = /usr/local/mysql/mysqld_multi.log</span><br><span class=\"line\">user=root</span><br><span class=\"line\">pass=Root1_2022</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"MySQL-忘记密码了怎么办\"><a href=\"#MySQL-忘记密码了怎么办\" class=\"headerlink\" title=\"MySQL 忘记密码了怎么办\"></a>MySQL 忘记密码了怎么办</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑 mysql配置文件 my.cnf，添加如下内容</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">skip-grant-tables</span><br><span class=\"line\"></span><br><span class=\"line\"># 然后重启数据库</span><br><span class=\"line\"></span><br><span class=\"line\"># 此时登录mysql不需要密码,use mysql 然后修改user表的密码字段即可</span><br><span class=\"line\">update mysql set authentication_string = password(&#x27;root&#x27;) where user=&#x27;root&#x27; and host = &#x27;localhost&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [mysql]&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"># 再去掉参数，重启数据库即可</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySQL5-7-的新参数\"><a href=\"#MySQL5-7-的新参数\" class=\"headerlink\" title=\"MySQL5.7 的新参数\"></a>MySQL5.7 的新参数</h2><ul>\n<li><code>default_password_lifetime</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;jeffrey&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">default_password_lifetime=180</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">default_password_lifetime=0</span><br><span class=\"line\"></span><br><span class=\"line\">SET GLOBAL default_password_lifetime = 180;</span><br><span class=\"line\">SET GLOBAL default_password_lifetime = 0;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h1 id=\"第07天-数据类型、常用函数、编码\"><a href=\"#第07天-数据类型、常用函数、编码\" class=\"headerlink\" title=\"第07天_数据类型、常用函数、编码\"></a>第07天_数据类型、常用函数、编码</h1><h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>第一天的内容，最后还需要认真学习一遍，做好笔记</li>\n<li>权限管理这块，还需要实践，继续熟悉</li>\n</ol>\n</blockquote>\n<br>\n\n<img src=\"\" width=\"80%\"/>\n\n<br>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><blockquote>\n<p>熟悉mysql官网</p>\n<p>hexo new post “MySQL - 简介、版本特性与选择、安装与初始化配置、升级、启停”</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第01天-Mysql简介与前景\"><a href=\"#第01天-Mysql简介与前景\" class=\"headerlink\" title=\"第01天_Mysql简介与前景\"></a>第01天_Mysql简介与前景</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"第02天-MySQL安装与基本命令\"><a href=\"#第02天-MySQL安装与基本命令\" class=\"headerlink\" title=\"第02天_MySQL安装与基本命令\"></a>第02天_MySQL安装与基本命令</h1><h2 id=\"MySQL安装步骤\"><a href=\"#MySQL安装步骤\" class=\"headerlink\" title=\"MySQL安装步骤\"></a>MySQL安装步骤</h2><ul>\n<li>卸载操作系统自带的mariadb，下载mysql安装的的依赖</li>\n<li>创建mysql用户组和用户</li>\n<li>配置<code>/etc/my.cnf</code></li>\n<li>官网下载mysql数据库</li>\n<li>创建目录，设置权限。初始化mysql元数据库</li>\n<li>将mysql添加到启动项</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"MySQL-5-6-安装过程\"><a href=\"#MySQL-5-6-安装过程\" class=\"headerlink\" title=\"MySQL 5.6 安装过程\"></a>MySQL 5.6 安装过程</h2><ul>\n<li>官网MySQL 5.6安装参考手册：<a class=\"link\"   href=\"https://dev.mysql.com/doc/refman/5.6/en/binary-installation.html\" >MySQL 5.6 Reference Manual-Installing MySQL on Unix/Linux Using Generic Binaries<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<ul>\n<li>（1）卸载操作系统自带的 mariadb/mysql 数据库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -qa | grep mariadb | xargs yum remove -y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（2）创建数据目录</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mkdir -p /install /backup /data</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（3）创建mysql用户和用户组</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd mysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（4）下载安装过程中可能需要的依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum install -y libaio autoconf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（5）新建/编辑 <code>/etc/my.cnf</code> 文件（需要先配置好这个文件，否则，安装后启动报错）</li>\n</ul>\n<p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有客户端登录进去后可以配置的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql这个命名登录进去后配置的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql服务器启动时候的参数</span></span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">datadir = /data</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（6）下载mysql5.6的安装包，并解压到 <code>/usr/local/</code> 目录下，创建软连接（便于管理mysql）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost install]# wget wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">校验下载的数据库压缩包MD5值，和官网进行比较，辨别是否被篡改过</span></span><br><span class=\"line\">[root@localhost install]# md5sum mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost install]# tar -zxvf mysql-5.6.51-linux-glibc2.12-x86_64.tar.gz -C /usr/local/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost local]# cd /usr/local/</span><br><span class=\"line\">[root@localhost local]# ln -s mysql-5.6.51-linux-glibc2.12-x86_64/ mysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（7）设置目录权限</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost local]# chown -R mysql.mysql /data/</span><br><span class=\"line\">[root@localhost local]# chmod 750 /data/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（8）初始化mysql</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost local]# cd /usr/local/mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql初始化数据库的语句，5.6 和 5.7 是不一样的，需要注意</span></span><br><span class=\"line\">[root@localhost mysql]# scripts/mysql_install_db --user=mysql</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql]# bin/mysqld_safe --user=mysql &amp;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝启动脚本（服务）到指定位置，便于管理、使用</span></span><br><span class=\"line\">[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysql.server</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL-5-7-安装过程\"><a href=\"#MySQL-5-7-安装过程\" class=\"headerlink\" title=\"MySQL 5.7 安装过程\"></a>MySQL 5.7 安装过程</h2><ul>\n<li>官网MySQL 5.7安装参考手册：<a class=\"link\"   href=\"https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html\" >MySQL 5.7 Reference Manual-Installing MySQL on Unix/Linux Using Generic Binaries<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<ul>\n<li>（1）卸载操作系统自带的 mariadb/mysql 数据库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -qa | grep mariadb | xargs yum remove -y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（2）创建数据目录</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mkdir -p /install /backup /data</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（3）创建mysql用户和用户组</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd mysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（4）下载安装过程中可能需要的依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum install -y libaio autoconf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（5）新建/编辑 <code>/etc/my.cnf</code> 文件（需要先配置好这个文件，否则，安装后启动报错）</li>\n</ul>\n<p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有客户端登录进去后可以配置的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql这个命令登录进去后配置的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql服务器启动时候的参数</span></span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">datadir = /data</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（6）上传mysql5.7的安装包，并解压到 <code>/usr/local/</code> 目录下，创建软连接（便于管理mysql）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost install]# tar -zxvf mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">校验下载的数据库压缩包MD5值，和官网进行比较，辨别是否被篡改过</span></span><br><span class=\"line\">[root@localhost install]# md5sum mysql-5.7.39-linux-glibc2.12-x86_64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost local]# cd /usr/local/</span><br><span class=\"line\">[root@localhost local]# ln -s mysql-5.7.39-linux-glibc2.12-x86_64/ mysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（7）设置目录权限</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost local]# chown -R mysql.mysql /data/</span><br><span class=\"line\">[root@localhost local]# chmod 750 /data/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（8）初始化mysql</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost local]# cd /usr/local/mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql初始化数据库的语句，5.6 和 5.7 是不一样的，需要注意</span></span><br><span class=\"line\">[root@localhost mysql]# bin/mysqld --initialize --user=mysql</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql]# bin/mysqld_safe --user=mysql &amp;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝启动脚本（服务）到指定位置，便于管理、使用</span></span><br><span class=\"line\">[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysql.server</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL安装成功后进行基础配置\"><a href=\"#MySQL安装成功后进行基础配置\" class=\"headerlink\" title=\"MySQL安装成功后进行基础配置\"></a>MySQL安装成功后进行基础配置</h2><ul>\n<li>（1）设置MySQL开机自启动</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把 mysql 的服务加入开机自启动项目</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chkconfig --add mysql.server</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chkconfig --list</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（2）配置MySQL环境变量</li>\n</ul>\n<p><code>vim /etc/profile</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/mysql/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p><code>source /etc/profile</code></p>\n<ul>\n<li>（3）添加日志文件配置</li>\n</ul>\n<p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log_error = error.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>（4）修改初始密码</li>\n</ul>\n<blockquote>\n<p>5.7</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set password=&#x27;root&#x27;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>5.6</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set password=password(&quot;root&quot;);</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL的其它配置\"><a href=\"#MySQL的其它配置\" class=\"headerlink\" title=\"MySQL的其它配置\"></a>MySQL的其它配置</h2><h3 id=\"免密登录\"><a href=\"#免密登录\" class=\"headerlink\" title=\"免密登录\"></a>免密登录</h3><p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">#  mysql这个命令每次启动的时候，会去读配置文件，读到[client]标签，会自动把用户名和密码添加到后面。所以输入 mysql 后回车便可直接登录</span><br><span class=\"line\">user = root</span><br><span class=\"line\">password = root</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"定制MySQL终端提示符\"><a href=\"#定制MySQL终端提示符\" class=\"headerlink\" title=\"定制MySQL终端提示符\"></a>定制MySQL终端提示符</h3><p><code>vim /etc/my.cnf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">prompt = (\\u@\\h) [\\d]&gt;\\_</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"允许MySQL远程登录\"><a href=\"#允许MySQL远程登录\" class=\"headerlink\" title=\"允许MySQL远程登录\"></a>允许MySQL远程登录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(root@localhost) [(none)]&gt; grant all on *.* to root@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [(none)]&gt; flush privileges;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"MySQL-5-6与5-7-安装上的差异\"><a href=\"#MySQL-5-6与5-7-安装上的差异\" class=\"headerlink\" title=\"MySQL 5.6与5.7 安装上的差异\"></a>MySQL 5.6与5.7 安装上的差异</h2><ul>\n<li><p>（1）5.6 安装完没有密码，而5.7初始化完成会有密码</p>\n<blockquote>\n<p>如果希望MySQL5.7安装初始化的时候表现跟MySQL5.6一样-没有密码，则可以在初始化数据库的语句中    <code>bin/mysqld --initialize --user=mysql</code>，把    <code>--initialize</code>    替换成    <code>--initialize-insecure</code>。（可以通过     <code>mysqld --verbose --help | less    </code>查看到两个参数的说明）</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>（2）初始化命令不一样<ul>\n<li>5.6：<code>scripts/mysql_install_db --user=mysql</code></li>\n<li>5.7：<code>bin/mysqld --initialize --user=mysql</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>（3）设置密码的方式不一样<ul>\n<li>5.6：<code>set password = password(&quot;mysql&quot;);</code></li>\n<li>5.7：<code>set password=&#39;mysql&#39;;</code></li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"查看MySQL-安装后的默认参数\"><a href=\"#查看MySQL-安装后的默认参数\" class=\"headerlink\" title=\"查看MySQL 安装后的默认参数\"></a>查看MySQL 安装后的默认参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --verbose --help</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"作业\"><a href=\"#作业\" class=\"headerlink\" title=\"作业\"></a>作业</h2><blockquote>\n<p>熟练安装 mysql 5.6、5.7</p>\n<p>mysql 5.6、5.7 自动安装的脚本。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"MySQL-5-6-升级到-5-7\"><a href=\"#MySQL-5-6-升级到-5-7\" class=\"headerlink\" title=\"MySQL 5.6 升级到 5.7\"></a>MySQL 5.6 升级到 5.7</h2><h1 id=\"第03天-MySQL客户端连接与权限管理\"><a href=\"#第03天-MySQL客户端连接与权限管理\" class=\"headerlink\" title=\"第03天_MySQL客户端连接与权限管理\"></a>第03天_MySQL客户端连接与权限管理</h1><h2 id=\"mysql最优配置文件参考\"><a href=\"#mysql最优配置文件参考\" class=\"headerlink\" title=\"mysql最优配置文件参考\"></a>mysql最优配置文件参考</h2><p><a class=\"link\"   href=\"https://github.com/jdaaaaaavid/mysql_best_configuration/blob/master/my.cnf\" > mysql_best_configuration<i class=\"fas fa-external-link-alt\"></i></a></p>\n<br>\n\n<br>\n\n<h2 id=\"MySQL可以有多个配置文件\"><a href=\"#MySQL可以有多个配置文件\" class=\"headerlink\" title=\"MySQL可以有多个配置文件\"></a>MySQL可以有多个配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql 在启动的时候会依次去读取下面的文件</span><br><span class=\"line\">[root@localhost ~]# mysql --verbose --help | grep my.cnf</span><br><span class=\"line\">                      order of preference, my.cnf, $MYSQL_TCP_PORT,</span><br><span class=\"line\">/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>遵循参数替换原则。后面的参数会替换前面的参数</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"MySQL的配置文件参数\"><a href=\"#MySQL的配置文件参数\" class=\"headerlink\" title=\"MySQL的配置文件参数\"></a>MySQL的配置文件参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\"># 所有客户端登录进去后可以配置的参数</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\"># mysql这个命令登录进去后配置的参数</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"># mysql服务器启动时候的参数</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">datadir = /data</span><br><span class=\"line\">log_error = error.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看mysql的参数，当前配置的值</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认省略了session</span><br><span class=\"line\">show variables;</span><br><span class=\"line\"></span><br><span class=\"line\">show session variables;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &#x27;log_error&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">show global variables like &#x27;%log%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对已经创建的连接不生效，只对新创建的连接生效</span><br><span class=\"line\">set global long_query_time=5;</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SHOW [GLOBAL |SESSION] VARIABLES [LIKE  ‘pattern’ |WHERE expr]</td>\n<td align=\"center\">查看变量，可根据like进行过滤</td>\n</tr>\n<tr>\n<td align=\"center\">SET [GLOBAL|SESSION] VARIABLES = xxx</td>\n<td align=\"center\">修改global或session的参数</td>\n</tr>\n</tbody></table>\n<h2 id=\"MySQL的参数分类\"><a href=\"#MySQL的参数分类\" class=\"headerlink\" title=\"MySQL的参数分类\"></a>MySQL的参数分类</h2><ul>\n<li>从作用域上可分为global和session<ul>\n<li>seesion：只对当前这一个连接有效</li>\n<li>global：全局有效</li>\n</ul>\n</li>\n<li>从类型上又可分为可修改和只读参数<ul>\n<li>用户可在线修改非只读参数</li>\n<li>只读参数只能通过配置文件修改并重启</li>\n<li>所有参数的修改都不持久化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"当前会话下，查看其它连接的-variables\"><a href=\"#当前会话下，查看其它连接的-variables\" class=\"headerlink\" title=\"当前会话下，查看其它连接的 variables\"></a>当前会话下，查看其它连接的 variables</h3><ul>\n<li>mysql5.7开始，多了一个数据库    <code>performance_schema</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use performance_schema;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">show tables like &#x27;%variables%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [performance_schema]&gt; select * from variables_by_thread where variable_name = &#x27;long_query_time&#x27;;</span><br><span class=\"line\">+-----------+-----------------+----------------+</span><br><span class=\"line\">| THREAD_ID | VARIABLE_NAME   | VARIABLE_VALUE |</span><br><span class=\"line\">+-----------+-----------------+----------------+</span><br><span class=\"line\">|        31 | long_query_time | 10.000000      |</span><br><span class=\"line\">|        33 | long_query_time | 10.000000      |</span><br><span class=\"line\">+-----------+-----------------+----------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前连接到mysql的线程列表，以及它在做什么事情；</span><br><span class=\"line\">(root@localhost) [performance_schema]&gt; show processlist;</span><br><span class=\"line\">+----+------+-----------+--------------------+---------+------+----------+------------------+</span><br><span class=\"line\">| Id | User | Host      | db                 | Command | Time | State    | Info             |</span><br><span class=\"line\">+----+------+-----------+--------------------+---------+------+----------+------------------+</span><br><span class=\"line\">|  6 | root | localhost | performance_schema | Sleep   |  766 |          | NULL             |</span><br><span class=\"line\">|  8 | root | localhost | performance_schema | Query   |    0 | starting | show processlist |</span><br><span class=\"line\">+----+------+-----------+--------------------+---------+------+----------+------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前连接的id，这个id在processlist 里面</span><br><span class=\"line\">(root@localhost) [performance_schema]&gt; select connection_id();</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| connection_id() |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">|               8 |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 这张表里 有 thread_id 和 processlist_id，通过这张表，做关联查询，则可以查询其它会话的变量值</span><br><span class=\"line\">(root@localhost) [performance_schema]&gt; select * from threads limit 1\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">          THREAD_ID: 1</span><br><span class=\"line\">               NAME: thread/sql/main</span><br><span class=\"line\">               TYPE: BACKGROUND</span><br><span class=\"line\">     PROCESSLIST_ID: NULL</span><br><span class=\"line\">   PROCESSLIST_USER: NULL</span><br><span class=\"line\">   PROCESSLIST_HOST: NULL</span><br><span class=\"line\">     PROCESSLIST_DB: NULL</span><br><span class=\"line\">PROCESSLIST_COMMAND: NULL</span><br><span class=\"line\">   PROCESSLIST_TIME: 1967</span><br><span class=\"line\">  PROCESSLIST_STATE: NULL</span><br><span class=\"line\">   PROCESSLIST_INFO: NULL</span><br><span class=\"line\">   PARENT_THREAD_ID: NULL</span><br><span class=\"line\">               ROLE: NULL</span><br><span class=\"line\">       INSTRUMENTED: YES</span><br><span class=\"line\">            HISTORY: YES</span><br><span class=\"line\">    CONNECTION_TYPE: NULL</span><br><span class=\"line\">       THREAD_OS_ID: 3562</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><ul>\n<li>mysql的权限认证分成：用户名、密码、IP</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1652975371(1).66aoeywjsa80.webp\" />\n\n<ul>\n<li><p>mysql的权限分成：全局（所有库）、指定库、指定表、指定列</p>\n</li>\n<li><p>常用的权限</p>\n<ul>\n<li>SQL语句：SELECT、INSERT、UPDATE、DELETE、INDEX</li>\n<li>存储过程：CREATE ROUTINE、ALTER ROUTINE、EXECUTE、TRIGGER</li>\n<li>管理权限：SUPER、RELOAD、SHOW DATABASE、SHUTDOWN、GRANT OPTION</li>\n</ul>\n</li>\n<li><p>常用权限、用户相关sql语句</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user &#x27;sao&#x27;@&#x27;192.168.%.%&#x27; identified by &#x27;sao&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">drop user &#x27;sao&#x27;@&#x27;192.168.%.%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">#显示当前用户的权限 这三个是同一个意思</span><br><span class=\"line\">show grants;</span><br><span class=\"line\">show grants for current_user;</span><br><span class=\"line\">show grants for current_user();</span><br><span class=\"line\"></span><br><span class=\"line\">grant select,update,delete,insert on mysql.* to &#x27;sao&#x27;@&#x27;192.168.%.%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">show grants for &#x27;sao&#x27;@&#x27;192.168.%.%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 不推荐 使用grant 同时创建权限和用户。</span><br><span class=\"line\">(root@localhost) [(none)]&gt; grant select,update,delete,insert on mysql.* to &#x27;sa&#x27;@&#x27;192.168.%.%&#x27; identified by &#x27;sa&#x27;;</span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [(none)]&gt; show warnings;</span><br><span class=\"line\">+---------+------+------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Level   | Code | Message                                                                                                                            |</span><br><span class=\"line\">+---------+------+------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Warning | 1287 | Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement. |</span><br><span class=\"line\">+---------+------+------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;sao&#x27;@&#x27;192.168.%.%&#x27; identified by &#x27;saosao&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">revoke select on mysql.* from &#x27;sao&#x27;@&#x27;192.168.%.%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant create,index on mysql.* to &#x27;sao&#x27;@&#x27;192.168.%.%&#x27; with grant option;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql 下的 mysql库中的权限表</span><br><span class=\"line\"># user表中存放全局权限</span><br><span class=\"line\">user</span><br><span class=\"line\">db</span><br><span class=\"line\">tables_priv </span><br><span class=\"line\">columns_priv</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\"><strong>注意：不要通过修改权限表来更改用户权限</strong></font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql 5.7 密码加密使用的是 password()这个函数</span><br><span class=\"line\">select password(&#x27;456&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h2><ul>\n<li>MAX_QUERIES_PER_HOUR <em>count</em></li>\n<li>MAX_UPDATES_PER_HOUR <em>count</em></li>\n<li>MAX_CONNECTIONS_PER_HOUR <em>count</em></li>\n<li>MAX_USER_CONNECTIONS <em>count</em></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改用户的最大连接数</span><br><span class=\"line\">alter user &#x27;sao&#x27;@&#x27;192.168.%.%&#x27; with MAX_USER_CONNECTIONS 2;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"第04天-SSL加密连接与密码插件\"><a href=\"#第04天-SSL加密连接与密码插件\" class=\"headerlink\" title=\"第04天_SSL加密连接与密码插件\"></a>第04天_SSL加密连接与密码插件</h1><h2 id=\"连接MySQL实例\"><a href=\"#连接MySQL实例\" class=\"headerlink\" title=\"连接MySQL实例\"></a>连接MySQL实例</h2><h3 id=\"通过本地socket进行连接\"><a href=\"#通过本地socket进行连接\" class=\"headerlink\" title=\"通过本地socket进行连接\"></a>通过本地<em>socket</em>进行连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql服务器本地 ，默认使用socket方式连接。 默认省略 -S/tmp/mysql.socket</span><br><span class=\"line\">mysql -uroot -p -S/tmp/mysql.socket</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(root@localhost) [(none)]&gt; show variables like &#x27;%socket%&#x27;</span><br><span class=\"line\">    -&gt; ;</span><br><span class=\"line\">+-----------------------------------------+-----------------+</span><br><span class=\"line\">| Variable_name                           | Value           |</span><br><span class=\"line\">+-----------------------------------------+-----------------+</span><br><span class=\"line\">| performance_schema_max_socket_classes   | 10              |</span><br><span class=\"line\">| performance_schema_max_socket_instances | -1              |</span><br><span class=\"line\">| socket                                  | /tmp/mysql.sock |</span><br><span class=\"line\">+-----------------------------------------+-----------------+</span><br><span class=\"line\">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看当前连接的状态</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [mysql]&gt; \\s</span><br><span class=\"line\">--------------</span><br><span class=\"line\">mysql  Ver 14.14 Distrib 5.7.37, for linux-glibc2.12 (x86_64) using  EditLine wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">Connection id:          2</span><br><span class=\"line\">Current database:       mysql</span><br><span class=\"line\">Current user:           root@localhost</span><br><span class=\"line\">SSL:                    Not in use</span><br><span class=\"line\">Current pager:          stdout</span><br><span class=\"line\">Using outfile:          &#x27;&#x27;</span><br><span class=\"line\">Using delimiter:        ;</span><br><span class=\"line\">Server version:         5.7.37 MySQL Community Server (GPL)</span><br><span class=\"line\">Protocol version:       10</span><br><span class=\"line\">Connection:             Localhost via UNIX socket</span><br><span class=\"line\">Server characterset:    latin1</span><br><span class=\"line\">Db     characterset:    latin1</span><br><span class=\"line\">Client characterset:    utf8</span><br><span class=\"line\">Conn.  characterset:    utf8</span><br><span class=\"line\">UNIX socket:            /tmp/mysql.sock</span><br><span class=\"line\">Uptime:                 35 sec</span><br><span class=\"line\"></span><br><span class=\"line\">Threads: 1  Questions: 41  Slow queries: 0  Opens: 136  Flush tables: 1  Open tables: 129  Queries per second avg: 1.171</span><br><span class=\"line\">--------------</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [mysql]&gt; status;</span><br><span class=\"line\">--------------</span><br><span class=\"line\">mysql  Ver 14.14 Distrib 5.7.37, for linux-glibc2.12 (x86_64) using  EditLine wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">Connection id:          2</span><br><span class=\"line\">Current database:       mysql</span><br><span class=\"line\">Current user:           root@localhost</span><br><span class=\"line\">SSL:                    Not in use</span><br><span class=\"line\">Current pager:          stdout</span><br><span class=\"line\">Using outfile:          &#x27;&#x27;</span><br><span class=\"line\">Using delimiter:        ;</span><br><span class=\"line\">Server version:         5.7.37 MySQL Community Server (GPL)</span><br><span class=\"line\">Protocol version:       10</span><br><span class=\"line\">Connection:             Localhost via UNIX socket</span><br><span class=\"line\">Server characterset:    latin1</span><br><span class=\"line\">Db     characterset:    latin1</span><br><span class=\"line\">Client characterset:    utf8</span><br><span class=\"line\">Conn.  characterset:    utf8</span><br><span class=\"line\">UNIX socket:            /tmp/mysql.sock</span><br><span class=\"line\">Uptime:                 39 sec</span><br><span class=\"line\"></span><br><span class=\"line\">Threads: 1  Questions: 44  Slow queries: 0  Opens: 136  Flush tables: 1  Open tables: 129  Queries per second avg: 1.128</span><br><span class=\"line\">--------------</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [mysql]&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<br/>\n\n<h3 id=\"通过TCP-IP协议远程连接\"><a href=\"#通过TCP-IP协议远程连接\" class=\"headerlink\" title=\"通过TCP/IP协议远程连接\"></a>通过TCP/IP协议远程连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -h192.168.163.200 -P3306 -p</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h3><ul>\n<li>mysql 5.7开始 客户端默认使用ssl通信<ul>\n<li>只有通过 tcp/ip 的连接的方式 ，ssl才生效，socket方式不会生效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启ssl后，默认使用none</span><br><span class=\"line\">mysql -uroot -h192.168.163.200 -P3306 -p --ssl-mode=none</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -uroot -h192.168.163.200 -P3306 -p --ssl-mode=DISABLED</span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;any&#x27;@&#x27;%&#x27; require ssl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ssl 加密 对性能有影响（影响较小）</li>\n<li>ssl的另一种方式 x509<ul>\n<li>要求：用户名 + 密码 + 启用ssl+公钥 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"作业-1\"><a href=\"#作业-1\" class=\"headerlink\" title=\"作业\"></a>作业</h2><blockquote>\n<p>了解5.6如何使用ssl</p>\n</blockquote>\n<h2 id=\"密码插件\"><a href=\"#密码插件\" class=\"headerlink\" title=\"密码插件\"></a>密码插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show plugins;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mysql 5.6 开始就有了密码插件 <code>validate_password</code></li>\n</ul>\n<h3 id=\"validate-password\"><a href=\"#validate-password\" class=\"headerlink\" title=\"validate_password\"></a>validate_password</h3><ul>\n<li><code>validate_password</code>插件安装方式有以下两种</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># （1）在my.cnf文件中添加如下配置，再重启mysql</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">plugin-load-add=validate_password.so</span><br><span class=\"line\"></span><br><span class=\"line\"># （2）执行如下命令 </span><br><span class=\"line\">INSTALL PLUGIN validate_password SONAME &#x27;validate_password.so&#x27;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装完成插件后，对密码就有要求了</span><br><span class=\"line\">(root@localhost) [mysql]&gt; alter user &#x27;andy&#x27;@&#x27;%&#x27; identified by &#x27;andy&#x27;;</span><br><span class=\"line\">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [(none)]&gt; show variables like &#x27;%validate%&#x27;;</span><br><span class=\"line\">+--------------------------------------+--------+</span><br><span class=\"line\">| Variable_name                        | Value  |</span><br><span class=\"line\">+--------------------------------------+--------+</span><br><span class=\"line\">| query_cache_wlock_invalidate         | OFF    |</span><br><span class=\"line\">| validate_password_check_user_name    | OFF    |</span><br><span class=\"line\">| validate_password_dictionary_file    |        |</span><br><span class=\"line\">| validate_password_length             | 8      |</span><br><span class=\"line\">| validate_password_mixed_case_count   | 1      |</span><br><span class=\"line\">| validate_password_number_count       | 1      |</span><br><span class=\"line\">| validate_password_policy             | MEDIUM |</span><br><span class=\"line\">| validate_password_special_char_count | 1      |</span><br><span class=\"line\">+--------------------------------------+--------+</span><br><span class=\"line\">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>建议生产环境使用该插件<ul>\n<li>如果使用该插件，则需要在配置文件中做如下配置 </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认mysql启动就使用该插件</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">plugin-load = validate_password.so</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">Policy</th>\n<th align=\"left\">Tests Performed</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>0</code> or <code>LOW</code></td>\n<td align=\"left\">Length</td>\n</tr>\n<tr>\n<td align=\"left\"><code>1</code> or <code>MEDIUM</code></td>\n<td align=\"left\">Length; numeric, lowercase/uppercase, and special characters</td>\n</tr>\n<tr>\n<td align=\"left\"><code>2</code> or <code>STRONG</code></td>\n<td align=\"left\">Length; numeric, lowercase/uppercase, and special characters; dictionary file</td>\n</tr>\n</tbody></table>\n<ul>\n<li>Strong中有一个 dictionary file 。该dictionary file 表示，设置的密码中不能包含 dictionary file 文件中的字符串（即dictionary file 中的字符串不能作为密码的一部分）。如果要启动这个策略，那么  <code>validate_password_policy </code> 要设置为 <code>Strong</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(root@localhost) [(none)]&gt; set global validate_password_dictionary_file = &#x27;/mysql_data/dic.file&#x27;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [(none)]&gt; exit</span><br><span class=\"line\">Bye</span><br><span class=\"line\">[root@localhost mysql_data]# vim /mysql_data/dic.file</span><br><span class=\"line\">[root@localhost mysql_data]# ll /mysql_data/</span><br><span class=\"line\">总用量 123008</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql       56 5月  19 00:45 auto.cnf</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql        5 5月  20 00:06 bogon.pid</span><br><span class=\"line\">-rw-------. 1 mysql mysql     1680 5月  19 00:45 ca-key.pem</span><br><span class=\"line\">-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 ca.pem</span><br><span class=\"line\">-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 client-cert.pem</span><br><span class=\"line\">-rw-------. 1 mysql mysql     1676 5月  19 00:45 client-key.pem</span><br><span class=\"line\">-rw-r--r--. 1 root  root        13 5月  21 21:51 dic.file</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql    47519 5月  21 21:50 error.log</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql      333 5月  21 21:40 ib_buffer_pool</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql 12582912 5月  21 21:40 ibdata1</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql 50331648 5月  21 21:40 ib_logfile0</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql 50331648 5月  19 00:45 ib_logfile1</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql 12582912 5月  21 21:40 ibtmp1</span><br><span class=\"line\">-rw-r-----. 1 mysql mysql        5 5月  21 21:40 localhost.pid</span><br><span class=\"line\">drwxr-x---. 2 mysql mysql     4096 5月  19 00:45 mysql</span><br><span class=\"line\">drwxr-x---. 2 mysql mysql     8192 5月  19 00:45 performance_schema</span><br><span class=\"line\">-rw-------. 1 mysql mysql     1680 5月  19 00:45 private_key.pem</span><br><span class=\"line\">-rw-r--r--. 1 mysql mysql      452 5月  19 00:45 public_key.pem</span><br><span class=\"line\">-rw-r--r--. 1 mysql mysql     1112 5月  19 00:45 server-cert.pem</span><br><span class=\"line\">-rw-------. 1 mysql mysql     1680 5月  19 00:45 server-key.pem</span><br><span class=\"line\">drwxr-x---. 2 mysql mysql     8192 5月  19 00:45 sys</span><br><span class=\"line\">[root@localhost mysql_data]# chown -R mysql:mysql dic.file</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>validate_password_check_user_name </code> 这个开启后，表示密码中不能使用用户名，逆序也不行</li>\n<li>作为了解。可以看看大厂实际生产环境，如何使用密码的。</li>\n</ul>\n<h2 id=\"多实例安装\"><a href=\"#多实例安装\" class=\"headerlink\" title=\"多实例安装\"></a>多实例安装</h2><ul>\n<li>一台服务器上安装多个实例，充分利用硬件资源</li>\n<li>mysql 原生就支持多实例安装</li>\n<li>通过 <code>mysqld_multi</code> 实现</li>\n</ul>\n<h3 id=\"多实例安装操作流程\"><a href=\"#多实例安装操作流程\" class=\"headerlink\" title=\"多实例安装操作流程\"></a>多实例安装操作流程</h3><ul>\n<li>在配置文件 <code>my.cnf</code> 中新增加如下内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld1]</span><br><span class=\"line\">port = 3307</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">datadir = /mysql_data1</span><br><span class=\"line\">socket = /tmp/mysql1.sock</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>执行 <code>mysqld --initialize --datadir=/mysql_data1</code> 会发现生成了 <code>/mysql_data1/</code>目录，初始密码在 <code>error.log</code>中</p>\n</li>\n<li><p>在配置文件 <code>my.cnf</code> 中新增 <code>mysqld_multi</code>，并增加如下内容</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld_multi]</span><br><span class=\"line\">mysqld = /usr/local/mysql/bin/mysqld_safe</span><br><span class=\"line\">mysqladmin = /usr/local/mysql/bin/mysqladmin</span><br><span class=\"line\">log = /usr/local/mysql/mysqld_multi.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行 <code> mysqld_multi report</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]# mysqld_multi report</span><br><span class=\"line\">Reporting MySQL servers</span><br><span class=\"line\">MySQL server from group: mysqld1 is not running</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看运行状态与启停、登录</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]# mysqld_multi start 1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql]# mysqld_multi report</span><br><span class=\"line\">Reporting MySQL servers</span><br><span class=\"line\">MySQL server from group: mysqld1 is running</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mysql_data1]# mysql -uroot -p&#x27;huah5jqpdJ?+&#x27; -S/tmp/mysql1.sock</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 可以查看到3307 端口已经被占用</span><br><span class=\"line\">[root@localhost mysql_data1]# netstat -ntl</span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN</span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN</span><br><span class=\"line\">tcp6       0      0 :::3307                 :::*                    LISTEN</span><br><span class=\"line\">[root@localhost mysql_data1]#</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意：<ul>\n<li>最开始安装的 mysql 实例 也可以使用 mysql_multi start 进行启动，配置好便可</li>\n<li>默认 error.log 在各自的mysql data 目录中，所以不需要配置</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h1 id=\"第05天-MySQL启动与关闭-amp-多实例安装不同版本数据库\"><a href=\"#第05天-MySQL启动与关闭-amp-多实例安装不同版本数据库\" class=\"headerlink\" title=\"第05天_MySQL启动与关闭 &amp; 多实例安装不同版本数据库\"></a>第05天_MySQL启动与关闭 &amp; 多实例安装不同版本数据库</h1><h2 id=\"MySQL-的启动与关闭\"><a href=\"#MySQL-的启动与关闭\" class=\"headerlink\" title=\"MySQL 的启动与关闭\"></a>MySQL 的启动与关闭</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysql.server start</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost bin]# mysqld --defaults-file=/etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"># 守护进程方式启动mysql，当mysql进程挂了以后，会自动把mysql进程拉起来</span><br><span class=\"line\">[root@localhost bin]# mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 需要密码</span><br><span class=\"line\">(root@localhost) [(none)]&gt; shutdown;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"># 不提供用户名和密码</span><br><span class=\"line\">/etc/init.d/mysql.server stop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 需要密码</span><br><span class=\"line\">[root@localhost bin]# mysqladmin -uroot -proot shutdown</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为什么mysql不需要密码就可以关闭呢？</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 是安全关闭的</span><br><span class=\"line\">/etc/init.d/mysql.server stop</span><br><span class=\"line\"></span><br><span class=\"line\"># 是一个shell执行脚本</span><br><span class=\"line\">[root@localhost bin]# file /etc/init.d/mysql.server</span><br><span class=\"line\">/etc/init.d/mysql.server: POSIX shell script, ASCII text executable</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql利用了linux中的信号机制 ,查看 /etc/init.d/mysql.server 脚本，可以看到 kill -0 [进程号]</span><br><span class=\"line\"></span><br><span class=\"line\">     if (kill -0 $mysqld_pid 2&gt;/dev/null)</span><br><span class=\"line\">      then</span><br><span class=\"line\">        echo $echo_n &quot;Shutting down MySQL&quot;</span><br><span class=\"line\">        kill $mysqld_pid</span><br><span class=\"line\"></span><br><span class=\"line\"># kill -0 [进程号] 表示 发送一个信号给这个进程。 然后 kill 掉这个进程，所以其是安全关闭的</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[mysqld_multi]</span><br><span class=\"line\"># 使用哪个程序来启动mysql</span><br><span class=\"line\">mysqld = /usr/local/mysql/bin/mysqld_safe</span><br><span class=\"line\"># 通过mysqladmin 这个命令来关闭数据库</span><br><span class=\"line\">mysqladmin = /usr/local/mysql/bin/mysqladmin</span><br><span class=\"line\">log = /usr/local/mysql/mysqld_multi.log</span><br><span class=\"line\">user=root</span><br><span class=\"line\">pass=Root1_2022</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"MySQL-忘记密码了怎么办\"><a href=\"#MySQL-忘记密码了怎么办\" class=\"headerlink\" title=\"MySQL 忘记密码了怎么办\"></a>MySQL 忘记密码了怎么办</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编辑 mysql配置文件 my.cnf，添加如下内容</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">skip-grant-tables</span><br><span class=\"line\"></span><br><span class=\"line\"># 然后重启数据库</span><br><span class=\"line\"></span><br><span class=\"line\"># 此时登录mysql不需要密码,use mysql 然后修改user表的密码字段即可</span><br><span class=\"line\">update mysql set authentication_string = password(&#x27;root&#x27;) where user=&#x27;root&#x27; and host = &#x27;localhost&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">(root@localhost) [mysql]&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"># 再去掉参数，重启数据库即可</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySQL5-7-的新参数\"><a href=\"#MySQL5-7-的新参数\" class=\"headerlink\" title=\"MySQL5.7 的新参数\"></a>MySQL5.7 的新参数</h2><ul>\n<li><code>default_password_lifetime</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;jeffrey&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">default_password_lifetime=180</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">default_password_lifetime=0</span><br><span class=\"line\"></span><br><span class=\"line\">SET GLOBAL default_password_lifetime = 180;</span><br><span class=\"line\">SET GLOBAL default_password_lifetime = 0;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h1 id=\"第07天-数据类型、常用函数、编码\"><a href=\"#第07天-数据类型、常用函数、编码\" class=\"headerlink\" title=\"第07天_数据类型、常用函数、编码\"></a>第07天_数据类型、常用函数、编码</h1><h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>第一天的内容，最后还需要认真学习一遍，做好笔记</li>\n<li>权限管理这块，还需要实践，继续熟悉</li>\n</ol>\n</blockquote>\n<br>\n\n<img src=\"\" width=\"80%\"/>\n\n<br>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><blockquote>\n<p>熟悉mysql官网</p>\n<p>hexo new post “MySQL - 简介、版本特性与选择、安装与初始化配置、升级、启停”</p>\n</blockquote>\n"},{"title":"Java - I/O 系统","date":"2022-09-09T16:46:42.000Z","auth":"ratears","update":"2022-08-30T18:12:50.000Z","_content":"\n\n\n# 认识I/O流\n\n- I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4rv75wq98ak0.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<br>\n\n# Java如何解决I/O问题\n\n- Java将任意数据源或者数据接收端表达为一个具有生成或者接受数据片段能力的对象（以表示“流”的抽象）。Java程序中，对于数据的输入/输出操作以**“流(stream)”** 的方式进行\n- 流（Stream）是一个抽象的概念，当程序需要读取数据的时候，就会开启一个通向数据源的流，数据源可以是文件，内存，或是网络连接。反过来，当程序需要写入数据的时候，就会开启一个通向目的地的流。\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5l9vtmu8kk00.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n- java.io包下提供了各种“流”类和接口，且使用装饰器模式来解决扩展功能的问题，用以获取不同种类的数据，并通过标准的方法输入或输出数据\n- Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的（由这四个类派生出来的子类名称都是以其父类名作为子类名后缀）\n\n<br>\n\n| （抽象基类） |    字节流    | 字符流 |\n| :----------: | :----------: | :----: |\n|    输入流    | InputStream  | Reader |\n|    输出流    | OutputStream | Writer |\n\n<br>\n\n> Java中所有流流均是由它们派生出来的\n\n<br>\n\n<br>\n\n<br>\n\n# Java I/O 流的历史\n\n- Java 1.0 I/O库诞生，分为输入和输出两类，面向字节。输入相关的类都继承自InputStream，输出相关的类都继承自OutputStream，且整体使用了装饰器的设计模式\n- Java 1.1 对I/O库进行了重大的修改，不但增强了面向字节的类库功能，还新增了面向字符的Reader和Writer，以解决国际化的问题，延续了装饰器的设计模式\n- Java 1.4 引入了java.nio(new I/O），使用通道（channel），缓冲区（buffer），选择器（Selector）等措施极大的提升了性能\n- Java 1.7/1.8 对难用的文件I/O的操作体验进行了巨大的改进，且新增了Asynchronous IO（AIO），这时nio也有了一个别名，称之为non-blocking I/O\n\n\n\n> <font color=\"red\">Java8 函数式流和 I/O 流之间并无任何关联</font>\n\n<br>\n\n<br>\n\n<br>\n\n# 流的分类\n\n## 数据单元：字节流和字符流\n\n- 按操作<font color=\"red\">数据单位</font>不同分为：字节流(8 bit)，字符流(16 bit)\n\n<br>\n\n|      类型      | 说明                                                         |\n| :------------: | :----------------------------------------------------------- |\n| 字节流(8 bit)  | 以字节为单位获取数据，命名上以`Stream`结尾的流一般是字节流，如FileInputStream、FileOutputStream。 字节流可以处理任何一切形式的数据源，包括音频，视频，图片，纯文本，Word，Excel等等 |\n| 字符流(16 bit) | 以字符为单位获取数据，命名上以`Reader/Writer`结尾的流一般是字符流，如FileReader、FileWriter。` `字符流只能处理字符串，纯文本等。Java使用Unicode的统一标准字符集，一个字符占用两个字节 |\n\n<br>\n\n<br>\n\n### 字节流（InputStream 和 OutputStream）\n\n- 一切的数据在计算机中都可表示为字节\n- 在不同源之间的字节数据的输入与输出，可形象的表示为“字节的流动”，即字节流\n- 表示从不同源输入的类：InputStream\n  - 文件, 字节数组，字符串对象，管道，其他流，网络等...\n- 表示输出到不同源的类：OutputStream\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.29yhndh0ugys.webp\" width=\"80%\" />\n\n<br>\n\n<br>\n\n### 字符流（Reader 和 Writer）\n\n- Java 1.0时代的I/O流类库只能支持8位字节流，无法妥善处理16位Unicode字符\n- Reader和Writer类并不是为了取代InputStream和OutputStream，而是提供了字符操作的能力，为了在所有的I/O操作中都支持Unicode\n- 在需要操作字符的场景中尽量都使用Reader和Writer相关的类，而在需要进行字节操作的场景中，面向字节的InputStream和OutputStream才是正确的选择，比如读取和写入图片文件，java.util.zip库\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v9r42axexc0.webp\" width=\"80%\" />\n\n<br>\n\n<br>\n\n### Unicode\n\n- Unicode(统一码)，它整理和编码了世界上大部分的文字系统，使得电脑可以用更简单的方式呈现和处理文字。它遵循通用字符集 (UCS)并规定了其实现方式，即如何映射为计算机的字节，如何传输等。\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6edn0pzh88g0.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n### Unicode 与 Java\n\n- Java使用Unicode的统一标准字符集\n- Java使用UTF-16编码，所以会将字符串表示为一系列16位的单元，如果标准字符集中字符的数值大于16位（超出U+FFFF），则会拆分为两个16位的单元用以表示一个字符。对于能用16位内数字表示的字符，Unicode的字符数值（Code Point）和UTF-16编码后的16位的单元（Code Unit），是一致的。\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ab2rmmctv80.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n## 流的方向：输入流和输出流\n\n- 按数据流的<font color=\"red\">流向</font>不同分为：输入流，输出流\n\n<br>\n\n|  类型  |                           说明                           |\n| :----: | :------------------------------------------------------: |\n| 输入流 | 数据流向是数据源到程序（以InputStream、Reader结尾的流）  |\n| 输出流 | 数据流向是程序到目的地（以OutputStream、Writer结尾的流） |\n\n<br>\n\n<br>\n\n## 处理对象：节点流和处理流\n\n- 按流的<font color=\"red\">角色</font>（处理对象）的不同分为：节点流，处理流\n\n<br>\n\n|  类型  | 说明                                                         |\n| :----: | :----------------------------------------------------------- |\n| 节点流 | 可以从或向一个特定的地方（节点）读写数据，如FileInputStream、FileReader、DataInputStream等。 （ 没有节点流，处理流发挥不了任何作用。） |\n| 处理流 | 不直接连接到数据源或目的地，是 “处理流的流”。通过对已有的节点流进行包装，通过所封装的流的功能调用实现数据读写，提高性能或提高程序的灵活性。 如BufferedInputStream、BufferedReader等。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。处理流也叫 ”包装流/过滤流“。 |\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7fiok2t2e880.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n## I/O类型\n\n- 按<font color=\"red\">I/O类型</font>来分类\n\n<br>\n\n|          类型          | 说明                                                         |\n| :--------------------: | :----------------------------------------------------------- |\n|         文件流         | 对文件进行读、写操作 ：FileReader、FileWriter、FileInputStream、FileOutputStream |\n|         缓冲流         | 在读入或写出时，数据可以基于缓冲批量读写，以减少I/O的次数：BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream |\n|         内存流         | 1.从/向内存数组读写数据: CharArrayReader、 CharArrayWriter、ByteArrayInputStream、ByteArrayOutputStream 2.从/向内存字符串读写数据 StringReader、StringWriter、StringBufferInputStream |\n|         转换流         | 按照一定的编码/解码标准将字节流转换为字符流，或进行反向转换（Stream到Reader,Writer的转换类）：InputStreamReader、OutputStreamWriter |\n|         对象流         | 字节流与对象实例相互转换,实现对象的序列化 ：ObjectInputStream、ObjectOutputStream 注意: 1.读取顺序和写入顺序一定要一致，不然会读取出错。 2.在对象属性前面加`transient`关键字，则该对象的属性不会被序列化 |\n|         打印流         | 只有输出,没有输入，在整个IO包中，打印流是输出信息最方便的类,分为 PrintWriter（字符打印流）、PrintStream(字节打印流) |\n|  DataConversion数据流  | 按基本数据类型读/写，可以字节流与基本类型数据相互转换：DataInputStream、DataOutputStream |\n|         过滤流         | 在数据进行读或写时进行过滤：FilterReader、FilterWriter、FilterInputStream、FilterOutputStream |\n|         合并流         | 把多个输入流按顺序连接成一个输入流 ：SequenceInputStream     |\n|      操作ZIP包流       | ZipInputStream可以读取zip格式的流，ZipOutputStream可以把多份数据写入zip包 |\n|      操作JAR包流       | JarInputStream/JarOutputStream,派生自ZipInputStream/ZipOutputStream，它增加的主要功能是直接读取jar文件里面的MANIFEST.MF文件。因为本质上jar包就是zip包，只是额外附加了一些固定的描述文件。 |\n|         管道流         | 线程交互的时候使用，管道输出流可以连接到管道输入流，以创建通信管道。管道输出流是管道的发送端。通常数据由某个线程写入管道输出流，并由其他线程从连接的管道输入流读取。注意，管道输出流和输入流需要对接。: PipedReader、PipedWriter、PipedInputStream、PipedOutputStream |\n|      Counting计数      | 在读入数据时对行记数 ：LineNumberReader、LineNumberInputStream |\n|       推回输入流       | 通过缓存机制，进行预读 ：PushbackReader、PushbackInputStream |\n| 接收和响应客户端请求流 | servletinputstream：用来读取客户端的请求信息的输入流 servletoutputstream:可以将数据返回到客户端 |\n|     随机读取写入流     | RandomAccessFile 既可以读取文件内容，也可以向文件输出数据，RandomAccessFile 对象包含一个记录指针，标识当前读写处的位置，可以控制记录指针从IO任何位置读写文件 |\n|         加密流         | 对流加密/解密 CipherOutputStream 由一个 OutputStream 和一个 Cipher 组成 ,write() 方法在将数据写出到基础 OutputStream 之前先对该数据进行处理(加密或解密) , 同样CipherInputStream是由InputStream和一个Cipher组成,read()方法在读入时,对数据进行加解密操作 |\n|       数字签名流       | DigestInputStream : 最大的特点是在读取的数据的时候已经调用MessageDigest实例的update方法，当数据从底层的数据流中读取之后就只可以直接调用MessageDigest实例的digest()方法了，从而完成对输入数据的摘要加密 DigestOutputStream :最大的特点是在向底层的输出流写入数据的时候已经调用MessageDigest实例的update方法，并作为MessageDigest的输入数据，之后就可以直接调用MessageDigest实例的digest()方法完成加密过程；同样的，是否对数据加密也是由该流的on(boolean b)方法进行控制的，如果设置成false，那么在写出数据的过程中便不会将数据传给update方法，那么此时它跟普通的输出流就没有任何区别了 |\n\n<br>\n\n> *CipherInputStream和CipherOutputStream与DigestInputStream/DigestOutputStream/类似，只是后者更为彻底，它们不用在显示地调用传入的Cipher对象的update和doFinal方法，加密或解密过程在读写数据的同时已经隐式地完成了*\n\n<br>\n\n<br>\n\n<br>\n\n# I/O 流体系\n\n## I/O流体系图\n\n- 下图基于Java 1.8制作，其中需要注意的是`StringBufferInputStream`和`LineNumberInputStream`已被废弃\n\n> `StringBufferInputStream`: 该类无法准确的将字符转换为字节，推荐用`StringReader`来取代使用\n>\n> `LineNumberInputStream`: 该类错误地认为字节能恰当地表示字符，推荐使用字符流的类来取代，即`LineNumberReader`\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.fv0bu32iqn4.webp\" width=\"80%\" />\n\n<br><br>\n\n## I/O流体系类库\n\n|      分类      |        字节输入流        |        字节输出流         |     字符输入流      |     字符输出流      |\n| :------------: | :----------------------: | :-----------------------: | :-----------------: | :-----------------: |\n|   *抽象基类*   |      *InputStream*       |      *OutputStream*       |      *Reader*       |      *Writer*       |\n|  **访问文件**  |   **FileInputStream**    |   **FileOutputStream**    |   **FileReader**    |   **FileWriter**    |\n|  **访问数组**  | **ByteArrayInputStream** | **ByteArrayOutputStream** | **CharArrayReader** | **CharArrayWriter** |\n|  **访问管道**  |   **PipedInputStream**   |   **PipedOutputStream**   |   **PipedReader**   |   **PipedWriter**   |\n| **访问字符串** |                          |                           |  **StringReader**   |  **StringWriter**   |\n|     缓冲流     |   BufferedInputStream    |   BufferedOutputStream    |   BufferedReader    |   BufferedWriter    |\n|     转换流     |                          |                           |  InputStreamReader  | OutputStreamWriter  |\n|     对象流     |    ObjectInputStream     |    ObjectOutputStream     |                     |                     |\n|   *抽象基类*   |   *FilterInputStream*    |   *FilterOutputStream*    |   *FilterReader*    |   *FilterWriter*    |\n|     打印流     |                          |        PrintStream        |                     |     PrintWriter     |\n|   推回输入流   |   PushbackInputStream    |                           |   PushbackReader    |                     |\n|     特殊流     |     DataInputStream      |     DataOutputStream      |                     |                     |\n\n<br>\n\n> 注：表中**粗体**所表示的类代表节点流。*斜体* 表示的类代表抽象基类，无法直接创建实例。其他的为处理流\n\n<br>\n\n<br>\n\n## RandomAccessFile\n\n- 自成体系，Java输入/输出流体系中功能最丰富的文件内容访问类，既可以读取文件内容，也可以向文件输出数据。\n- 不支持装饰器，无法与InputStream/OutputStream联合起来用\n- 与普通的输入/输出流不同的是，RandomAccessFile支持跳到文件任意位置读写数据（支持读写随机文件），可将文件视为在磁盘上的一个大的字节数组，我们能通过数组下标（文件指针）来访问里面的内容\n- RandomAccessFile对象包含一个记录指针，标识当前读写处的位置，当程序创建一个新的RandomAccessFile对象时，该对象的文件记录指针对于文件头（也就是0处），当读写n个字节后，文件记录指针将会向后移动n个字节，RandomAccessFile可以通过seek()方法自由移动记录指针\n- 使用RandomAccessFile就必须知道文件的布局，确定要操作的位置\n- 优先考虑使用nio的内存映射\n\n<br>\n\n<br>\n\n### RandomAccessFile使用\n\n- 操作文件记录指针\n\n```java\n// 返回文件记录指针的当前位置\nlong getFilePointer()\n    \n// 将文件记录指针定位到pos位置\nvoid seek(long pos)\n```\n\n<br>\n\n- RandomAccessFile类在创建对象时，除了指定文件本身，还需要指定一个`mode`参数。该参数指定RandomAccessFile的访问模式，该参数有如下四个值：\n\n> 1. r：以只读方式打开指定文件。如果试图对该RandomAccessFile指定的文件执行写入方法则会抛出IOException\n> 2. rw：以读取、写入方式打开指定文件。如果该文件不存在，则尝试创建文件\n> 3. rws：以读取、写入方式打开指定文件。相对于rw模式，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备，默认情形下(rw模式下),是使用buffer的,只有cache满的或者使用RandomAccessFile.close()关闭流的时候儿才真正的写到文件\n> 4. rwd：与rws类似，只是仅对文件的内容同步更新到磁盘，而不修改文件的元数据\n\n<br>\n\n<br>\n\n## I/O流的主要类\n\n- 整个Java.io包中最重要的就是5个类和一个接口\n\n<br>\n\n<br>\n\n### 5个类：\n\n|      类      |                             说明                             |\n| :----------: | :----------------------------------------------------------: |\n|     File     | 表示一个文件或者目录,可以获取文件或目录相关属性,以及创建文件或目录 |\n| InputStream  |  字节输入流父类，单位为字节，定义了所有字节输入流的基本操作  |\n| OutputStream |  字节输出流父类，单位为字节，定义了所有字节输出流的基本操作  |\n|    Reader    |  字符输入流父类，单位为字符，定义了所有字符输入流的基本操作  |\n|    Writer    |  字符输出流父类，单位为字符，定义了所有字符输出流的基本操作  |\n\n<br>\n\n> Java中所有流均是由它们派生出来的\n>\n> **jdk 1.4**版本开始引入了新I/O类库，它位于 `java.nio` 包中，新I/O类库利用通道和缓冲区等来提高I/O操作的效率\n\n<br>\n\n<br>\n\n### 1个接口：\n\n|      类      |                     说明                     |\n| :----------: | :------------------------------------------: |\n| Serializable | 序列化/反序列化对象需要实现 Serializable接口 |\n\n<br>\n\n<br>\n\n## I/O流主要三个部分\n\n| 部分       |                             说明                             |\n| ---------- | :----------------------------------------------------------: |\n| 流式部分   |                        I/O的主体部分                         |\n| 非流式部分 | 主要包含一些辅助流式部分的类，如：`File`类、`RandomAccessFile`类和`FileDescriptor`等类。 `RandomAccessFile`（随机读取和写入流）可以从文件的任意位置进行读写） |\n| 其他类     | 文件读取部分的与安全相关的类，如：`SerializablePermission`类，以及与本地操作系统相关的文件系统的类，如：`FileSystem`类和`Win32FileSystem`类和`WinNTFileSystem`类 |\n\n<br>\n\n<br>\n\n## 重要I/O流的解读\n\n### 转换流\n\n\n\n\n\n<br>\n\n### 标准输入、输出流\n\n\n\n\n\n<br>\n\n### 打印流\n\n\n\n<br>\n\n### 数据流\n\n\n\n<br>\n\n### 对象流\n\n\n\n<br>\n\n### 随机存取文件流\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# I/O流API实践\n\n## 字符流：FileReader - FileWriter\n\n```java\n /**\n     * 从某个文件的内容写入到另一个文件\n     *  1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1\n     *     read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1\n     *  2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理\n     *  3. 读入的文件一定要存在，否则就会报FileNotFoundException。\n     *\n     * 1. 输出操作，对应的File可以不存在的。并不会报异常\n     * 2.\n     *          File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。\n     *          File对应的硬盘中的文件如果存在：\n     *                 如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖\n     *                 如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容\n     *  3. 流的关闭顺序，没有严格顺序\n     */\n    @Test\n    public void testFileReaderFileWriter(){\n        FileReader fr = null;\n        FileWriter fw = null;\n        try {\n            // 1.File类的实例化\n            // 2.流实例化\n            fr = new FileReader(new File(\"hello.txt\"));\n            fw = new FileWriter(new File(\"hello2.txt\"),true);\n\n            char [] cbuf = new char[5];\n            int len;\n            // 3.流操作-读入 写出\n            while ((len = fr.read(cbuf)) != -1){\n                fw.write(cbuf,0,len);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }finally {\n            //4.关闭流资源\n            //方式一：\n            try {\n                if(fw != null)\n                    fw.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }finally{\n                try {\n                    if(fr != null)\n                        fr.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            //方式二：\n//            if (null != fw){\n//                try {\n//                    fw.close();\n//                } catch (IOException e) {\n//                    throw new RuntimeException(e);\n//                }\n//            }\n//            if (null != fr) {\n//                try {\n//                    fr.close();\n//                } catch (IOException e) {\n//                    throw new RuntimeException(e);\n//                }\n//            }\n        }\n\n    }\n```\n\n<br>\n\n<br>\n\n## 字节流：FileInputStream - FileOutputStream\n\n- 使用 FileInputStream、FileOutputStream实现文件复制\n\n```shell\n\t//指定路径下文件的复制\n\t// 使用字节流FileInputStream处理文本文件，可能出现乱码。\n    public void copyFile(String srcPath,String destPath){\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            // File 实例化\n            File srcFile = new File(srcPath);\n            File destFile = new File(destPath);\n\n            // 造流\n            fis = new FileInputStream(srcFile);\n            fos = new FileOutputStream(destFile);\n\n            // 流操作 - 复制的过程\n            byte[] buffer = new byte[1024];\n            int len;\n            while((len = fis.read(buffer)) != -1){\n                fos.write(buffer,0,len);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if(fos != null){\n                //\n                try {\n                    fos.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if(fis != null){\n                try {\n                    fis.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n        }\n    }\n```\n\n<br>\n\n<br>\n\n## 缓冲流：BufferedInputStream - BufferedOutputStream\n\n- 使用 BufferedInputStream 、BufferedOutputStream实现文件复制\n\n```java\n\tpublic void testBuffered (){\n        BufferedInputStream bis = null;\n        BufferedOutputStream bos = null;\n        try {\n            //造文件\n            File srcFile = new File(\"hello.txt\");\n            File distFile = new File(\"hello_word.txt\");\n\n            //造流\n            FileInputStream fis = new FileInputStream(srcFile);\n            FileOutputStream fos = new FileOutputStream(distFile);\n\n            //造缓冲流\n            bis = new BufferedInputStream(fis);\n            bos = new BufferedOutputStream(fos);\n\n            //3.复制的细节：读取、写入\n            byte [] buffered = new byte[10];\n            int len;\n            while ((len=bis.read(buffered)) != -1){\n                bos.write(buffered,0,len);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            //4.资源关闭\n            //要求：先关闭外层的流，再关闭内层的流\n            //说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.\n            if(bos != null){\n                try {\n                    bos.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n            if(bis != null){\n                try {\n                    bis.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n        }\n    }\n```\n\n- 用BufferedReader和BufferedWriter实现文本文件的复制\n\n```java\n    public void testBufferedReaderBufferedWriter(){\n        BufferedReader br = null;\n        BufferedWriter bw = null;\n        try {\n            //创建文件和相应的流\n            br = new BufferedReader(new FileReader(new File(\"dbcp.txt\")));\n            bw = new BufferedWriter(new FileWriter(new File(\"dbcp1.txt\")));\n\n            //读写操作\n            //方式一：使用char[]数组\n//            char[] cbuf = new char[1024];\n//            int len;\n//            while((len = br.read(cbuf)) != -1){\n//                bw.write(cbuf,0,len);\n//    //            bw.flush();\n//            }\n\n            //方式二：使用String\n            String data;\n            while((data = br.readLine()) != null){\n                //方法一：\n//                bw.write(data + \"\\n\");//data中不包含换行符\n                //方法二：\n                bw.write(data);//data中不包含换行符\n                bw.newLine();//提供换行的操作\n\n            }\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            if(bw != null){\n\n                try {\n                    bw.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if(br != null){\n                try {\n                    br.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n        }\n    }\n```\n\n<br>\n\n<br>\n\n## 转换流\n\n- 综合使用InputStreamReader和OutputStreamWriter\n\n```java\n\tpublic void test2() throws Exception {\n        //1.造文件、造流\n        File file1 = new File(\"dbcp.txt\");\n        File file2 = new File(\"dbcp_gbk.txt\");\n\n        FileInputStream fis = new FileInputStream(file1);\n        FileOutputStream fos = new FileOutputStream(file2);\n\n        InputStreamReader isr = new InputStreamReader(fis,\"utf-8\");\n        OutputStreamWriter osw = new OutputStreamWriter(fos,\"gbk\");\n\n        //2.读写过程\n        char[] cbuf = new char[20];\n        int len;\n        while((len = isr.read(cbuf)) != -1){\n            osw.write(cbuf,0,len);\n        }\n\n        //3.关闭资源\n        isr.close();\n        osw.close();\n\n    }\n```\n\n\n\n\n\n\n\n\n\n# 参考与延伸\n\n- [IO流体系基本概念以及常用操作 - 探索字符串](https://string.quest/read/1143888#IO_110)\n- 并发编程网：[Java IO教程](http://ifeve.com/java-io/)\n\n\n\n# 学习备注\n\n> 1. 本文笔记主要根据 尚硅谷的java体系课程的io部分 梳理的\n> 2. 后期 应该对io 体系进行一个更大的梳理，包括java的 file path，还有根据 io ，nio bio aio等进行梳理，要明白自己学习的是哪种流，所以要熟悉io历史\n\n<img src=\"\" width=\"60%\" />\n\n<br>","source":"_posts/2022/Java-I-O-系统.md","raw":"---\ntitle: Java - I/O 系统\ndate: 2022-09-10 00:46:42\nauth: ratears\nupdate: 2022-08-31 02:12:50\ncategories:\n\t- [Operating-Systems,I/O]\ntags:\n\t- java\n\t- io\n---\n\n\n\n# 认识I/O流\n\n- I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4rv75wq98ak0.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<br>\n\n# Java如何解决I/O问题\n\n- Java将任意数据源或者数据接收端表达为一个具有生成或者接受数据片段能力的对象（以表示“流”的抽象）。Java程序中，对于数据的输入/输出操作以**“流(stream)”** 的方式进行\n- 流（Stream）是一个抽象的概念，当程序需要读取数据的时候，就会开启一个通向数据源的流，数据源可以是文件，内存，或是网络连接。反过来，当程序需要写入数据的时候，就会开启一个通向目的地的流。\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5l9vtmu8kk00.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n- java.io包下提供了各种“流”类和接口，且使用装饰器模式来解决扩展功能的问题，用以获取不同种类的数据，并通过标准的方法输入或输出数据\n- Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的（由这四个类派生出来的子类名称都是以其父类名作为子类名后缀）\n\n<br>\n\n| （抽象基类） |    字节流    | 字符流 |\n| :----------: | :----------: | :----: |\n|    输入流    | InputStream  | Reader |\n|    输出流    | OutputStream | Writer |\n\n<br>\n\n> Java中所有流流均是由它们派生出来的\n\n<br>\n\n<br>\n\n<br>\n\n# Java I/O 流的历史\n\n- Java 1.0 I/O库诞生，分为输入和输出两类，面向字节。输入相关的类都继承自InputStream，输出相关的类都继承自OutputStream，且整体使用了装饰器的设计模式\n- Java 1.1 对I/O库进行了重大的修改，不但增强了面向字节的类库功能，还新增了面向字符的Reader和Writer，以解决国际化的问题，延续了装饰器的设计模式\n- Java 1.4 引入了java.nio(new I/O），使用通道（channel），缓冲区（buffer），选择器（Selector）等措施极大的提升了性能\n- Java 1.7/1.8 对难用的文件I/O的操作体验进行了巨大的改进，且新增了Asynchronous IO（AIO），这时nio也有了一个别名，称之为non-blocking I/O\n\n\n\n> <font color=\"red\">Java8 函数式流和 I/O 流之间并无任何关联</font>\n\n<br>\n\n<br>\n\n<br>\n\n# 流的分类\n\n## 数据单元：字节流和字符流\n\n- 按操作<font color=\"red\">数据单位</font>不同分为：字节流(8 bit)，字符流(16 bit)\n\n<br>\n\n|      类型      | 说明                                                         |\n| :------------: | :----------------------------------------------------------- |\n| 字节流(8 bit)  | 以字节为单位获取数据，命名上以`Stream`结尾的流一般是字节流，如FileInputStream、FileOutputStream。 字节流可以处理任何一切形式的数据源，包括音频，视频，图片，纯文本，Word，Excel等等 |\n| 字符流(16 bit) | 以字符为单位获取数据，命名上以`Reader/Writer`结尾的流一般是字符流，如FileReader、FileWriter。` `字符流只能处理字符串，纯文本等。Java使用Unicode的统一标准字符集，一个字符占用两个字节 |\n\n<br>\n\n<br>\n\n### 字节流（InputStream 和 OutputStream）\n\n- 一切的数据在计算机中都可表示为字节\n- 在不同源之间的字节数据的输入与输出，可形象的表示为“字节的流动”，即字节流\n- 表示从不同源输入的类：InputStream\n  - 文件, 字节数组，字符串对象，管道，其他流，网络等...\n- 表示输出到不同源的类：OutputStream\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.29yhndh0ugys.webp\" width=\"80%\" />\n\n<br>\n\n<br>\n\n### 字符流（Reader 和 Writer）\n\n- Java 1.0时代的I/O流类库只能支持8位字节流，无法妥善处理16位Unicode字符\n- Reader和Writer类并不是为了取代InputStream和OutputStream，而是提供了字符操作的能力，为了在所有的I/O操作中都支持Unicode\n- 在需要操作字符的场景中尽量都使用Reader和Writer相关的类，而在需要进行字节操作的场景中，面向字节的InputStream和OutputStream才是正确的选择，比如读取和写入图片文件，java.util.zip库\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v9r42axexc0.webp\" width=\"80%\" />\n\n<br>\n\n<br>\n\n### Unicode\n\n- Unicode(统一码)，它整理和编码了世界上大部分的文字系统，使得电脑可以用更简单的方式呈现和处理文字。它遵循通用字符集 (UCS)并规定了其实现方式，即如何映射为计算机的字节，如何传输等。\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6edn0pzh88g0.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n### Unicode 与 Java\n\n- Java使用Unicode的统一标准字符集\n- Java使用UTF-16编码，所以会将字符串表示为一系列16位的单元，如果标准字符集中字符的数值大于16位（超出U+FFFF），则会拆分为两个16位的单元用以表示一个字符。对于能用16位内数字表示的字符，Unicode的字符数值（Code Point）和UTF-16编码后的16位的单元（Code Unit），是一致的。\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ab2rmmctv80.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n## 流的方向：输入流和输出流\n\n- 按数据流的<font color=\"red\">流向</font>不同分为：输入流，输出流\n\n<br>\n\n|  类型  |                           说明                           |\n| :----: | :------------------------------------------------------: |\n| 输入流 | 数据流向是数据源到程序（以InputStream、Reader结尾的流）  |\n| 输出流 | 数据流向是程序到目的地（以OutputStream、Writer结尾的流） |\n\n<br>\n\n<br>\n\n## 处理对象：节点流和处理流\n\n- 按流的<font color=\"red\">角色</font>（处理对象）的不同分为：节点流，处理流\n\n<br>\n\n|  类型  | 说明                                                         |\n| :----: | :----------------------------------------------------------- |\n| 节点流 | 可以从或向一个特定的地方（节点）读写数据，如FileInputStream、FileReader、DataInputStream等。 （ 没有节点流，处理流发挥不了任何作用。） |\n| 处理流 | 不直接连接到数据源或目的地，是 “处理流的流”。通过对已有的节点流进行包装，通过所封装的流的功能调用实现数据读写，提高性能或提高程序的灵活性。 如BufferedInputStream、BufferedReader等。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。处理流也叫 ”包装流/过滤流“。 |\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7fiok2t2e880.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n## I/O类型\n\n- 按<font color=\"red\">I/O类型</font>来分类\n\n<br>\n\n|          类型          | 说明                                                         |\n| :--------------------: | :----------------------------------------------------------- |\n|         文件流         | 对文件进行读、写操作 ：FileReader、FileWriter、FileInputStream、FileOutputStream |\n|         缓冲流         | 在读入或写出时，数据可以基于缓冲批量读写，以减少I/O的次数：BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream |\n|         内存流         | 1.从/向内存数组读写数据: CharArrayReader、 CharArrayWriter、ByteArrayInputStream、ByteArrayOutputStream 2.从/向内存字符串读写数据 StringReader、StringWriter、StringBufferInputStream |\n|         转换流         | 按照一定的编码/解码标准将字节流转换为字符流，或进行反向转换（Stream到Reader,Writer的转换类）：InputStreamReader、OutputStreamWriter |\n|         对象流         | 字节流与对象实例相互转换,实现对象的序列化 ：ObjectInputStream、ObjectOutputStream 注意: 1.读取顺序和写入顺序一定要一致，不然会读取出错。 2.在对象属性前面加`transient`关键字，则该对象的属性不会被序列化 |\n|         打印流         | 只有输出,没有输入，在整个IO包中，打印流是输出信息最方便的类,分为 PrintWriter（字符打印流）、PrintStream(字节打印流) |\n|  DataConversion数据流  | 按基本数据类型读/写，可以字节流与基本类型数据相互转换：DataInputStream、DataOutputStream |\n|         过滤流         | 在数据进行读或写时进行过滤：FilterReader、FilterWriter、FilterInputStream、FilterOutputStream |\n|         合并流         | 把多个输入流按顺序连接成一个输入流 ：SequenceInputStream     |\n|      操作ZIP包流       | ZipInputStream可以读取zip格式的流，ZipOutputStream可以把多份数据写入zip包 |\n|      操作JAR包流       | JarInputStream/JarOutputStream,派生自ZipInputStream/ZipOutputStream，它增加的主要功能是直接读取jar文件里面的MANIFEST.MF文件。因为本质上jar包就是zip包，只是额外附加了一些固定的描述文件。 |\n|         管道流         | 线程交互的时候使用，管道输出流可以连接到管道输入流，以创建通信管道。管道输出流是管道的发送端。通常数据由某个线程写入管道输出流，并由其他线程从连接的管道输入流读取。注意，管道输出流和输入流需要对接。: PipedReader、PipedWriter、PipedInputStream、PipedOutputStream |\n|      Counting计数      | 在读入数据时对行记数 ：LineNumberReader、LineNumberInputStream |\n|       推回输入流       | 通过缓存机制，进行预读 ：PushbackReader、PushbackInputStream |\n| 接收和响应客户端请求流 | servletinputstream：用来读取客户端的请求信息的输入流 servletoutputstream:可以将数据返回到客户端 |\n|     随机读取写入流     | RandomAccessFile 既可以读取文件内容，也可以向文件输出数据，RandomAccessFile 对象包含一个记录指针，标识当前读写处的位置，可以控制记录指针从IO任何位置读写文件 |\n|         加密流         | 对流加密/解密 CipherOutputStream 由一个 OutputStream 和一个 Cipher 组成 ,write() 方法在将数据写出到基础 OutputStream 之前先对该数据进行处理(加密或解密) , 同样CipherInputStream是由InputStream和一个Cipher组成,read()方法在读入时,对数据进行加解密操作 |\n|       数字签名流       | DigestInputStream : 最大的特点是在读取的数据的时候已经调用MessageDigest实例的update方法，当数据从底层的数据流中读取之后就只可以直接调用MessageDigest实例的digest()方法了，从而完成对输入数据的摘要加密 DigestOutputStream :最大的特点是在向底层的输出流写入数据的时候已经调用MessageDigest实例的update方法，并作为MessageDigest的输入数据，之后就可以直接调用MessageDigest实例的digest()方法完成加密过程；同样的，是否对数据加密也是由该流的on(boolean b)方法进行控制的，如果设置成false，那么在写出数据的过程中便不会将数据传给update方法，那么此时它跟普通的输出流就没有任何区别了 |\n\n<br>\n\n> *CipherInputStream和CipherOutputStream与DigestInputStream/DigestOutputStream/类似，只是后者更为彻底，它们不用在显示地调用传入的Cipher对象的update和doFinal方法，加密或解密过程在读写数据的同时已经隐式地完成了*\n\n<br>\n\n<br>\n\n<br>\n\n# I/O 流体系\n\n## I/O流体系图\n\n- 下图基于Java 1.8制作，其中需要注意的是`StringBufferInputStream`和`LineNumberInputStream`已被废弃\n\n> `StringBufferInputStream`: 该类无法准确的将字符转换为字节，推荐用`StringReader`来取代使用\n>\n> `LineNumberInputStream`: 该类错误地认为字节能恰当地表示字符，推荐使用字符流的类来取代，即`LineNumberReader`\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.fv0bu32iqn4.webp\" width=\"80%\" />\n\n<br><br>\n\n## I/O流体系类库\n\n|      分类      |        字节输入流        |        字节输出流         |     字符输入流      |     字符输出流      |\n| :------------: | :----------------------: | :-----------------------: | :-----------------: | :-----------------: |\n|   *抽象基类*   |      *InputStream*       |      *OutputStream*       |      *Reader*       |      *Writer*       |\n|  **访问文件**  |   **FileInputStream**    |   **FileOutputStream**    |   **FileReader**    |   **FileWriter**    |\n|  **访问数组**  | **ByteArrayInputStream** | **ByteArrayOutputStream** | **CharArrayReader** | **CharArrayWriter** |\n|  **访问管道**  |   **PipedInputStream**   |   **PipedOutputStream**   |   **PipedReader**   |   **PipedWriter**   |\n| **访问字符串** |                          |                           |  **StringReader**   |  **StringWriter**   |\n|     缓冲流     |   BufferedInputStream    |   BufferedOutputStream    |   BufferedReader    |   BufferedWriter    |\n|     转换流     |                          |                           |  InputStreamReader  | OutputStreamWriter  |\n|     对象流     |    ObjectInputStream     |    ObjectOutputStream     |                     |                     |\n|   *抽象基类*   |   *FilterInputStream*    |   *FilterOutputStream*    |   *FilterReader*    |   *FilterWriter*    |\n|     打印流     |                          |        PrintStream        |                     |     PrintWriter     |\n|   推回输入流   |   PushbackInputStream    |                           |   PushbackReader    |                     |\n|     特殊流     |     DataInputStream      |     DataOutputStream      |                     |                     |\n\n<br>\n\n> 注：表中**粗体**所表示的类代表节点流。*斜体* 表示的类代表抽象基类，无法直接创建实例。其他的为处理流\n\n<br>\n\n<br>\n\n## RandomAccessFile\n\n- 自成体系，Java输入/输出流体系中功能最丰富的文件内容访问类，既可以读取文件内容，也可以向文件输出数据。\n- 不支持装饰器，无法与InputStream/OutputStream联合起来用\n- 与普通的输入/输出流不同的是，RandomAccessFile支持跳到文件任意位置读写数据（支持读写随机文件），可将文件视为在磁盘上的一个大的字节数组，我们能通过数组下标（文件指针）来访问里面的内容\n- RandomAccessFile对象包含一个记录指针，标识当前读写处的位置，当程序创建一个新的RandomAccessFile对象时，该对象的文件记录指针对于文件头（也就是0处），当读写n个字节后，文件记录指针将会向后移动n个字节，RandomAccessFile可以通过seek()方法自由移动记录指针\n- 使用RandomAccessFile就必须知道文件的布局，确定要操作的位置\n- 优先考虑使用nio的内存映射\n\n<br>\n\n<br>\n\n### RandomAccessFile使用\n\n- 操作文件记录指针\n\n```java\n// 返回文件记录指针的当前位置\nlong getFilePointer()\n    \n// 将文件记录指针定位到pos位置\nvoid seek(long pos)\n```\n\n<br>\n\n- RandomAccessFile类在创建对象时，除了指定文件本身，还需要指定一个`mode`参数。该参数指定RandomAccessFile的访问模式，该参数有如下四个值：\n\n> 1. r：以只读方式打开指定文件。如果试图对该RandomAccessFile指定的文件执行写入方法则会抛出IOException\n> 2. rw：以读取、写入方式打开指定文件。如果该文件不存在，则尝试创建文件\n> 3. rws：以读取、写入方式打开指定文件。相对于rw模式，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备，默认情形下(rw模式下),是使用buffer的,只有cache满的或者使用RandomAccessFile.close()关闭流的时候儿才真正的写到文件\n> 4. rwd：与rws类似，只是仅对文件的内容同步更新到磁盘，而不修改文件的元数据\n\n<br>\n\n<br>\n\n## I/O流的主要类\n\n- 整个Java.io包中最重要的就是5个类和一个接口\n\n<br>\n\n<br>\n\n### 5个类：\n\n|      类      |                             说明                             |\n| :----------: | :----------------------------------------------------------: |\n|     File     | 表示一个文件或者目录,可以获取文件或目录相关属性,以及创建文件或目录 |\n| InputStream  |  字节输入流父类，单位为字节，定义了所有字节输入流的基本操作  |\n| OutputStream |  字节输出流父类，单位为字节，定义了所有字节输出流的基本操作  |\n|    Reader    |  字符输入流父类，单位为字符，定义了所有字符输入流的基本操作  |\n|    Writer    |  字符输出流父类，单位为字符，定义了所有字符输出流的基本操作  |\n\n<br>\n\n> Java中所有流均是由它们派生出来的\n>\n> **jdk 1.4**版本开始引入了新I/O类库，它位于 `java.nio` 包中，新I/O类库利用通道和缓冲区等来提高I/O操作的效率\n\n<br>\n\n<br>\n\n### 1个接口：\n\n|      类      |                     说明                     |\n| :----------: | :------------------------------------------: |\n| Serializable | 序列化/反序列化对象需要实现 Serializable接口 |\n\n<br>\n\n<br>\n\n## I/O流主要三个部分\n\n| 部分       |                             说明                             |\n| ---------- | :----------------------------------------------------------: |\n| 流式部分   |                        I/O的主体部分                         |\n| 非流式部分 | 主要包含一些辅助流式部分的类，如：`File`类、`RandomAccessFile`类和`FileDescriptor`等类。 `RandomAccessFile`（随机读取和写入流）可以从文件的任意位置进行读写） |\n| 其他类     | 文件读取部分的与安全相关的类，如：`SerializablePermission`类，以及与本地操作系统相关的文件系统的类，如：`FileSystem`类和`Win32FileSystem`类和`WinNTFileSystem`类 |\n\n<br>\n\n<br>\n\n## 重要I/O流的解读\n\n### 转换流\n\n\n\n\n\n<br>\n\n### 标准输入、输出流\n\n\n\n\n\n<br>\n\n### 打印流\n\n\n\n<br>\n\n### 数据流\n\n\n\n<br>\n\n### 对象流\n\n\n\n<br>\n\n### 随机存取文件流\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# I/O流API实践\n\n## 字符流：FileReader - FileWriter\n\n```java\n /**\n     * 从某个文件的内容写入到另一个文件\n     *  1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1\n     *     read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1\n     *  2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理\n     *  3. 读入的文件一定要存在，否则就会报FileNotFoundException。\n     *\n     * 1. 输出操作，对应的File可以不存在的。并不会报异常\n     * 2.\n     *          File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。\n     *          File对应的硬盘中的文件如果存在：\n     *                 如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖\n     *                 如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容\n     *  3. 流的关闭顺序，没有严格顺序\n     */\n    @Test\n    public void testFileReaderFileWriter(){\n        FileReader fr = null;\n        FileWriter fw = null;\n        try {\n            // 1.File类的实例化\n            // 2.流实例化\n            fr = new FileReader(new File(\"hello.txt\"));\n            fw = new FileWriter(new File(\"hello2.txt\"),true);\n\n            char [] cbuf = new char[5];\n            int len;\n            // 3.流操作-读入 写出\n            while ((len = fr.read(cbuf)) != -1){\n                fw.write(cbuf,0,len);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }finally {\n            //4.关闭流资源\n            //方式一：\n            try {\n                if(fw != null)\n                    fw.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }finally{\n                try {\n                    if(fr != null)\n                        fr.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            //方式二：\n//            if (null != fw){\n//                try {\n//                    fw.close();\n//                } catch (IOException e) {\n//                    throw new RuntimeException(e);\n//                }\n//            }\n//            if (null != fr) {\n//                try {\n//                    fr.close();\n//                } catch (IOException e) {\n//                    throw new RuntimeException(e);\n//                }\n//            }\n        }\n\n    }\n```\n\n<br>\n\n<br>\n\n## 字节流：FileInputStream - FileOutputStream\n\n- 使用 FileInputStream、FileOutputStream实现文件复制\n\n```shell\n\t//指定路径下文件的复制\n\t// 使用字节流FileInputStream处理文本文件，可能出现乱码。\n    public void copyFile(String srcPath,String destPath){\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            // File 实例化\n            File srcFile = new File(srcPath);\n            File destFile = new File(destPath);\n\n            // 造流\n            fis = new FileInputStream(srcFile);\n            fos = new FileOutputStream(destFile);\n\n            // 流操作 - 复制的过程\n            byte[] buffer = new byte[1024];\n            int len;\n            while((len = fis.read(buffer)) != -1){\n                fos.write(buffer,0,len);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if(fos != null){\n                //\n                try {\n                    fos.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if(fis != null){\n                try {\n                    fis.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n        }\n    }\n```\n\n<br>\n\n<br>\n\n## 缓冲流：BufferedInputStream - BufferedOutputStream\n\n- 使用 BufferedInputStream 、BufferedOutputStream实现文件复制\n\n```java\n\tpublic void testBuffered (){\n        BufferedInputStream bis = null;\n        BufferedOutputStream bos = null;\n        try {\n            //造文件\n            File srcFile = new File(\"hello.txt\");\n            File distFile = new File(\"hello_word.txt\");\n\n            //造流\n            FileInputStream fis = new FileInputStream(srcFile);\n            FileOutputStream fos = new FileOutputStream(distFile);\n\n            //造缓冲流\n            bis = new BufferedInputStream(fis);\n            bos = new BufferedOutputStream(fos);\n\n            //3.复制的细节：读取、写入\n            byte [] buffered = new byte[10];\n            int len;\n            while ((len=bis.read(buffered)) != -1){\n                bos.write(buffered,0,len);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            //4.资源关闭\n            //要求：先关闭外层的流，再关闭内层的流\n            //说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.\n            if(bos != null){\n                try {\n                    bos.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n            if(bis != null){\n                try {\n                    bis.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n        }\n    }\n```\n\n- 用BufferedReader和BufferedWriter实现文本文件的复制\n\n```java\n    public void testBufferedReaderBufferedWriter(){\n        BufferedReader br = null;\n        BufferedWriter bw = null;\n        try {\n            //创建文件和相应的流\n            br = new BufferedReader(new FileReader(new File(\"dbcp.txt\")));\n            bw = new BufferedWriter(new FileWriter(new File(\"dbcp1.txt\")));\n\n            //读写操作\n            //方式一：使用char[]数组\n//            char[] cbuf = new char[1024];\n//            int len;\n//            while((len = br.read(cbuf)) != -1){\n//                bw.write(cbuf,0,len);\n//    //            bw.flush();\n//            }\n\n            //方式二：使用String\n            String data;\n            while((data = br.readLine()) != null){\n                //方法一：\n//                bw.write(data + \"\\n\");//data中不包含换行符\n                //方法二：\n                bw.write(data);//data中不包含换行符\n                bw.newLine();//提供换行的操作\n\n            }\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            if(bw != null){\n\n                try {\n                    bw.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if(br != null){\n                try {\n                    br.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n        }\n    }\n```\n\n<br>\n\n<br>\n\n## 转换流\n\n- 综合使用InputStreamReader和OutputStreamWriter\n\n```java\n\tpublic void test2() throws Exception {\n        //1.造文件、造流\n        File file1 = new File(\"dbcp.txt\");\n        File file2 = new File(\"dbcp_gbk.txt\");\n\n        FileInputStream fis = new FileInputStream(file1);\n        FileOutputStream fos = new FileOutputStream(file2);\n\n        InputStreamReader isr = new InputStreamReader(fis,\"utf-8\");\n        OutputStreamWriter osw = new OutputStreamWriter(fos,\"gbk\");\n\n        //2.读写过程\n        char[] cbuf = new char[20];\n        int len;\n        while((len = isr.read(cbuf)) != -1){\n            osw.write(cbuf,0,len);\n        }\n\n        //3.关闭资源\n        isr.close();\n        osw.close();\n\n    }\n```\n\n\n\n\n\n\n\n\n\n# 参考与延伸\n\n- [IO流体系基本概念以及常用操作 - 探索字符串](https://string.quest/read/1143888#IO_110)\n- 并发编程网：[Java IO教程](http://ifeve.com/java-io/)\n\n\n\n# 学习备注\n\n> 1. 本文笔记主要根据 尚硅谷的java体系课程的io部分 梳理的\n> 2. 后期 应该对io 体系进行一个更大的梳理，包括java的 file path，还有根据 io ，nio bio aio等进行梳理，要明白自己学习的是哪种流，所以要熟悉io历史\n\n<img src=\"\" width=\"60%\" />\n\n<br>","slug":"Java-I-O-系统","published":1,"updated":"2022-09-18T19:06:30.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsot005odctadxc71cib","content":"<h1 id=\"认识I-O流\"><a href=\"#认识I-O流\" class=\"headerlink\" title=\"认识I/O流\"></a>认识I/O流</h1><ul>\n<li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4rv75wq98ak0.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Java如何解决I-O问题\"><a href=\"#Java如何解决I-O问题\" class=\"headerlink\" title=\"Java如何解决I/O问题\"></a>Java如何解决I/O问题</h1><ul>\n<li>Java将任意数据源或者数据接收端表达为一个具有生成或者接受数据片段能力的对象（以表示“流”的抽象）。Java程序中，对于数据的输入/输出操作以<strong>“流(stream)”</strong> 的方式进行</li>\n<li>流（Stream）是一个抽象的概念，当程序需要读取数据的时候，就会开启一个通向数据源的流，数据源可以是文件，内存，或是网络连接。反过来，当程序需要写入数据的时候，就会开启一个通向目的地的流。</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5l9vtmu8kk00.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<ul>\n<li>java.io包下提供了各种“流”类和接口，且使用装饰器模式来解决扩展功能的问题，用以获取不同种类的数据，并通过标准的方法输入或输出数据</li>\n<li>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的（由这四个类派生出来的子类名称都是以其父类名作为子类名后缀）</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">（抽象基类）</th>\n<th align=\"center\">字节流</th>\n<th align=\"center\">字符流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">输入流</td>\n<td align=\"center\">InputStream</td>\n<td align=\"center\">Reader</td>\n</tr>\n<tr>\n<td align=\"center\">输出流</td>\n<td align=\"center\">OutputStream</td>\n<td align=\"center\">Writer</td>\n</tr>\n</tbody></table>\n<br>\n\n<blockquote>\n<p>Java中所有流流均是由它们派生出来的</p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Java-I-O-流的历史\"><a href=\"#Java-I-O-流的历史\" class=\"headerlink\" title=\"Java I/O 流的历史\"></a>Java I/O 流的历史</h1><ul>\n<li>Java 1.0 I/O库诞生，分为输入和输出两类，面向字节。输入相关的类都继承自InputStream，输出相关的类都继承自OutputStream，且整体使用了装饰器的设计模式</li>\n<li>Java 1.1 对I/O库进行了重大的修改，不但增强了面向字节的类库功能，还新增了面向字符的Reader和Writer，以解决国际化的问题，延续了装饰器的设计模式</li>\n<li>Java 1.4 引入了java.nio(new I/O），使用通道（channel），缓冲区（buffer），选择器（Selector）等措施极大的提升了性能</li>\n<li>Java 1.7/1.8 对难用的文件I/O的操作体验进行了巨大的改进，且新增了Asynchronous IO（AIO），这时nio也有了一个别名，称之为non-blocking I/O</li>\n</ul>\n<blockquote>\n<p><font color=\"red\">Java8 函数式流和 I/O 流之间并无任何关联</font></p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"流的分类\"><a href=\"#流的分类\" class=\"headerlink\" title=\"流的分类\"></a>流的分类</h1><h2 id=\"数据单元：字节流和字符流\"><a href=\"#数据单元：字节流和字符流\" class=\"headerlink\" title=\"数据单元：字节流和字符流\"></a>数据单元：字节流和字符流</h2><ul>\n<li>按操作<font color=\"red\">数据单位</font>不同分为：字节流(8 bit)，字符流(16 bit)</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">字节流(8 bit)</td>\n<td align=\"left\">以字节为单位获取数据，命名上以<code>Stream</code>结尾的流一般是字节流，如FileInputStream、FileOutputStream。 字节流可以处理任何一切形式的数据源，包括音频，视频，图片，纯文本，Word，Excel等等</td>\n</tr>\n<tr>\n<td align=\"center\">字符流(16 bit)</td>\n<td align=\"left\">以字符为单位获取数据，命名上以<code>Reader/Writer</code>结尾的流一般是字符流，如FileReader、FileWriter。<code> </code>字符流只能处理字符串，纯文本等。Java使用Unicode的统一标准字符集，一个字符占用两个字节</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h3 id=\"字节流（InputStream-和-OutputStream）\"><a href=\"#字节流（InputStream-和-OutputStream）\" class=\"headerlink\" title=\"字节流（InputStream 和 OutputStream）\"></a>字节流（InputStream 和 OutputStream）</h3><ul>\n<li>一切的数据在计算机中都可表示为字节</li>\n<li>在不同源之间的字节数据的输入与输出，可形象的表示为“字节的流动”，即字节流</li>\n<li>表示从不同源输入的类：InputStream<ul>\n<li>文件, 字节数组，字符串对象，管道，其他流，网络等…</li>\n</ul>\n</li>\n<li>表示输出到不同源的类：OutputStream</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.29yhndh0ugys.webp\" width=\"80%\" />\n\n<br>\n\n<br>\n\n<h3 id=\"字符流（Reader-和-Writer）\"><a href=\"#字符流（Reader-和-Writer）\" class=\"headerlink\" title=\"字符流（Reader 和 Writer）\"></a>字符流（Reader 和 Writer）</h3><ul>\n<li>Java 1.0时代的I/O流类库只能支持8位字节流，无法妥善处理16位Unicode字符</li>\n<li>Reader和Writer类并不是为了取代InputStream和OutputStream，而是提供了字符操作的能力，为了在所有的I/O操作中都支持Unicode</li>\n<li>在需要操作字符的场景中尽量都使用Reader和Writer相关的类，而在需要进行字节操作的场景中，面向字节的InputStream和OutputStream才是正确的选择，比如读取和写入图片文件，java.util.zip库</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v9r42axexc0.webp\" width=\"80%\" />\n\n<br>\n\n<br>\n\n<h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><ul>\n<li>Unicode(统一码)，它整理和编码了世界上大部分的文字系统，使得电脑可以用更简单的方式呈现和处理文字。它遵循通用字符集 (UCS)并规定了其实现方式，即如何映射为计算机的字节，如何传输等。</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6edn0pzh88g0.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<h3 id=\"Unicode-与-Java\"><a href=\"#Unicode-与-Java\" class=\"headerlink\" title=\"Unicode 与 Java\"></a>Unicode 与 Java</h3><ul>\n<li>Java使用Unicode的统一标准字符集</li>\n<li>Java使用UTF-16编码，所以会将字符串表示为一系列16位的单元，如果标准字符集中字符的数值大于16位（超出U+FFFF），则会拆分为两个16位的单元用以表示一个字符。对于能用16位内数字表示的字符，Unicode的字符数值（Code Point）和UTF-16编码后的16位的单元（Code Unit），是一致的。</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ab2rmmctv80.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<h2 id=\"流的方向：输入流和输出流\"><a href=\"#流的方向：输入流和输出流\" class=\"headerlink\" title=\"流的方向：输入流和输出流\"></a>流的方向：输入流和输出流</h2><ul>\n<li>按数据流的<font color=\"red\">流向</font>不同分为：输入流，输出流</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">输入流</td>\n<td align=\"center\">数据流向是数据源到程序（以InputStream、Reader结尾的流）</td>\n</tr>\n<tr>\n<td align=\"center\">输出流</td>\n<td align=\"center\">数据流向是程序到目的地（以OutputStream、Writer结尾的流）</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"处理对象：节点流和处理流\"><a href=\"#处理对象：节点流和处理流\" class=\"headerlink\" title=\"处理对象：节点流和处理流\"></a>处理对象：节点流和处理流</h2><ul>\n<li>按流的<font color=\"red\">角色</font>（处理对象）的不同分为：节点流，处理流</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">节点流</td>\n<td align=\"left\">可以从或向一个特定的地方（节点）读写数据，如FileInputStream、FileReader、DataInputStream等。 （ 没有节点流，处理流发挥不了任何作用。）</td>\n</tr>\n<tr>\n<td align=\"center\">处理流</td>\n<td align=\"left\">不直接连接到数据源或目的地，是 “处理流的流”。通过对已有的节点流进行包装，通过所封装的流的功能调用实现数据读写，提高性能或提高程序的灵活性。 如BufferedInputStream、BufferedReader等。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。处理流也叫 ”包装流/过滤流“。</td>\n</tr>\n</tbody></table>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7fiok2t2e880.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<h2 id=\"I-O类型\"><a href=\"#I-O类型\" class=\"headerlink\" title=\"I/O类型\"></a>I/O类型</h2><ul>\n<li>按<font color=\"red\">I/O类型</font>来分类</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">文件流</td>\n<td align=\"left\">对文件进行读、写操作 ：FileReader、FileWriter、FileInputStream、FileOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">缓冲流</td>\n<td align=\"left\">在读入或写出时，数据可以基于缓冲批量读写，以减少I/O的次数：BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">内存流</td>\n<td align=\"left\">1.从/向内存数组读写数据: CharArrayReader、 CharArrayWriter、ByteArrayInputStream、ByteArrayOutputStream 2.从/向内存字符串读写数据 StringReader、StringWriter、StringBufferInputStream</td>\n</tr>\n<tr>\n<td align=\"center\">转换流</td>\n<td align=\"left\">按照一定的编码/解码标准将字节流转换为字符流，或进行反向转换（Stream到Reader,Writer的转换类）：InputStreamReader、OutputStreamWriter</td>\n</tr>\n<tr>\n<td align=\"center\">对象流</td>\n<td align=\"left\">字节流与对象实例相互转换,实现对象的序列化 ：ObjectInputStream、ObjectOutputStream 注意: 1.读取顺序和写入顺序一定要一致，不然会读取出错。 2.在对象属性前面加<code>transient</code>关键字，则该对象的属性不会被序列化</td>\n</tr>\n<tr>\n<td align=\"center\">打印流</td>\n<td align=\"left\">只有输出,没有输入，在整个IO包中，打印流是输出信息最方便的类,分为 PrintWriter（字符打印流）、PrintStream(字节打印流)</td>\n</tr>\n<tr>\n<td align=\"center\">DataConversion数据流</td>\n<td align=\"left\">按基本数据类型读/写，可以字节流与基本类型数据相互转换：DataInputStream、DataOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">过滤流</td>\n<td align=\"left\">在数据进行读或写时进行过滤：FilterReader、FilterWriter、FilterInputStream、FilterOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">合并流</td>\n<td align=\"left\">把多个输入流按顺序连接成一个输入流 ：SequenceInputStream</td>\n</tr>\n<tr>\n<td align=\"center\">操作ZIP包流</td>\n<td align=\"left\">ZipInputStream可以读取zip格式的流，ZipOutputStream可以把多份数据写入zip包</td>\n</tr>\n<tr>\n<td align=\"center\">操作JAR包流</td>\n<td align=\"left\">JarInputStream/JarOutputStream,派生自ZipInputStream/ZipOutputStream，它增加的主要功能是直接读取jar文件里面的MANIFEST.MF文件。因为本质上jar包就是zip包，只是额外附加了一些固定的描述文件。</td>\n</tr>\n<tr>\n<td align=\"center\">管道流</td>\n<td align=\"left\">线程交互的时候使用，管道输出流可以连接到管道输入流，以创建通信管道。管道输出流是管道的发送端。通常数据由某个线程写入管道输出流，并由其他线程从连接的管道输入流读取。注意，管道输出流和输入流需要对接。: PipedReader、PipedWriter、PipedInputStream、PipedOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">Counting计数</td>\n<td align=\"left\">在读入数据时对行记数 ：LineNumberReader、LineNumberInputStream</td>\n</tr>\n<tr>\n<td align=\"center\">推回输入流</td>\n<td align=\"left\">通过缓存机制，进行预读 ：PushbackReader、PushbackInputStream</td>\n</tr>\n<tr>\n<td align=\"center\">接收和响应客户端请求流</td>\n<td align=\"left\">servletinputstream：用来读取客户端的请求信息的输入流 servletoutputstream:可以将数据返回到客户端</td>\n</tr>\n<tr>\n<td align=\"center\">随机读取写入流</td>\n<td align=\"left\">RandomAccessFile 既可以读取文件内容，也可以向文件输出数据，RandomAccessFile 对象包含一个记录指针，标识当前读写处的位置，可以控制记录指针从IO任何位置读写文件</td>\n</tr>\n<tr>\n<td align=\"center\">加密流</td>\n<td align=\"left\">对流加密/解密 CipherOutputStream 由一个 OutputStream 和一个 Cipher 组成 ,write() 方法在将数据写出到基础 OutputStream 之前先对该数据进行处理(加密或解密) , 同样CipherInputStream是由InputStream和一个Cipher组成,read()方法在读入时,对数据进行加解密操作</td>\n</tr>\n<tr>\n<td align=\"center\">数字签名流</td>\n<td align=\"left\">DigestInputStream : 最大的特点是在读取的数据的时候已经调用MessageDigest实例的update方法，当数据从底层的数据流中读取之后就只可以直接调用MessageDigest实例的digest()方法了，从而完成对输入数据的摘要加密 DigestOutputStream :最大的特点是在向底层的输出流写入数据的时候已经调用MessageDigest实例的update方法，并作为MessageDigest的输入数据，之后就可以直接调用MessageDigest实例的digest()方法完成加密过程；同样的，是否对数据加密也是由该流的on(boolean b)方法进行控制的，如果设置成false，那么在写出数据的过程中便不会将数据传给update方法，那么此时它跟普通的输出流就没有任何区别了</td>\n</tr>\n</tbody></table>\n<br>\n\n<blockquote>\n<p><em>CipherInputStream和CipherOutputStream与DigestInputStream/DigestOutputStream/类似，只是后者更为彻底，它们不用在显示地调用传入的Cipher对象的update和doFinal方法，加密或解密过程在读写数据的同时已经隐式地完成了</em></p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"I-O-流体系\"><a href=\"#I-O-流体系\" class=\"headerlink\" title=\"I/O 流体系\"></a>I/O 流体系</h1><h2 id=\"I-O流体系图\"><a href=\"#I-O流体系图\" class=\"headerlink\" title=\"I/O流体系图\"></a>I/O流体系图</h2><ul>\n<li>下图基于Java 1.8制作，其中需要注意的是<code>StringBufferInputStream</code>和<code>LineNumberInputStream</code>已被废弃</li>\n</ul>\n<blockquote>\n<p><code>StringBufferInputStream</code>: 该类无法准确的将字符转换为字节，推荐用<code>StringReader</code>来取代使用</p>\n<p><code>LineNumberInputStream</code>: 该类错误地认为字节能恰当地表示字符，推荐使用字符流的类来取代，即<code>LineNumberReader</code></p>\n</blockquote>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.fv0bu32iqn4.webp\" width=\"80%\" />\n\n<p><br><br></p>\n<h2 id=\"I-O流体系类库\"><a href=\"#I-O流体系类库\" class=\"headerlink\" title=\"I/O流体系类库\"></a>I/O流体系类库</h2><table>\n<thead>\n<tr>\n<th align=\"center\">分类</th>\n<th align=\"center\">字节输入流</th>\n<th align=\"center\">字节输出流</th>\n<th align=\"center\">字符输入流</th>\n<th align=\"center\">字符输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><em>抽象基类</em></td>\n<td align=\"center\"><em>InputStream</em></td>\n<td align=\"center\"><em>OutputStream</em></td>\n<td align=\"center\"><em>Reader</em></td>\n<td align=\"center\"><em>Writer</em></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>访问文件</strong></td>\n<td align=\"center\"><strong>FileInputStream</strong></td>\n<td align=\"center\"><strong>FileOutputStream</strong></td>\n<td align=\"center\"><strong>FileReader</strong></td>\n<td align=\"center\"><strong>FileWriter</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>访问数组</strong></td>\n<td align=\"center\"><strong>ByteArrayInputStream</strong></td>\n<td align=\"center\"><strong>ByteArrayOutputStream</strong></td>\n<td align=\"center\"><strong>CharArrayReader</strong></td>\n<td align=\"center\"><strong>CharArrayWriter</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>访问管道</strong></td>\n<td align=\"center\"><strong>PipedInputStream</strong></td>\n<td align=\"center\"><strong>PipedOutputStream</strong></td>\n<td align=\"center\"><strong>PipedReader</strong></td>\n<td align=\"center\"><strong>PipedWriter</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>访问字符串</strong></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"><strong>StringReader</strong></td>\n<td align=\"center\"><strong>StringWriter</strong></td>\n</tr>\n<tr>\n<td align=\"center\">缓冲流</td>\n<td align=\"center\">BufferedInputStream</td>\n<td align=\"center\">BufferedOutputStream</td>\n<td align=\"center\">BufferedReader</td>\n<td align=\"center\">BufferedWriter</td>\n</tr>\n<tr>\n<td align=\"center\">转换流</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">InputStreamReader</td>\n<td align=\"center\">OutputStreamWriter</td>\n</tr>\n<tr>\n<td align=\"center\">对象流</td>\n<td align=\"center\">ObjectInputStream</td>\n<td align=\"center\">ObjectOutputStream</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><em>抽象基类</em></td>\n<td align=\"center\"><em>FilterInputStream</em></td>\n<td align=\"center\"><em>FilterOutputStream</em></td>\n<td align=\"center\"><em>FilterReader</em></td>\n<td align=\"center\"><em>FilterWriter</em></td>\n</tr>\n<tr>\n<td align=\"center\">打印流</td>\n<td align=\"center\"></td>\n<td align=\"center\">PrintStream</td>\n<td align=\"center\"></td>\n<td align=\"center\">PrintWriter</td>\n</tr>\n<tr>\n<td align=\"center\">推回输入流</td>\n<td align=\"center\">PushbackInputStream</td>\n<td align=\"center\"></td>\n<td align=\"center\">PushbackReader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">特殊流</td>\n<td align=\"center\">DataInputStream</td>\n<td align=\"center\">DataOutputStream</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<br>\n\n<blockquote>\n<p>注：表中<strong>粗体</strong>所表示的类代表节点流。<em>斜体</em> 表示的类代表抽象基类，无法直接创建实例。其他的为处理流</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"RandomAccessFile\"><a href=\"#RandomAccessFile\" class=\"headerlink\" title=\"RandomAccessFile\"></a>RandomAccessFile</h2><ul>\n<li>自成体系，Java输入/输出流体系中功能最丰富的文件内容访问类，既可以读取文件内容，也可以向文件输出数据。</li>\n<li>不支持装饰器，无法与InputStream/OutputStream联合起来用</li>\n<li>与普通的输入/输出流不同的是，RandomAccessFile支持跳到文件任意位置读写数据（支持读写随机文件），可将文件视为在磁盘上的一个大的字节数组，我们能通过数组下标（文件指针）来访问里面的内容</li>\n<li>RandomAccessFile对象包含一个记录指针，标识当前读写处的位置，当程序创建一个新的RandomAccessFile对象时，该对象的文件记录指针对于文件头（也就是0处），当读写n个字节后，文件记录指针将会向后移动n个字节，RandomAccessFile可以通过seek()方法自由移动记录指针</li>\n<li>使用RandomAccessFile就必须知道文件的布局，确定要操作的位置</li>\n<li>优先考虑使用nio的内存映射</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"RandomAccessFile使用\"><a href=\"#RandomAccessFile使用\" class=\"headerlink\" title=\"RandomAccessFile使用\"></a>RandomAccessFile使用</h3><ul>\n<li>操作文件记录指针</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回文件记录指针的当前位置</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">getFilePointer</span><span class=\"params\">()</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 将文件记录指针定位到pos位置</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">seek</span><span class=\"params\">(<span class=\"type\">long</span> pos)</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ul>\n<li>RandomAccessFile类在创建对象时，除了指定文件本身，还需要指定一个<code>mode</code>参数。该参数指定RandomAccessFile的访问模式，该参数有如下四个值：</li>\n</ul>\n<blockquote>\n<ol>\n<li>r：以只读方式打开指定文件。如果试图对该RandomAccessFile指定的文件执行写入方法则会抛出IOException</li>\n<li>rw：以读取、写入方式打开指定文件。如果该文件不存在，则尝试创建文件</li>\n<li>rws：以读取、写入方式打开指定文件。相对于rw模式，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备，默认情形下(rw模式下),是使用buffer的,只有cache满的或者使用RandomAccessFile.close()关闭流的时候儿才真正的写到文件</li>\n<li>rwd：与rws类似，只是仅对文件的内容同步更新到磁盘，而不修改文件的元数据</li>\n</ol>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"I-O流的主要类\"><a href=\"#I-O流的主要类\" class=\"headerlink\" title=\"I/O流的主要类\"></a>I/O流的主要类</h2><ul>\n<li>整个Java.io包中最重要的就是5个类和一个接口</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"5个类：\"><a href=\"#5个类：\" class=\"headerlink\" title=\"5个类：\"></a>5个类：</h3><table>\n<thead>\n<tr>\n<th align=\"center\">类</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">File</td>\n<td align=\"center\">表示一个文件或者目录,可以获取文件或目录相关属性,以及创建文件或目录</td>\n</tr>\n<tr>\n<td align=\"center\">InputStream</td>\n<td align=\"center\">字节输入流父类，单位为字节，定义了所有字节输入流的基本操作</td>\n</tr>\n<tr>\n<td align=\"center\">OutputStream</td>\n<td align=\"center\">字节输出流父类，单位为字节，定义了所有字节输出流的基本操作</td>\n</tr>\n<tr>\n<td align=\"center\">Reader</td>\n<td align=\"center\">字符输入流父类，单位为字符，定义了所有字符输入流的基本操作</td>\n</tr>\n<tr>\n<td align=\"center\">Writer</td>\n<td align=\"center\">字符输出流父类，单位为字符，定义了所有字符输出流的基本操作</td>\n</tr>\n</tbody></table>\n<br>\n\n<blockquote>\n<p>Java中所有流均是由它们派生出来的</p>\n<p><strong>jdk 1.4</strong>版本开始引入了新I/O类库，它位于 <code>java.nio</code> 包中，新I/O类库利用通道和缓冲区等来提高I/O操作的效率</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"1个接口：\"><a href=\"#1个接口：\" class=\"headerlink\" title=\"1个接口：\"></a>1个接口：</h3><table>\n<thead>\n<tr>\n<th align=\"center\">类</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Serializable</td>\n<td align=\"center\">序列化/反序列化对象需要实现 Serializable接口</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"I-O流主要三个部分\"><a href=\"#I-O流主要三个部分\" class=\"headerlink\" title=\"I/O流主要三个部分\"></a>I/O流主要三个部分</h2><table>\n<thead>\n<tr>\n<th>部分</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>流式部分</td>\n<td align=\"center\">I/O的主体部分</td>\n</tr>\n<tr>\n<td>非流式部分</td>\n<td align=\"center\">主要包含一些辅助流式部分的类，如：<code>File</code>类、<code>RandomAccessFile</code>类和<code>FileDescriptor</code>等类。 <code>RandomAccessFile</code>（随机读取和写入流）可以从文件的任意位置进行读写）</td>\n</tr>\n<tr>\n<td>其他类</td>\n<td align=\"center\">文件读取部分的与安全相关的类，如：<code>SerializablePermission</code>类，以及与本地操作系统相关的文件系统的类，如：<code>FileSystem</code>类和<code>Win32FileSystem</code>类和<code>WinNTFileSystem</code>类</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"重要I-O流的解读\"><a href=\"#重要I-O流的解读\" class=\"headerlink\" title=\"重要I/O流的解读\"></a>重要I/O流的解读</h2><h3 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h3><br>\n\n<h3 id=\"标准输入、输出流\"><a href=\"#标准输入、输出流\" class=\"headerlink\" title=\"标准输入、输出流\"></a>标准输入、输出流</h3><br>\n\n<h3 id=\"打印流\"><a href=\"#打印流\" class=\"headerlink\" title=\"打印流\"></a>打印流</h3><br>\n\n<h3 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h3><br>\n\n<h3 id=\"对象流\"><a href=\"#对象流\" class=\"headerlink\" title=\"对象流\"></a>对象流</h3><br>\n\n<h3 id=\"随机存取文件流\"><a href=\"#随机存取文件流\" class=\"headerlink\" title=\"随机存取文件流\"></a>随机存取文件流</h3><br>\n\n<br>\n\n<br>\n\n<h1 id=\"I-O流API实践\"><a href=\"#I-O流API实践\" class=\"headerlink\" title=\"I/O流API实践\"></a>I/O流API实践</h1><h2 id=\"字符流：FileReader-FileWriter\"><a href=\"#字符流：FileReader-FileWriter\" class=\"headerlink\" title=\"字符流：FileReader - FileWriter\"></a>字符流：FileReader - FileWriter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从某个文件的内容写入到另一个文件</span></span><br><span class=\"line\"><span class=\"comment\">     *  1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     *     read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     *  2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span></span><br><span class=\"line\"><span class=\"comment\">     *  3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.</span></span><br><span class=\"line\"><span class=\"comment\">     *          File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class=\"line\"><span class=\"comment\">     *          File对应的硬盘中的文件如果存在：</span></span><br><span class=\"line\"><span class=\"comment\">     *                 如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span></span><br><span class=\"line\"><span class=\"comment\">     *                 如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span></span><br><span class=\"line\"><span class=\"comment\">     *  3. 流的关闭顺序，没有严格顺序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFileReaderFileWriter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileWriter</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1.File类的实例化</span></span><br><span class=\"line\">            <span class=\"comment\">// 2.流实例化</span></span><br><span class=\"line\">            fr = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello.txt&quot;</span>));</span><br><span class=\"line\">            fw = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello2.txt&quot;</span>),<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">char</span> [] cbuf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"comment\">// 3.流操作-读入 写出</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fr.read(cbuf)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                fw.write(cbuf,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//4.关闭流资源</span></span><br><span class=\"line\">            <span class=\"comment\">//方式一：</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(fw != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fw.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(fr != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                        fr.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//方式二：</span></span><br><span class=\"line\"><span class=\"comment\">//            if (null != fw)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    fw.close();</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    throw new RuntimeException(e);</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            if (null != fr) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    fr.close();</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    throw new RuntimeException(e);</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"字节流：FileInputStream-FileOutputStream\"><a href=\"#字节流：FileInputStream-FileOutputStream\" class=\"headerlink\" title=\"字节流：FileInputStream - FileOutputStream\"></a>字节流：FileInputStream - FileOutputStream</h2><ul>\n<li>使用 FileInputStream、FileOutputStream实现文件复制</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//指定路径下文件的复制</span><br><span class=\"line\">// 使用字节流FileInputStream处理文本文件，可能出现乱码。</span><br><span class=\"line\">   public void copyFile(String srcPath,String destPath)&#123;</span><br><span class=\"line\">       FileInputStream fis = null;</span><br><span class=\"line\">       FileOutputStream fos = null;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           // File 实例化</span><br><span class=\"line\">           File srcFile = new File(srcPath);</span><br><span class=\"line\">           File destFile = new File(destPath);</span><br><span class=\"line\"></span><br><span class=\"line\">           // 造流</span><br><span class=\"line\">           fis = new FileInputStream(srcFile);</span><br><span class=\"line\">           fos = new FileOutputStream(destFile);</span><br><span class=\"line\"></span><br><span class=\"line\">           // 流操作 - 复制的过程</span><br><span class=\"line\">           byte[] buffer = new byte[1024];</span><br><span class=\"line\">           int len;</span><br><span class=\"line\">           while((len = fis.read(buffer)) != -1)&#123;</span><br><span class=\"line\">               fos.write(buffer,0,len);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125; catch (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; finally &#123;</span><br><span class=\"line\">           if(fos != null)&#123;</span><br><span class=\"line\">               //</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   fos.close();</span><br><span class=\"line\">               &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           if(fis != null)&#123;</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   fis.close();</span><br><span class=\"line\">               &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"缓冲流：BufferedInputStream-BufferedOutputStream\"><a href=\"#缓冲流：BufferedInputStream-BufferedOutputStream\" class=\"headerlink\" title=\"缓冲流：BufferedInputStream - BufferedOutputStream\"></a>缓冲流：BufferedInputStream - BufferedOutputStream</h2><ul>\n<li>使用 BufferedInputStream 、BufferedOutputStream实现文件复制</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBuffered</span> <span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">BufferedInputStream</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       <span class=\"type\">BufferedOutputStream</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//造文件</span></span><br><span class=\"line\">           <span class=\"type\">File</span> <span class=\"variable\">srcFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">           <span class=\"type\">File</span> <span class=\"variable\">distFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello_word.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//造流</span></span><br><span class=\"line\">           <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(srcFile);</span><br><span class=\"line\">           <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(distFile);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//造缓冲流</span></span><br><span class=\"line\">           bis = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(fis);</span><br><span class=\"line\">           bos = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedOutputStream</span>(fos);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//3.复制的细节：读取、写入</span></span><br><span class=\"line\">           <span class=\"type\">byte</span> [] buffered = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">           <span class=\"type\">int</span> len;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> ((len=bis.read(buffered)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">               bos.write(buffered,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//4.资源关闭</span></span><br><span class=\"line\">           <span class=\"comment\">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class=\"line\">           <span class=\"comment\">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(bos != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   bos.close();</span><br><span class=\"line\">               &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(bis != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   bis.close();</span><br><span class=\"line\">               &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用BufferedReader和BufferedWriter实现文本文件的复制</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBufferedReaderBufferedWriter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">BufferedWriter</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建文件和相应的流</span></span><br><span class=\"line\">            br = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;dbcp.txt&quot;</span>)));</span><br><span class=\"line\">            bw = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;dbcp1.txt&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//读写操作</span></span><br><span class=\"line\">            <span class=\"comment\">//方式一：使用char[]数组</span></span><br><span class=\"line\"><span class=\"comment\">//            char[] cbuf = new char[1024];</span></span><br><span class=\"line\"><span class=\"comment\">//            int len;</span></span><br><span class=\"line\"><span class=\"comment\">//            while((len = br.read(cbuf)) != -1)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                bw.write(cbuf,0,len);</span></span><br><span class=\"line\"><span class=\"comment\">//    //            bw.flush();</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//方式二：使用String</span></span><br><span class=\"line\">            String data;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((data = br.readLine()) != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//方法一：</span></span><br><span class=\"line\"><span class=\"comment\">//                bw.write(data + &quot;\\n&quot;);//data中不包含换行符</span></span><br><span class=\"line\">                <span class=\"comment\">//方法二：</span></span><br><span class=\"line\">                bw.write(data);<span class=\"comment\">//data中不包含换行符</span></span><br><span class=\"line\">                bw.newLine();<span class=\"comment\">//提供换行的操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bw != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    bw.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(br != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"转换流-1\"><a href=\"#转换流-1\" class=\"headerlink\" title=\"转换流\"></a>转换流</h2><ul>\n<li>综合使用InputStreamReader和OutputStreamWriter</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">       <span class=\"comment\">//1.造文件、造流</span></span><br><span class=\"line\">       <span class=\"type\">File</span> <span class=\"variable\">file1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;dbcp.txt&quot;</span>);</span><br><span class=\"line\">       <span class=\"type\">File</span> <span class=\"variable\">file2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;dbcp_gbk.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file1);</span><br><span class=\"line\">       <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file2);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">InputStreamReader</span> <span class=\"variable\">isr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fis,<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">       <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">osw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(fos,<span class=\"string\">&quot;gbk&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//2.读写过程</span></span><br><span class=\"line\">       <span class=\"type\">char</span>[] cbuf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">20</span>];</span><br><span class=\"line\">       <span class=\"type\">int</span> len;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>((len = isr.read(cbuf)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">           osw.write(cbuf,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//3.关闭资源</span></span><br><span class=\"line\">       isr.close();</span><br><span class=\"line\">       osw.close();</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h1 id=\"参考与延伸\"><a href=\"#参考与延伸\" class=\"headerlink\" title=\"参考与延伸\"></a>参考与延伸</h1><ul>\n<li><a class=\"link\"   href=\"https://string.quest/read/1143888#IO_110\" >IO流体系基本概念以及常用操作 - 探索字符串<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>并发编程网：<a class=\"link\"   href=\"http://ifeve.com/java-io/\" >Java IO教程<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>本文笔记主要根据 尚硅谷的java体系课程的io部分 梳理的</li>\n<li>后期 应该对io 体系进行一个更大的梳理，包括java的 file path，还有根据 io ，nio bio aio等进行梳理，要明白自己学习的是哪种流，所以要熟悉io历史</li>\n</ol>\n</blockquote>\n<img src=\"\" width=\"60%\" />\n\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"认识I-O流\"><a href=\"#认识I-O流\" class=\"headerlink\" title=\"认识I/O流\"></a>认识I/O流</h1><ul>\n<li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4rv75wq98ak0.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Java如何解决I-O问题\"><a href=\"#Java如何解决I-O问题\" class=\"headerlink\" title=\"Java如何解决I/O问题\"></a>Java如何解决I/O问题</h1><ul>\n<li>Java将任意数据源或者数据接收端表达为一个具有生成或者接受数据片段能力的对象（以表示“流”的抽象）。Java程序中，对于数据的输入/输出操作以<strong>“流(stream)”</strong> 的方式进行</li>\n<li>流（Stream）是一个抽象的概念，当程序需要读取数据的时候，就会开启一个通向数据源的流，数据源可以是文件，内存，或是网络连接。反过来，当程序需要写入数据的时候，就会开启一个通向目的地的流。</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5l9vtmu8kk00.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<ul>\n<li>java.io包下提供了各种“流”类和接口，且使用装饰器模式来解决扩展功能的问题，用以获取不同种类的数据，并通过标准的方法输入或输出数据</li>\n<li>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的（由这四个类派生出来的子类名称都是以其父类名作为子类名后缀）</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">（抽象基类）</th>\n<th align=\"center\">字节流</th>\n<th align=\"center\">字符流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">输入流</td>\n<td align=\"center\">InputStream</td>\n<td align=\"center\">Reader</td>\n</tr>\n<tr>\n<td align=\"center\">输出流</td>\n<td align=\"center\">OutputStream</td>\n<td align=\"center\">Writer</td>\n</tr>\n</tbody></table>\n<br>\n\n<blockquote>\n<p>Java中所有流流均是由它们派生出来的</p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Java-I-O-流的历史\"><a href=\"#Java-I-O-流的历史\" class=\"headerlink\" title=\"Java I/O 流的历史\"></a>Java I/O 流的历史</h1><ul>\n<li>Java 1.0 I/O库诞生，分为输入和输出两类，面向字节。输入相关的类都继承自InputStream，输出相关的类都继承自OutputStream，且整体使用了装饰器的设计模式</li>\n<li>Java 1.1 对I/O库进行了重大的修改，不但增强了面向字节的类库功能，还新增了面向字符的Reader和Writer，以解决国际化的问题，延续了装饰器的设计模式</li>\n<li>Java 1.4 引入了java.nio(new I/O），使用通道（channel），缓冲区（buffer），选择器（Selector）等措施极大的提升了性能</li>\n<li>Java 1.7/1.8 对难用的文件I/O的操作体验进行了巨大的改进，且新增了Asynchronous IO（AIO），这时nio也有了一个别名，称之为non-blocking I/O</li>\n</ul>\n<blockquote>\n<p><font color=\"red\">Java8 函数式流和 I/O 流之间并无任何关联</font></p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"流的分类\"><a href=\"#流的分类\" class=\"headerlink\" title=\"流的分类\"></a>流的分类</h1><h2 id=\"数据单元：字节流和字符流\"><a href=\"#数据单元：字节流和字符流\" class=\"headerlink\" title=\"数据单元：字节流和字符流\"></a>数据单元：字节流和字符流</h2><ul>\n<li>按操作<font color=\"red\">数据单位</font>不同分为：字节流(8 bit)，字符流(16 bit)</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">字节流(8 bit)</td>\n<td align=\"left\">以字节为单位获取数据，命名上以<code>Stream</code>结尾的流一般是字节流，如FileInputStream、FileOutputStream。 字节流可以处理任何一切形式的数据源，包括音频，视频，图片，纯文本，Word，Excel等等</td>\n</tr>\n<tr>\n<td align=\"center\">字符流(16 bit)</td>\n<td align=\"left\">以字符为单位获取数据，命名上以<code>Reader/Writer</code>结尾的流一般是字符流，如FileReader、FileWriter。<code> </code>字符流只能处理字符串，纯文本等。Java使用Unicode的统一标准字符集，一个字符占用两个字节</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h3 id=\"字节流（InputStream-和-OutputStream）\"><a href=\"#字节流（InputStream-和-OutputStream）\" class=\"headerlink\" title=\"字节流（InputStream 和 OutputStream）\"></a>字节流（InputStream 和 OutputStream）</h3><ul>\n<li>一切的数据在计算机中都可表示为字节</li>\n<li>在不同源之间的字节数据的输入与输出，可形象的表示为“字节的流动”，即字节流</li>\n<li>表示从不同源输入的类：InputStream<ul>\n<li>文件, 字节数组，字符串对象，管道，其他流，网络等…</li>\n</ul>\n</li>\n<li>表示输出到不同源的类：OutputStream</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.29yhndh0ugys.webp\" width=\"80%\" />\n\n<br>\n\n<br>\n\n<h3 id=\"字符流（Reader-和-Writer）\"><a href=\"#字符流（Reader-和-Writer）\" class=\"headerlink\" title=\"字符流（Reader 和 Writer）\"></a>字符流（Reader 和 Writer）</h3><ul>\n<li>Java 1.0时代的I/O流类库只能支持8位字节流，无法妥善处理16位Unicode字符</li>\n<li>Reader和Writer类并不是为了取代InputStream和OutputStream，而是提供了字符操作的能力，为了在所有的I/O操作中都支持Unicode</li>\n<li>在需要操作字符的场景中尽量都使用Reader和Writer相关的类，而在需要进行字节操作的场景中，面向字节的InputStream和OutputStream才是正确的选择，比如读取和写入图片文件，java.util.zip库</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v9r42axexc0.webp\" width=\"80%\" />\n\n<br>\n\n<br>\n\n<h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><ul>\n<li>Unicode(统一码)，它整理和编码了世界上大部分的文字系统，使得电脑可以用更简单的方式呈现和处理文字。它遵循通用字符集 (UCS)并规定了其实现方式，即如何映射为计算机的字节，如何传输等。</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6edn0pzh88g0.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<h3 id=\"Unicode-与-Java\"><a href=\"#Unicode-与-Java\" class=\"headerlink\" title=\"Unicode 与 Java\"></a>Unicode 与 Java</h3><ul>\n<li>Java使用Unicode的统一标准字符集</li>\n<li>Java使用UTF-16编码，所以会将字符串表示为一系列16位的单元，如果标准字符集中字符的数值大于16位（超出U+FFFF），则会拆分为两个16位的单元用以表示一个字符。对于能用16位内数字表示的字符，Unicode的字符数值（Code Point）和UTF-16编码后的16位的单元（Code Unit），是一致的。</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ab2rmmctv80.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<h2 id=\"流的方向：输入流和输出流\"><a href=\"#流的方向：输入流和输出流\" class=\"headerlink\" title=\"流的方向：输入流和输出流\"></a>流的方向：输入流和输出流</h2><ul>\n<li>按数据流的<font color=\"red\">流向</font>不同分为：输入流，输出流</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">输入流</td>\n<td align=\"center\">数据流向是数据源到程序（以InputStream、Reader结尾的流）</td>\n</tr>\n<tr>\n<td align=\"center\">输出流</td>\n<td align=\"center\">数据流向是程序到目的地（以OutputStream、Writer结尾的流）</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"处理对象：节点流和处理流\"><a href=\"#处理对象：节点流和处理流\" class=\"headerlink\" title=\"处理对象：节点流和处理流\"></a>处理对象：节点流和处理流</h2><ul>\n<li>按流的<font color=\"red\">角色</font>（处理对象）的不同分为：节点流，处理流</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">节点流</td>\n<td align=\"left\">可以从或向一个特定的地方（节点）读写数据，如FileInputStream、FileReader、DataInputStream等。 （ 没有节点流，处理流发挥不了任何作用。）</td>\n</tr>\n<tr>\n<td align=\"center\">处理流</td>\n<td align=\"left\">不直接连接到数据源或目的地，是 “处理流的流”。通过对已有的节点流进行包装，通过所封装的流的功能调用实现数据读写，提高性能或提高程序的灵活性。 如BufferedInputStream、BufferedReader等。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。处理流也叫 ”包装流/过滤流“。</td>\n</tr>\n</tbody></table>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7fiok2t2e880.webp\" width=\"60%\" />\n\n<br>\n\n<br>\n\n<h2 id=\"I-O类型\"><a href=\"#I-O类型\" class=\"headerlink\" title=\"I/O类型\"></a>I/O类型</h2><ul>\n<li>按<font color=\"red\">I/O类型</font>来分类</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">文件流</td>\n<td align=\"left\">对文件进行读、写操作 ：FileReader、FileWriter、FileInputStream、FileOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">缓冲流</td>\n<td align=\"left\">在读入或写出时，数据可以基于缓冲批量读写，以减少I/O的次数：BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">内存流</td>\n<td align=\"left\">1.从/向内存数组读写数据: CharArrayReader、 CharArrayWriter、ByteArrayInputStream、ByteArrayOutputStream 2.从/向内存字符串读写数据 StringReader、StringWriter、StringBufferInputStream</td>\n</tr>\n<tr>\n<td align=\"center\">转换流</td>\n<td align=\"left\">按照一定的编码/解码标准将字节流转换为字符流，或进行反向转换（Stream到Reader,Writer的转换类）：InputStreamReader、OutputStreamWriter</td>\n</tr>\n<tr>\n<td align=\"center\">对象流</td>\n<td align=\"left\">字节流与对象实例相互转换,实现对象的序列化 ：ObjectInputStream、ObjectOutputStream 注意: 1.读取顺序和写入顺序一定要一致，不然会读取出错。 2.在对象属性前面加<code>transient</code>关键字，则该对象的属性不会被序列化</td>\n</tr>\n<tr>\n<td align=\"center\">打印流</td>\n<td align=\"left\">只有输出,没有输入，在整个IO包中，打印流是输出信息最方便的类,分为 PrintWriter（字符打印流）、PrintStream(字节打印流)</td>\n</tr>\n<tr>\n<td align=\"center\">DataConversion数据流</td>\n<td align=\"left\">按基本数据类型读/写，可以字节流与基本类型数据相互转换：DataInputStream、DataOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">过滤流</td>\n<td align=\"left\">在数据进行读或写时进行过滤：FilterReader、FilterWriter、FilterInputStream、FilterOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">合并流</td>\n<td align=\"left\">把多个输入流按顺序连接成一个输入流 ：SequenceInputStream</td>\n</tr>\n<tr>\n<td align=\"center\">操作ZIP包流</td>\n<td align=\"left\">ZipInputStream可以读取zip格式的流，ZipOutputStream可以把多份数据写入zip包</td>\n</tr>\n<tr>\n<td align=\"center\">操作JAR包流</td>\n<td align=\"left\">JarInputStream/JarOutputStream,派生自ZipInputStream/ZipOutputStream，它增加的主要功能是直接读取jar文件里面的MANIFEST.MF文件。因为本质上jar包就是zip包，只是额外附加了一些固定的描述文件。</td>\n</tr>\n<tr>\n<td align=\"center\">管道流</td>\n<td align=\"left\">线程交互的时候使用，管道输出流可以连接到管道输入流，以创建通信管道。管道输出流是管道的发送端。通常数据由某个线程写入管道输出流，并由其他线程从连接的管道输入流读取。注意，管道输出流和输入流需要对接。: PipedReader、PipedWriter、PipedInputStream、PipedOutputStream</td>\n</tr>\n<tr>\n<td align=\"center\">Counting计数</td>\n<td align=\"left\">在读入数据时对行记数 ：LineNumberReader、LineNumberInputStream</td>\n</tr>\n<tr>\n<td align=\"center\">推回输入流</td>\n<td align=\"left\">通过缓存机制，进行预读 ：PushbackReader、PushbackInputStream</td>\n</tr>\n<tr>\n<td align=\"center\">接收和响应客户端请求流</td>\n<td align=\"left\">servletinputstream：用来读取客户端的请求信息的输入流 servletoutputstream:可以将数据返回到客户端</td>\n</tr>\n<tr>\n<td align=\"center\">随机读取写入流</td>\n<td align=\"left\">RandomAccessFile 既可以读取文件内容，也可以向文件输出数据，RandomAccessFile 对象包含一个记录指针，标识当前读写处的位置，可以控制记录指针从IO任何位置读写文件</td>\n</tr>\n<tr>\n<td align=\"center\">加密流</td>\n<td align=\"left\">对流加密/解密 CipherOutputStream 由一个 OutputStream 和一个 Cipher 组成 ,write() 方法在将数据写出到基础 OutputStream 之前先对该数据进行处理(加密或解密) , 同样CipherInputStream是由InputStream和一个Cipher组成,read()方法在读入时,对数据进行加解密操作</td>\n</tr>\n<tr>\n<td align=\"center\">数字签名流</td>\n<td align=\"left\">DigestInputStream : 最大的特点是在读取的数据的时候已经调用MessageDigest实例的update方法，当数据从底层的数据流中读取之后就只可以直接调用MessageDigest实例的digest()方法了，从而完成对输入数据的摘要加密 DigestOutputStream :最大的特点是在向底层的输出流写入数据的时候已经调用MessageDigest实例的update方法，并作为MessageDigest的输入数据，之后就可以直接调用MessageDigest实例的digest()方法完成加密过程；同样的，是否对数据加密也是由该流的on(boolean b)方法进行控制的，如果设置成false，那么在写出数据的过程中便不会将数据传给update方法，那么此时它跟普通的输出流就没有任何区别了</td>\n</tr>\n</tbody></table>\n<br>\n\n<blockquote>\n<p><em>CipherInputStream和CipherOutputStream与DigestInputStream/DigestOutputStream/类似，只是后者更为彻底，它们不用在显示地调用传入的Cipher对象的update和doFinal方法，加密或解密过程在读写数据的同时已经隐式地完成了</em></p>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"I-O-流体系\"><a href=\"#I-O-流体系\" class=\"headerlink\" title=\"I/O 流体系\"></a>I/O 流体系</h1><h2 id=\"I-O流体系图\"><a href=\"#I-O流体系图\" class=\"headerlink\" title=\"I/O流体系图\"></a>I/O流体系图</h2><ul>\n<li>下图基于Java 1.8制作，其中需要注意的是<code>StringBufferInputStream</code>和<code>LineNumberInputStream</code>已被废弃</li>\n</ul>\n<blockquote>\n<p><code>StringBufferInputStream</code>: 该类无法准确的将字符转换为字节，推荐用<code>StringReader</code>来取代使用</p>\n<p><code>LineNumberInputStream</code>: 该类错误地认为字节能恰当地表示字符，推荐使用字符流的类来取代，即<code>LineNumberReader</code></p>\n</blockquote>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.fv0bu32iqn4.webp\" width=\"80%\" />\n\n<p><br><br></p>\n<h2 id=\"I-O流体系类库\"><a href=\"#I-O流体系类库\" class=\"headerlink\" title=\"I/O流体系类库\"></a>I/O流体系类库</h2><table>\n<thead>\n<tr>\n<th align=\"center\">分类</th>\n<th align=\"center\">字节输入流</th>\n<th align=\"center\">字节输出流</th>\n<th align=\"center\">字符输入流</th>\n<th align=\"center\">字符输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><em>抽象基类</em></td>\n<td align=\"center\"><em>InputStream</em></td>\n<td align=\"center\"><em>OutputStream</em></td>\n<td align=\"center\"><em>Reader</em></td>\n<td align=\"center\"><em>Writer</em></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>访问文件</strong></td>\n<td align=\"center\"><strong>FileInputStream</strong></td>\n<td align=\"center\"><strong>FileOutputStream</strong></td>\n<td align=\"center\"><strong>FileReader</strong></td>\n<td align=\"center\"><strong>FileWriter</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>访问数组</strong></td>\n<td align=\"center\"><strong>ByteArrayInputStream</strong></td>\n<td align=\"center\"><strong>ByteArrayOutputStream</strong></td>\n<td align=\"center\"><strong>CharArrayReader</strong></td>\n<td align=\"center\"><strong>CharArrayWriter</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>访问管道</strong></td>\n<td align=\"center\"><strong>PipedInputStream</strong></td>\n<td align=\"center\"><strong>PipedOutputStream</strong></td>\n<td align=\"center\"><strong>PipedReader</strong></td>\n<td align=\"center\"><strong>PipedWriter</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>访问字符串</strong></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"><strong>StringReader</strong></td>\n<td align=\"center\"><strong>StringWriter</strong></td>\n</tr>\n<tr>\n<td align=\"center\">缓冲流</td>\n<td align=\"center\">BufferedInputStream</td>\n<td align=\"center\">BufferedOutputStream</td>\n<td align=\"center\">BufferedReader</td>\n<td align=\"center\">BufferedWriter</td>\n</tr>\n<tr>\n<td align=\"center\">转换流</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">InputStreamReader</td>\n<td align=\"center\">OutputStreamWriter</td>\n</tr>\n<tr>\n<td align=\"center\">对象流</td>\n<td align=\"center\">ObjectInputStream</td>\n<td align=\"center\">ObjectOutputStream</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><em>抽象基类</em></td>\n<td align=\"center\"><em>FilterInputStream</em></td>\n<td align=\"center\"><em>FilterOutputStream</em></td>\n<td align=\"center\"><em>FilterReader</em></td>\n<td align=\"center\"><em>FilterWriter</em></td>\n</tr>\n<tr>\n<td align=\"center\">打印流</td>\n<td align=\"center\"></td>\n<td align=\"center\">PrintStream</td>\n<td align=\"center\"></td>\n<td align=\"center\">PrintWriter</td>\n</tr>\n<tr>\n<td align=\"center\">推回输入流</td>\n<td align=\"center\">PushbackInputStream</td>\n<td align=\"center\"></td>\n<td align=\"center\">PushbackReader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">特殊流</td>\n<td align=\"center\">DataInputStream</td>\n<td align=\"center\">DataOutputStream</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<br>\n\n<blockquote>\n<p>注：表中<strong>粗体</strong>所表示的类代表节点流。<em>斜体</em> 表示的类代表抽象基类，无法直接创建实例。其他的为处理流</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"RandomAccessFile\"><a href=\"#RandomAccessFile\" class=\"headerlink\" title=\"RandomAccessFile\"></a>RandomAccessFile</h2><ul>\n<li>自成体系，Java输入/输出流体系中功能最丰富的文件内容访问类，既可以读取文件内容，也可以向文件输出数据。</li>\n<li>不支持装饰器，无法与InputStream/OutputStream联合起来用</li>\n<li>与普通的输入/输出流不同的是，RandomAccessFile支持跳到文件任意位置读写数据（支持读写随机文件），可将文件视为在磁盘上的一个大的字节数组，我们能通过数组下标（文件指针）来访问里面的内容</li>\n<li>RandomAccessFile对象包含一个记录指针，标识当前读写处的位置，当程序创建一个新的RandomAccessFile对象时，该对象的文件记录指针对于文件头（也就是0处），当读写n个字节后，文件记录指针将会向后移动n个字节，RandomAccessFile可以通过seek()方法自由移动记录指针</li>\n<li>使用RandomAccessFile就必须知道文件的布局，确定要操作的位置</li>\n<li>优先考虑使用nio的内存映射</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"RandomAccessFile使用\"><a href=\"#RandomAccessFile使用\" class=\"headerlink\" title=\"RandomAccessFile使用\"></a>RandomAccessFile使用</h3><ul>\n<li>操作文件记录指针</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回文件记录指针的当前位置</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">getFilePointer</span><span class=\"params\">()</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 将文件记录指针定位到pos位置</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">seek</span><span class=\"params\">(<span class=\"type\">long</span> pos)</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ul>\n<li>RandomAccessFile类在创建对象时，除了指定文件本身，还需要指定一个<code>mode</code>参数。该参数指定RandomAccessFile的访问模式，该参数有如下四个值：</li>\n</ul>\n<blockquote>\n<ol>\n<li>r：以只读方式打开指定文件。如果试图对该RandomAccessFile指定的文件执行写入方法则会抛出IOException</li>\n<li>rw：以读取、写入方式打开指定文件。如果该文件不存在，则尝试创建文件</li>\n<li>rws：以读取、写入方式打开指定文件。相对于rw模式，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备，默认情形下(rw模式下),是使用buffer的,只有cache满的或者使用RandomAccessFile.close()关闭流的时候儿才真正的写到文件</li>\n<li>rwd：与rws类似，只是仅对文件的内容同步更新到磁盘，而不修改文件的元数据</li>\n</ol>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"I-O流的主要类\"><a href=\"#I-O流的主要类\" class=\"headerlink\" title=\"I/O流的主要类\"></a>I/O流的主要类</h2><ul>\n<li>整个Java.io包中最重要的就是5个类和一个接口</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"5个类：\"><a href=\"#5个类：\" class=\"headerlink\" title=\"5个类：\"></a>5个类：</h3><table>\n<thead>\n<tr>\n<th align=\"center\">类</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">File</td>\n<td align=\"center\">表示一个文件或者目录,可以获取文件或目录相关属性,以及创建文件或目录</td>\n</tr>\n<tr>\n<td align=\"center\">InputStream</td>\n<td align=\"center\">字节输入流父类，单位为字节，定义了所有字节输入流的基本操作</td>\n</tr>\n<tr>\n<td align=\"center\">OutputStream</td>\n<td align=\"center\">字节输出流父类，单位为字节，定义了所有字节输出流的基本操作</td>\n</tr>\n<tr>\n<td align=\"center\">Reader</td>\n<td align=\"center\">字符输入流父类，单位为字符，定义了所有字符输入流的基本操作</td>\n</tr>\n<tr>\n<td align=\"center\">Writer</td>\n<td align=\"center\">字符输出流父类，单位为字符，定义了所有字符输出流的基本操作</td>\n</tr>\n</tbody></table>\n<br>\n\n<blockquote>\n<p>Java中所有流均是由它们派生出来的</p>\n<p><strong>jdk 1.4</strong>版本开始引入了新I/O类库，它位于 <code>java.nio</code> 包中，新I/O类库利用通道和缓冲区等来提高I/O操作的效率</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"1个接口：\"><a href=\"#1个接口：\" class=\"headerlink\" title=\"1个接口：\"></a>1个接口：</h3><table>\n<thead>\n<tr>\n<th align=\"center\">类</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Serializable</td>\n<td align=\"center\">序列化/反序列化对象需要实现 Serializable接口</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"I-O流主要三个部分\"><a href=\"#I-O流主要三个部分\" class=\"headerlink\" title=\"I/O流主要三个部分\"></a>I/O流主要三个部分</h2><table>\n<thead>\n<tr>\n<th>部分</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>流式部分</td>\n<td align=\"center\">I/O的主体部分</td>\n</tr>\n<tr>\n<td>非流式部分</td>\n<td align=\"center\">主要包含一些辅助流式部分的类，如：<code>File</code>类、<code>RandomAccessFile</code>类和<code>FileDescriptor</code>等类。 <code>RandomAccessFile</code>（随机读取和写入流）可以从文件的任意位置进行读写）</td>\n</tr>\n<tr>\n<td>其他类</td>\n<td align=\"center\">文件读取部分的与安全相关的类，如：<code>SerializablePermission</code>类，以及与本地操作系统相关的文件系统的类，如：<code>FileSystem</code>类和<code>Win32FileSystem</code>类和<code>WinNTFileSystem</code>类</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"重要I-O流的解读\"><a href=\"#重要I-O流的解读\" class=\"headerlink\" title=\"重要I/O流的解读\"></a>重要I/O流的解读</h2><h3 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h3><br>\n\n<h3 id=\"标准输入、输出流\"><a href=\"#标准输入、输出流\" class=\"headerlink\" title=\"标准输入、输出流\"></a>标准输入、输出流</h3><br>\n\n<h3 id=\"打印流\"><a href=\"#打印流\" class=\"headerlink\" title=\"打印流\"></a>打印流</h3><br>\n\n<h3 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h3><br>\n\n<h3 id=\"对象流\"><a href=\"#对象流\" class=\"headerlink\" title=\"对象流\"></a>对象流</h3><br>\n\n<h3 id=\"随机存取文件流\"><a href=\"#随机存取文件流\" class=\"headerlink\" title=\"随机存取文件流\"></a>随机存取文件流</h3><br>\n\n<br>\n\n<br>\n\n<h1 id=\"I-O流API实践\"><a href=\"#I-O流API实践\" class=\"headerlink\" title=\"I/O流API实践\"></a>I/O流API实践</h1><h2 id=\"字符流：FileReader-FileWriter\"><a href=\"#字符流：FileReader-FileWriter\" class=\"headerlink\" title=\"字符流：FileReader - FileWriter\"></a>字符流：FileReader - FileWriter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从某个文件的内容写入到另一个文件</span></span><br><span class=\"line\"><span class=\"comment\">     *  1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     *     read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     *  2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span></span><br><span class=\"line\"><span class=\"comment\">     *  3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.</span></span><br><span class=\"line\"><span class=\"comment\">     *          File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class=\"line\"><span class=\"comment\">     *          File对应的硬盘中的文件如果存在：</span></span><br><span class=\"line\"><span class=\"comment\">     *                 如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span></span><br><span class=\"line\"><span class=\"comment\">     *                 如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span></span><br><span class=\"line\"><span class=\"comment\">     *  3. 流的关闭顺序，没有严格顺序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFileReaderFileWriter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">FileWriter</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1.File类的实例化</span></span><br><span class=\"line\">            <span class=\"comment\">// 2.流实例化</span></span><br><span class=\"line\">            fr = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello.txt&quot;</span>));</span><br><span class=\"line\">            fw = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello2.txt&quot;</span>),<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">char</span> [] cbuf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len;</span><br><span class=\"line\">            <span class=\"comment\">// 3.流操作-读入 写出</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fr.read(cbuf)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                fw.write(cbuf,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//4.关闭流资源</span></span><br><span class=\"line\">            <span class=\"comment\">//方式一：</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(fw != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    fw.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(fr != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                        fr.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//方式二：</span></span><br><span class=\"line\"><span class=\"comment\">//            if (null != fw)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    fw.close();</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    throw new RuntimeException(e);</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            if (null != fr) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    fr.close();</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    throw new RuntimeException(e);</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"字节流：FileInputStream-FileOutputStream\"><a href=\"#字节流：FileInputStream-FileOutputStream\" class=\"headerlink\" title=\"字节流：FileInputStream - FileOutputStream\"></a>字节流：FileInputStream - FileOutputStream</h2><ul>\n<li>使用 FileInputStream、FileOutputStream实现文件复制</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//指定路径下文件的复制</span><br><span class=\"line\">// 使用字节流FileInputStream处理文本文件，可能出现乱码。</span><br><span class=\"line\">   public void copyFile(String srcPath,String destPath)&#123;</span><br><span class=\"line\">       FileInputStream fis = null;</span><br><span class=\"line\">       FileOutputStream fos = null;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           // File 实例化</span><br><span class=\"line\">           File srcFile = new File(srcPath);</span><br><span class=\"line\">           File destFile = new File(destPath);</span><br><span class=\"line\"></span><br><span class=\"line\">           // 造流</span><br><span class=\"line\">           fis = new FileInputStream(srcFile);</span><br><span class=\"line\">           fos = new FileOutputStream(destFile);</span><br><span class=\"line\"></span><br><span class=\"line\">           // 流操作 - 复制的过程</span><br><span class=\"line\">           byte[] buffer = new byte[1024];</span><br><span class=\"line\">           int len;</span><br><span class=\"line\">           while((len = fis.read(buffer)) != -1)&#123;</span><br><span class=\"line\">               fos.write(buffer,0,len);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125; catch (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; finally &#123;</span><br><span class=\"line\">           if(fos != null)&#123;</span><br><span class=\"line\">               //</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   fos.close();</span><br><span class=\"line\">               &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           if(fis != null)&#123;</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   fis.close();</span><br><span class=\"line\">               &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"缓冲流：BufferedInputStream-BufferedOutputStream\"><a href=\"#缓冲流：BufferedInputStream-BufferedOutputStream\" class=\"headerlink\" title=\"缓冲流：BufferedInputStream - BufferedOutputStream\"></a>缓冲流：BufferedInputStream - BufferedOutputStream</h2><ul>\n<li>使用 BufferedInputStream 、BufferedOutputStream实现文件复制</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBuffered</span> <span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">BufferedInputStream</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       <span class=\"type\">BufferedOutputStream</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//造文件</span></span><br><span class=\"line\">           <span class=\"type\">File</span> <span class=\"variable\">srcFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">           <span class=\"type\">File</span> <span class=\"variable\">distFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello_word.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//造流</span></span><br><span class=\"line\">           <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(srcFile);</span><br><span class=\"line\">           <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(distFile);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//造缓冲流</span></span><br><span class=\"line\">           bis = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(fis);</span><br><span class=\"line\">           bos = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedOutputStream</span>(fos);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//3.复制的细节：读取、写入</span></span><br><span class=\"line\">           <span class=\"type\">byte</span> [] buffered = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">           <span class=\"type\">int</span> len;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> ((len=bis.read(buffered)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">               bos.write(buffered,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//4.资源关闭</span></span><br><span class=\"line\">           <span class=\"comment\">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class=\"line\">           <span class=\"comment\">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(bos != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   bos.close();</span><br><span class=\"line\">               &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(bis != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   bis.close();</span><br><span class=\"line\">               &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用BufferedReader和BufferedWriter实现文本文件的复制</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBufferedReaderBufferedWriter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">BufferedWriter</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建文件和相应的流</span></span><br><span class=\"line\">            br = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;dbcp.txt&quot;</span>)));</span><br><span class=\"line\">            bw = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;dbcp1.txt&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//读写操作</span></span><br><span class=\"line\">            <span class=\"comment\">//方式一：使用char[]数组</span></span><br><span class=\"line\"><span class=\"comment\">//            char[] cbuf = new char[1024];</span></span><br><span class=\"line\"><span class=\"comment\">//            int len;</span></span><br><span class=\"line\"><span class=\"comment\">//            while((len = br.read(cbuf)) != -1)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                bw.write(cbuf,0,len);</span></span><br><span class=\"line\"><span class=\"comment\">//    //            bw.flush();</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//方式二：使用String</span></span><br><span class=\"line\">            String data;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((data = br.readLine()) != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//方法一：</span></span><br><span class=\"line\"><span class=\"comment\">//                bw.write(data + &quot;\\n&quot;);//data中不包含换行符</span></span><br><span class=\"line\">                <span class=\"comment\">//方法二：</span></span><br><span class=\"line\">                bw.write(data);<span class=\"comment\">//data中不包含换行符</span></span><br><span class=\"line\">                bw.newLine();<span class=\"comment\">//提供换行的操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bw != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    bw.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(br != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"转换流-1\"><a href=\"#转换流-1\" class=\"headerlink\" title=\"转换流\"></a>转换流</h2><ul>\n<li>综合使用InputStreamReader和OutputStreamWriter</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">       <span class=\"comment\">//1.造文件、造流</span></span><br><span class=\"line\">       <span class=\"type\">File</span> <span class=\"variable\">file1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;dbcp.txt&quot;</span>);</span><br><span class=\"line\">       <span class=\"type\">File</span> <span class=\"variable\">file2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;dbcp_gbk.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file1);</span><br><span class=\"line\">       <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file2);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">InputStreamReader</span> <span class=\"variable\">isr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fis,<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">       <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">osw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(fos,<span class=\"string\">&quot;gbk&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//2.读写过程</span></span><br><span class=\"line\">       <span class=\"type\">char</span>[] cbuf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">20</span>];</span><br><span class=\"line\">       <span class=\"type\">int</span> len;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>((len = isr.read(cbuf)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">           osw.write(cbuf,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//3.关闭资源</span></span><br><span class=\"line\">       isr.close();</span><br><span class=\"line\">       osw.close();</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h1 id=\"参考与延伸\"><a href=\"#参考与延伸\" class=\"headerlink\" title=\"参考与延伸\"></a>参考与延伸</h1><ul>\n<li><a class=\"link\"   href=\"https://string.quest/read/1143888#IO_110\" >IO流体系基本概念以及常用操作 - 探索字符串<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>并发编程网：<a class=\"link\"   href=\"http://ifeve.com/java-io/\" >Java IO教程<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>本文笔记主要根据 尚硅谷的java体系课程的io部分 梳理的</li>\n<li>后期 应该对io 体系进行一个更大的梳理，包括java的 file path，还有根据 io ，nio bio aio等进行梳理，要明白自己学习的是哪种流，所以要熟悉io历史</li>\n</ol>\n</blockquote>\n<img src=\"\" width=\"60%\" />\n\n<br>"},{"title":"KingbaseES KCA study notes","auth":"ratears","date":"2022-09-03T09:19:20.000Z","update":"2022-09-03T09:19:20.000Z","_content":"\n\n\n# Kingbase安装与卸载\n\n## KES安装\n\n### 环境要求\n\n|        环境         |                      要求                      |\n| :-----------------: | :--------------------------------------------: |\n|      操作系统       |                   CentOS 7.x                   |\n| 机器规格 - 内存大小 |                   3GB 及以上                   |\n| 机器规格 - 磁盘空间 |                  20GB 及以上                   |\n|   KES 安装包版本    | KingbaseES_V008R006C006B0013_Lin64_install.iso |\n|      jdk 版本       |                      1.8+                      |\n\n\n\n### 安装前准备工作\n\n1. 服务器安装jdk1.8+版本并配置环境变量\n\n```shell\n[root@localhost ~]# yum list |grep jdk\n\n[root@localhost ~]# yum -y install java-1.8.0-openjdk\n\n[root@localhost ~]# java -version\nopenjdk version \"1.8.0_342\"\nOpenJDK Runtime Environment (build 1.8.0_342-b07)\nOpenJDK 64-Bit Server VM (build 25.342-b07, mixed mode)\n```\n\n\n\n2. 创建用于管理Kingbase的用户\n\n```shell\n[root@localhost ~]# useradd kingbase\n[root@localhost ~]# \n[root@localhost ~]# id kingbase\nuid=1000(kingbase) gid=1000(kingbase) 组=1000(kingbase)\n\n[root@localhost install]# passwd kingbase\n```\n\n\n\n3. 按实施规范创建目录，设置权限\n\n- 为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前须做好选项、存储目录规划\n\n|      选项      |                             设置                             |\n| :------------: | :----------------------------------------------------------: |\n|      目录      | 安装软件存储目录：/install<br/>备份目录：/backup<br/>归档目录：/archive<br/>数据存储目录：/data<br/>KES 安装目录：/KingbaseES/V8 |\n|      端口      |                            54321                             |\n|  SYSTEM 密码   |                            system                            |\n| 数据库编码格式 |                             UTF8                             |\n| 大小写是否敏感 |    ENABLE_CI，默认为 off，表示大小写敏感（根据需求选择）     |\n\n\n\n```shell\n# 使用 root 用户，创建目录，设置权限\n\n# 创建目录\n[root@localhost ~]# mkdir -p /install /KingbaseES/V8 /backup /data /archive\n\n# 修改目录属组、属主、权限\n[root@localhost ~]# chown -R kingbase:kingbase /install /KingbaseES /backup /archive /data\n[root@localhost ~]# chmod -R 775 /install /KingbaseES /backup /archive\n[root@localhost ~]# chmod -R 700 /data\n\n\n[root@localhost ~]# ls -l / |grep kingbase\ndrwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 archive\ndrwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 backup\ndrwx------.   2 kingbase kingbase    6 9月   4 22:39 data\ndrwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 install\ndrwxrwxr-x.   3 kingbase kingbase   16 9月   4 22:39 KingbaseES\n```\n\n<br>\n\n### 上传安装包、授权文件、检查 md5、解压\n\n```shell\n# 使用 root 用户将安装文件上传到/install 下\n[root@localhost install]# ll\n-rw-r--r--. 1 root root 2180431872 9月   4 22:56 KingbaseES_V008R006C006B0013_Lin64_install.iso\n\n# 使用 root 用户将授权文件上传到/install。设置授权文件的属主为kingbase和权限并验证\n[root@localhost install]# ll\n-rw-rw-r--. 1 kingbase kingbase       3534 4月  26 11:51 license_18720_0.dat\n\n# 检查和校验安装文件的 md5 值\n[root@localhost install]# md5sum KingbaseES_V008R006C006B0013_Lin64_install.iso\nc1410ba7062fbaff3308c1453797ce3e  KingbaseES_V008R006C006B0013_Lin64_install.iso\n\n# 使用 root 用户挂载 KES 安装虚拟光盘文件\n[root@localhost install]# mount -o loop /install/KingbaseES_V008R006C006B0013_Lin64_install.iso /mnt/\nmount: /dev/loop0 写保护，将以只读方式挂载\n[root@localhost install]# ll /mnt/\n总用量 6\ndr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup\n-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh\n\n# 使用 kingbase 用户复制挂载后的安装文件到/install 下\n[kingbase@bogon ~]$ ll /mnt/\n总用量 6\ndr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup\n-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh\n[kingbase@bogon ~]$ mkdir -p /install/KES_V8R6CB13_INSTALL\n[kingbase@bogon ~]$ cp -r /mnt/* /install/KES_V8R6CB13_INSTALL/\n[kingbase@bogon ~]$ ll /install/KES_V8R6CB13_INSTALL/\n总用量 4\ndr-xr-xr-x. 2 kingbase kingbase   54 9月   4 23:14 setup\n-r-xr-xr-x. 1 kingbase kingbase 3820 9月   4 23:14 setup.sh\n\n[kingbase@bogon ~]$ du -sm /mnt/\n2080    /mnt/\n[kingbase@bogon ~]$ du -sm /install/KES_V8R6CB13_INSTALL/\n2080    /install/KES_V8R6CB13_INSTALL/\n```\n\n<br>\n\n### 字符界面安装 KES 程序\n\n#### 启动字符界面安装向导进入“简介”界面\n\n```shell\n[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/\n\n[kingbase@bogon KES_V8R6CB13_INSTALL]$ bash ./setup.sh -i console\n\n# 安装目录输入: /KingbaseES/V8\n```\n\n\n\n####  创建和初始化数据库集簇\n\n```shell\n# 数据存储目录输入: /data\n\n# 直接回车接受参数的默认值或根据规划要求指定参数的值：\n（1）端口：54321（生产环境可以根据需求，自定义为其它端口）。\n（2）输入 SYSTEM 超级管理员的密码（本实验环境密码设置为 system）。\n（3）设置数据库编码格式（推荐设置为“UTF8”）。\n（4）选择数据库模式（默认为 oracle 模式）\n```\n\n\n\n#### 将 KES 服务注册为 linux 系统服务\n\n```shell\n# 使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh\n\n[root@localhost ~]# /KingbaseES/V8/install/script/root.sh\nStarting KingbaseES V8:\nwaiting for server to start.... done\nserver started\nKingbaseES V8 started successfully\n```\n\n\n\n####  重启 linux 确认 KES 服务自动启动\n\n```shell\n[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i 'kingbase'\n  2116 ?        S      0:00 sshd: kingbase@notty\n  2092 ?        S      0:00 sshd: kingbase@pts/1\n  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data\n  4920 ?        Ss     0:00  \\_ kingbase: logger\n  4922 ?        Ss     0:00  \\_ kingbase: checkpointer\n  4923 ?        Ss     0:00  \\_ kingbase: background writer\n  4924 ?        Ss     0:00  \\_ kingbase: walwriter\n  4925 ?        Ss     0:00  \\_ kingbase: autovacuum launcher\n  4926 ?        Ss     0:00  \\_ kingbase: stats collector\n  4927 ?        Ss     0:00  \\_ kingbase: ksh writer\n  4928 ?        Ss     0:00  \\_ kingbase: ksh collector\n  4929 ?        Ss     0:00  \\_ kingbase: kwr collector\n  4930 ?        Ss     0:00  \\_ kingbase: logical replication launcher\n```\n\n<br>\n\n## 确认 KES 是否已正确安装\n\n- 可以使用以下几个角度确认 KES 是否已正确安装或启动\n\n1. 查看安装过程日志，确认没有错误记录\n\n```shell\n[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/\n\n[kingbase@bogon KES_V8R6CB13_INSTALL]$ ls -al *.log\nls: 无法访问*.log: 没有那个文件或目录\n```\n\n\n\n2. 查看开始菜单中是否已成功安装相关程序\n\n\n\n3. 查看相关进程是否启动\n\n```shell\n[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i 'kingbase'\n  2116 ?        S      0:00 sshd: kingbase@notty\n  2092 ?        S      0:00 sshd: kingbase@pts/1\n  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data\n  4920 ?        Ss     0:00  \\_ kingbase: logger\n  4922 ?        Ss     0:00  \\_ kingbase: checkpointer\n  4923 ?        Ss     0:00  \\_ kingbase: background writer\n  4924 ?        Ss     0:00  \\_ kingbase: walwriter\n  4925 ?        Ss     0:00  \\_ kingbase: autovacuum launcher\n  4926 ?        Ss     0:00  \\_ kingbase: stats collector\n  4927 ?        Ss     0:00  \\_ kingbase: ksh writer\n  4928 ?        Ss     0:00  \\_ kingbase: ksh collector\n  4929 ?        Ss     0:00  \\_ kingbase: kwr collector\n  4930 ?        Ss     0:00  \\_ kingbase: logical replication launcher\n```\n\n\n\n4. 验证数据库连接是否正常\n\n```shell\n# 用 ksql 工具测试能否连接到数据库\n[kingbase@bogon ~]$ /KingbaseES/V8/Server/bin/ksql test system\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\ntest=#\n\n# 在桌面环境中启动“数据库对象管理工具”测试能否连接数据库\n```\n\n\n\n5. 查看服务是否已设为开机自启\n\n```shell\n[kingbase@bogon ~]$ systemctl list-dependencies |grep kingbase\n● ├─kingbase8d.service\n[kingbase@bogon ~]$ chkconfig --list |grep kingbase\n\n注：该输出结果只显示 SysV 服务，并不包含\n原生 systemd 服务。SysV 配置数据\n可能被原生 systemd 配置覆盖。\n\n      要列出 systemd 服务，请执行 'systemctl list-unit-files'。\n      查看在具体 target 启用的服务请执行\n      'systemctl list-dependencies [target]'。\n\nkingbase8d      0:关    1:关    2:开    3:开    4:开    5:开    6:关\n```\n\n<br>\n\n## 启停 KES 服务\n\n### root用户管理KES服务\n\n- 以 root 用户身份登录\n\n#### root 用户将 KES 注册为 linux 开机自启服务\n\n```shell\n# 使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh 来注册系统服务，这样开机时会自己启动 KES 数据库服务\n\n[root@localhost ~]# /KingbaseES/V8/install/script/root.sh\nStarting KingbaseES V8:\nwaiting for server to start.... done\nserver started\nKingbaseES V8 started successfully\n```\n\n<br>\n\n#### systemctl 管理 KES 服务\n\n```shell\n# root 用户使用 systemctl 管理 KES 服务\n\n# 1、确认 KES 服务状态。\nsystemctl status kingbase8d.service\n\n# 2、停止 KES 服务。\nsystemctl status kingbase8d.service\n\n# 3、启动 KES 服务。\nsystemctl start kingbase8d.service\n\n# 4、重启 KES 服务。\nsystemctl restart kingbase8d.service\n```\n\n<br>\n\n#### service 管理 KES 服务\n\n```shell\n# root 用户使用 service 管理 KES 服务\n\nservice kingbase8d status\n\nservice kingbase8d start\n\nservice kingbase8d restart\n\nservice kingbase8d stop\n```\n\n<br>\n\n### kingbase用户管理KES服务\n\n- 使用 kingbase 用户登录后执行 sys_ctl 命令\n\n#### 使用金仓 sys_ctl 命令管理 KES 服务\n\n##### sys_ctl 长命令格式\n\n```shell\n/KingbaseES/V8/Server/bin/sys_ctl status -D /data\n\n/KingbaseES/V8/Server/bin/sys_ctl stop -D /data\n\n/KingbaseES/V8/Server/bin/sys_ctl start -D /data\n\n/KingbaseES/V8/Server/bin/sys_ctl restart -D /data\n```\n\n<br>\n\n##### sys_ctl 语法大纲\n\n```shell\nsys_ctl start \t[-D DATADIR] [-l FILENAME] [-W] [-t SECS] [-s]\n\t\t\t\t[-o OPTIONS] [-p PATH] [-c]\n\t\t\t\t\nsys_ctl stop \t[-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]\n\nsys_ctl restart [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]\n\t\t\t\t[-o OPTIONS] [-c]\n\t\t\t\t\nsys_ctl reload \t[-D DATADIR] [-s]\n\nsys_ctl status \t[-D DATADIR]\n\nsys_ctl promote [-D DATADIR] [-W] [-t SECS] [-s]\n\nsys_ctl logrotate [-D DATADIR] [-s]\n\nsys_ctl kill SIGNALNAME PID\n```\n\n<br>\n\n#### 使用 kingbase 命令启动 KES 服务\n\n```shell\n/KingbaseES/V8/Server/bin/kingbase -D /data >log1 2>&1 &\n```\n\n<br>\n\n## 环境变量对相关命令的影响\n\n1. 定位金仓 sys_ctl 的路径\n\n```shell\n[kingbase@bogon bin]$ find /KingbaseES/ -name sys_ctl\n/KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/sys_ctl\n```\n\n\n\n2. 定位主数据目录\n\n```shell\n[kingbase@bogon bin]$ ps -ef|grep '\\ -D\\ '\nkingbase   6723   2093  0 00:27 pts/1    00:00:00 /KingbaseES/V8/Server/bin/kingbase -D /data\n\n[root@localhost ~]# find / -name kingbase.conf\n/data/kingbase.conf\n```\n\n\n\n3. 修改环境变量\n\n（1）KINGBASE_DATA 变量\n\n- 该环境变量指向 KES 主数据目录，此变量名是金仓程序员指定的命名，不要修改\n- 未指定该变量时，sys_ctl 工具在执行时需要加-D 参数来给定主数据目录位置\n\n（2）修改 shell 的 profile\n\n- 把【/KingbaseES/V8/Server/bin】加到$PATH 变量里面\n-  把/data 赋值给$KINGBASE_DATA\n\n```shell\n# 编辑 kingbase 的环境变量文件，添加相应路径\nvi /home/kingbase/.bashrc\n\nexport PATH=/KingbaseES/V8/Server/bin:$PATH\nexport KINGBASE_DATA=/data\n\n# 让环境变量生效\nsource /home/kingbase/.bashrc\n```\n\n```shell\n# 设置变量后命令行比较简捷\nsys_ctl stop -D $KINGBASE_DATA \nkingbase -D /data >log1 2>&1 &\n```\n\n<br>\n\n## 授权文件license.dat\n\n### 查看license有效天数\n\n```shell\ntest=# select get_license_validdays();\n get_license_validdays\n-----------------------\n                    89\n(1 行记录)\n\ntest=#\n```\n\n<br>\n\n###　license过期后的故障现象\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41abq8t29n80.webp\" />\n\n<br>\n\n### license过期故障解决\n\n- 使用 kingbase 用户登录，上传新的 lincense.dat 到 kingbase的安装目录 `/KingbaseES/V8`下——替换原旧的 license.dat。然后重新加载数据库（或者重新启动）\n\n```shell\n# 注意 lincese.dat 的 属组和属组 必须是 kingbase，授权文件名称 必须是 lincese.dat\n\n[kingbase@bogon ~]$ sys_ctl reload -D $KINGBASE_DATA\nserver signaled\n```\n\n<br>\n\n## KES卸载 \n\n1. 使用 root 用户执行 rootuninstall.sh 脚本移除 KES 开机自启服务\n\n```shell\nsu - root\n\n/KingbaseES/V8/install/script/rootuninstall.sh\n```\n\n\n\n2. 以 kingbase 用户执行 bash /KingbaseES/V8/Uninstall/Uninstaller -i console\n\n```shell\n[kingbase@bogon ~]$ bash /KingbaseES/V8/Uninstall/Uninstaller -i console\n\n# 卸载完后，执行`echo $?`的 结果为 0，则 Uninstaller -i console 执行成功\n```\n\n\n\n3. 清除安装目录下残留文件\n\n- 方法一：执行 `rm –fr /KingbaseES/V8` 直接删除安装目录\n- 方法二：执行 `mv /KingbaseES/V8 /KingbaseES/V8.bak` 将安装目录改名\n\n<br>\n\n# 数据库对象管理工具\n\n- 参考培训文档，做实验，以及做好记录\n\n\n\n<br>\n\n# 命令行工具KSQL\n\n## KSQL简介\n\n- KSQL 是金仓提供给 DBA 的与 KES 数据库交互的命令行客户端程序（部分工作场景是无法使用图形界面工具来工作的；还有部分场景使用SQL效率更高）。熟练使用 KSQL 工具可以帮助 DBA 快速的操作和维护数据库\n\n### 查看 KSQL 工具的帮助\n\n```shell\n[kingbase@bogon ~]$ ksql --help\n```\n\n- 部分参数解析\n\n1. 连接参数\n\n| 参数 |                             简介                             |\n| :--: | :----------------------------------------------------------: |\n|  -h  | 连接服务器的监听 IP 或主机名(-h 缺省时为 localhost 方式登录) |\n|  -p  | 连接服务器的监听端口号<br>当为端口号为默认值 54321 时可缺省-p<br/>设置了 KINGBASE_PORT 环境变量时也可缺省-p |\n|  -U  |                      连接服务器的用户名                      |\n|  -W  |                         强制输入密码                         |\n\n\n\n2. 通用参数\n\n| 参数 |                             简介                             |\n| :--: | :----------------------------------------------------------: |\n|  -c  | 指定连接数据库后执行的单行命令，执行完成后自动退出数据库连接 |\n|  -d  |                    指定连接时登录的数据库                    |\n|  -f  |   指定连接数据库时执行的脚本，执行完成后自动退出数据库连接   |\n|  -l  |                        打印数据库列表                        |\n|  -V  |                      打印数据库版本信息                      |\n|  -?  |                   打印 ksql 命令的帮助信息                   |\n\n\n\n3. 输入输出参数\n\n| 参数 |               简介               |\n| :--: | :------------------------------: |\n|  -H  |     以 html 格式展示输出结果     |\n|  -E  |      展示元命令所执行的 sql      |\n|  -t  |           不输出字段名           |\n|  -x  |      调整查询结果为纵向展示      |\n|  -q  |        不输出登录提示信息        |\n|  -o  | 将命令输出结果保存到指定的文件中 |\n\n<br>\n\n### 查看标准 SQL 命令的帮助\n\n1. 使用 `\\h` 列出所有的 SQL 命令清单\n\n```sql\ntest=# \\h\n```\n\n\n\n2. 使用 `\\h <sql 命令>` 列出某个 SQL 命令的语法大纲\n\n```sql\ntest=# \\h delete\nCommand:     DELETE\nDescription: 删除数据表中的数据列\nSyntax:\n[ WITH [ RECURSIVE ] with查询语句(with_query) [, ...] ]\nDELETE FROM [ ONLY ] 表名 [ * ] [ [ AS ] 别名 ]\n    [ USING USING列表(using_list) ]\n    [ WHERE 条件 | WHERE CURRENT OF 游标名称 ]\n    [ RETURNING * | 输出表达式 [ [ AS ] 输出名称 ] [, ...] ]\n```\n\n<br>\n\n### 查看 KSQL 元命令的帮助\n\n1. 元命令介绍\n\n> （1）ksql 提供了一组以“\\”开头的快捷命令，称之为 ksql 元命令。\n> （2）搭配通配符“*”或“?”提高查询效率。\n> （3）使用选项“S”显示系统对象。\n> （4）使用选项“+”显示更加丰富的信息。\n\n\n\n2. 常用元命令介绍\n\n|      参数      |                             简介                             |\n| :------------: | :----------------------------------------------------------: |\n|     \\d[S+]     | 列出表,视图和序列,其中 S 表示包含系统对象，+表示列出详细信息 |\n|  \\d[S+] 名称   |                  描述表，视图，序列，或索引                  |\n| \\db[+] [模式]  |                          列出表空间                          |\n| \\di[S+] [模式] |                           列出索引                           |\n|   \\dp [模式]   |           列出表，视图和序列的访问权限(\\z 和相同)            |\n| \\ds[S+] [模式] |                           列出序列                           |\n|     \\du[+]     |                           列出角色                           |\n|     \\l[+]      |                       列出所有的数据库                       |\n\n\n\n### KSQL 连接到数据库\n\n#### 使用 SOCKET 方式登录数据库\n\n```shell\n[kingbase@localhost ~]$ ksql -U system -d test\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\ntest=# \n```\n\n\n\n#### 使用 TCP/IP 方式登录数据库\n\n```shell\n[kingbase@localhost ~]$ ksql -h 192.168.146.129 -p 54321 -U system -d test\n用户 system 的口令：\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\ntest=# \n```\n\n\n\n#### 在 KSQL 中切换登录用户和数据库\n\n```shell\n[kingbase@bogon ~]$ ksql -Usystem -d test\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\ntest=# \\c tfsdb\n您现在已经连接到数据库 \"tfsdb\",用户 \"system\".\n\ntfsdb=# \\c - tfsdb\n您现在已经连接到数据库 \"tfsdb\",用户 \"tfsdb\".\n\ntfsdb=# \\c test system\n您现在已经连接到数据库 \"test\",用户 \"system\".\n```\n\n\n\n#### KSQL 引用环境变量进行快速登录\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3xiqo6d2q3g0.webp\" width=\"60%\"/>\n\n<br>\n\n\n\n### 执行 SQL 的几种方式\n\n1. 交互方式执行 SQL\n\n```shell\n# 登录ksql\ntfsdb=# select * from pa_user;\n```\n\n\n\n2. 非交互方式执行 SQL (单条 SQL 语句)\n\n```shell\n# 使用“-c”选项登录 tfsdb 数据库查看\n\n[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -c 'select * from pa_user;'\n```\n\n\n\n3. 非交互方式执行 SQL (成批的 SQL 语句、SQL文件)\n\n```shell\n[kingbase@bogon ~]$ ll\n总用量 8\n-rw-rw-r--  1 kingbase kingbase  23 9月   9 18:00 demo.sql\n-rw-------. 1 kingbase kingbase 712 8月  20 19:13 restart.log\n\n[kingbase@bogon ~]$ cat demo.sql\nselect * from pa_user;\n\n[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -f /home/kingbase/demo.sql\n\n```\n\n\n\n### KSQL 元命令介绍\n\n- 略（查看官网）\n\n\n\n### 使用元命令实现异构数据库数据交换\n\n```shell\n# 导出表数据库到 csv 文件\ntfsdb=# \\copy tfsdb.pa_user to /home/kingbase/pa_user.csv csv\nCOPY 16\n\n# 查看 csv\ntfsdb=# \\! cat /home/kingbase/pa_user.csv\n\n# 将 csv 文件导入数据库表中\ntfsdb=# \\copy tfsdb.pa_user from /home/kingbase/pa_user.csv csv\nCOPY 16\n\n```\n\n\n\n# 用户与角色\n\n- 用户和角色是数据库管理的基础\n- 本章主要介绍如何在 KES 数据库中创建用户和角色，以及利用“角色”对多个用户批量授权，使 KES 管理体系更加清晰、简单\n\n\n\n## 数据库用户\n\n### 用户管理概述\n\n1. 数据库用户代表数据库的使用者\n2. 应该为每个使用者创建用户\n3. 尽量避免多人使用同一个数据库用户\n\n\n\n### 用户管理\n\n- 增删改查 略（参考官网）\n\n- 当待删除用户是部分对象的拥有者时，因对象依赖会导致删除用户失败\n\n\n\n## 数据库角色\n\n### 角色的概念\n\n1. 将一组具有相同权限的用户组织在一起，这一组具有相同权限的用户就称为角色（Role）\n2. 角色在生产系统中一般被视作用户组，利用角色对用户执行批量授权\n\n\n\n### 角色管理\n\n- 增删改查 略（参考官网）\n- 当待删除角色是部分对象的拥有者时，因对象依赖会导致删除角色失败\n- 当待删除角色被显式授予对象权限时，因权限依赖会导致删除角色失败\n\n\n\n# 对象的访问权限入门\n\n- 数据库的表、索引、视图、图表、缺省值、规则、触发器、语法等等，在数据库中的一切，都称为数据库对象，对象分为如下两类：\n\n1. 模式（SCHEMA）对象：可视为一个表的集合，可以理解为一个存储目录，包含视图、索引、数据类型、函数和操作符等\n2. 非模式对象：其他的数据库对象，如数据库、表空间、用户、权限。\n\n\n\n- 用户或角色访问模式对象或非模式对象的能力称之为对象权限\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 简单巡检\n\n## 查看 KES 版本信息\n\n```shell\n# 使用 sys_ctl 查看版本\n[kingbase@localhost ~]$ sys_ctl -V\nsys_ctl (Kingbase) 12.1\n[kingbase@localhost ~]$ sys_ctl --version\nsys_ctl (Kingbase) 12.1\n\n# 使用 version 函数查看版本\ntest=# select version();\n                                                       version\n----------------------------------------------------------------------------------------------------------------------\n KingbaseES V008R006C006B0013 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-46), 64-bit\n(1 行记录)\n\n```\n\n<br>\n\n<br>\n\n## 查看 license 有效期\n\n```shell\ntest=# select get_license_validdays();\n get_license_validdays\n-----------------------\n                    66\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看 KES 实例启动时间和运行时长\n\n```shell\n# 查看数据库实例启动时间\ntest=# select sys_postmaster_start_time();\n   sys_postmaster_start_time\n-------------------------------\n 2022-09-25 08:04:56.261041+08\n(1 行记录)\n\n# 查看 KES 无故障运行时长\ntest=# select date_trunc('second',current_timestamp - sys_postmaster_start_time()) as uptime;\n         uptime\n------------------------\n 2 days 16:28:15.000000\n(1 行记录)\n\n```\n\n<br>\n\n<br>\n\n## 查看数据库列表\n\n```shell\n# 使用 ksql 的-l 参数或元命令\\l\n[kingbase@localhost ~]$ ksql -Usystem -d test -l\n                                           数据库列表\n    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限\n-------------+-------------+----------+----------+-------------+--------------------------------\n security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |\n template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +\n             |             |          |          |             | system=CTc/system\n template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +\n             |             |          |          |             | system=CTc/system\n test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |\n xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +\n             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test\n(5 行记录)\n\ntest=# \\l\n                                           数据库列表\n    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限\n-------------+-------------+----------+----------+-------------+--------------------------------\n security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |\n template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +\n             |             |          |          |             | system=CTc/system\n template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +\n             |             |          |          |             | system=CTc/system\n test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |\n xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +\n             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test\n(5 行记录)\n\n# 使用数据字典\ntest=# select datname from sys_database;\n   datname\n-------------\n test\n security\n template1\n template0\n xjnxdb_test\n(5 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看数据库占用的磁盘空间\n\n```shell\n# 统计当前数据库占用的磁盘空间\ntest=# select sys_database_size(current_database())/1024/1024 || 'MB' MB;\n  MB\n------\n 12MB\n(1 行记录)\n\n# 统计所有数据库占用的磁盘空间总量\nxjnxdb_test=# select (sum(sys_database_size(datname))/1024/1024) || 'MB' MB from sys_database;\n           MB\n------------------------\n 234.1652364730834961MB\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看表和索引的大小\n\n```shell\n# 统计表的空间占用\nxjnxdb_test=# select sys_relation_size('xjnxdb_test.pa_user')/1024 || 'KB' KB;\n  KB\n------\n 48KB\n(1 行记录)\n\nxjnxdb_test=# select sys_size_pretty(sys_relation_size('xjnxdb_test.pa_user'));\n sys_size_pretty\n-----------------\n 48 kB\n(1 行记录)\n\n# 统计表和与表关联的索引占用空间总量\nxjnxdb_test=# select sys_total_relation_size('xjnxdb_test.pa_user')/1024 || 'KB' KB;\n  KB\n------\n 88KB\n(1 行记录)\n\nxjnxdb_test=# select sys_size_pretty(sys_total_relation_size('xjnxdb_test.pa_user'));\n sys_size_pretty\n-----------------\n 88 kB\n(1 行记录)\n\n# 统计表的记录数\nxjnxdb_test=# select count(*) || ' rows' \"rows\" from xjnxdb_test.pa_user;\n   rows\n----------\n 145 rows\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看时区和时间\n\n```shell\n# 查看最近一次加载参数文件的时间\nxjnxdb_test=# select sys_conf_load_time();\n      sys_conf_load_time\n-------------------------------\n 2022-09-25 08:04:55.822231+08\n(1 行记录)\n\n# 查看时区\nxjnxdb_test=# show timezone;\n   TimeZone\n---------------\n Asia/Shanghai\n(1 行记录)\n\n# 查看当前日期或时间\nxjnxdb_test=# select now();\n              now\n-------------------------------\n 2022-09-28 05:43:22.416126+08\n(1 行记录)\n\nxjnxdb_test=# select current_timestamp;\n       current_timestamp\n-------------------------------\n 2022-09-28 05:43:45.124372+08\n(1 行记录)\n\nxjnxdb_test=# select sysdate;\n       sysdate\n---------------------\n 2022-09-28 05:44:16\n(1 行记录)\n\nxjnxdb_test=# select current_date;\n current_date\n--------------\n 2022-09-28\n(1 行记录)\n\n```\n\n<br>\n\n<br>\n\n## 查看当前登录数据库的名称\n\n```shell\nxjnxdb_test=# select current_catalog;\n current_catalog\n-----------------\n xjnxdb_test\n(1 行记录)\n\nxjnxdb_test=# select current_database();\n current_database\n------------------\n xjnxdb_test\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看当前会话信息\n\n```shell\n# 查看当前会话的客户端 IP 和端口。\ntest=# select inet_client_addr(),inet_client_port();\n inet_client_addr | inet_client_port\n------------------+------------------\n 10.114.200.15    |            52665\n(1 行记录)\n\n# 查看服务器的 IP 和端口。\ntest=# select inet_server_addr(),inet_server_port();\n inet_server_addr | inet_server_port\n------------------+------------------\n 10.114.12.66     |            54321\n(1 行记录)\n\n# 查看当前会话的后台进程 ID。\ntest=# select sys_backend_pid();\n sys_backend_pid\n-----------------\n          341129\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看数据库中的连接信息\n\n```shell\ntest=# select datname,usename,client_addr,client_port  from sys_stat_activity;\n   datname    |   usename    |  client_addr   | client_port\n--------------+--------------+----------------+-------------\n              |              |                |\n              | system       |                |\n              | system       |                |\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45560\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45584\n xjnxdb_test2 | xjnxdb_test2 | 10.114.12.67   |       45624\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630\n```\n\n<br>\n\n<br>\n\n## 查看会话执行的 SQL 信息\n\n```shell\n# （1）设置参数 track_activities 为 on。\ntest=# show track_activities;\n track_activities\n------------------\n on\n(1 行记录)\n\n# 查看所有会话执行的 SQL 信息\ntest=# select datname,usename,client_addr,client_port  from sys_stat_activity;\n   datname    |   usename    |  client_addr   | client_port\n--------------+--------------+----------------+-------------\n              |              |                |\n              | system       |                |\n              | system       |                |\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45654\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45694\n tfsdb        | tfsdb        | 10.43.1.113    |       55971\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45684\n\n# 只看正在运行的 SQL 信息\ntest=# select datname,usename,client_addr,client_port  from sys_stat_activity where state not like 'idle%';\n   datname   |   usename   |  client_addr   | client_port\n-------------+-------------+----------------+-------------\n xjnxdb_test | xjnxdb_test | 10.114.12.67   |       45706\n xjnxdb      | xjnxdb      | 10.114.200.108 |       54113\n test        | system      | 10.114.200.15  |       56839\n(3 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看耗时较长的 SQL\n\n```shell\ntfsdb=# select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != 'idle' order by 1 desc;\n-[ RECORD 1 ]----------------------------------------------------------------------------------------------------------------------------------------\nruntime | 00:00:00.000000\ndatname | tfsdb\nusename | system\npid     | 341563\nquery   | select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != 'idle' order by 1 desc;\n```\n\n\n\n<br>\n\n<br>\n\n## 事务阻塞会话的简单处理\n\n```shell\n# 会话 1—关闭自动提交后删除记录\n```\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 单表查询\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n```shell\n熟悉语义 /KingbaseES/V8/Server/bin/kingbase -D /data >log1 2>&1 &\n\nsystemctl , sys_ctl service各个命令的隔离性？\n\n\n几种关闭模式需要详细了解和实验记录，需要自己动手做实验\n\nsql 的元命令 需要详细了解一下呢\n\ncopy 和 \\copy\n\n事务阻塞会话的简单处理 这一块还需要了解一下\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/2022/KingbaseES-KCA-study-notes.md","raw":"---\ntitle: KingbaseES KCA study notes\nauth: ratears\ndate: 2022-09-03 17:19:20\nupdate: 2022-09-03 17:19:20\ncategories:\n\t- [database,kingbase]\ntags:\n\t- kingbase\n\t- database\n---\n\n\n\n# Kingbase安装与卸载\n\n## KES安装\n\n### 环境要求\n\n|        环境         |                      要求                      |\n| :-----------------: | :--------------------------------------------: |\n|      操作系统       |                   CentOS 7.x                   |\n| 机器规格 - 内存大小 |                   3GB 及以上                   |\n| 机器规格 - 磁盘空间 |                  20GB 及以上                   |\n|   KES 安装包版本    | KingbaseES_V008R006C006B0013_Lin64_install.iso |\n|      jdk 版本       |                      1.8+                      |\n\n\n\n### 安装前准备工作\n\n1. 服务器安装jdk1.8+版本并配置环境变量\n\n```shell\n[root@localhost ~]# yum list |grep jdk\n\n[root@localhost ~]# yum -y install java-1.8.0-openjdk\n\n[root@localhost ~]# java -version\nopenjdk version \"1.8.0_342\"\nOpenJDK Runtime Environment (build 1.8.0_342-b07)\nOpenJDK 64-Bit Server VM (build 25.342-b07, mixed mode)\n```\n\n\n\n2. 创建用于管理Kingbase的用户\n\n```shell\n[root@localhost ~]# useradd kingbase\n[root@localhost ~]# \n[root@localhost ~]# id kingbase\nuid=1000(kingbase) gid=1000(kingbase) 组=1000(kingbase)\n\n[root@localhost install]# passwd kingbase\n```\n\n\n\n3. 按实施规范创建目录，设置权限\n\n- 为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前须做好选项、存储目录规划\n\n|      选项      |                             设置                             |\n| :------------: | :----------------------------------------------------------: |\n|      目录      | 安装软件存储目录：/install<br/>备份目录：/backup<br/>归档目录：/archive<br/>数据存储目录：/data<br/>KES 安装目录：/KingbaseES/V8 |\n|      端口      |                            54321                             |\n|  SYSTEM 密码   |                            system                            |\n| 数据库编码格式 |                             UTF8                             |\n| 大小写是否敏感 |    ENABLE_CI，默认为 off，表示大小写敏感（根据需求选择）     |\n\n\n\n```shell\n# 使用 root 用户，创建目录，设置权限\n\n# 创建目录\n[root@localhost ~]# mkdir -p /install /KingbaseES/V8 /backup /data /archive\n\n# 修改目录属组、属主、权限\n[root@localhost ~]# chown -R kingbase:kingbase /install /KingbaseES /backup /archive /data\n[root@localhost ~]# chmod -R 775 /install /KingbaseES /backup /archive\n[root@localhost ~]# chmod -R 700 /data\n\n\n[root@localhost ~]# ls -l / |grep kingbase\ndrwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 archive\ndrwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 backup\ndrwx------.   2 kingbase kingbase    6 9月   4 22:39 data\ndrwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 install\ndrwxrwxr-x.   3 kingbase kingbase   16 9月   4 22:39 KingbaseES\n```\n\n<br>\n\n### 上传安装包、授权文件、检查 md5、解压\n\n```shell\n# 使用 root 用户将安装文件上传到/install 下\n[root@localhost install]# ll\n-rw-r--r--. 1 root root 2180431872 9月   4 22:56 KingbaseES_V008R006C006B0013_Lin64_install.iso\n\n# 使用 root 用户将授权文件上传到/install。设置授权文件的属主为kingbase和权限并验证\n[root@localhost install]# ll\n-rw-rw-r--. 1 kingbase kingbase       3534 4月  26 11:51 license_18720_0.dat\n\n# 检查和校验安装文件的 md5 值\n[root@localhost install]# md5sum KingbaseES_V008R006C006B0013_Lin64_install.iso\nc1410ba7062fbaff3308c1453797ce3e  KingbaseES_V008R006C006B0013_Lin64_install.iso\n\n# 使用 root 用户挂载 KES 安装虚拟光盘文件\n[root@localhost install]# mount -o loop /install/KingbaseES_V008R006C006B0013_Lin64_install.iso /mnt/\nmount: /dev/loop0 写保护，将以只读方式挂载\n[root@localhost install]# ll /mnt/\n总用量 6\ndr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup\n-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh\n\n# 使用 kingbase 用户复制挂载后的安装文件到/install 下\n[kingbase@bogon ~]$ ll /mnt/\n总用量 6\ndr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup\n-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh\n[kingbase@bogon ~]$ mkdir -p /install/KES_V8R6CB13_INSTALL\n[kingbase@bogon ~]$ cp -r /mnt/* /install/KES_V8R6CB13_INSTALL/\n[kingbase@bogon ~]$ ll /install/KES_V8R6CB13_INSTALL/\n总用量 4\ndr-xr-xr-x. 2 kingbase kingbase   54 9月   4 23:14 setup\n-r-xr-xr-x. 1 kingbase kingbase 3820 9月   4 23:14 setup.sh\n\n[kingbase@bogon ~]$ du -sm /mnt/\n2080    /mnt/\n[kingbase@bogon ~]$ du -sm /install/KES_V8R6CB13_INSTALL/\n2080    /install/KES_V8R6CB13_INSTALL/\n```\n\n<br>\n\n### 字符界面安装 KES 程序\n\n#### 启动字符界面安装向导进入“简介”界面\n\n```shell\n[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/\n\n[kingbase@bogon KES_V8R6CB13_INSTALL]$ bash ./setup.sh -i console\n\n# 安装目录输入: /KingbaseES/V8\n```\n\n\n\n####  创建和初始化数据库集簇\n\n```shell\n# 数据存储目录输入: /data\n\n# 直接回车接受参数的默认值或根据规划要求指定参数的值：\n（1）端口：54321（生产环境可以根据需求，自定义为其它端口）。\n（2）输入 SYSTEM 超级管理员的密码（本实验环境密码设置为 system）。\n（3）设置数据库编码格式（推荐设置为“UTF8”）。\n（4）选择数据库模式（默认为 oracle 模式）\n```\n\n\n\n#### 将 KES 服务注册为 linux 系统服务\n\n```shell\n# 使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh\n\n[root@localhost ~]# /KingbaseES/V8/install/script/root.sh\nStarting KingbaseES V8:\nwaiting for server to start.... done\nserver started\nKingbaseES V8 started successfully\n```\n\n\n\n####  重启 linux 确认 KES 服务自动启动\n\n```shell\n[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i 'kingbase'\n  2116 ?        S      0:00 sshd: kingbase@notty\n  2092 ?        S      0:00 sshd: kingbase@pts/1\n  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data\n  4920 ?        Ss     0:00  \\_ kingbase: logger\n  4922 ?        Ss     0:00  \\_ kingbase: checkpointer\n  4923 ?        Ss     0:00  \\_ kingbase: background writer\n  4924 ?        Ss     0:00  \\_ kingbase: walwriter\n  4925 ?        Ss     0:00  \\_ kingbase: autovacuum launcher\n  4926 ?        Ss     0:00  \\_ kingbase: stats collector\n  4927 ?        Ss     0:00  \\_ kingbase: ksh writer\n  4928 ?        Ss     0:00  \\_ kingbase: ksh collector\n  4929 ?        Ss     0:00  \\_ kingbase: kwr collector\n  4930 ?        Ss     0:00  \\_ kingbase: logical replication launcher\n```\n\n<br>\n\n## 确认 KES 是否已正确安装\n\n- 可以使用以下几个角度确认 KES 是否已正确安装或启动\n\n1. 查看安装过程日志，确认没有错误记录\n\n```shell\n[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/\n\n[kingbase@bogon KES_V8R6CB13_INSTALL]$ ls -al *.log\nls: 无法访问*.log: 没有那个文件或目录\n```\n\n\n\n2. 查看开始菜单中是否已成功安装相关程序\n\n\n\n3. 查看相关进程是否启动\n\n```shell\n[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i 'kingbase'\n  2116 ?        S      0:00 sshd: kingbase@notty\n  2092 ?        S      0:00 sshd: kingbase@pts/1\n  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data\n  4920 ?        Ss     0:00  \\_ kingbase: logger\n  4922 ?        Ss     0:00  \\_ kingbase: checkpointer\n  4923 ?        Ss     0:00  \\_ kingbase: background writer\n  4924 ?        Ss     0:00  \\_ kingbase: walwriter\n  4925 ?        Ss     0:00  \\_ kingbase: autovacuum launcher\n  4926 ?        Ss     0:00  \\_ kingbase: stats collector\n  4927 ?        Ss     0:00  \\_ kingbase: ksh writer\n  4928 ?        Ss     0:00  \\_ kingbase: ksh collector\n  4929 ?        Ss     0:00  \\_ kingbase: kwr collector\n  4930 ?        Ss     0:00  \\_ kingbase: logical replication launcher\n```\n\n\n\n4. 验证数据库连接是否正常\n\n```shell\n# 用 ksql 工具测试能否连接到数据库\n[kingbase@bogon ~]$ /KingbaseES/V8/Server/bin/ksql test system\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\ntest=#\n\n# 在桌面环境中启动“数据库对象管理工具”测试能否连接数据库\n```\n\n\n\n5. 查看服务是否已设为开机自启\n\n```shell\n[kingbase@bogon ~]$ systemctl list-dependencies |grep kingbase\n● ├─kingbase8d.service\n[kingbase@bogon ~]$ chkconfig --list |grep kingbase\n\n注：该输出结果只显示 SysV 服务，并不包含\n原生 systemd 服务。SysV 配置数据\n可能被原生 systemd 配置覆盖。\n\n      要列出 systemd 服务，请执行 'systemctl list-unit-files'。\n      查看在具体 target 启用的服务请执行\n      'systemctl list-dependencies [target]'。\n\nkingbase8d      0:关    1:关    2:开    3:开    4:开    5:开    6:关\n```\n\n<br>\n\n## 启停 KES 服务\n\n### root用户管理KES服务\n\n- 以 root 用户身份登录\n\n#### root 用户将 KES 注册为 linux 开机自启服务\n\n```shell\n# 使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh 来注册系统服务，这样开机时会自己启动 KES 数据库服务\n\n[root@localhost ~]# /KingbaseES/V8/install/script/root.sh\nStarting KingbaseES V8:\nwaiting for server to start.... done\nserver started\nKingbaseES V8 started successfully\n```\n\n<br>\n\n#### systemctl 管理 KES 服务\n\n```shell\n# root 用户使用 systemctl 管理 KES 服务\n\n# 1、确认 KES 服务状态。\nsystemctl status kingbase8d.service\n\n# 2、停止 KES 服务。\nsystemctl status kingbase8d.service\n\n# 3、启动 KES 服务。\nsystemctl start kingbase8d.service\n\n# 4、重启 KES 服务。\nsystemctl restart kingbase8d.service\n```\n\n<br>\n\n#### service 管理 KES 服务\n\n```shell\n# root 用户使用 service 管理 KES 服务\n\nservice kingbase8d status\n\nservice kingbase8d start\n\nservice kingbase8d restart\n\nservice kingbase8d stop\n```\n\n<br>\n\n### kingbase用户管理KES服务\n\n- 使用 kingbase 用户登录后执行 sys_ctl 命令\n\n#### 使用金仓 sys_ctl 命令管理 KES 服务\n\n##### sys_ctl 长命令格式\n\n```shell\n/KingbaseES/V8/Server/bin/sys_ctl status -D /data\n\n/KingbaseES/V8/Server/bin/sys_ctl stop -D /data\n\n/KingbaseES/V8/Server/bin/sys_ctl start -D /data\n\n/KingbaseES/V8/Server/bin/sys_ctl restart -D /data\n```\n\n<br>\n\n##### sys_ctl 语法大纲\n\n```shell\nsys_ctl start \t[-D DATADIR] [-l FILENAME] [-W] [-t SECS] [-s]\n\t\t\t\t[-o OPTIONS] [-p PATH] [-c]\n\t\t\t\t\nsys_ctl stop \t[-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]\n\nsys_ctl restart [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]\n\t\t\t\t[-o OPTIONS] [-c]\n\t\t\t\t\nsys_ctl reload \t[-D DATADIR] [-s]\n\nsys_ctl status \t[-D DATADIR]\n\nsys_ctl promote [-D DATADIR] [-W] [-t SECS] [-s]\n\nsys_ctl logrotate [-D DATADIR] [-s]\n\nsys_ctl kill SIGNALNAME PID\n```\n\n<br>\n\n#### 使用 kingbase 命令启动 KES 服务\n\n```shell\n/KingbaseES/V8/Server/bin/kingbase -D /data >log1 2>&1 &\n```\n\n<br>\n\n## 环境变量对相关命令的影响\n\n1. 定位金仓 sys_ctl 的路径\n\n```shell\n[kingbase@bogon bin]$ find /KingbaseES/ -name sys_ctl\n/KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/sys_ctl\n```\n\n\n\n2. 定位主数据目录\n\n```shell\n[kingbase@bogon bin]$ ps -ef|grep '\\ -D\\ '\nkingbase   6723   2093  0 00:27 pts/1    00:00:00 /KingbaseES/V8/Server/bin/kingbase -D /data\n\n[root@localhost ~]# find / -name kingbase.conf\n/data/kingbase.conf\n```\n\n\n\n3. 修改环境变量\n\n（1）KINGBASE_DATA 变量\n\n- 该环境变量指向 KES 主数据目录，此变量名是金仓程序员指定的命名，不要修改\n- 未指定该变量时，sys_ctl 工具在执行时需要加-D 参数来给定主数据目录位置\n\n（2）修改 shell 的 profile\n\n- 把【/KingbaseES/V8/Server/bin】加到$PATH 变量里面\n-  把/data 赋值给$KINGBASE_DATA\n\n```shell\n# 编辑 kingbase 的环境变量文件，添加相应路径\nvi /home/kingbase/.bashrc\n\nexport PATH=/KingbaseES/V8/Server/bin:$PATH\nexport KINGBASE_DATA=/data\n\n# 让环境变量生效\nsource /home/kingbase/.bashrc\n```\n\n```shell\n# 设置变量后命令行比较简捷\nsys_ctl stop -D $KINGBASE_DATA \nkingbase -D /data >log1 2>&1 &\n```\n\n<br>\n\n## 授权文件license.dat\n\n### 查看license有效天数\n\n```shell\ntest=# select get_license_validdays();\n get_license_validdays\n-----------------------\n                    89\n(1 行记录)\n\ntest=#\n```\n\n<br>\n\n###　license过期后的故障现象\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41abq8t29n80.webp\" />\n\n<br>\n\n### license过期故障解决\n\n- 使用 kingbase 用户登录，上传新的 lincense.dat 到 kingbase的安装目录 `/KingbaseES/V8`下——替换原旧的 license.dat。然后重新加载数据库（或者重新启动）\n\n```shell\n# 注意 lincese.dat 的 属组和属组 必须是 kingbase，授权文件名称 必须是 lincese.dat\n\n[kingbase@bogon ~]$ sys_ctl reload -D $KINGBASE_DATA\nserver signaled\n```\n\n<br>\n\n## KES卸载 \n\n1. 使用 root 用户执行 rootuninstall.sh 脚本移除 KES 开机自启服务\n\n```shell\nsu - root\n\n/KingbaseES/V8/install/script/rootuninstall.sh\n```\n\n\n\n2. 以 kingbase 用户执行 bash /KingbaseES/V8/Uninstall/Uninstaller -i console\n\n```shell\n[kingbase@bogon ~]$ bash /KingbaseES/V8/Uninstall/Uninstaller -i console\n\n# 卸载完后，执行`echo $?`的 结果为 0，则 Uninstaller -i console 执行成功\n```\n\n\n\n3. 清除安装目录下残留文件\n\n- 方法一：执行 `rm –fr /KingbaseES/V8` 直接删除安装目录\n- 方法二：执行 `mv /KingbaseES/V8 /KingbaseES/V8.bak` 将安装目录改名\n\n<br>\n\n# 数据库对象管理工具\n\n- 参考培训文档，做实验，以及做好记录\n\n\n\n<br>\n\n# 命令行工具KSQL\n\n## KSQL简介\n\n- KSQL 是金仓提供给 DBA 的与 KES 数据库交互的命令行客户端程序（部分工作场景是无法使用图形界面工具来工作的；还有部分场景使用SQL效率更高）。熟练使用 KSQL 工具可以帮助 DBA 快速的操作和维护数据库\n\n### 查看 KSQL 工具的帮助\n\n```shell\n[kingbase@bogon ~]$ ksql --help\n```\n\n- 部分参数解析\n\n1. 连接参数\n\n| 参数 |                             简介                             |\n| :--: | :----------------------------------------------------------: |\n|  -h  | 连接服务器的监听 IP 或主机名(-h 缺省时为 localhost 方式登录) |\n|  -p  | 连接服务器的监听端口号<br>当为端口号为默认值 54321 时可缺省-p<br/>设置了 KINGBASE_PORT 环境变量时也可缺省-p |\n|  -U  |                      连接服务器的用户名                      |\n|  -W  |                         强制输入密码                         |\n\n\n\n2. 通用参数\n\n| 参数 |                             简介                             |\n| :--: | :----------------------------------------------------------: |\n|  -c  | 指定连接数据库后执行的单行命令，执行完成后自动退出数据库连接 |\n|  -d  |                    指定连接时登录的数据库                    |\n|  -f  |   指定连接数据库时执行的脚本，执行完成后自动退出数据库连接   |\n|  -l  |                        打印数据库列表                        |\n|  -V  |                      打印数据库版本信息                      |\n|  -?  |                   打印 ksql 命令的帮助信息                   |\n\n\n\n3. 输入输出参数\n\n| 参数 |               简介               |\n| :--: | :------------------------------: |\n|  -H  |     以 html 格式展示输出结果     |\n|  -E  |      展示元命令所执行的 sql      |\n|  -t  |           不输出字段名           |\n|  -x  |      调整查询结果为纵向展示      |\n|  -q  |        不输出登录提示信息        |\n|  -o  | 将命令输出结果保存到指定的文件中 |\n\n<br>\n\n### 查看标准 SQL 命令的帮助\n\n1. 使用 `\\h` 列出所有的 SQL 命令清单\n\n```sql\ntest=# \\h\n```\n\n\n\n2. 使用 `\\h <sql 命令>` 列出某个 SQL 命令的语法大纲\n\n```sql\ntest=# \\h delete\nCommand:     DELETE\nDescription: 删除数据表中的数据列\nSyntax:\n[ WITH [ RECURSIVE ] with查询语句(with_query) [, ...] ]\nDELETE FROM [ ONLY ] 表名 [ * ] [ [ AS ] 别名 ]\n    [ USING USING列表(using_list) ]\n    [ WHERE 条件 | WHERE CURRENT OF 游标名称 ]\n    [ RETURNING * | 输出表达式 [ [ AS ] 输出名称 ] [, ...] ]\n```\n\n<br>\n\n### 查看 KSQL 元命令的帮助\n\n1. 元命令介绍\n\n> （1）ksql 提供了一组以“\\”开头的快捷命令，称之为 ksql 元命令。\n> （2）搭配通配符“*”或“?”提高查询效率。\n> （3）使用选项“S”显示系统对象。\n> （4）使用选项“+”显示更加丰富的信息。\n\n\n\n2. 常用元命令介绍\n\n|      参数      |                             简介                             |\n| :------------: | :----------------------------------------------------------: |\n|     \\d[S+]     | 列出表,视图和序列,其中 S 表示包含系统对象，+表示列出详细信息 |\n|  \\d[S+] 名称   |                  描述表，视图，序列，或索引                  |\n| \\db[+] [模式]  |                          列出表空间                          |\n| \\di[S+] [模式] |                           列出索引                           |\n|   \\dp [模式]   |           列出表，视图和序列的访问权限(\\z 和相同)            |\n| \\ds[S+] [模式] |                           列出序列                           |\n|     \\du[+]     |                           列出角色                           |\n|     \\l[+]      |                       列出所有的数据库                       |\n\n\n\n### KSQL 连接到数据库\n\n#### 使用 SOCKET 方式登录数据库\n\n```shell\n[kingbase@localhost ~]$ ksql -U system -d test\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\ntest=# \n```\n\n\n\n#### 使用 TCP/IP 方式登录数据库\n\n```shell\n[kingbase@localhost ~]$ ksql -h 192.168.146.129 -p 54321 -U system -d test\n用户 system 的口令：\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\ntest=# \n```\n\n\n\n#### 在 KSQL 中切换登录用户和数据库\n\n```shell\n[kingbase@bogon ~]$ ksql -Usystem -d test\nksql (V8.0)\n输入 \"help\" 来获取帮助信息.\n\ntest=# \\c tfsdb\n您现在已经连接到数据库 \"tfsdb\",用户 \"system\".\n\ntfsdb=# \\c - tfsdb\n您现在已经连接到数据库 \"tfsdb\",用户 \"tfsdb\".\n\ntfsdb=# \\c test system\n您现在已经连接到数据库 \"test\",用户 \"system\".\n```\n\n\n\n#### KSQL 引用环境变量进行快速登录\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3xiqo6d2q3g0.webp\" width=\"60%\"/>\n\n<br>\n\n\n\n### 执行 SQL 的几种方式\n\n1. 交互方式执行 SQL\n\n```shell\n# 登录ksql\ntfsdb=# select * from pa_user;\n```\n\n\n\n2. 非交互方式执行 SQL (单条 SQL 语句)\n\n```shell\n# 使用“-c”选项登录 tfsdb 数据库查看\n\n[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -c 'select * from pa_user;'\n```\n\n\n\n3. 非交互方式执行 SQL (成批的 SQL 语句、SQL文件)\n\n```shell\n[kingbase@bogon ~]$ ll\n总用量 8\n-rw-rw-r--  1 kingbase kingbase  23 9月   9 18:00 demo.sql\n-rw-------. 1 kingbase kingbase 712 8月  20 19:13 restart.log\n\n[kingbase@bogon ~]$ cat demo.sql\nselect * from pa_user;\n\n[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -f /home/kingbase/demo.sql\n\n```\n\n\n\n### KSQL 元命令介绍\n\n- 略（查看官网）\n\n\n\n### 使用元命令实现异构数据库数据交换\n\n```shell\n# 导出表数据库到 csv 文件\ntfsdb=# \\copy tfsdb.pa_user to /home/kingbase/pa_user.csv csv\nCOPY 16\n\n# 查看 csv\ntfsdb=# \\! cat /home/kingbase/pa_user.csv\n\n# 将 csv 文件导入数据库表中\ntfsdb=# \\copy tfsdb.pa_user from /home/kingbase/pa_user.csv csv\nCOPY 16\n\n```\n\n\n\n# 用户与角色\n\n- 用户和角色是数据库管理的基础\n- 本章主要介绍如何在 KES 数据库中创建用户和角色，以及利用“角色”对多个用户批量授权，使 KES 管理体系更加清晰、简单\n\n\n\n## 数据库用户\n\n### 用户管理概述\n\n1. 数据库用户代表数据库的使用者\n2. 应该为每个使用者创建用户\n3. 尽量避免多人使用同一个数据库用户\n\n\n\n### 用户管理\n\n- 增删改查 略（参考官网）\n\n- 当待删除用户是部分对象的拥有者时，因对象依赖会导致删除用户失败\n\n\n\n## 数据库角色\n\n### 角色的概念\n\n1. 将一组具有相同权限的用户组织在一起，这一组具有相同权限的用户就称为角色（Role）\n2. 角色在生产系统中一般被视作用户组，利用角色对用户执行批量授权\n\n\n\n### 角色管理\n\n- 增删改查 略（参考官网）\n- 当待删除角色是部分对象的拥有者时，因对象依赖会导致删除角色失败\n- 当待删除角色被显式授予对象权限时，因权限依赖会导致删除角色失败\n\n\n\n# 对象的访问权限入门\n\n- 数据库的表、索引、视图、图表、缺省值、规则、触发器、语法等等，在数据库中的一切，都称为数据库对象，对象分为如下两类：\n\n1. 模式（SCHEMA）对象：可视为一个表的集合，可以理解为一个存储目录，包含视图、索引、数据类型、函数和操作符等\n2. 非模式对象：其他的数据库对象，如数据库、表空间、用户、权限。\n\n\n\n- 用户或角色访问模式对象或非模式对象的能力称之为对象权限\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 简单巡检\n\n## 查看 KES 版本信息\n\n```shell\n# 使用 sys_ctl 查看版本\n[kingbase@localhost ~]$ sys_ctl -V\nsys_ctl (Kingbase) 12.1\n[kingbase@localhost ~]$ sys_ctl --version\nsys_ctl (Kingbase) 12.1\n\n# 使用 version 函数查看版本\ntest=# select version();\n                                                       version\n----------------------------------------------------------------------------------------------------------------------\n KingbaseES V008R006C006B0013 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-46), 64-bit\n(1 行记录)\n\n```\n\n<br>\n\n<br>\n\n## 查看 license 有效期\n\n```shell\ntest=# select get_license_validdays();\n get_license_validdays\n-----------------------\n                    66\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看 KES 实例启动时间和运行时长\n\n```shell\n# 查看数据库实例启动时间\ntest=# select sys_postmaster_start_time();\n   sys_postmaster_start_time\n-------------------------------\n 2022-09-25 08:04:56.261041+08\n(1 行记录)\n\n# 查看 KES 无故障运行时长\ntest=# select date_trunc('second',current_timestamp - sys_postmaster_start_time()) as uptime;\n         uptime\n------------------------\n 2 days 16:28:15.000000\n(1 行记录)\n\n```\n\n<br>\n\n<br>\n\n## 查看数据库列表\n\n```shell\n# 使用 ksql 的-l 参数或元命令\\l\n[kingbase@localhost ~]$ ksql -Usystem -d test -l\n                                           数据库列表\n    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限\n-------------+-------------+----------+----------+-------------+--------------------------------\n security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |\n template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +\n             |             |          |          |             | system=CTc/system\n template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +\n             |             |          |          |             | system=CTc/system\n test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |\n xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +\n             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test\n(5 行记录)\n\ntest=# \\l\n                                           数据库列表\n    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限\n-------------+-------------+----------+----------+-------------+--------------------------------\n security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |\n template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +\n             |             |          |          |             | system=CTc/system\n template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +\n             |             |          |          |             | system=CTc/system\n test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |\n xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +\n             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test\n(5 行记录)\n\n# 使用数据字典\ntest=# select datname from sys_database;\n   datname\n-------------\n test\n security\n template1\n template0\n xjnxdb_test\n(5 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看数据库占用的磁盘空间\n\n```shell\n# 统计当前数据库占用的磁盘空间\ntest=# select sys_database_size(current_database())/1024/1024 || 'MB' MB;\n  MB\n------\n 12MB\n(1 行记录)\n\n# 统计所有数据库占用的磁盘空间总量\nxjnxdb_test=# select (sum(sys_database_size(datname))/1024/1024) || 'MB' MB from sys_database;\n           MB\n------------------------\n 234.1652364730834961MB\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看表和索引的大小\n\n```shell\n# 统计表的空间占用\nxjnxdb_test=# select sys_relation_size('xjnxdb_test.pa_user')/1024 || 'KB' KB;\n  KB\n------\n 48KB\n(1 行记录)\n\nxjnxdb_test=# select sys_size_pretty(sys_relation_size('xjnxdb_test.pa_user'));\n sys_size_pretty\n-----------------\n 48 kB\n(1 行记录)\n\n# 统计表和与表关联的索引占用空间总量\nxjnxdb_test=# select sys_total_relation_size('xjnxdb_test.pa_user')/1024 || 'KB' KB;\n  KB\n------\n 88KB\n(1 行记录)\n\nxjnxdb_test=# select sys_size_pretty(sys_total_relation_size('xjnxdb_test.pa_user'));\n sys_size_pretty\n-----------------\n 88 kB\n(1 行记录)\n\n# 统计表的记录数\nxjnxdb_test=# select count(*) || ' rows' \"rows\" from xjnxdb_test.pa_user;\n   rows\n----------\n 145 rows\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看时区和时间\n\n```shell\n# 查看最近一次加载参数文件的时间\nxjnxdb_test=# select sys_conf_load_time();\n      sys_conf_load_time\n-------------------------------\n 2022-09-25 08:04:55.822231+08\n(1 行记录)\n\n# 查看时区\nxjnxdb_test=# show timezone;\n   TimeZone\n---------------\n Asia/Shanghai\n(1 行记录)\n\n# 查看当前日期或时间\nxjnxdb_test=# select now();\n              now\n-------------------------------\n 2022-09-28 05:43:22.416126+08\n(1 行记录)\n\nxjnxdb_test=# select current_timestamp;\n       current_timestamp\n-------------------------------\n 2022-09-28 05:43:45.124372+08\n(1 行记录)\n\nxjnxdb_test=# select sysdate;\n       sysdate\n---------------------\n 2022-09-28 05:44:16\n(1 行记录)\n\nxjnxdb_test=# select current_date;\n current_date\n--------------\n 2022-09-28\n(1 行记录)\n\n```\n\n<br>\n\n<br>\n\n## 查看当前登录数据库的名称\n\n```shell\nxjnxdb_test=# select current_catalog;\n current_catalog\n-----------------\n xjnxdb_test\n(1 行记录)\n\nxjnxdb_test=# select current_database();\n current_database\n------------------\n xjnxdb_test\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看当前会话信息\n\n```shell\n# 查看当前会话的客户端 IP 和端口。\ntest=# select inet_client_addr(),inet_client_port();\n inet_client_addr | inet_client_port\n------------------+------------------\n 10.114.200.15    |            52665\n(1 行记录)\n\n# 查看服务器的 IP 和端口。\ntest=# select inet_server_addr(),inet_server_port();\n inet_server_addr | inet_server_port\n------------------+------------------\n 10.114.12.66     |            54321\n(1 行记录)\n\n# 查看当前会话的后台进程 ID。\ntest=# select sys_backend_pid();\n sys_backend_pid\n-----------------\n          341129\n(1 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看数据库中的连接信息\n\n```shell\ntest=# select datname,usename,client_addr,client_port  from sys_stat_activity;\n   datname    |   usename    |  client_addr   | client_port\n--------------+--------------+----------------+-------------\n              |              |                |\n              | system       |                |\n              | system       |                |\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45560\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45584\n xjnxdb_test2 | xjnxdb_test2 | 10.114.12.67   |       45624\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630\n```\n\n<br>\n\n<br>\n\n## 查看会话执行的 SQL 信息\n\n```shell\n# （1）设置参数 track_activities 为 on。\ntest=# show track_activities;\n track_activities\n------------------\n on\n(1 行记录)\n\n# 查看所有会话执行的 SQL 信息\ntest=# select datname,usename,client_addr,client_port  from sys_stat_activity;\n   datname    |   usename    |  client_addr   | client_port\n--------------+--------------+----------------+-------------\n              |              |                |\n              | system       |                |\n              | system       |                |\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45654\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45694\n tfsdb        | tfsdb        | 10.43.1.113    |       55971\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630\n xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45684\n\n# 只看正在运行的 SQL 信息\ntest=# select datname,usename,client_addr,client_port  from sys_stat_activity where state not like 'idle%';\n   datname   |   usename   |  client_addr   | client_port\n-------------+-------------+----------------+-------------\n xjnxdb_test | xjnxdb_test | 10.114.12.67   |       45706\n xjnxdb      | xjnxdb      | 10.114.200.108 |       54113\n test        | system      | 10.114.200.15  |       56839\n(3 行记录)\n```\n\n<br>\n\n<br>\n\n## 查看耗时较长的 SQL\n\n```shell\ntfsdb=# select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != 'idle' order by 1 desc;\n-[ RECORD 1 ]----------------------------------------------------------------------------------------------------------------------------------------\nruntime | 00:00:00.000000\ndatname | tfsdb\nusename | system\npid     | 341563\nquery   | select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != 'idle' order by 1 desc;\n```\n\n\n\n<br>\n\n<br>\n\n## 事务阻塞会话的简单处理\n\n```shell\n# 会话 1—关闭自动提交后删除记录\n```\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 单表查询\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n```shell\n熟悉语义 /KingbaseES/V8/Server/bin/kingbase -D /data >log1 2>&1 &\n\nsystemctl , sys_ctl service各个命令的隔离性？\n\n\n几种关闭模式需要详细了解和实验记录，需要自己动手做实验\n\nsql 的元命令 需要详细了解一下呢\n\ncopy 和 \\copy\n\n事务阻塞会话的简单处理 这一块还需要了解一下\n```\n\n\n\n\n\n\n\n\n\n","slug":"KingbaseES-KCA-study-notes","published":1,"updated":"2022-09-27T05:11:41.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsou005pdcta33nm8e1d","content":"<h1 id=\"Kingbase安装与卸载\"><a href=\"#Kingbase安装与卸载\" class=\"headerlink\" title=\"Kingbase安装与卸载\"></a>Kingbase安装与卸载</h1><h2 id=\"KES安装\"><a href=\"#KES安装\" class=\"headerlink\" title=\"KES安装\"></a>KES安装</h2><h3 id=\"环境要求\"><a href=\"#环境要求\" class=\"headerlink\" title=\"环境要求\"></a>环境要求</h3><table>\n<thead>\n<tr>\n<th align=\"center\">环境</th>\n<th align=\"center\">要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">操作系统</td>\n<td align=\"center\">CentOS 7.x</td>\n</tr>\n<tr>\n<td align=\"center\">机器规格 - 内存大小</td>\n<td align=\"center\">3GB 及以上</td>\n</tr>\n<tr>\n<td align=\"center\">机器规格 - 磁盘空间</td>\n<td align=\"center\">20GB 及以上</td>\n</tr>\n<tr>\n<td align=\"center\">KES 安装包版本</td>\n<td align=\"center\">KingbaseES_V008R006C006B0013_Lin64_install.iso</td>\n</tr>\n<tr>\n<td align=\"center\">jdk 版本</td>\n<td align=\"center\">1.8+</td>\n</tr>\n</tbody></table>\n<h3 id=\"安装前准备工作\"><a href=\"#安装前准备工作\" class=\"headerlink\" title=\"安装前准备工作\"></a>安装前准备工作</h3><ol>\n<li>服务器安装jdk1.8+版本并配置环境变量</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum list |grep jdk</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# yum -y install java-1.8.0-openjdk</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# java -version</span><br><span class=\"line\">openjdk version &quot;1.8.0_342&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0_342-b07)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.342-b07, mixed mode)</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>创建用于管理Kingbase的用户</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd kingbase</span><br><span class=\"line\">[root@localhost ~]# </span><br><span class=\"line\">[root@localhost ~]# id kingbase</span><br><span class=\"line\">uid=1000(kingbase) gid=1000(kingbase) 组=1000(kingbase)</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost install]# passwd kingbase</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>按实施规范创建目录，设置权限</li>\n</ol>\n<ul>\n<li>为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前须做好选项、存储目录规划</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th align=\"center\">设置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">目录</td>\n<td align=\"center\">安装软件存储目录：/install<br/>备份目录：/backup<br/>归档目录：/archive<br/>数据存储目录：/data<br/>KES 安装目录：/KingbaseES/V8</td>\n</tr>\n<tr>\n<td align=\"center\">端口</td>\n<td align=\"center\">54321</td>\n</tr>\n<tr>\n<td align=\"center\">SYSTEM 密码</td>\n<td align=\"center\">system</td>\n</tr>\n<tr>\n<td align=\"center\">数据库编码格式</td>\n<td align=\"center\">UTF8</td>\n</tr>\n<tr>\n<td align=\"center\">大小写是否敏感</td>\n<td align=\"center\">ENABLE_CI，默认为 off，表示大小写敏感（根据需求选择）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户，创建目录，设置权限</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建目录</span></span><br><span class=\"line\">[root@localhost ~]# mkdir -p /install /KingbaseES/V8 /backup /data /archive</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改目录属组、属主、权限</span></span><br><span class=\"line\">[root@localhost ~]# chown -R kingbase:kingbase /install /KingbaseES /backup /archive /data</span><br><span class=\"line\">[root@localhost ~]# chmod -R 775 /install /KingbaseES /backup /archive</span><br><span class=\"line\">[root@localhost ~]# chmod -R 700 /data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# ls -l / |grep kingbase</span><br><span class=\"line\">drwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 archive</span><br><span class=\"line\">drwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 backup</span><br><span class=\"line\">drwx------.   2 kingbase kingbase    6 9月   4 22:39 data</span><br><span class=\"line\">drwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 install</span><br><span class=\"line\">drwxrwxr-x.   3 kingbase kingbase   16 9月   4 22:39 KingbaseES</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"上传安装包、授权文件、检查-md5、解压\"><a href=\"#上传安装包、授权文件、检查-md5、解压\" class=\"headerlink\" title=\"上传安装包、授权文件、检查 md5、解压\"></a>上传安装包、授权文件、检查 md5、解压</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户将安装文件上传到/install 下</span></span><br><span class=\"line\">[root@localhost install]# ll</span><br><span class=\"line\">-rw-r--r--. 1 root root 2180431872 9月   4 22:56 KingbaseES_V008R006C006B0013_Lin64_install.iso</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户将授权文件上传到/install。设置授权文件的属主为kingbase和权限并验证</span></span><br><span class=\"line\">[root@localhost install]# ll</span><br><span class=\"line\">-rw-rw-r--. 1 kingbase kingbase       3534 4月  26 11:51 license_18720_0.dat</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查和校验安装文件的 md5 值</span></span><br><span class=\"line\">[root@localhost install]# md5sum KingbaseES_V008R006C006B0013_Lin64_install.iso</span><br><span class=\"line\">c1410ba7062fbaff3308c1453797ce3e  KingbaseES_V008R006C006B0013_Lin64_install.iso</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户挂载 KES 安装虚拟光盘文件</span></span><br><span class=\"line\">[root@localhost install]# mount -o loop /install/KingbaseES_V008R006C006B0013_Lin64_install.iso /mnt/</span><br><span class=\"line\">mount: /dev/loop0 写保护，将以只读方式挂载</span><br><span class=\"line\">[root@localhost install]# ll /mnt/</span><br><span class=\"line\">总用量 6</span><br><span class=\"line\">dr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup</span><br><span class=\"line\">-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 kingbase 用户复制挂载后的安装文件到/install 下</span></span><br><span class=\"line\">[kingbase@bogon ~]$ ll /mnt/</span><br><span class=\"line\">总用量 6</span><br><span class=\"line\">dr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup</span><br><span class=\"line\">-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh</span><br><span class=\"line\">[kingbase@bogon ~]$ mkdir -p /install/KES_V8R6CB13_INSTALL</span><br><span class=\"line\">[kingbase@bogon ~]$ cp -r /mnt/* /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\">[kingbase@bogon ~]$ ll /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">dr-xr-xr-x. 2 kingbase kingbase   54 9月   4 23:14 setup</span><br><span class=\"line\">-r-xr-xr-x. 1 kingbase kingbase 3820 9月   4 23:14 setup.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ du -sm /mnt/</span><br><span class=\"line\">2080    /mnt/</span><br><span class=\"line\">[kingbase@bogon ~]$ du -sm /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\">2080    /install/KES_V8R6CB13_INSTALL/</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"字符界面安装-KES-程序\"><a href=\"#字符界面安装-KES-程序\" class=\"headerlink\" title=\"字符界面安装 KES 程序\"></a>字符界面安装 KES 程序</h3><h4 id=\"启动字符界面安装向导进入“简介”界面\"><a href=\"#启动字符界面安装向导进入“简介”界面\" class=\"headerlink\" title=\"启动字符界面安装向导进入“简介”界面\"></a>启动字符界面安装向导进入“简介”界面</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon KES_V8R6CB13_INSTALL]$ bash ./setup.sh -i console</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装目录输入: /KingbaseES/V8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建和初始化数据库集簇\"><a href=\"#创建和初始化数据库集簇\" class=\"headerlink\" title=\"创建和初始化数据库集簇\"></a>创建和初始化数据库集簇</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">数据存储目录输入: /data</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接回车接受参数的默认值或根据规划要求指定参数的值：</span></span><br><span class=\"line\">（1）端口：54321（生产环境可以根据需求，自定义为其它端口）。</span><br><span class=\"line\">（2）输入 SYSTEM 超级管理员的密码（本实验环境密码设置为 system）。</span><br><span class=\"line\">（3）设置数据库编码格式（推荐设置为“UTF8”）。</span><br><span class=\"line\">（4）选择数据库模式（默认为 oracle 模式）</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"将-KES-服务注册为-linux-系统服务\"><a href=\"#将-KES-服务注册为-linux-系统服务\" class=\"headerlink\" title=\"将 KES 服务注册为 linux 系统服务\"></a>将 KES 服务注册为 linux 系统服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# /KingbaseES/V8/install/script/root.sh</span><br><span class=\"line\">Starting KingbaseES V8:</span><br><span class=\"line\">waiting for server to start.... done</span><br><span class=\"line\">server started</span><br><span class=\"line\">KingbaseES V8 started successfully</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"重启-linux-确认-KES-服务自动启动\"><a href=\"#重启-linux-确认-KES-服务自动启动\" class=\"headerlink\" title=\"重启 linux 确认 KES 服务自动启动\"></a>重启 linux 确认 KES 服务自动启动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i &#x27;kingbase&#x27;</span><br><span class=\"line\">  2116 ?        S      0:00 sshd: kingbase@notty</span><br><span class=\"line\">  2092 ?        S      0:00 sshd: kingbase@pts/1</span><br><span class=\"line\">  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data</span><br><span class=\"line\">  4920 ?        Ss     0:00  \\_ kingbase: logger</span><br><span class=\"line\">  4922 ?        Ss     0:00  \\_ kingbase: checkpointer</span><br><span class=\"line\">  4923 ?        Ss     0:00  \\_ kingbase: background writer</span><br><span class=\"line\">  4924 ?        Ss     0:00  \\_ kingbase: walwriter</span><br><span class=\"line\">  4925 ?        Ss     0:00  \\_ kingbase: autovacuum launcher</span><br><span class=\"line\">  4926 ?        Ss     0:00  \\_ kingbase: stats collector</span><br><span class=\"line\">  4927 ?        Ss     0:00  \\_ kingbase: ksh writer</span><br><span class=\"line\">  4928 ?        Ss     0:00  \\_ kingbase: ksh collector</span><br><span class=\"line\">  4929 ?        Ss     0:00  \\_ kingbase: kwr collector</span><br><span class=\"line\">  4930 ?        Ss     0:00  \\_ kingbase: logical replication launcher</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"确认-KES-是否已正确安装\"><a href=\"#确认-KES-是否已正确安装\" class=\"headerlink\" title=\"确认 KES 是否已正确安装\"></a>确认 KES 是否已正确安装</h2><ul>\n<li>可以使用以下几个角度确认 KES 是否已正确安装或启动</li>\n</ul>\n<ol>\n<li>查看安装过程日志，确认没有错误记录</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon KES_V8R6CB13_INSTALL]$ ls -al *.log</span><br><span class=\"line\">ls: 无法访问*.log: 没有那个文件或目录</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>查看开始菜单中是否已成功安装相关程序</li>\n</ol>\n<ol start=\"3\">\n<li>查看相关进程是否启动</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i &#x27;kingbase&#x27;</span><br><span class=\"line\">  2116 ?        S      0:00 sshd: kingbase@notty</span><br><span class=\"line\">  2092 ?        S      0:00 sshd: kingbase@pts/1</span><br><span class=\"line\">  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data</span><br><span class=\"line\">  4920 ?        Ss     0:00  \\_ kingbase: logger</span><br><span class=\"line\">  4922 ?        Ss     0:00  \\_ kingbase: checkpointer</span><br><span class=\"line\">  4923 ?        Ss     0:00  \\_ kingbase: background writer</span><br><span class=\"line\">  4924 ?        Ss     0:00  \\_ kingbase: walwriter</span><br><span class=\"line\">  4925 ?        Ss     0:00  \\_ kingbase: autovacuum launcher</span><br><span class=\"line\">  4926 ?        Ss     0:00  \\_ kingbase: stats collector</span><br><span class=\"line\">  4927 ?        Ss     0:00  \\_ kingbase: ksh writer</span><br><span class=\"line\">  4928 ?        Ss     0:00  \\_ kingbase: ksh collector</span><br><span class=\"line\">  4929 ?        Ss     0:00  \\_ kingbase: kwr collector</span><br><span class=\"line\">  4930 ?        Ss     0:00  \\_ kingbase: logical replication launcher</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>验证数据库连接是否正常</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用 ksql 工具测试能否连接到数据库</span></span><br><span class=\"line\">[kingbase@bogon ~]$ /KingbaseES/V8/Server/bin/ksql test system</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">test=#</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在桌面环境中启动“数据库对象管理工具”测试能否连接数据库</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"5\">\n<li>查看服务是否已设为开机自启</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ systemctl list-dependencies |grep kingbase</span><br><span class=\"line\">● ├─kingbase8d.service</span><br><span class=\"line\">[kingbase@bogon ~]$ chkconfig --list |grep kingbase</span><br><span class=\"line\"></span><br><span class=\"line\">注：该输出结果只显示 SysV 服务，并不包含</span><br><span class=\"line\">原生 systemd 服务。SysV 配置数据</span><br><span class=\"line\">可能被原生 systemd 配置覆盖。</span><br><span class=\"line\"></span><br><span class=\"line\">      要列出 systemd 服务，请执行 &#x27;systemctl list-unit-files&#x27;。</span><br><span class=\"line\">      查看在具体 target 启用的服务请执行</span><br><span class=\"line\">      &#x27;systemctl list-dependencies [target]&#x27;。</span><br><span class=\"line\"></span><br><span class=\"line\">kingbase8d      0:关    1:关    2:开    3:开    4:开    5:开    6:关</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"启停-KES-服务\"><a href=\"#启停-KES-服务\" class=\"headerlink\" title=\"启停 KES 服务\"></a>启停 KES 服务</h2><h3 id=\"root用户管理KES服务\"><a href=\"#root用户管理KES服务\" class=\"headerlink\" title=\"root用户管理KES服务\"></a>root用户管理KES服务</h3><ul>\n<li>以 root 用户身份登录</li>\n</ul>\n<h4 id=\"root-用户将-KES-注册为-linux-开机自启服务\"><a href=\"#root-用户将-KES-注册为-linux-开机自启服务\" class=\"headerlink\" title=\"root 用户将 KES 注册为 linux 开机自启服务\"></a>root 用户将 KES 注册为 linux 开机自启服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh 来注册系统服务，这样开机时会自己启动 KES 数据库服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# /KingbaseES/V8/install/script/root.sh</span><br><span class=\"line\">Starting KingbaseES V8:</span><br><span class=\"line\">waiting for server to start.... done</span><br><span class=\"line\">server started</span><br><span class=\"line\">KingbaseES V8 started successfully</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"systemctl-管理-KES-服务\"><a href=\"#systemctl-管理-KES-服务\" class=\"headerlink\" title=\"systemctl 管理 KES 服务\"></a>systemctl 管理 KES 服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">root 用户使用 systemctl 管理 KES 服务</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、确认 KES 服务状态。</span></span><br><span class=\"line\">systemctl status kingbase8d.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、停止 KES 服务。</span></span><br><span class=\"line\">systemctl status kingbase8d.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3、启动 KES 服务。</span></span><br><span class=\"line\">systemctl start kingbase8d.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4、重启 KES 服务。</span></span><br><span class=\"line\">systemctl restart kingbase8d.service</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"service-管理-KES-服务\"><a href=\"#service-管理-KES-服务\" class=\"headerlink\" title=\"service 管理 KES 服务\"></a>service 管理 KES 服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">root 用户使用 service 管理 KES 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d status</span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d start</span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d restart</span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d stop</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"kingbase用户管理KES服务\"><a href=\"#kingbase用户管理KES服务\" class=\"headerlink\" title=\"kingbase用户管理KES服务\"></a>kingbase用户管理KES服务</h3><ul>\n<li>使用 kingbase 用户登录后执行 sys_ctl 命令</li>\n</ul>\n<h4 id=\"使用金仓-sys-ctl-命令管理-KES-服务\"><a href=\"#使用金仓-sys-ctl-命令管理-KES-服务\" class=\"headerlink\" title=\"使用金仓 sys_ctl 命令管理 KES 服务\"></a>使用金仓 sys_ctl 命令管理 KES 服务</h4><h5 id=\"sys-ctl-长命令格式\"><a href=\"#sys-ctl-长命令格式\" class=\"headerlink\" title=\"sys_ctl 长命令格式\"></a>sys_ctl 长命令格式</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/KingbaseES/V8/Server/bin/sys_ctl status -D /data</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/Server/bin/sys_ctl stop -D /data</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/Server/bin/sys_ctl start -D /data</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/Server/bin/sys_ctl restart -D /data</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h5 id=\"sys-ctl-语法大纲\"><a href=\"#sys-ctl-语法大纲\" class=\"headerlink\" title=\"sys_ctl 语法大纲\"></a>sys_ctl 语法大纲</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys_ctl start \t[-D DATADIR] [-l FILENAME] [-W] [-t SECS] [-s]</span><br><span class=\"line\">\t\t\t\t[-o OPTIONS] [-p PATH] [-c]</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">sys_ctl stop \t[-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl restart [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]</span><br><span class=\"line\">\t\t\t\t[-o OPTIONS] [-c]</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">sys_ctl reload \t[-D DATADIR] [-s]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl status \t[-D DATADIR]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl promote [-D DATADIR] [-W] [-t SECS] [-s]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl logrotate [-D DATADIR] [-s]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl kill SIGNALNAME PID</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"使用-kingbase-命令启动-KES-服务\"><a href=\"#使用-kingbase-命令启动-KES-服务\" class=\"headerlink\" title=\"使用 kingbase 命令启动 KES 服务\"></a>使用 kingbase 命令启动 KES 服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/KingbaseES/V8/Server/bin/kingbase -D /data &gt;log1 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"环境变量对相关命令的影响\"><a href=\"#环境变量对相关命令的影响\" class=\"headerlink\" title=\"环境变量对相关命令的影响\"></a>环境变量对相关命令的影响</h2><ol>\n<li>定位金仓 sys_ctl 的路径</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon bin]$ find /KingbaseES/ -name sys_ctl</span><br><span class=\"line\">/KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/sys_ctl</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>定位主数据目录</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon bin]$ ps -ef|grep &#x27;\\ -D\\ &#x27;</span><br><span class=\"line\">kingbase   6723   2093  0 00:27 pts/1    00:00:00 /KingbaseES/V8/Server/bin/kingbase -D /data</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# find / -name kingbase.conf</span><br><span class=\"line\">/data/kingbase.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>修改环境变量</li>\n</ol>\n<p>（1）KINGBASE_DATA 变量</p>\n<ul>\n<li>该环境变量指向 KES 主数据目录，此变量名是金仓程序员指定的命名，不要修改</li>\n<li>未指定该变量时，sys_ctl 工具在执行时需要加-D 参数来给定主数据目录位置</li>\n</ul>\n<p>（2）修改 shell 的 profile</p>\n<ul>\n<li>把【/KingbaseES/V8/Server/bin】加到$PATH 变量里面</li>\n<li> 把/data 赋值给$KINGBASE_DATA</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑 kingbase 的环境变量文件，添加相应路径</span></span><br><span class=\"line\">vi /home/kingbase/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=/KingbaseES/V8/Server/bin:$PATH</span><br><span class=\"line\">export KINGBASE_DATA=/data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">让环境变量生效</span></span><br><span class=\"line\">source /home/kingbase/.bashrc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置变量后命令行比较简捷</span></span><br><span class=\"line\">sys_ctl stop -D $KINGBASE_DATA </span><br><span class=\"line\">kingbase -D /data &gt;log1 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"授权文件license-dat\"><a href=\"#授权文件license-dat\" class=\"headerlink\" title=\"授权文件license.dat\"></a>授权文件license.dat</h2><h3 id=\"查看license有效天数\"><a href=\"#查看license有效天数\" class=\"headerlink\" title=\"查看license有效天数\"></a>查看license有效天数</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test=# select get_license_validdays();</span><br><span class=\"line\"> get_license_validdays</span><br><span class=\"line\">-----------------------</span><br><span class=\"line\">                    89</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">test=#</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"license过期后的故障现象\"><a href=\"#license过期后的故障现象\" class=\"headerlink\" title=\"license过期后的故障现象\"></a>license过期后的故障现象</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41abq8t29n80.webp\" />\n\n<br>\n\n<h3 id=\"license过期故障解决\"><a href=\"#license过期故障解决\" class=\"headerlink\" title=\"license过期故障解决\"></a>license过期故障解决</h3><ul>\n<li>使用 kingbase 用户登录，上传新的 lincense.dat 到 kingbase的安装目录 <code>/KingbaseES/V8</code>下——替换原旧的 license.dat。然后重新加载数据库（或者重新启动）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意 lincese.dat 的 属组和属组 必须是 kingbase，授权文件名称 必须是 lincese.dat</span></span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ sys_ctl reload -D $KINGBASE_DATA</span><br><span class=\"line\">server signaled</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"KES卸载\"><a href=\"#KES卸载\" class=\"headerlink\" title=\"KES卸载\"></a>KES卸载</h2><ol>\n<li>使用 root 用户执行 rootuninstall.sh 脚本移除 KES 开机自启服务</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - root</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/install/script/rootuninstall.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>以 kingbase 用户执行 bash /KingbaseES/V8/Uninstall/Uninstaller -i console</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ bash /KingbaseES/V8/Uninstall/Uninstaller -i console</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">卸载完后，执行`<span class=\"built_in\">echo</span> $?`的 结果为 0，则 Uninstaller -i console 执行成功</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>清除安装目录下残留文件</li>\n</ol>\n<ul>\n<li>方法一：执行 <code>rm –fr /KingbaseES/V8</code> 直接删除安装目录</li>\n<li>方法二：执行 <code>mv /KingbaseES/V8 /KingbaseES/V8.bak</code> 将安装目录改名</li>\n</ul>\n<br>\n\n<h1 id=\"数据库对象管理工具\"><a href=\"#数据库对象管理工具\" class=\"headerlink\" title=\"数据库对象管理工具\"></a>数据库对象管理工具</h1><ul>\n<li>参考培训文档，做实验，以及做好记录</li>\n</ul>\n<br>\n\n<h1 id=\"命令行工具KSQL\"><a href=\"#命令行工具KSQL\" class=\"headerlink\" title=\"命令行工具KSQL\"></a>命令行工具KSQL</h1><h2 id=\"KSQL简介\"><a href=\"#KSQL简介\" class=\"headerlink\" title=\"KSQL简介\"></a>KSQL简介</h2><ul>\n<li>KSQL 是金仓提供给 DBA 的与 KES 数据库交互的命令行客户端程序（部分工作场景是无法使用图形界面工具来工作的；还有部分场景使用SQL效率更高）。熟练使用 KSQL 工具可以帮助 DBA 快速的操作和维护数据库</li>\n</ul>\n<h3 id=\"查看-KSQL-工具的帮助\"><a href=\"#查看-KSQL-工具的帮助\" class=\"headerlink\" title=\"查看 KSQL 工具的帮助\"></a>查看 KSQL 工具的帮助</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ksql --help</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部分参数解析</li>\n</ul>\n<ol>\n<li>连接参数</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-h</td>\n<td align=\"center\">连接服务器的监听 IP 或主机名(-h 缺省时为 localhost 方式登录)</td>\n</tr>\n<tr>\n<td align=\"center\">-p</td>\n<td align=\"center\">连接服务器的监听端口号<br>当为端口号为默认值 54321 时可缺省-p<br/>设置了 KINGBASE_PORT 环境变量时也可缺省-p</td>\n</tr>\n<tr>\n<td align=\"center\">-U</td>\n<td align=\"center\">连接服务器的用户名</td>\n</tr>\n<tr>\n<td align=\"center\">-W</td>\n<td align=\"center\">强制输入密码</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>通用参数</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c</td>\n<td align=\"center\">指定连接数据库后执行的单行命令，执行完成后自动退出数据库连接</td>\n</tr>\n<tr>\n<td align=\"center\">-d</td>\n<td align=\"center\">指定连接时登录的数据库</td>\n</tr>\n<tr>\n<td align=\"center\">-f</td>\n<td align=\"center\">指定连接数据库时执行的脚本，执行完成后自动退出数据库连接</td>\n</tr>\n<tr>\n<td align=\"center\">-l</td>\n<td align=\"center\">打印数据库列表</td>\n</tr>\n<tr>\n<td align=\"center\">-V</td>\n<td align=\"center\">打印数据库版本信息</td>\n</tr>\n<tr>\n<td align=\"center\">-?</td>\n<td align=\"center\">打印 ksql 命令的帮助信息</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>输入输出参数</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-H</td>\n<td align=\"center\">以 html 格式展示输出结果</td>\n</tr>\n<tr>\n<td align=\"center\">-E</td>\n<td align=\"center\">展示元命令所执行的 sql</td>\n</tr>\n<tr>\n<td align=\"center\">-t</td>\n<td align=\"center\">不输出字段名</td>\n</tr>\n<tr>\n<td align=\"center\">-x</td>\n<td align=\"center\">调整查询结果为纵向展示</td>\n</tr>\n<tr>\n<td align=\"center\">-q</td>\n<td align=\"center\">不输出登录提示信息</td>\n</tr>\n<tr>\n<td align=\"center\">-o</td>\n<td align=\"center\">将命令输出结果保存到指定的文件中</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"查看标准-SQL-命令的帮助\"><a href=\"#查看标准-SQL-命令的帮助\" class=\"headerlink\" title=\"查看标准 SQL 命令的帮助\"></a>查看标准 SQL 命令的帮助</h3><ol>\n<li>使用 <code>\\h</code> 列出所有的 SQL 命令清单</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test<span class=\"operator\">=</span># \\h</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>使用 <code>\\h &lt;sql 命令&gt;</code> 列出某个 SQL 命令的语法大纲</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test<span class=\"operator\">=</span># \\h <span class=\"keyword\">delete</span></span><br><span class=\"line\">Command:     <span class=\"keyword\">DELETE</span></span><br><span class=\"line\">Description: 删除数据表中的数据列</span><br><span class=\"line\">Syntax:</span><br><span class=\"line\">[ <span class=\"keyword\">WITH</span> [ <span class=\"keyword\">RECURSIVE</span> ] <span class=\"keyword\">with</span>查询语句(with_query) [, ...] ]</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> [ <span class=\"keyword\">ONLY</span> ] 表名 [ <span class=\"operator\">*</span> ] [ [ <span class=\"keyword\">AS</span> ] 别名 ]</span><br><span class=\"line\">    [ <span class=\"keyword\">USING</span> <span class=\"keyword\">USING</span>列表(using_list) ]</span><br><span class=\"line\">    [ <span class=\"keyword\">WHERE</span> 条件 <span class=\"operator\">|</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">CURRENT</span> <span class=\"keyword\">OF</span> 游标名称 ]</span><br><span class=\"line\">    [ RETURNING <span class=\"operator\">*</span> <span class=\"operator\">|</span> 输出表达式 [ [ <span class=\"keyword\">AS</span> ] 输出名称 ] [, ...] ]</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"查看-KSQL-元命令的帮助\"><a href=\"#查看-KSQL-元命令的帮助\" class=\"headerlink\" title=\"查看 KSQL 元命令的帮助\"></a>查看 KSQL 元命令的帮助</h3><ol>\n<li>元命令介绍</li>\n</ol>\n<blockquote>\n<p>（1）ksql 提供了一组以“\\”开头的快捷命令，称之为 ksql 元命令。<br>（2）搭配通配符“*”或“?”提高查询效率。<br>（3）使用选项“S”显示系统对象。<br>（4）使用选项“+”显示更加丰富的信息。</p>\n</blockquote>\n<ol start=\"2\">\n<li>常用元命令介绍</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\d[S+]</td>\n<td align=\"center\">列出表,视图和序列,其中 S 表示包含系统对象，+表示列出详细信息</td>\n</tr>\n<tr>\n<td align=\"center\">\\d[S+] 名称</td>\n<td align=\"center\">描述表，视图，序列，或索引</td>\n</tr>\n<tr>\n<td align=\"center\">\\db[+] [模式]</td>\n<td align=\"center\">列出表空间</td>\n</tr>\n<tr>\n<td align=\"center\">\\di[S+] [模式]</td>\n<td align=\"center\">列出索引</td>\n</tr>\n<tr>\n<td align=\"center\">\\dp [模式]</td>\n<td align=\"center\">列出表，视图和序列的访问权限(\\z 和相同)</td>\n</tr>\n<tr>\n<td align=\"center\">\\ds[S+] [模式]</td>\n<td align=\"center\">列出序列</td>\n</tr>\n<tr>\n<td align=\"center\">\\du[+]</td>\n<td align=\"center\">列出角色</td>\n</tr>\n<tr>\n<td align=\"center\">\\l[+]</td>\n<td align=\"center\">列出所有的数据库</td>\n</tr>\n</tbody></table>\n<h3 id=\"KSQL-连接到数据库\"><a href=\"#KSQL-连接到数据库\" class=\"headerlink\" title=\"KSQL 连接到数据库\"></a>KSQL 连接到数据库</h3><h4 id=\"使用-SOCKET-方式登录数据库\"><a href=\"#使用-SOCKET-方式登录数据库\" class=\"headerlink\" title=\"使用 SOCKET 方式登录数据库\"></a>使用 SOCKET 方式登录数据库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@localhost ~]$ ksql -U system -d test</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">test=# </span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"使用-TCP-IP-方式登录数据库\"><a href=\"#使用-TCP-IP-方式登录数据库\" class=\"headerlink\" title=\"使用 TCP/IP 方式登录数据库\"></a>使用 TCP/IP 方式登录数据库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@localhost ~]$ ksql -h 192.168.146.129 -p 54321 -U system -d test</span><br><span class=\"line\">用户 system 的口令：</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">test=# </span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"在-KSQL-中切换登录用户和数据库\"><a href=\"#在-KSQL-中切换登录用户和数据库\" class=\"headerlink\" title=\"在 KSQL 中切换登录用户和数据库\"></a>在 KSQL 中切换登录用户和数据库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ksql -Usystem -d test</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">test=# \\c tfsdb</span><br><span class=\"line\">您现在已经连接到数据库 &quot;tfsdb&quot;,用户 &quot;system&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">tfsdb=# \\c - tfsdb</span><br><span class=\"line\">您现在已经连接到数据库 &quot;tfsdb&quot;,用户 &quot;tfsdb&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">tfsdb=# \\c test system</span><br><span class=\"line\">您现在已经连接到数据库 &quot;test&quot;,用户 &quot;system&quot;.</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"KSQL-引用环境变量进行快速登录\"><a href=\"#KSQL-引用环境变量进行快速登录\" class=\"headerlink\" title=\"KSQL 引用环境变量进行快速登录\"></a>KSQL 引用环境变量进行快速登录</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3xiqo6d2q3g0.webp\" width=\"60%\"/>\n\n<br>\n\n\n\n<h3 id=\"执行-SQL-的几种方式\"><a href=\"#执行-SQL-的几种方式\" class=\"headerlink\" title=\"执行 SQL 的几种方式\"></a>执行 SQL 的几种方式</h3><ol>\n<li>交互方式执行 SQL</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录ksql</span></span><br><span class=\"line\">tfsdb=# select * from pa_user;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>非交互方式执行 SQL (单条 SQL 语句)</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用“-c”选项登录 tfsdb 数据库查看</span></span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -c &#x27;select * from pa_user;&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>非交互方式执行 SQL (成批的 SQL 语句、SQL文件)</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ll</span><br><span class=\"line\">总用量 8</span><br><span class=\"line\">-rw-rw-r--  1 kingbase kingbase  23 9月   9 18:00 demo.sql</span><br><span class=\"line\">-rw-------. 1 kingbase kingbase 712 8月  20 19:13 restart.log</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ cat demo.sql</span><br><span class=\"line\">select * from pa_user;</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -f /home/kingbase/demo.sql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"KSQL-元命令介绍\"><a href=\"#KSQL-元命令介绍\" class=\"headerlink\" title=\"KSQL 元命令介绍\"></a>KSQL 元命令介绍</h3><ul>\n<li>略（查看官网）</li>\n</ul>\n<h3 id=\"使用元命令实现异构数据库数据交换\"><a href=\"#使用元命令实现异构数据库数据交换\" class=\"headerlink\" title=\"使用元命令实现异构数据库数据交换\"></a>使用元命令实现异构数据库数据交换</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出表数据库到 csv 文件</span></span><br><span class=\"line\">tfsdb=# \\copy tfsdb.pa_user to /home/kingbase/pa_user.csv csv</span><br><span class=\"line\">COPY 16</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 csv</span></span><br><span class=\"line\">tfsdb=# \\! cat /home/kingbase/pa_user.csv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将 csv 文件导入数据库表中</span></span><br><span class=\"line\">tfsdb=# \\copy tfsdb.pa_user from /home/kingbase/pa_user.csv csv</span><br><span class=\"line\">COPY 16</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"用户与角色\"><a href=\"#用户与角色\" class=\"headerlink\" title=\"用户与角色\"></a>用户与角色</h1><ul>\n<li>用户和角色是数据库管理的基础</li>\n<li>本章主要介绍如何在 KES 数据库中创建用户和角色，以及利用“角色”对多个用户批量授权，使 KES 管理体系更加清晰、简单</li>\n</ul>\n<h2 id=\"数据库用户\"><a href=\"#数据库用户\" class=\"headerlink\" title=\"数据库用户\"></a>数据库用户</h2><h3 id=\"用户管理概述\"><a href=\"#用户管理概述\" class=\"headerlink\" title=\"用户管理概述\"></a>用户管理概述</h3><ol>\n<li>数据库用户代表数据库的使用者</li>\n<li>应该为每个使用者创建用户</li>\n<li>尽量避免多人使用同一个数据库用户</li>\n</ol>\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><ul>\n<li><p>增删改查 略（参考官网）</p>\n</li>\n<li><p>当待删除用户是部分对象的拥有者时，因对象依赖会导致删除用户失败</p>\n</li>\n</ul>\n<h2 id=\"数据库角色\"><a href=\"#数据库角色\" class=\"headerlink\" title=\"数据库角色\"></a>数据库角色</h2><h3 id=\"角色的概念\"><a href=\"#角色的概念\" class=\"headerlink\" title=\"角色的概念\"></a>角色的概念</h3><ol>\n<li>将一组具有相同权限的用户组织在一起，这一组具有相同权限的用户就称为角色（Role）</li>\n<li>角色在生产系统中一般被视作用户组，利用角色对用户执行批量授权</li>\n</ol>\n<h3 id=\"角色管理\"><a href=\"#角色管理\" class=\"headerlink\" title=\"角色管理\"></a>角色管理</h3><ul>\n<li>增删改查 略（参考官网）</li>\n<li>当待删除角色是部分对象的拥有者时，因对象依赖会导致删除角色失败</li>\n<li>当待删除角色被显式授予对象权限时，因权限依赖会导致删除角色失败</li>\n</ul>\n<h1 id=\"对象的访问权限入门\"><a href=\"#对象的访问权限入门\" class=\"headerlink\" title=\"对象的访问权限入门\"></a>对象的访问权限入门</h1><ul>\n<li>数据库的表、索引、视图、图表、缺省值、规则、触发器、语法等等，在数据库中的一切，都称为数据库对象，对象分为如下两类：</li>\n</ul>\n<ol>\n<li>模式（SCHEMA）对象：可视为一个表的集合，可以理解为一个存储目录，包含视图、索引、数据类型、函数和操作符等</li>\n<li>非模式对象：其他的数据库对象，如数据库、表空间、用户、权限。</li>\n</ol>\n<ul>\n<li>用户或角色访问模式对象或非模式对象的能力称之为对象权限</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"简单巡检\"><a href=\"#简单巡检\" class=\"headerlink\" title=\"简单巡检\"></a>简单巡检</h1><h2 id=\"查看-KES-版本信息\"><a href=\"#查看-KES-版本信息\" class=\"headerlink\" title=\"查看 KES 版本信息\"></a>查看 KES 版本信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 sys_ctl 查看版本</span></span><br><span class=\"line\">[kingbase@localhost ~]$ sys_ctl -V</span><br><span class=\"line\">sys_ctl (Kingbase) 12.1</span><br><span class=\"line\">[kingbase@localhost ~]$ sys_ctl --version</span><br><span class=\"line\">sys_ctl (Kingbase) 12.1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 version 函数查看版本</span></span><br><span class=\"line\">test=# select version();</span><br><span class=\"line\">                                                       version</span><br><span class=\"line\">----------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> KingbaseES V008R006C006B0013 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-46), 64-bit</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看-license-有效期\"><a href=\"#查看-license-有效期\" class=\"headerlink\" title=\"查看 license 有效期\"></a>查看 license 有效期</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test=# select get_license_validdays();</span><br><span class=\"line\"> get_license_validdays</span><br><span class=\"line\">-----------------------</span><br><span class=\"line\">                    66</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看-KES-实例启动时间和运行时长\"><a href=\"#查看-KES-实例启动时间和运行时长\" class=\"headerlink\" title=\"查看 KES 实例启动时间和运行时长\"></a>查看 KES 实例启动时间和运行时长</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看数据库实例启动时间</span></span><br><span class=\"line\">test=# select sys_postmaster_start_time();</span><br><span class=\"line\">   sys_postmaster_start_time</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"> 2022-09-25 08:04:56.261041+08</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 KES 无故障运行时长</span></span><br><span class=\"line\">test=# select date_trunc(&#x27;second&#x27;,current_timestamp - sys_postmaster_start_time()) as uptime;</span><br><span class=\"line\">         uptime</span><br><span class=\"line\">------------------------</span><br><span class=\"line\"> 2 days 16:28:15.000000</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看数据库列表\"><a href=\"#查看数据库列表\" class=\"headerlink\" title=\"查看数据库列表\"></a>查看数据库列表</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 ksql 的-l 参数或元命令\\l</span></span><br><span class=\"line\">[kingbase@localhost ~]$ ksql -Usystem -d test -l</span><br><span class=\"line\">                                           数据库列表</span><br><span class=\"line\">    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限</span><br><span class=\"line\">-------------+-------------+----------+----------+-------------+--------------------------------</span><br><span class=\"line\"> security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class=\"line\"> template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class=\"line\">             |             |          |          |             | system=CTc/system</span><br><span class=\"line\"> template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class=\"line\">             |             |          |          |             | system=CTc/system</span><br><span class=\"line\"> test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class=\"line\"> xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +</span><br><span class=\"line\">             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test</span><br><span class=\"line\">(5 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">test=# \\l</span><br><span class=\"line\">                                           数据库列表</span><br><span class=\"line\">    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限</span><br><span class=\"line\">-------------+-------------+----------+----------+-------------+--------------------------------</span><br><span class=\"line\"> security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class=\"line\"> template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class=\"line\">             |             |          |          |             | system=CTc/system</span><br><span class=\"line\"> template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class=\"line\">             |             |          |          |             | system=CTc/system</span><br><span class=\"line\"> test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class=\"line\"> xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +</span><br><span class=\"line\">             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test</span><br><span class=\"line\">(5 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用数据字典</span></span><br><span class=\"line\">test=# select datname from sys_database;</span><br><span class=\"line\">   datname</span><br><span class=\"line\">-------------</span><br><span class=\"line\"> test</span><br><span class=\"line\"> security</span><br><span class=\"line\"> template1</span><br><span class=\"line\"> template0</span><br><span class=\"line\"> xjnxdb_test</span><br><span class=\"line\">(5 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看数据库占用的磁盘空间\"><a href=\"#查看数据库占用的磁盘空间\" class=\"headerlink\" title=\"查看数据库占用的磁盘空间\"></a>查看数据库占用的磁盘空间</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计当前数据库占用的磁盘空间</span></span><br><span class=\"line\">test=# select sys_database_size(current_database())/1024/1024 || &#x27;MB&#x27; MB;</span><br><span class=\"line\">  MB</span><br><span class=\"line\">------</span><br><span class=\"line\"> 12MB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计所有数据库占用的磁盘空间总量</span></span><br><span class=\"line\">xjnxdb_test=# select (sum(sys_database_size(datname))/1024/1024) || &#x27;MB&#x27; MB from sys_database;</span><br><span class=\"line\">           MB</span><br><span class=\"line\">------------------------</span><br><span class=\"line\"> 234.1652364730834961MB</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看表和索引的大小\"><a href=\"#查看表和索引的大小\" class=\"headerlink\" title=\"查看表和索引的大小\"></a>查看表和索引的大小</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计表的空间占用</span></span><br><span class=\"line\">xjnxdb_test=# select sys_relation_size(&#x27;xjnxdb_test.pa_user&#x27;)/1024 || &#x27;KB&#x27; KB;</span><br><span class=\"line\">  KB</span><br><span class=\"line\">------</span><br><span class=\"line\"> 48KB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select sys_size_pretty(sys_relation_size(&#x27;xjnxdb_test.pa_user&#x27;));</span><br><span class=\"line\"> sys_size_pretty</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"> 48 kB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计表和与表关联的索引占用空间总量</span></span><br><span class=\"line\">xjnxdb_test=# select sys_total_relation_size(&#x27;xjnxdb_test.pa_user&#x27;)/1024 || &#x27;KB&#x27; KB;</span><br><span class=\"line\">  KB</span><br><span class=\"line\">------</span><br><span class=\"line\"> 88KB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select sys_size_pretty(sys_total_relation_size(&#x27;xjnxdb_test.pa_user&#x27;));</span><br><span class=\"line\"> sys_size_pretty</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"> 88 kB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计表的记录数</span></span><br><span class=\"line\">xjnxdb_test=# select count(*) || &#x27; rows&#x27; &quot;rows&quot; from xjnxdb_test.pa_user;</span><br><span class=\"line\">   rows</span><br><span class=\"line\">----------</span><br><span class=\"line\"> 145 rows</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看时区和时间\"><a href=\"#查看时区和时间\" class=\"headerlink\" title=\"查看时区和时间\"></a>查看时区和时间</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看最近一次加载参数文件的时间</span></span><br><span class=\"line\">xjnxdb_test=# select sys_conf_load_time();</span><br><span class=\"line\">      sys_conf_load_time</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"> 2022-09-25 08:04:55.822231+08</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看时区</span></span><br><span class=\"line\">xjnxdb_test=# show timezone;</span><br><span class=\"line\">   TimeZone</span><br><span class=\"line\">---------------</span><br><span class=\"line\"> Asia/Shanghai</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前日期或时间</span></span><br><span class=\"line\">xjnxdb_test=# select now();</span><br><span class=\"line\">              now</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"> 2022-09-28 05:43:22.416126+08</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select current_timestamp;</span><br><span class=\"line\">       current_timestamp</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"> 2022-09-28 05:43:45.124372+08</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select sysdate;</span><br><span class=\"line\">       sysdate</span><br><span class=\"line\">---------------------</span><br><span class=\"line\"> 2022-09-28 05:44:16</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select current_date;</span><br><span class=\"line\"> current_date</span><br><span class=\"line\">--------------</span><br><span class=\"line\"> 2022-09-28</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看当前登录数据库的名称\"><a href=\"#查看当前登录数据库的名称\" class=\"headerlink\" title=\"查看当前登录数据库的名称\"></a>查看当前登录数据库的名称</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xjnxdb_test=# select current_catalog;</span><br><span class=\"line\"> current_catalog</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"> xjnxdb_test</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select current_database();</span><br><span class=\"line\"> current_database</span><br><span class=\"line\">------------------</span><br><span class=\"line\"> xjnxdb_test</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看当前会话信息\"><a href=\"#查看当前会话信息\" class=\"headerlink\" title=\"查看当前会话信息\"></a>查看当前会话信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前会话的客户端 IP 和端口。</span></span><br><span class=\"line\">test=# select inet_client_addr(),inet_client_port();</span><br><span class=\"line\"> inet_client_addr | inet_client_port</span><br><span class=\"line\">------------------+------------------</span><br><span class=\"line\"> 10.114.200.15    |            52665</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看服务器的 IP 和端口。</span></span><br><span class=\"line\">test=# select inet_server_addr(),inet_server_port();</span><br><span class=\"line\"> inet_server_addr | inet_server_port</span><br><span class=\"line\">------------------+------------------</span><br><span class=\"line\"> 10.114.12.66     |            54321</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前会话的后台进程 ID。</span></span><br><span class=\"line\">test=# select sys_backend_pid();</span><br><span class=\"line\"> sys_backend_pid</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">          341129</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看数据库中的连接信息\"><a href=\"#查看数据库中的连接信息\" class=\"headerlink\" title=\"查看数据库中的连接信息\"></a>查看数据库中的连接信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test=# select datname,usename,client_addr,client_port  from sys_stat_activity;</span><br><span class=\"line\">   datname    |   usename    |  client_addr   | client_port</span><br><span class=\"line\">--------------+--------------+----------------+-------------</span><br><span class=\"line\">              |              |                |</span><br><span class=\"line\">              | system       |                |</span><br><span class=\"line\">              | system       |                |</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45560</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45584</span><br><span class=\"line\"> xjnxdb_test2 | xjnxdb_test2 | 10.114.12.67   |       45624</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看会话执行的-SQL-信息\"><a href=\"#查看会话执行的-SQL-信息\" class=\"headerlink\" title=\"查看会话执行的 SQL 信息\"></a>查看会话执行的 SQL 信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）设置参数 track_activities 为 on。</span></span><br><span class=\"line\">test=# show track_activities;</span><br><span class=\"line\"> track_activities</span><br><span class=\"line\">------------------</span><br><span class=\"line\"> on</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有会话执行的 SQL 信息</span></span><br><span class=\"line\">test=# select datname,usename,client_addr,client_port  from sys_stat_activity;</span><br><span class=\"line\">   datname    |   usename    |  client_addr   | client_port</span><br><span class=\"line\">--------------+--------------+----------------+-------------</span><br><span class=\"line\">              |              |                |</span><br><span class=\"line\">              | system       |                |</span><br><span class=\"line\">              | system       |                |</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45654</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45694</span><br><span class=\"line\"> tfsdb        | tfsdb        | 10.43.1.113    |       55971</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45684</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只看正在运行的 SQL 信息</span></span><br><span class=\"line\">test=# select datname,usename,client_addr,client_port  from sys_stat_activity where state not like &#x27;idle%&#x27;;</span><br><span class=\"line\">   datname   |   usename   |  client_addr   | client_port</span><br><span class=\"line\">-------------+-------------+----------------+-------------</span><br><span class=\"line\"> xjnxdb_test | xjnxdb_test | 10.114.12.67   |       45706</span><br><span class=\"line\"> xjnxdb      | xjnxdb      | 10.114.200.108 |       54113</span><br><span class=\"line\"> test        | system      | 10.114.200.15  |       56839</span><br><span class=\"line\">(3 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看耗时较长的-SQL\"><a href=\"#查看耗时较长的-SQL\" class=\"headerlink\" title=\"查看耗时较长的 SQL\"></a>查看耗时较长的 SQL</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tfsdb=# select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != &#x27;idle&#x27; order by 1 desc;</span><br><span class=\"line\">-[ RECORD 1 ]----------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">runtime | 00:00:00.000000</span><br><span class=\"line\">datname | tfsdb</span><br><span class=\"line\">usename | system</span><br><span class=\"line\">pid     | 341563</span><br><span class=\"line\">query   | select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != &#x27;idle&#x27; order by 1 desc;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<br>\n\n<h2 id=\"事务阻塞会话的简单处理\"><a href=\"#事务阻塞会话的简单处理\" class=\"headerlink\" title=\"事务阻塞会话的简单处理\"></a>事务阻塞会话的简单处理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">会话 1—关闭自动提交后删除记录</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"单表查询\"><a href=\"#单表查询\" class=\"headerlink\" title=\"单表查询\"></a>单表查询</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">熟悉语义 /KingbaseES/V8/Server/bin/kingbase -D /data &gt;log1 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl , sys_ctl service各个命令的隔离性？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">几种关闭模式需要详细了解和实验记录，需要自己动手做实验</span><br><span class=\"line\"></span><br><span class=\"line\">sql 的元命令 需要详细了解一下呢</span><br><span class=\"line\"></span><br><span class=\"line\">copy 和 \\copy</span><br><span class=\"line\"></span><br><span class=\"line\">事务阻塞会话的简单处理 这一块还需要了解一下</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Kingbase安装与卸载\"><a href=\"#Kingbase安装与卸载\" class=\"headerlink\" title=\"Kingbase安装与卸载\"></a>Kingbase安装与卸载</h1><h2 id=\"KES安装\"><a href=\"#KES安装\" class=\"headerlink\" title=\"KES安装\"></a>KES安装</h2><h3 id=\"环境要求\"><a href=\"#环境要求\" class=\"headerlink\" title=\"环境要求\"></a>环境要求</h3><table>\n<thead>\n<tr>\n<th align=\"center\">环境</th>\n<th align=\"center\">要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">操作系统</td>\n<td align=\"center\">CentOS 7.x</td>\n</tr>\n<tr>\n<td align=\"center\">机器规格 - 内存大小</td>\n<td align=\"center\">3GB 及以上</td>\n</tr>\n<tr>\n<td align=\"center\">机器规格 - 磁盘空间</td>\n<td align=\"center\">20GB 及以上</td>\n</tr>\n<tr>\n<td align=\"center\">KES 安装包版本</td>\n<td align=\"center\">KingbaseES_V008R006C006B0013_Lin64_install.iso</td>\n</tr>\n<tr>\n<td align=\"center\">jdk 版本</td>\n<td align=\"center\">1.8+</td>\n</tr>\n</tbody></table>\n<h3 id=\"安装前准备工作\"><a href=\"#安装前准备工作\" class=\"headerlink\" title=\"安装前准备工作\"></a>安装前准备工作</h3><ol>\n<li>服务器安装jdk1.8+版本并配置环境变量</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum list |grep jdk</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# yum -y install java-1.8.0-openjdk</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# java -version</span><br><span class=\"line\">openjdk version &quot;1.8.0_342&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0_342-b07)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.342-b07, mixed mode)</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>创建用于管理Kingbase的用户</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd kingbase</span><br><span class=\"line\">[root@localhost ~]# </span><br><span class=\"line\">[root@localhost ~]# id kingbase</span><br><span class=\"line\">uid=1000(kingbase) gid=1000(kingbase) 组=1000(kingbase)</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost install]# passwd kingbase</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>按实施规范创建目录，设置权限</li>\n</ol>\n<ul>\n<li>为了利于数据库的日常运维、持续使用、存储扩容等，我们在安装前须做好选项、存储目录规划</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th align=\"center\">设置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">目录</td>\n<td align=\"center\">安装软件存储目录：/install<br/>备份目录：/backup<br/>归档目录：/archive<br/>数据存储目录：/data<br/>KES 安装目录：/KingbaseES/V8</td>\n</tr>\n<tr>\n<td align=\"center\">端口</td>\n<td align=\"center\">54321</td>\n</tr>\n<tr>\n<td align=\"center\">SYSTEM 密码</td>\n<td align=\"center\">system</td>\n</tr>\n<tr>\n<td align=\"center\">数据库编码格式</td>\n<td align=\"center\">UTF8</td>\n</tr>\n<tr>\n<td align=\"center\">大小写是否敏感</td>\n<td align=\"center\">ENABLE_CI，默认为 off，表示大小写敏感（根据需求选择）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户，创建目录，设置权限</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建目录</span></span><br><span class=\"line\">[root@localhost ~]# mkdir -p /install /KingbaseES/V8 /backup /data /archive</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改目录属组、属主、权限</span></span><br><span class=\"line\">[root@localhost ~]# chown -R kingbase:kingbase /install /KingbaseES /backup /archive /data</span><br><span class=\"line\">[root@localhost ~]# chmod -R 775 /install /KingbaseES /backup /archive</span><br><span class=\"line\">[root@localhost ~]# chmod -R 700 /data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# ls -l / |grep kingbase</span><br><span class=\"line\">drwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 archive</span><br><span class=\"line\">drwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 backup</span><br><span class=\"line\">drwx------.   2 kingbase kingbase    6 9月   4 22:39 data</span><br><span class=\"line\">drwxrwxr-x.   2 kingbase kingbase    6 9月   4 22:39 install</span><br><span class=\"line\">drwxrwxr-x.   3 kingbase kingbase   16 9月   4 22:39 KingbaseES</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"上传安装包、授权文件、检查-md5、解压\"><a href=\"#上传安装包、授权文件、检查-md5、解压\" class=\"headerlink\" title=\"上传安装包、授权文件、检查 md5、解压\"></a>上传安装包、授权文件、检查 md5、解压</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户将安装文件上传到/install 下</span></span><br><span class=\"line\">[root@localhost install]# ll</span><br><span class=\"line\">-rw-r--r--. 1 root root 2180431872 9月   4 22:56 KingbaseES_V008R006C006B0013_Lin64_install.iso</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户将授权文件上传到/install。设置授权文件的属主为kingbase和权限并验证</span></span><br><span class=\"line\">[root@localhost install]# ll</span><br><span class=\"line\">-rw-rw-r--. 1 kingbase kingbase       3534 4月  26 11:51 license_18720_0.dat</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查和校验安装文件的 md5 值</span></span><br><span class=\"line\">[root@localhost install]# md5sum KingbaseES_V008R006C006B0013_Lin64_install.iso</span><br><span class=\"line\">c1410ba7062fbaff3308c1453797ce3e  KingbaseES_V008R006C006B0013_Lin64_install.iso</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户挂载 KES 安装虚拟光盘文件</span></span><br><span class=\"line\">[root@localhost install]# mount -o loop /install/KingbaseES_V008R006C006B0013_Lin64_install.iso /mnt/</span><br><span class=\"line\">mount: /dev/loop0 写保护，将以只读方式挂载</span><br><span class=\"line\">[root@localhost install]# ll /mnt/</span><br><span class=\"line\">总用量 6</span><br><span class=\"line\">dr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup</span><br><span class=\"line\">-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 kingbase 用户复制挂载后的安装文件到/install 下</span></span><br><span class=\"line\">[kingbase@bogon ~]$ ll /mnt/</span><br><span class=\"line\">总用量 6</span><br><span class=\"line\">dr-xr-xr-x. 2 root root 2048 6月  14 01:09 setup</span><br><span class=\"line\">-r-xr-xr-x. 1 root root 3820 6月  14 01:09 setup.sh</span><br><span class=\"line\">[kingbase@bogon ~]$ mkdir -p /install/KES_V8R6CB13_INSTALL</span><br><span class=\"line\">[kingbase@bogon ~]$ cp -r /mnt/* /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\">[kingbase@bogon ~]$ ll /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">dr-xr-xr-x. 2 kingbase kingbase   54 9月   4 23:14 setup</span><br><span class=\"line\">-r-xr-xr-x. 1 kingbase kingbase 3820 9月   4 23:14 setup.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ du -sm /mnt/</span><br><span class=\"line\">2080    /mnt/</span><br><span class=\"line\">[kingbase@bogon ~]$ du -sm /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\">2080    /install/KES_V8R6CB13_INSTALL/</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"字符界面安装-KES-程序\"><a href=\"#字符界面安装-KES-程序\" class=\"headerlink\" title=\"字符界面安装 KES 程序\"></a>字符界面安装 KES 程序</h3><h4 id=\"启动字符界面安装向导进入“简介”界面\"><a href=\"#启动字符界面安装向导进入“简介”界面\" class=\"headerlink\" title=\"启动字符界面安装向导进入“简介”界面\"></a>启动字符界面安装向导进入“简介”界面</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon KES_V8R6CB13_INSTALL]$ bash ./setup.sh -i console</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装目录输入: /KingbaseES/V8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建和初始化数据库集簇\"><a href=\"#创建和初始化数据库集簇\" class=\"headerlink\" title=\"创建和初始化数据库集簇\"></a>创建和初始化数据库集簇</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">数据存储目录输入: /data</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接回车接受参数的默认值或根据规划要求指定参数的值：</span></span><br><span class=\"line\">（1）端口：54321（生产环境可以根据需求，自定义为其它端口）。</span><br><span class=\"line\">（2）输入 SYSTEM 超级管理员的密码（本实验环境密码设置为 system）。</span><br><span class=\"line\">（3）设置数据库编码格式（推荐设置为“UTF8”）。</span><br><span class=\"line\">（4）选择数据库模式（默认为 oracle 模式）</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"将-KES-服务注册为-linux-系统服务\"><a href=\"#将-KES-服务注册为-linux-系统服务\" class=\"headerlink\" title=\"将 KES 服务注册为 linux 系统服务\"></a>将 KES 服务注册为 linux 系统服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# /KingbaseES/V8/install/script/root.sh</span><br><span class=\"line\">Starting KingbaseES V8:</span><br><span class=\"line\">waiting for server to start.... done</span><br><span class=\"line\">server started</span><br><span class=\"line\">KingbaseES V8 started successfully</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"重启-linux-确认-KES-服务自动启动\"><a href=\"#重启-linux-确认-KES-服务自动启动\" class=\"headerlink\" title=\"重启 linux 确认 KES 服务自动启动\"></a>重启 linux 确认 KES 服务自动启动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i &#x27;kingbase&#x27;</span><br><span class=\"line\">  2116 ?        S      0:00 sshd: kingbase@notty</span><br><span class=\"line\">  2092 ?        S      0:00 sshd: kingbase@pts/1</span><br><span class=\"line\">  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data</span><br><span class=\"line\">  4920 ?        Ss     0:00  \\_ kingbase: logger</span><br><span class=\"line\">  4922 ?        Ss     0:00  \\_ kingbase: checkpointer</span><br><span class=\"line\">  4923 ?        Ss     0:00  \\_ kingbase: background writer</span><br><span class=\"line\">  4924 ?        Ss     0:00  \\_ kingbase: walwriter</span><br><span class=\"line\">  4925 ?        Ss     0:00  \\_ kingbase: autovacuum launcher</span><br><span class=\"line\">  4926 ?        Ss     0:00  \\_ kingbase: stats collector</span><br><span class=\"line\">  4927 ?        Ss     0:00  \\_ kingbase: ksh writer</span><br><span class=\"line\">  4928 ?        Ss     0:00  \\_ kingbase: ksh collector</span><br><span class=\"line\">  4929 ?        Ss     0:00  \\_ kingbase: kwr collector</span><br><span class=\"line\">  4930 ?        Ss     0:00  \\_ kingbase: logical replication launcher</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"确认-KES-是否已正确安装\"><a href=\"#确认-KES-是否已正确安装\" class=\"headerlink\" title=\"确认 KES 是否已正确安装\"></a>确认 KES 是否已正确安装</h2><ul>\n<li>可以使用以下几个角度确认 KES 是否已正确安装或启动</li>\n</ul>\n<ol>\n<li>查看安装过程日志，确认没有错误记录</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ cd /install/KES_V8R6CB13_INSTALL/</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon KES_V8R6CB13_INSTALL]$ ls -al *.log</span><br><span class=\"line\">ls: 无法访问*.log: 没有那个文件或目录</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>查看开始菜单中是否已成功安装相关程序</li>\n</ol>\n<ol start=\"3\">\n<li>查看相关进程是否启动</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ps -xf |grep -v grep |grep -i &#x27;kingbase&#x27;</span><br><span class=\"line\">  2116 ?        S      0:00 sshd: kingbase@notty</span><br><span class=\"line\">  2092 ?        S      0:00 sshd: kingbase@pts/1</span><br><span class=\"line\">  4919 ?        Ss     0:00 /KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/kingbase -D /data</span><br><span class=\"line\">  4920 ?        Ss     0:00  \\_ kingbase: logger</span><br><span class=\"line\">  4922 ?        Ss     0:00  \\_ kingbase: checkpointer</span><br><span class=\"line\">  4923 ?        Ss     0:00  \\_ kingbase: background writer</span><br><span class=\"line\">  4924 ?        Ss     0:00  \\_ kingbase: walwriter</span><br><span class=\"line\">  4925 ?        Ss     0:00  \\_ kingbase: autovacuum launcher</span><br><span class=\"line\">  4926 ?        Ss     0:00  \\_ kingbase: stats collector</span><br><span class=\"line\">  4927 ?        Ss     0:00  \\_ kingbase: ksh writer</span><br><span class=\"line\">  4928 ?        Ss     0:00  \\_ kingbase: ksh collector</span><br><span class=\"line\">  4929 ?        Ss     0:00  \\_ kingbase: kwr collector</span><br><span class=\"line\">  4930 ?        Ss     0:00  \\_ kingbase: logical replication launcher</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>验证数据库连接是否正常</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用 ksql 工具测试能否连接到数据库</span></span><br><span class=\"line\">[kingbase@bogon ~]$ /KingbaseES/V8/Server/bin/ksql test system</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">test=#</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在桌面环境中启动“数据库对象管理工具”测试能否连接数据库</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"5\">\n<li>查看服务是否已设为开机自启</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ systemctl list-dependencies |grep kingbase</span><br><span class=\"line\">● ├─kingbase8d.service</span><br><span class=\"line\">[kingbase@bogon ~]$ chkconfig --list |grep kingbase</span><br><span class=\"line\"></span><br><span class=\"line\">注：该输出结果只显示 SysV 服务，并不包含</span><br><span class=\"line\">原生 systemd 服务。SysV 配置数据</span><br><span class=\"line\">可能被原生 systemd 配置覆盖。</span><br><span class=\"line\"></span><br><span class=\"line\">      要列出 systemd 服务，请执行 &#x27;systemctl list-unit-files&#x27;。</span><br><span class=\"line\">      查看在具体 target 启用的服务请执行</span><br><span class=\"line\">      &#x27;systemctl list-dependencies [target]&#x27;。</span><br><span class=\"line\"></span><br><span class=\"line\">kingbase8d      0:关    1:关    2:开    3:开    4:开    5:开    6:关</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"启停-KES-服务\"><a href=\"#启停-KES-服务\" class=\"headerlink\" title=\"启停 KES 服务\"></a>启停 KES 服务</h2><h3 id=\"root用户管理KES服务\"><a href=\"#root用户管理KES服务\" class=\"headerlink\" title=\"root用户管理KES服务\"></a>root用户管理KES服务</h3><ul>\n<li>以 root 用户身份登录</li>\n</ul>\n<h4 id=\"root-用户将-KES-注册为-linux-开机自启服务\"><a href=\"#root-用户将-KES-注册为-linux-开机自启服务\" class=\"headerlink\" title=\"root 用户将 KES 注册为 linux 开机自启服务\"></a>root 用户将 KES 注册为 linux 开机自启服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 root 用户执行安装程序提供的脚本/KingbaseES/V8/Scripts/root.sh 来注册系统服务，这样开机时会自己启动 KES 数据库服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# /KingbaseES/V8/install/script/root.sh</span><br><span class=\"line\">Starting KingbaseES V8:</span><br><span class=\"line\">waiting for server to start.... done</span><br><span class=\"line\">server started</span><br><span class=\"line\">KingbaseES V8 started successfully</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"systemctl-管理-KES-服务\"><a href=\"#systemctl-管理-KES-服务\" class=\"headerlink\" title=\"systemctl 管理 KES 服务\"></a>systemctl 管理 KES 服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">root 用户使用 systemctl 管理 KES 服务</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、确认 KES 服务状态。</span></span><br><span class=\"line\">systemctl status kingbase8d.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、停止 KES 服务。</span></span><br><span class=\"line\">systemctl status kingbase8d.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3、启动 KES 服务。</span></span><br><span class=\"line\">systemctl start kingbase8d.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4、重启 KES 服务。</span></span><br><span class=\"line\">systemctl restart kingbase8d.service</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"service-管理-KES-服务\"><a href=\"#service-管理-KES-服务\" class=\"headerlink\" title=\"service 管理 KES 服务\"></a>service 管理 KES 服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">root 用户使用 service 管理 KES 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d status</span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d start</span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d restart</span><br><span class=\"line\"></span><br><span class=\"line\">service kingbase8d stop</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"kingbase用户管理KES服务\"><a href=\"#kingbase用户管理KES服务\" class=\"headerlink\" title=\"kingbase用户管理KES服务\"></a>kingbase用户管理KES服务</h3><ul>\n<li>使用 kingbase 用户登录后执行 sys_ctl 命令</li>\n</ul>\n<h4 id=\"使用金仓-sys-ctl-命令管理-KES-服务\"><a href=\"#使用金仓-sys-ctl-命令管理-KES-服务\" class=\"headerlink\" title=\"使用金仓 sys_ctl 命令管理 KES 服务\"></a>使用金仓 sys_ctl 命令管理 KES 服务</h4><h5 id=\"sys-ctl-长命令格式\"><a href=\"#sys-ctl-长命令格式\" class=\"headerlink\" title=\"sys_ctl 长命令格式\"></a>sys_ctl 长命令格式</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/KingbaseES/V8/Server/bin/sys_ctl status -D /data</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/Server/bin/sys_ctl stop -D /data</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/Server/bin/sys_ctl start -D /data</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/Server/bin/sys_ctl restart -D /data</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h5 id=\"sys-ctl-语法大纲\"><a href=\"#sys-ctl-语法大纲\" class=\"headerlink\" title=\"sys_ctl 语法大纲\"></a>sys_ctl 语法大纲</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys_ctl start \t[-D DATADIR] [-l FILENAME] [-W] [-t SECS] [-s]</span><br><span class=\"line\">\t\t\t\t[-o OPTIONS] [-p PATH] [-c]</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">sys_ctl stop \t[-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl restart [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]</span><br><span class=\"line\">\t\t\t\t[-o OPTIONS] [-c]</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">sys_ctl reload \t[-D DATADIR] [-s]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl status \t[-D DATADIR]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl promote [-D DATADIR] [-W] [-t SECS] [-s]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl logrotate [-D DATADIR] [-s]</span><br><span class=\"line\"></span><br><span class=\"line\">sys_ctl kill SIGNALNAME PID</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"使用-kingbase-命令启动-KES-服务\"><a href=\"#使用-kingbase-命令启动-KES-服务\" class=\"headerlink\" title=\"使用 kingbase 命令启动 KES 服务\"></a>使用 kingbase 命令启动 KES 服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/KingbaseES/V8/Server/bin/kingbase -D /data &gt;log1 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"环境变量对相关命令的影响\"><a href=\"#环境变量对相关命令的影响\" class=\"headerlink\" title=\"环境变量对相关命令的影响\"></a>环境变量对相关命令的影响</h2><ol>\n<li>定位金仓 sys_ctl 的路径</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon bin]$ find /KingbaseES/ -name sys_ctl</span><br><span class=\"line\">/KingbaseES/V8/KESRealPro/V008R006C006B0013/Server/bin/sys_ctl</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>定位主数据目录</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon bin]$ ps -ef|grep &#x27;\\ -D\\ &#x27;</span><br><span class=\"line\">kingbase   6723   2093  0 00:27 pts/1    00:00:00 /KingbaseES/V8/Server/bin/kingbase -D /data</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# find / -name kingbase.conf</span><br><span class=\"line\">/data/kingbase.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>修改环境变量</li>\n</ol>\n<p>（1）KINGBASE_DATA 变量</p>\n<ul>\n<li>该环境变量指向 KES 主数据目录，此变量名是金仓程序员指定的命名，不要修改</li>\n<li>未指定该变量时，sys_ctl 工具在执行时需要加-D 参数来给定主数据目录位置</li>\n</ul>\n<p>（2）修改 shell 的 profile</p>\n<ul>\n<li>把【/KingbaseES/V8/Server/bin】加到$PATH 变量里面</li>\n<li> 把/data 赋值给$KINGBASE_DATA</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑 kingbase 的环境变量文件，添加相应路径</span></span><br><span class=\"line\">vi /home/kingbase/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=/KingbaseES/V8/Server/bin:$PATH</span><br><span class=\"line\">export KINGBASE_DATA=/data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">让环境变量生效</span></span><br><span class=\"line\">source /home/kingbase/.bashrc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置变量后命令行比较简捷</span></span><br><span class=\"line\">sys_ctl stop -D $KINGBASE_DATA </span><br><span class=\"line\">kingbase -D /data &gt;log1 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"授权文件license-dat\"><a href=\"#授权文件license-dat\" class=\"headerlink\" title=\"授权文件license.dat\"></a>授权文件license.dat</h2><h3 id=\"查看license有效天数\"><a href=\"#查看license有效天数\" class=\"headerlink\" title=\"查看license有效天数\"></a>查看license有效天数</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test=# select get_license_validdays();</span><br><span class=\"line\"> get_license_validdays</span><br><span class=\"line\">-----------------------</span><br><span class=\"line\">                    89</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">test=#</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"license过期后的故障现象\"><a href=\"#license过期后的故障现象\" class=\"headerlink\" title=\"license过期后的故障现象\"></a>license过期后的故障现象</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41abq8t29n80.webp\" />\n\n<br>\n\n<h3 id=\"license过期故障解决\"><a href=\"#license过期故障解决\" class=\"headerlink\" title=\"license过期故障解决\"></a>license过期故障解决</h3><ul>\n<li>使用 kingbase 用户登录，上传新的 lincense.dat 到 kingbase的安装目录 <code>/KingbaseES/V8</code>下——替换原旧的 license.dat。然后重新加载数据库（或者重新启动）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意 lincese.dat 的 属组和属组 必须是 kingbase，授权文件名称 必须是 lincese.dat</span></span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ sys_ctl reload -D $KINGBASE_DATA</span><br><span class=\"line\">server signaled</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"KES卸载\"><a href=\"#KES卸载\" class=\"headerlink\" title=\"KES卸载\"></a>KES卸载</h2><ol>\n<li>使用 root 用户执行 rootuninstall.sh 脚本移除 KES 开机自启服务</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - root</span><br><span class=\"line\"></span><br><span class=\"line\">/KingbaseES/V8/install/script/rootuninstall.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>以 kingbase 用户执行 bash /KingbaseES/V8/Uninstall/Uninstaller -i console</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ bash /KingbaseES/V8/Uninstall/Uninstaller -i console</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">卸载完后，执行`<span class=\"built_in\">echo</span> $?`的 结果为 0，则 Uninstaller -i console 执行成功</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>清除安装目录下残留文件</li>\n</ol>\n<ul>\n<li>方法一：执行 <code>rm –fr /KingbaseES/V8</code> 直接删除安装目录</li>\n<li>方法二：执行 <code>mv /KingbaseES/V8 /KingbaseES/V8.bak</code> 将安装目录改名</li>\n</ul>\n<br>\n\n<h1 id=\"数据库对象管理工具\"><a href=\"#数据库对象管理工具\" class=\"headerlink\" title=\"数据库对象管理工具\"></a>数据库对象管理工具</h1><ul>\n<li>参考培训文档，做实验，以及做好记录</li>\n</ul>\n<br>\n\n<h1 id=\"命令行工具KSQL\"><a href=\"#命令行工具KSQL\" class=\"headerlink\" title=\"命令行工具KSQL\"></a>命令行工具KSQL</h1><h2 id=\"KSQL简介\"><a href=\"#KSQL简介\" class=\"headerlink\" title=\"KSQL简介\"></a>KSQL简介</h2><ul>\n<li>KSQL 是金仓提供给 DBA 的与 KES 数据库交互的命令行客户端程序（部分工作场景是无法使用图形界面工具来工作的；还有部分场景使用SQL效率更高）。熟练使用 KSQL 工具可以帮助 DBA 快速的操作和维护数据库</li>\n</ul>\n<h3 id=\"查看-KSQL-工具的帮助\"><a href=\"#查看-KSQL-工具的帮助\" class=\"headerlink\" title=\"查看 KSQL 工具的帮助\"></a>查看 KSQL 工具的帮助</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ksql --help</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部分参数解析</li>\n</ul>\n<ol>\n<li>连接参数</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-h</td>\n<td align=\"center\">连接服务器的监听 IP 或主机名(-h 缺省时为 localhost 方式登录)</td>\n</tr>\n<tr>\n<td align=\"center\">-p</td>\n<td align=\"center\">连接服务器的监听端口号<br>当为端口号为默认值 54321 时可缺省-p<br/>设置了 KINGBASE_PORT 环境变量时也可缺省-p</td>\n</tr>\n<tr>\n<td align=\"center\">-U</td>\n<td align=\"center\">连接服务器的用户名</td>\n</tr>\n<tr>\n<td align=\"center\">-W</td>\n<td align=\"center\">强制输入密码</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>通用参数</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-c</td>\n<td align=\"center\">指定连接数据库后执行的单行命令，执行完成后自动退出数据库连接</td>\n</tr>\n<tr>\n<td align=\"center\">-d</td>\n<td align=\"center\">指定连接时登录的数据库</td>\n</tr>\n<tr>\n<td align=\"center\">-f</td>\n<td align=\"center\">指定连接数据库时执行的脚本，执行完成后自动退出数据库连接</td>\n</tr>\n<tr>\n<td align=\"center\">-l</td>\n<td align=\"center\">打印数据库列表</td>\n</tr>\n<tr>\n<td align=\"center\">-V</td>\n<td align=\"center\">打印数据库版本信息</td>\n</tr>\n<tr>\n<td align=\"center\">-?</td>\n<td align=\"center\">打印 ksql 命令的帮助信息</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>输入输出参数</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-H</td>\n<td align=\"center\">以 html 格式展示输出结果</td>\n</tr>\n<tr>\n<td align=\"center\">-E</td>\n<td align=\"center\">展示元命令所执行的 sql</td>\n</tr>\n<tr>\n<td align=\"center\">-t</td>\n<td align=\"center\">不输出字段名</td>\n</tr>\n<tr>\n<td align=\"center\">-x</td>\n<td align=\"center\">调整查询结果为纵向展示</td>\n</tr>\n<tr>\n<td align=\"center\">-q</td>\n<td align=\"center\">不输出登录提示信息</td>\n</tr>\n<tr>\n<td align=\"center\">-o</td>\n<td align=\"center\">将命令输出结果保存到指定的文件中</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"查看标准-SQL-命令的帮助\"><a href=\"#查看标准-SQL-命令的帮助\" class=\"headerlink\" title=\"查看标准 SQL 命令的帮助\"></a>查看标准 SQL 命令的帮助</h3><ol>\n<li>使用 <code>\\h</code> 列出所有的 SQL 命令清单</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test<span class=\"operator\">=</span># \\h</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>使用 <code>\\h &lt;sql 命令&gt;</code> 列出某个 SQL 命令的语法大纲</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test<span class=\"operator\">=</span># \\h <span class=\"keyword\">delete</span></span><br><span class=\"line\">Command:     <span class=\"keyword\">DELETE</span></span><br><span class=\"line\">Description: 删除数据表中的数据列</span><br><span class=\"line\">Syntax:</span><br><span class=\"line\">[ <span class=\"keyword\">WITH</span> [ <span class=\"keyword\">RECURSIVE</span> ] <span class=\"keyword\">with</span>查询语句(with_query) [, ...] ]</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> [ <span class=\"keyword\">ONLY</span> ] 表名 [ <span class=\"operator\">*</span> ] [ [ <span class=\"keyword\">AS</span> ] 别名 ]</span><br><span class=\"line\">    [ <span class=\"keyword\">USING</span> <span class=\"keyword\">USING</span>列表(using_list) ]</span><br><span class=\"line\">    [ <span class=\"keyword\">WHERE</span> 条件 <span class=\"operator\">|</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">CURRENT</span> <span class=\"keyword\">OF</span> 游标名称 ]</span><br><span class=\"line\">    [ RETURNING <span class=\"operator\">*</span> <span class=\"operator\">|</span> 输出表达式 [ [ <span class=\"keyword\">AS</span> ] 输出名称 ] [, ...] ]</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"查看-KSQL-元命令的帮助\"><a href=\"#查看-KSQL-元命令的帮助\" class=\"headerlink\" title=\"查看 KSQL 元命令的帮助\"></a>查看 KSQL 元命令的帮助</h3><ol>\n<li>元命令介绍</li>\n</ol>\n<blockquote>\n<p>（1）ksql 提供了一组以“\\”开头的快捷命令，称之为 ksql 元命令。<br>（2）搭配通配符“*”或“?”提高查询效率。<br>（3）使用选项“S”显示系统对象。<br>（4）使用选项“+”显示更加丰富的信息。</p>\n</blockquote>\n<ol start=\"2\">\n<li>常用元命令介绍</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\d[S+]</td>\n<td align=\"center\">列出表,视图和序列,其中 S 表示包含系统对象，+表示列出详细信息</td>\n</tr>\n<tr>\n<td align=\"center\">\\d[S+] 名称</td>\n<td align=\"center\">描述表，视图，序列，或索引</td>\n</tr>\n<tr>\n<td align=\"center\">\\db[+] [模式]</td>\n<td align=\"center\">列出表空间</td>\n</tr>\n<tr>\n<td align=\"center\">\\di[S+] [模式]</td>\n<td align=\"center\">列出索引</td>\n</tr>\n<tr>\n<td align=\"center\">\\dp [模式]</td>\n<td align=\"center\">列出表，视图和序列的访问权限(\\z 和相同)</td>\n</tr>\n<tr>\n<td align=\"center\">\\ds[S+] [模式]</td>\n<td align=\"center\">列出序列</td>\n</tr>\n<tr>\n<td align=\"center\">\\du[+]</td>\n<td align=\"center\">列出角色</td>\n</tr>\n<tr>\n<td align=\"center\">\\l[+]</td>\n<td align=\"center\">列出所有的数据库</td>\n</tr>\n</tbody></table>\n<h3 id=\"KSQL-连接到数据库\"><a href=\"#KSQL-连接到数据库\" class=\"headerlink\" title=\"KSQL 连接到数据库\"></a>KSQL 连接到数据库</h3><h4 id=\"使用-SOCKET-方式登录数据库\"><a href=\"#使用-SOCKET-方式登录数据库\" class=\"headerlink\" title=\"使用 SOCKET 方式登录数据库\"></a>使用 SOCKET 方式登录数据库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@localhost ~]$ ksql -U system -d test</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">test=# </span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"使用-TCP-IP-方式登录数据库\"><a href=\"#使用-TCP-IP-方式登录数据库\" class=\"headerlink\" title=\"使用 TCP/IP 方式登录数据库\"></a>使用 TCP/IP 方式登录数据库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@localhost ~]$ ksql -h 192.168.146.129 -p 54321 -U system -d test</span><br><span class=\"line\">用户 system 的口令：</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">test=# </span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"在-KSQL-中切换登录用户和数据库\"><a href=\"#在-KSQL-中切换登录用户和数据库\" class=\"headerlink\" title=\"在 KSQL 中切换登录用户和数据库\"></a>在 KSQL 中切换登录用户和数据库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ksql -Usystem -d test</span><br><span class=\"line\">ksql (V8.0)</span><br><span class=\"line\">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class=\"line\"></span><br><span class=\"line\">test=# \\c tfsdb</span><br><span class=\"line\">您现在已经连接到数据库 &quot;tfsdb&quot;,用户 &quot;system&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">tfsdb=# \\c - tfsdb</span><br><span class=\"line\">您现在已经连接到数据库 &quot;tfsdb&quot;,用户 &quot;tfsdb&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">tfsdb=# \\c test system</span><br><span class=\"line\">您现在已经连接到数据库 &quot;test&quot;,用户 &quot;system&quot;.</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"KSQL-引用环境变量进行快速登录\"><a href=\"#KSQL-引用环境变量进行快速登录\" class=\"headerlink\" title=\"KSQL 引用环境变量进行快速登录\"></a>KSQL 引用环境变量进行快速登录</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3xiqo6d2q3g0.webp\" width=\"60%\"/>\n\n<br>\n\n\n\n<h3 id=\"执行-SQL-的几种方式\"><a href=\"#执行-SQL-的几种方式\" class=\"headerlink\" title=\"执行 SQL 的几种方式\"></a>执行 SQL 的几种方式</h3><ol>\n<li>交互方式执行 SQL</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录ksql</span></span><br><span class=\"line\">tfsdb=# select * from pa_user;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>非交互方式执行 SQL (单条 SQL 语句)</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用“-c”选项登录 tfsdb 数据库查看</span></span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -c &#x27;select * from pa_user;&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>非交互方式执行 SQL (成批的 SQL 语句、SQL文件)</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kingbase@bogon ~]$ ll</span><br><span class=\"line\">总用量 8</span><br><span class=\"line\">-rw-rw-r--  1 kingbase kingbase  23 9月   9 18:00 demo.sql</span><br><span class=\"line\">-rw-------. 1 kingbase kingbase 712 8月  20 19:13 restart.log</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ cat demo.sql</span><br><span class=\"line\">select * from pa_user;</span><br><span class=\"line\"></span><br><span class=\"line\">[kingbase@bogon ~]$ ksql -U tfsdb -d tfsdb -f /home/kingbase/demo.sql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"KSQL-元命令介绍\"><a href=\"#KSQL-元命令介绍\" class=\"headerlink\" title=\"KSQL 元命令介绍\"></a>KSQL 元命令介绍</h3><ul>\n<li>略（查看官网）</li>\n</ul>\n<h3 id=\"使用元命令实现异构数据库数据交换\"><a href=\"#使用元命令实现异构数据库数据交换\" class=\"headerlink\" title=\"使用元命令实现异构数据库数据交换\"></a>使用元命令实现异构数据库数据交换</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出表数据库到 csv 文件</span></span><br><span class=\"line\">tfsdb=# \\copy tfsdb.pa_user to /home/kingbase/pa_user.csv csv</span><br><span class=\"line\">COPY 16</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 csv</span></span><br><span class=\"line\">tfsdb=# \\! cat /home/kingbase/pa_user.csv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将 csv 文件导入数据库表中</span></span><br><span class=\"line\">tfsdb=# \\copy tfsdb.pa_user from /home/kingbase/pa_user.csv csv</span><br><span class=\"line\">COPY 16</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"用户与角色\"><a href=\"#用户与角色\" class=\"headerlink\" title=\"用户与角色\"></a>用户与角色</h1><ul>\n<li>用户和角色是数据库管理的基础</li>\n<li>本章主要介绍如何在 KES 数据库中创建用户和角色，以及利用“角色”对多个用户批量授权，使 KES 管理体系更加清晰、简单</li>\n</ul>\n<h2 id=\"数据库用户\"><a href=\"#数据库用户\" class=\"headerlink\" title=\"数据库用户\"></a>数据库用户</h2><h3 id=\"用户管理概述\"><a href=\"#用户管理概述\" class=\"headerlink\" title=\"用户管理概述\"></a>用户管理概述</h3><ol>\n<li>数据库用户代表数据库的使用者</li>\n<li>应该为每个使用者创建用户</li>\n<li>尽量避免多人使用同一个数据库用户</li>\n</ol>\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><ul>\n<li><p>增删改查 略（参考官网）</p>\n</li>\n<li><p>当待删除用户是部分对象的拥有者时，因对象依赖会导致删除用户失败</p>\n</li>\n</ul>\n<h2 id=\"数据库角色\"><a href=\"#数据库角色\" class=\"headerlink\" title=\"数据库角色\"></a>数据库角色</h2><h3 id=\"角色的概念\"><a href=\"#角色的概念\" class=\"headerlink\" title=\"角色的概念\"></a>角色的概念</h3><ol>\n<li>将一组具有相同权限的用户组织在一起，这一组具有相同权限的用户就称为角色（Role）</li>\n<li>角色在生产系统中一般被视作用户组，利用角色对用户执行批量授权</li>\n</ol>\n<h3 id=\"角色管理\"><a href=\"#角色管理\" class=\"headerlink\" title=\"角色管理\"></a>角色管理</h3><ul>\n<li>增删改查 略（参考官网）</li>\n<li>当待删除角色是部分对象的拥有者时，因对象依赖会导致删除角色失败</li>\n<li>当待删除角色被显式授予对象权限时，因权限依赖会导致删除角色失败</li>\n</ul>\n<h1 id=\"对象的访问权限入门\"><a href=\"#对象的访问权限入门\" class=\"headerlink\" title=\"对象的访问权限入门\"></a>对象的访问权限入门</h1><ul>\n<li>数据库的表、索引、视图、图表、缺省值、规则、触发器、语法等等，在数据库中的一切，都称为数据库对象，对象分为如下两类：</li>\n</ul>\n<ol>\n<li>模式（SCHEMA）对象：可视为一个表的集合，可以理解为一个存储目录，包含视图、索引、数据类型、函数和操作符等</li>\n<li>非模式对象：其他的数据库对象，如数据库、表空间、用户、权限。</li>\n</ol>\n<ul>\n<li>用户或角色访问模式对象或非模式对象的能力称之为对象权限</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"简单巡检\"><a href=\"#简单巡检\" class=\"headerlink\" title=\"简单巡检\"></a>简单巡检</h1><h2 id=\"查看-KES-版本信息\"><a href=\"#查看-KES-版本信息\" class=\"headerlink\" title=\"查看 KES 版本信息\"></a>查看 KES 版本信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 sys_ctl 查看版本</span></span><br><span class=\"line\">[kingbase@localhost ~]$ sys_ctl -V</span><br><span class=\"line\">sys_ctl (Kingbase) 12.1</span><br><span class=\"line\">[kingbase@localhost ~]$ sys_ctl --version</span><br><span class=\"line\">sys_ctl (Kingbase) 12.1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 version 函数查看版本</span></span><br><span class=\"line\">test=# select version();</span><br><span class=\"line\">                                                       version</span><br><span class=\"line\">----------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> KingbaseES V008R006C006B0013 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-46), 64-bit</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看-license-有效期\"><a href=\"#查看-license-有效期\" class=\"headerlink\" title=\"查看 license 有效期\"></a>查看 license 有效期</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test=# select get_license_validdays();</span><br><span class=\"line\"> get_license_validdays</span><br><span class=\"line\">-----------------------</span><br><span class=\"line\">                    66</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看-KES-实例启动时间和运行时长\"><a href=\"#查看-KES-实例启动时间和运行时长\" class=\"headerlink\" title=\"查看 KES 实例启动时间和运行时长\"></a>查看 KES 实例启动时间和运行时长</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看数据库实例启动时间</span></span><br><span class=\"line\">test=# select sys_postmaster_start_time();</span><br><span class=\"line\">   sys_postmaster_start_time</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"> 2022-09-25 08:04:56.261041+08</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 KES 无故障运行时长</span></span><br><span class=\"line\">test=# select date_trunc(&#x27;second&#x27;,current_timestamp - sys_postmaster_start_time()) as uptime;</span><br><span class=\"line\">         uptime</span><br><span class=\"line\">------------------------</span><br><span class=\"line\"> 2 days 16:28:15.000000</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看数据库列表\"><a href=\"#查看数据库列表\" class=\"headerlink\" title=\"查看数据库列表\"></a>查看数据库列表</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 ksql 的-l 参数或元命令\\l</span></span><br><span class=\"line\">[kingbase@localhost ~]$ ksql -Usystem -d test -l</span><br><span class=\"line\">                                           数据库列表</span><br><span class=\"line\">    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限</span><br><span class=\"line\">-------------+-------------+----------+----------+-------------+--------------------------------</span><br><span class=\"line\"> security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class=\"line\"> template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class=\"line\">             |             |          |          |             | system=CTc/system</span><br><span class=\"line\"> template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class=\"line\">             |             |          |          |             | system=CTc/system</span><br><span class=\"line\"> test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class=\"line\"> xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +</span><br><span class=\"line\">             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test</span><br><span class=\"line\">(5 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">test=# \\l</span><br><span class=\"line\">                                           数据库列表</span><br><span class=\"line\">    名称     |   拥有者    | 字元编码 | 校对规则 |    Ctype    |            存取权限</span><br><span class=\"line\">-------------+-------------+----------+----------+-------------+--------------------------------</span><br><span class=\"line\"> security    | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class=\"line\"> template0   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class=\"line\">             |             |          |          |             | system=CTc/system</span><br><span class=\"line\"> template1   | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 | =c/system                     +</span><br><span class=\"line\">             |             |          |          |             | system=CTc/system</span><br><span class=\"line\"> test        | system      | UTF8     | ci_x_icu | zh_CN.UTF-8 |</span><br><span class=\"line\"> xjnxdb_test | xjnxdb_test | UTF8     | ci_x_icu | zh_CN.UTF-8 | =Tc/xjnxdb_test               +</span><br><span class=\"line\">             |             |          |          |             | xjnxdb_test=C*T*c*/xjnxdb_test</span><br><span class=\"line\">(5 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用数据字典</span></span><br><span class=\"line\">test=# select datname from sys_database;</span><br><span class=\"line\">   datname</span><br><span class=\"line\">-------------</span><br><span class=\"line\"> test</span><br><span class=\"line\"> security</span><br><span class=\"line\"> template1</span><br><span class=\"line\"> template0</span><br><span class=\"line\"> xjnxdb_test</span><br><span class=\"line\">(5 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看数据库占用的磁盘空间\"><a href=\"#查看数据库占用的磁盘空间\" class=\"headerlink\" title=\"查看数据库占用的磁盘空间\"></a>查看数据库占用的磁盘空间</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计当前数据库占用的磁盘空间</span></span><br><span class=\"line\">test=# select sys_database_size(current_database())/1024/1024 || &#x27;MB&#x27; MB;</span><br><span class=\"line\">  MB</span><br><span class=\"line\">------</span><br><span class=\"line\"> 12MB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计所有数据库占用的磁盘空间总量</span></span><br><span class=\"line\">xjnxdb_test=# select (sum(sys_database_size(datname))/1024/1024) || &#x27;MB&#x27; MB from sys_database;</span><br><span class=\"line\">           MB</span><br><span class=\"line\">------------------------</span><br><span class=\"line\"> 234.1652364730834961MB</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看表和索引的大小\"><a href=\"#查看表和索引的大小\" class=\"headerlink\" title=\"查看表和索引的大小\"></a>查看表和索引的大小</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计表的空间占用</span></span><br><span class=\"line\">xjnxdb_test=# select sys_relation_size(&#x27;xjnxdb_test.pa_user&#x27;)/1024 || &#x27;KB&#x27; KB;</span><br><span class=\"line\">  KB</span><br><span class=\"line\">------</span><br><span class=\"line\"> 48KB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select sys_size_pretty(sys_relation_size(&#x27;xjnxdb_test.pa_user&#x27;));</span><br><span class=\"line\"> sys_size_pretty</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"> 48 kB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计表和与表关联的索引占用空间总量</span></span><br><span class=\"line\">xjnxdb_test=# select sys_total_relation_size(&#x27;xjnxdb_test.pa_user&#x27;)/1024 || &#x27;KB&#x27; KB;</span><br><span class=\"line\">  KB</span><br><span class=\"line\">------</span><br><span class=\"line\"> 88KB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select sys_size_pretty(sys_total_relation_size(&#x27;xjnxdb_test.pa_user&#x27;));</span><br><span class=\"line\"> sys_size_pretty</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"> 88 kB</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">统计表的记录数</span></span><br><span class=\"line\">xjnxdb_test=# select count(*) || &#x27; rows&#x27; &quot;rows&quot; from xjnxdb_test.pa_user;</span><br><span class=\"line\">   rows</span><br><span class=\"line\">----------</span><br><span class=\"line\"> 145 rows</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看时区和时间\"><a href=\"#查看时区和时间\" class=\"headerlink\" title=\"查看时区和时间\"></a>查看时区和时间</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看最近一次加载参数文件的时间</span></span><br><span class=\"line\">xjnxdb_test=# select sys_conf_load_time();</span><br><span class=\"line\">      sys_conf_load_time</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"> 2022-09-25 08:04:55.822231+08</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看时区</span></span><br><span class=\"line\">xjnxdb_test=# show timezone;</span><br><span class=\"line\">   TimeZone</span><br><span class=\"line\">---------------</span><br><span class=\"line\"> Asia/Shanghai</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前日期或时间</span></span><br><span class=\"line\">xjnxdb_test=# select now();</span><br><span class=\"line\">              now</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"> 2022-09-28 05:43:22.416126+08</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select current_timestamp;</span><br><span class=\"line\">       current_timestamp</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"> 2022-09-28 05:43:45.124372+08</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select sysdate;</span><br><span class=\"line\">       sysdate</span><br><span class=\"line\">---------------------</span><br><span class=\"line\"> 2022-09-28 05:44:16</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select current_date;</span><br><span class=\"line\"> current_date</span><br><span class=\"line\">--------------</span><br><span class=\"line\"> 2022-09-28</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看当前登录数据库的名称\"><a href=\"#查看当前登录数据库的名称\" class=\"headerlink\" title=\"查看当前登录数据库的名称\"></a>查看当前登录数据库的名称</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xjnxdb_test=# select current_catalog;</span><br><span class=\"line\"> current_catalog</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"> xjnxdb_test</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">xjnxdb_test=# select current_database();</span><br><span class=\"line\"> current_database</span><br><span class=\"line\">------------------</span><br><span class=\"line\"> xjnxdb_test</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看当前会话信息\"><a href=\"#查看当前会话信息\" class=\"headerlink\" title=\"查看当前会话信息\"></a>查看当前会话信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前会话的客户端 IP 和端口。</span></span><br><span class=\"line\">test=# select inet_client_addr(),inet_client_port();</span><br><span class=\"line\"> inet_client_addr | inet_client_port</span><br><span class=\"line\">------------------+------------------</span><br><span class=\"line\"> 10.114.200.15    |            52665</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看服务器的 IP 和端口。</span></span><br><span class=\"line\">test=# select inet_server_addr(),inet_server_port();</span><br><span class=\"line\"> inet_server_addr | inet_server_port</span><br><span class=\"line\">------------------+------------------</span><br><span class=\"line\"> 10.114.12.66     |            54321</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前会话的后台进程 ID。</span></span><br><span class=\"line\">test=# select sys_backend_pid();</span><br><span class=\"line\"> sys_backend_pid</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">          341129</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看数据库中的连接信息\"><a href=\"#查看数据库中的连接信息\" class=\"headerlink\" title=\"查看数据库中的连接信息\"></a>查看数据库中的连接信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test=# select datname,usename,client_addr,client_port  from sys_stat_activity;</span><br><span class=\"line\">   datname    |   usename    |  client_addr   | client_port</span><br><span class=\"line\">--------------+--------------+----------------+-------------</span><br><span class=\"line\">              |              |                |</span><br><span class=\"line\">              | system       |                |</span><br><span class=\"line\">              | system       |                |</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45560</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45584</span><br><span class=\"line\"> xjnxdb_test2 | xjnxdb_test2 | 10.114.12.67   |       45624</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看会话执行的-SQL-信息\"><a href=\"#查看会话执行的-SQL-信息\" class=\"headerlink\" title=\"查看会话执行的 SQL 信息\"></a>查看会话执行的 SQL 信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）设置参数 track_activities 为 on。</span></span><br><span class=\"line\">test=# show track_activities;</span><br><span class=\"line\"> track_activities</span><br><span class=\"line\">------------------</span><br><span class=\"line\"> on</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有会话执行的 SQL 信息</span></span><br><span class=\"line\">test=# select datname,usename,client_addr,client_port  from sys_stat_activity;</span><br><span class=\"line\">   datname    |   usename    |  client_addr   | client_port</span><br><span class=\"line\">--------------+--------------+----------------+-------------</span><br><span class=\"line\">              |              |                |</span><br><span class=\"line\">              | system       |                |</span><br><span class=\"line\">              | system       |                |</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45654</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45694</span><br><span class=\"line\"> tfsdb        | tfsdb        | 10.43.1.113    |       55971</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45630</span><br><span class=\"line\"> xjnxdb_2_pt  | xjnxdb_2_pt  | 10.114.12.67   |       45684</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只看正在运行的 SQL 信息</span></span><br><span class=\"line\">test=# select datname,usename,client_addr,client_port  from sys_stat_activity where state not like &#x27;idle%&#x27;;</span><br><span class=\"line\">   datname   |   usename   |  client_addr   | client_port</span><br><span class=\"line\">-------------+-------------+----------------+-------------</span><br><span class=\"line\"> xjnxdb_test | xjnxdb_test | 10.114.12.67   |       45706</span><br><span class=\"line\"> xjnxdb      | xjnxdb      | 10.114.200.108 |       54113</span><br><span class=\"line\"> test        | system      | 10.114.200.15  |       56839</span><br><span class=\"line\">(3 行记录)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"查看耗时较长的-SQL\"><a href=\"#查看耗时较长的-SQL\" class=\"headerlink\" title=\"查看耗时较长的 SQL\"></a>查看耗时较长的 SQL</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tfsdb=# select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != &#x27;idle&#x27; order by 1 desc;</span><br><span class=\"line\">-[ RECORD 1 ]----------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">runtime | 00:00:00.000000</span><br><span class=\"line\">datname | tfsdb</span><br><span class=\"line\">usename | system</span><br><span class=\"line\">pid     | 341563</span><br><span class=\"line\">query   | select current_timestamp - query_start as runtime ,datname,usename,pid,query from  sys_stat_activity where state != &#x27;idle&#x27; order by 1 desc;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<br>\n\n<h2 id=\"事务阻塞会话的简单处理\"><a href=\"#事务阻塞会话的简单处理\" class=\"headerlink\" title=\"事务阻塞会话的简单处理\"></a>事务阻塞会话的简单处理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">会话 1—关闭自动提交后删除记录</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"单表查询\"><a href=\"#单表查询\" class=\"headerlink\" title=\"单表查询\"></a>单表查询</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">熟悉语义 /KingbaseES/V8/Server/bin/kingbase -D /data &gt;log1 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl , sys_ctl service各个命令的隔离性？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">几种关闭模式需要详细了解和实验记录，需要自己动手做实验</span><br><span class=\"line\"></span><br><span class=\"line\">sql 的元命令 需要详细了解一下呢</span><br><span class=\"line\"></span><br><span class=\"line\">copy 和 \\copy</span><br><span class=\"line\"></span><br><span class=\"line\">事务阻塞会话的简单处理 这一块还需要了解一下</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n"},{"title":"Redis","author":"sonzonzy","date":"2022-07-01T17:47:47.000Z","updated":"2022-07-01T17:47:47.000Z","_content":"\n\n\n# 初识Redis\n\n## SQL与NoSQL\n\n|          |                     SQL（关系型数据库）                      |                    NoSQL（非关系数据库）                     |\n| :------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n| 数据结构 |                            结构化                            |                           非结构化                           |\n| 数据关联 |                            关联的                            |                           无关联的                           |\n| 查询方式 |                           SQL查询                            |                            非SQL                             |\n| 事务特性 |                             ACID                             |                             BASE                             |\n| 存储方式 |                             磁盘                             |                             内存                             |\n|  扩展性  |                             垂直                             |                             水平                             |\n| 使用场景 | （1）数据结构固定<br/>（2）相关业务对数据安全性、一致性有较高要求 | （1）数据结构不固定<br/>（2）对一致性、安全性要求不高<br/>（3）对性能要求 |\n\n<br/>\n\n- 数据结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/d30b03101d4e1a06a2ed1e5be56700b.31vpj58sbty0.webp\" width=\"80%\"/>\n\n<br/>\n\n- 数据关联\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/e3f1c89793ff81d6babb11413fe2ebe.1smbrmpvghq8.webp\" width=\"80%\"/>\n\n<br/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1d6675040ee9bbcce9c49e3cc39747c.2fpd2jgc3xxc.webp\" width=\"80%\"/>\n\n<br/>\n\n- SQL查询\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/5cd0215e592bef1b35b0203d36b7a48.3x5xuvughi00.webp\" width=\"80%\" />\n\n<br/>\n\n### 常见NoSQL\n\n\n\n\n\n## Redis简介\n\n- Redis诞生于2009年全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。\n\n\n\n## Redis特征\n\n- 键值（key-value）型，value支持多种不同数据结构，功能丰富\n- 单线程，每个命令具备原子性\n- 低延迟，速度快（基于内存、IO多路复用、良好的编码）\n- 支持数据持久化\n- 支持主从集群、分片集群\n- 支持多语言客户端\n\n\n\n## 单机安装Redis\n\n```bash\n# 安装依赖 （Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖）\nyum install -y gcc tcl\n\n# 上传/下载 安装包并解压\ncd /usr/local/src/\nwget https://download.redis.io/releases/redis-6.2.7.tar.gz\ntar -zxvf redis-6.2.7.tar.gz\n\n# 编译安装\ncd /usr/local/src/redis-6.2.7\nmake && make install\n\n# 安装完成后。默认的安装路径是在 `/usr/local/bin`目录下\n\n[root@bogon src]# cd /usr/local/bin/\n[root@bogon bin]# ll\n总用量 18924\n-rwxr-xr-x. 1 root root 4830088 7月  25 05:51 redis-benchmark\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-aof -> redis-server\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-rdb -> redis-server\n-rwxr-xr-x. 1 root root 5004192 7月  25 05:51 redis-cli\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-sentinel -> redis-server\n-rwxr-xr-x. 1 root root 9535928 7月  25 05:51 redis-server\n\n# 该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：\n\nredis-server\n# 是redis的服务端启动脚本\n\nredis-cli\n# 是redis提供的命令行客户端\n\nredis-sentinel\n# 是redis的哨兵启动脚本\n```\n\n<br/>\n\n## Redis启动\n\n### 默认启动（前台启动）\n\n- 这种启动属于`前台启动`，会阻塞整个会话窗口，窗口关闭或者按下`CTRL + C`则Redis停止。不推荐使用。\n\n```bash\nredis-server\n```\n\n<br/>\n\n### 指定配置启动\n\n- 如果要让Redis以`后台`方式启动，则必须修改Redis配置文件\n\n```bash\n# 我们先将这个配置文件备份一份：\ncp redis.conf redis.conf.bck\n```\n\n- 然后修改redis.conf文件中的一些配置\n\n```properties\n# 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0\nbind 0.0.0.0\n\n# 守护进程，修改为yes后即可后台运行\ndaemonize yes \n\n# 密码，设置后访问Redis必须输入密码\nrequirepass redis@2022\n```\n\n- Redis的其它常见配置\n\n```properties\n# 监听的端口\nport 6379\n\n# 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录\ndir .\n\n# 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15\ndatabases 1\n\n# 设置redis能够使用的最大内存\nmaxmemory 512mb\n\n# 日志文件，默认为空，不记录日志，可以指定日志文件名\nlogfile \"redis.6379.log\"\n```\n\n- 指定配置启动\n\n```bash\n# 进入redis安装目录 \n[root@localhost redis]# /usr/local/bin\n\n[root@bogon bin]# ll\n总用量 19112\n-rw-r--r--. 1 root root   93916 7月  25 06:16 redis.6379.conf\n-rw-r--r--. 1 root root    1232 7月  25 06:20 redis.6379.log\n-rwxr-xr-x. 1 root root 4830088 7月  25 05:51 redis-benchmark\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-aof -> redis-server\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-rdb -> redis-server\n-rwxr-xr-x. 1 root root 5004192 7月  25 05:51 redis-cli\n-rw-r--r--. 1 root root   93849 7月  25 06:08 redis.conf.bak\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-sentinel -> redis-server\n-rwxr-xr-x. 1 root root 9535928 7月  25 05:51 redis-server\n[root@bogon bin]#\n\n[root@localhost redis]# redis-server redis.6379.conf\n[root@localhost redis]#\n[root@bogon bin]# ps -ef |grep redis\nroot       8126      1  0 06:20 ?        00:00:00 redis-server 0.0.0.0:6379\nroot       8194   1552  0 06:21 pts/1    00:00:00 grep --color=auto redis\n```\n\n<br/>\n\n### 开机自启（把redis添加到系统服务）\n\n- 我们也可以通过配置来实现开机自启，首先，新建一个系统服务文件\n\n```bash\nvim /etc/systemd/system/redis.service\n```\n\n- 添加如下内容\n\n```bash\n[Unit]\nDescription=redis-server\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/local/bin/redis-server /usr/local/bin/redis.6379.conf\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- 然后重载系统服务\n\n```bash\nsystemctl daemon-reload\n```\n\n- 现在，我们可以用下面这组命令来操作redis了\n\n```bash\n# 启动\nsystemctl start redis\n# 停止\nsystemctl stop redis\n# 重启\nsystemctl restart redis\n# 查看状态\nsystemctl status redis\n```\n\n- 执行下面的命令，可以让redis开机自启\n\n```bash\nsystemctl enable redis\n```\n\n<br/>\n\n## Redis的其它常见配置\n\n```bash\n# 监听的端口\nport 6379\n\n# 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录\ndir .\n\n# 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15\ndatabases 1\n\n# 设置redis能够使用的最大内存\nmaxmemory 512mb\n\n# 日志文件，默认为空，不记录日志，可以指定日志文件名\nlogfile \"redis.6379.log\"\n```\n\n<br/>\n\n## Redis停止\n\n```bash\n# 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，\n# 因为之前配置了密码，因此需要通过 -a 来指定密码\nredis-cli -a redis shutdown\n```\n\n<br/>\n\n# Redis客户端\n\n## Redis命令行客户端\n\n```bash\nredis-cli [options] [commonds]\n```\n\n其中常见的options有：\n\n- `-h 127.0.0.1`：指定要连接的redis节点的IP地址，默认是127.0.0.1\n- `-p 6379`：指定要连接的redis节点的端口，默认是6379\n- `-a 123321`：指定redis的访问密码 \n\n其中的commonds就是Redis的操作命令，例如：\n\n- `ping`：与redis服务端做心跳测试，服务端正常会返回`pong`\n\n不指定commond时，会进入`redis-cli`的交互控制台：\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image-20211211110439353.2aqqz6hz4m4g.webp\" width=\"80%\" />\n\n<br/>\n\n## 图形化桌面客户端\n\n- https://github.com/lework/RedisDesktopManager-Windows/releases\n\n<br/>\n\n## Redis的Java客户端\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6lpitp9r4g00.webp\" width=\"80%\" />\n\n<br/>\n\n### Jedis\n\n#### Jedis使用的基本步骤\n\n（1）引入依赖\n\n```xml\n<!--Redis依赖-->\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>4.2.0</version>\n</dependency>\n```\n\n（2）创建Jedis对象，建立连接\n\n```java\n\tprivate Jedis jedis;\n\n    @BeforeEach\n    void testJedis() {\n        jedis = new Jedis(\"192.168.163.200\",6379);\n        jedis.auth(\"redis\");\n        jedis.select(0);\n    }\n```\n\n（3）使用Jedis，方法名与Redis命令一致\n```java\n    @Test\n    void testString() {\n        // 插入数据，方法名称就是redis命令名称，非常简单\n        String result = jedis.set(\"name\", \"张三\");\n        System.out.println(\"result = \" + result);\n        // 获取数据\n        String name = jedis.get(\"name\");\n        System.out.println(\"name = \" + name);\n    }\n```\n\n\n（4）释放资源\n```bash\n\t@Deprecated\n    void tearDown() {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n```\n\n<br/>\n\n#### Jedis连接池\n\n- Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此推荐大家使用Jedis连接池代替Jedis的直连方式\n\n```java\npublic class JedisConnectionFactory {\n    private static final JedisPool jedisPool;\n\n    static {\n        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\n        // 最大连接\n        jedisPoolConfig.setMaxTotal(8);\n        // 最大空闲连接\n        jedisPoolConfig.setMaxIdle(8); \n        // 最小空闲连接\n        jedisPoolConfig.setMinIdle(0);\n        // 设置最长等待时间， ms\n        jedisPoolConfig.setMaxWaitMillis(200);\n        jedisPool = new JedisPool(jedisPoolConfig, \"localhost\", 6379,\n                1000, \"123321\");\n    }\n    // 获取Jedis对象\n    public static Jedis getJedis(){\n        return jedisPool.getResource();\n    }\n}\n```\n\n<br/>\n\n### SpringDataRedis\n\n#### SpringDataRedis简介\n\n- SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：https://spring.io/projects/spring-data-redis\n  - 提供了对不同Redis客户端的整合（Lettuce和Jedis）\n  - 提供了RedisTemplate统一API来操作Redis\n  - 支持Redis的发布订阅模型\n  - 支持Redis哨兵和Redis集群\n  - 支持基于Lettuce的响应式编程\n  - 支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化\n  - 支持基于Redis的JDKCollection实现\n\n- SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：\n\n|               API               |   返回值类型    |         说明          |\n| :-----------------------------: | :-------------: | :-------------------: |\n| **redisTemplate**.opsForValue() | ValueOperations |  操作String类型数据   |\n| **redisTemplate**.opsForHash()  | HashOperations  |   操作Hash类型数据    |\n| **redisTemplate**.opsForList()  | ListOperations  |   操作List类型数据    |\n|  **redisTemplate**.opsForSet()  |  SetOperations  |    操作Set类型数据    |\n| **redisTemplate**.opsForZSet()  | ZSetOperations  | 操作SortedSet类型数据 |\n|        **redisTemplate**        |                 |      通用的命令       |\n\n<br/>\n\n#### SpringDataRedis快速入门\n\n- SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单\n\n（1）引入spring-boot-starter-data-redis依赖\n\n```xml\n<!--Redis依赖-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<!--连接池依赖-->\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n</dependency>\n```\n\n（2）在application.yml配置Redis信息\n```yaml\nspring:\n  redis:\n    host: 192.168.163.200\n    port: 6379\n    password: redis\n    lettuce:\n      pool:\n        max-active: 8 # 最大连接\n        max-idle: 8 # 最大空闲连接\n        min-idle: 0 # 最小空闲连接\n        max-wait: 100 # 连接等待时间\n```\n（3）注入RedisTemplate\n```xml\n@Autowired\nprivate RedisTemplate redisTemplate;\n```\n\n（4）编写测试\n\n```java\n@SpringBootTest\npublic class RedisTest {\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    @Test\n    void testString() { \n        // 插入一条string类型数据\n        redisTemplate.opsForValue().set(\"name\", \"李四\");\n        // 读取一条string类型数据\n        Object name = redisTemplate.opsForValue().get(\"name\");\n        System.out.println(\"name = \" + name);\n    }\n}\n```\n\n<br/>\n\n# Redis 数据类型与常见命令\n\n## Redis 数据结构介绍\n\n- Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.43orz7ks9kq0.webp?raw=true\" width=\"80%\"/>\n\n## Redis通用命令\n\n- 通用指令是部分数据类型的，都可以使用的指令，常见的有：\n  - KEYS：查看符合模板的所有key\n  - DEL：删除一个指定的key\n  - EXISTS：判断key是否存在\n  - EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除\n  - TTL：查看一个KEY的剩余有效期\n  - 通过help [command] 可以查看一个命令的具体用法\n\n\n\n\n\n\n\n\n\n<br/>\n\n# Redis Serializer（Redis序列化）\n\n## SpringDataRedis的序列化方式\n\n- RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4cko09vu3y8.webp\" width=\"80%\" />\n\n- 缺点：\n  - 可读性差\n  - 内存占用较大\n\n<br/>\n\n## 自定义RedisTemplate的序列化方式\n\n```java\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        // 创建Template\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        // 设置连接工厂\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n        // 设置序列化工具\n        GenericJackson2JsonRedisSerializer jsonRedisSerializer =\n                new GenericJackson2JsonRedisSerializer();\n        // key和 hashKey采用 string序列化\n        redisTemplate.setKeySerializer(RedisSerializer.string());\n        redisTemplate.setHashKeySerializer(RedisSerializer.string());\n        // value和 hashValue采用 JSON序列化\n        redisTemplate.setValueSerializer(jsonRedisSerializer);\n        redisTemplate.setHashValueSerializer(jsonRedisSerializer);\n        return redisTemplate;\n    }\n}\n```\n\n```java\n@SpringBootTest\npublic class RedisTest2 {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @Test\n    void testString() {\n        // 插入一条string类型数据\n        redisTemplate.opsForValue().set(\"name\", \"李四\");\n        // 读取一条string类型数据\n        Object name = redisTemplate.opsForValue().get(\"name\");\n        System.out.println(\"name = \" + name);\n    }\n    @Test\n    void testSaveObject() {\n        redisTemplate.opsForValue().set(\"user:100\",new Person(\"果冻\",28));\n        Person person = (Person) redisTemplate.opsForValue().get(\"user:100\");\n        System.out.println(person);\n    }\n```\n\n<br/>\n\n## StringRedisTemplate（RedisTemplate的序列化方式优化）\n\n- 尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2ajrax16lk74.webp\"  width=\"80%\" />\n\n- 为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销\n\n- 为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.35s7tory1l60.webp\" width=\"80%\" />\n\n- Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程：\n\n```java\n@SpringBootTest\npublic class StingRedisTemplateTests {\n\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    // JSON工具\n    private static final ObjectMapper mapper = new ObjectMapper();\n\n    @Test\n    void testStringTemplate() throws JsonProcessingException {\n        // 准备对象\n        Person user = new Person(\"lily\", 18);\n        // 手动序列化\n        String json = mapper.writeValueAsString(user);\n        // 写入一条数据到redis\n        stringRedisTemplate.opsForValue().set(\"user:200\", json);\n\n        // 读取数据\n        String val = stringRedisTemplate.opsForValue().get(\"user:200\");\n        // 反序列化\n        Person user1 = mapper.readValue(val, Person.class);\n        System.out.println(\"user1 = \" + user1);\n    }\n}\n```\n\n<br/>\n\n## RedisTemplate序列化总结\n\n### RedisTemplate的两种序列化实践方案：\n\n- 方案一：\n\n  - 自定义RedisTemplate\n  - 修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer\n\n  \n\n- 方案二：\n\n  - 使用StringRedisTemplate\n  - 写入Redis时，手动把对象序列化为JSON\n  - 读取Redis时，手动把读取到的JSON反序列化为对象\n\n<br/>\n\n# Redis企业实战\n\n## 商户点评\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6uz0qkh3xio0.webp\" width=\"80%\" />\n\n<br/>\n\n### 目录\n\n- 短信登录\n- 商户查询缓存\n- 优惠券秒杀\n- 达人探店\n- 好友关注\n- 附近的商户\n- 用户签到\n- UV统计\n\n<br/>\n\n### 短信登录\n\n#### （1）导入商户点评项目\n\n- [项目下载地址](https://gitee.com/ratears/data-resource/tree/master/db/redis/heima-dianping-init_and_import)\n\n> [hm-dianping.zip](https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hm-dianping.zip) (将其下载解压缩后复制到idea工作空间，然后利用idea打开即可)（修改自己的MySQL和Redis配置）\n>\n> - 启动项目后，在浏览器访问：http://localhost:8081/shop-type/list ，如果可以看到数据则证明运行没有问题\n>\n> [hmdp.sql](https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hmdp.sql)（导入SQL文件。Mysql的版本采用5.7及以上版本）（注意先创建数据库）\n>\n> [nginx-1.18.0.zip](https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/nginx-1.18.0.zip)（windows版本。解压缩后启动即可）\n>\n> - 访问: [http://127.0.0.1:8080](http://127.0.0.1:8080/) ，即可看到页面\n\n<br/>\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.32ghgq3ldhe0.webp?raw=true\" width=\"80%\"/>\n\n<br/>\n\n（2）基于Session实现登录\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1jcturrchsbk.webp?raw=true\" width=\"90%\" />\n\n- 集群的session共享问题\n- 基于Redis实现共享session登录\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2022/Redis-hm.md","raw":"---\ntitle: Redis\nauthor: sonzonzy\ndate: 2022-07-02 01:47:47\nupdated: 2022-07-02 01:47:47\ncategories:\n  - [database,redis]\ntags:\n  - redis\n---\n\n\n\n# 初识Redis\n\n## SQL与NoSQL\n\n|          |                     SQL（关系型数据库）                      |                    NoSQL（非关系数据库）                     |\n| :------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n| 数据结构 |                            结构化                            |                           非结构化                           |\n| 数据关联 |                            关联的                            |                           无关联的                           |\n| 查询方式 |                           SQL查询                            |                            非SQL                             |\n| 事务特性 |                             ACID                             |                             BASE                             |\n| 存储方式 |                             磁盘                             |                             内存                             |\n|  扩展性  |                             垂直                             |                             水平                             |\n| 使用场景 | （1）数据结构固定<br/>（2）相关业务对数据安全性、一致性有较高要求 | （1）数据结构不固定<br/>（2）对一致性、安全性要求不高<br/>（3）对性能要求 |\n\n<br/>\n\n- 数据结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/d30b03101d4e1a06a2ed1e5be56700b.31vpj58sbty0.webp\" width=\"80%\"/>\n\n<br/>\n\n- 数据关联\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/e3f1c89793ff81d6babb11413fe2ebe.1smbrmpvghq8.webp\" width=\"80%\"/>\n\n<br/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1d6675040ee9bbcce9c49e3cc39747c.2fpd2jgc3xxc.webp\" width=\"80%\"/>\n\n<br/>\n\n- SQL查询\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/5cd0215e592bef1b35b0203d36b7a48.3x5xuvughi00.webp\" width=\"80%\" />\n\n<br/>\n\n### 常见NoSQL\n\n\n\n\n\n## Redis简介\n\n- Redis诞生于2009年全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。\n\n\n\n## Redis特征\n\n- 键值（key-value）型，value支持多种不同数据结构，功能丰富\n- 单线程，每个命令具备原子性\n- 低延迟，速度快（基于内存、IO多路复用、良好的编码）\n- 支持数据持久化\n- 支持主从集群、分片集群\n- 支持多语言客户端\n\n\n\n## 单机安装Redis\n\n```bash\n# 安装依赖 （Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖）\nyum install -y gcc tcl\n\n# 上传/下载 安装包并解压\ncd /usr/local/src/\nwget https://download.redis.io/releases/redis-6.2.7.tar.gz\ntar -zxvf redis-6.2.7.tar.gz\n\n# 编译安装\ncd /usr/local/src/redis-6.2.7\nmake && make install\n\n# 安装完成后。默认的安装路径是在 `/usr/local/bin`目录下\n\n[root@bogon src]# cd /usr/local/bin/\n[root@bogon bin]# ll\n总用量 18924\n-rwxr-xr-x. 1 root root 4830088 7月  25 05:51 redis-benchmark\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-aof -> redis-server\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-rdb -> redis-server\n-rwxr-xr-x. 1 root root 5004192 7月  25 05:51 redis-cli\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-sentinel -> redis-server\n-rwxr-xr-x. 1 root root 9535928 7月  25 05:51 redis-server\n\n# 该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：\n\nredis-server\n# 是redis的服务端启动脚本\n\nredis-cli\n# 是redis提供的命令行客户端\n\nredis-sentinel\n# 是redis的哨兵启动脚本\n```\n\n<br/>\n\n## Redis启动\n\n### 默认启动（前台启动）\n\n- 这种启动属于`前台启动`，会阻塞整个会话窗口，窗口关闭或者按下`CTRL + C`则Redis停止。不推荐使用。\n\n```bash\nredis-server\n```\n\n<br/>\n\n### 指定配置启动\n\n- 如果要让Redis以`后台`方式启动，则必须修改Redis配置文件\n\n```bash\n# 我们先将这个配置文件备份一份：\ncp redis.conf redis.conf.bck\n```\n\n- 然后修改redis.conf文件中的一些配置\n\n```properties\n# 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0\nbind 0.0.0.0\n\n# 守护进程，修改为yes后即可后台运行\ndaemonize yes \n\n# 密码，设置后访问Redis必须输入密码\nrequirepass redis@2022\n```\n\n- Redis的其它常见配置\n\n```properties\n# 监听的端口\nport 6379\n\n# 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录\ndir .\n\n# 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15\ndatabases 1\n\n# 设置redis能够使用的最大内存\nmaxmemory 512mb\n\n# 日志文件，默认为空，不记录日志，可以指定日志文件名\nlogfile \"redis.6379.log\"\n```\n\n- 指定配置启动\n\n```bash\n# 进入redis安装目录 \n[root@localhost redis]# /usr/local/bin\n\n[root@bogon bin]# ll\n总用量 19112\n-rw-r--r--. 1 root root   93916 7月  25 06:16 redis.6379.conf\n-rw-r--r--. 1 root root    1232 7月  25 06:20 redis.6379.log\n-rwxr-xr-x. 1 root root 4830088 7月  25 05:51 redis-benchmark\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-aof -> redis-server\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-rdb -> redis-server\n-rwxr-xr-x. 1 root root 5004192 7月  25 05:51 redis-cli\n-rw-r--r--. 1 root root   93849 7月  25 06:08 redis.conf.bak\nlrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-sentinel -> redis-server\n-rwxr-xr-x. 1 root root 9535928 7月  25 05:51 redis-server\n[root@bogon bin]#\n\n[root@localhost redis]# redis-server redis.6379.conf\n[root@localhost redis]#\n[root@bogon bin]# ps -ef |grep redis\nroot       8126      1  0 06:20 ?        00:00:00 redis-server 0.0.0.0:6379\nroot       8194   1552  0 06:21 pts/1    00:00:00 grep --color=auto redis\n```\n\n<br/>\n\n### 开机自启（把redis添加到系统服务）\n\n- 我们也可以通过配置来实现开机自启，首先，新建一个系统服务文件\n\n```bash\nvim /etc/systemd/system/redis.service\n```\n\n- 添加如下内容\n\n```bash\n[Unit]\nDescription=redis-server\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/local/bin/redis-server /usr/local/bin/redis.6379.conf\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- 然后重载系统服务\n\n```bash\nsystemctl daemon-reload\n```\n\n- 现在，我们可以用下面这组命令来操作redis了\n\n```bash\n# 启动\nsystemctl start redis\n# 停止\nsystemctl stop redis\n# 重启\nsystemctl restart redis\n# 查看状态\nsystemctl status redis\n```\n\n- 执行下面的命令，可以让redis开机自启\n\n```bash\nsystemctl enable redis\n```\n\n<br/>\n\n## Redis的其它常见配置\n\n```bash\n# 监听的端口\nport 6379\n\n# 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录\ndir .\n\n# 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15\ndatabases 1\n\n# 设置redis能够使用的最大内存\nmaxmemory 512mb\n\n# 日志文件，默认为空，不记录日志，可以指定日志文件名\nlogfile \"redis.6379.log\"\n```\n\n<br/>\n\n## Redis停止\n\n```bash\n# 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，\n# 因为之前配置了密码，因此需要通过 -a 来指定密码\nredis-cli -a redis shutdown\n```\n\n<br/>\n\n# Redis客户端\n\n## Redis命令行客户端\n\n```bash\nredis-cli [options] [commonds]\n```\n\n其中常见的options有：\n\n- `-h 127.0.0.1`：指定要连接的redis节点的IP地址，默认是127.0.0.1\n- `-p 6379`：指定要连接的redis节点的端口，默认是6379\n- `-a 123321`：指定redis的访问密码 \n\n其中的commonds就是Redis的操作命令，例如：\n\n- `ping`：与redis服务端做心跳测试，服务端正常会返回`pong`\n\n不指定commond时，会进入`redis-cli`的交互控制台：\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image-20211211110439353.2aqqz6hz4m4g.webp\" width=\"80%\" />\n\n<br/>\n\n## 图形化桌面客户端\n\n- https://github.com/lework/RedisDesktopManager-Windows/releases\n\n<br/>\n\n## Redis的Java客户端\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6lpitp9r4g00.webp\" width=\"80%\" />\n\n<br/>\n\n### Jedis\n\n#### Jedis使用的基本步骤\n\n（1）引入依赖\n\n```xml\n<!--Redis依赖-->\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>4.2.0</version>\n</dependency>\n```\n\n（2）创建Jedis对象，建立连接\n\n```java\n\tprivate Jedis jedis;\n\n    @BeforeEach\n    void testJedis() {\n        jedis = new Jedis(\"192.168.163.200\",6379);\n        jedis.auth(\"redis\");\n        jedis.select(0);\n    }\n```\n\n（3）使用Jedis，方法名与Redis命令一致\n```java\n    @Test\n    void testString() {\n        // 插入数据，方法名称就是redis命令名称，非常简单\n        String result = jedis.set(\"name\", \"张三\");\n        System.out.println(\"result = \" + result);\n        // 获取数据\n        String name = jedis.get(\"name\");\n        System.out.println(\"name = \" + name);\n    }\n```\n\n\n（4）释放资源\n```bash\n\t@Deprecated\n    void tearDown() {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n```\n\n<br/>\n\n#### Jedis连接池\n\n- Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此推荐大家使用Jedis连接池代替Jedis的直连方式\n\n```java\npublic class JedisConnectionFactory {\n    private static final JedisPool jedisPool;\n\n    static {\n        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\n        // 最大连接\n        jedisPoolConfig.setMaxTotal(8);\n        // 最大空闲连接\n        jedisPoolConfig.setMaxIdle(8); \n        // 最小空闲连接\n        jedisPoolConfig.setMinIdle(0);\n        // 设置最长等待时间， ms\n        jedisPoolConfig.setMaxWaitMillis(200);\n        jedisPool = new JedisPool(jedisPoolConfig, \"localhost\", 6379,\n                1000, \"123321\");\n    }\n    // 获取Jedis对象\n    public static Jedis getJedis(){\n        return jedisPool.getResource();\n    }\n}\n```\n\n<br/>\n\n### SpringDataRedis\n\n#### SpringDataRedis简介\n\n- SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：https://spring.io/projects/spring-data-redis\n  - 提供了对不同Redis客户端的整合（Lettuce和Jedis）\n  - 提供了RedisTemplate统一API来操作Redis\n  - 支持Redis的发布订阅模型\n  - 支持Redis哨兵和Redis集群\n  - 支持基于Lettuce的响应式编程\n  - 支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化\n  - 支持基于Redis的JDKCollection实现\n\n- SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：\n\n|               API               |   返回值类型    |         说明          |\n| :-----------------------------: | :-------------: | :-------------------: |\n| **redisTemplate**.opsForValue() | ValueOperations |  操作String类型数据   |\n| **redisTemplate**.opsForHash()  | HashOperations  |   操作Hash类型数据    |\n| **redisTemplate**.opsForList()  | ListOperations  |   操作List类型数据    |\n|  **redisTemplate**.opsForSet()  |  SetOperations  |    操作Set类型数据    |\n| **redisTemplate**.opsForZSet()  | ZSetOperations  | 操作SortedSet类型数据 |\n|        **redisTemplate**        |                 |      通用的命令       |\n\n<br/>\n\n#### SpringDataRedis快速入门\n\n- SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单\n\n（1）引入spring-boot-starter-data-redis依赖\n\n```xml\n<!--Redis依赖-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<!--连接池依赖-->\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n</dependency>\n```\n\n（2）在application.yml配置Redis信息\n```yaml\nspring:\n  redis:\n    host: 192.168.163.200\n    port: 6379\n    password: redis\n    lettuce:\n      pool:\n        max-active: 8 # 最大连接\n        max-idle: 8 # 最大空闲连接\n        min-idle: 0 # 最小空闲连接\n        max-wait: 100 # 连接等待时间\n```\n（3）注入RedisTemplate\n```xml\n@Autowired\nprivate RedisTemplate redisTemplate;\n```\n\n（4）编写测试\n\n```java\n@SpringBootTest\npublic class RedisTest {\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    @Test\n    void testString() { \n        // 插入一条string类型数据\n        redisTemplate.opsForValue().set(\"name\", \"李四\");\n        // 读取一条string类型数据\n        Object name = redisTemplate.opsForValue().get(\"name\");\n        System.out.println(\"name = \" + name);\n    }\n}\n```\n\n<br/>\n\n# Redis 数据类型与常见命令\n\n## Redis 数据结构介绍\n\n- Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.43orz7ks9kq0.webp?raw=true\" width=\"80%\"/>\n\n## Redis通用命令\n\n- 通用指令是部分数据类型的，都可以使用的指令，常见的有：\n  - KEYS：查看符合模板的所有key\n  - DEL：删除一个指定的key\n  - EXISTS：判断key是否存在\n  - EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除\n  - TTL：查看一个KEY的剩余有效期\n  - 通过help [command] 可以查看一个命令的具体用法\n\n\n\n\n\n\n\n\n\n<br/>\n\n# Redis Serializer（Redis序列化）\n\n## SpringDataRedis的序列化方式\n\n- RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4cko09vu3y8.webp\" width=\"80%\" />\n\n- 缺点：\n  - 可读性差\n  - 内存占用较大\n\n<br/>\n\n## 自定义RedisTemplate的序列化方式\n\n```java\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        // 创建Template\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        // 设置连接工厂\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n        // 设置序列化工具\n        GenericJackson2JsonRedisSerializer jsonRedisSerializer =\n                new GenericJackson2JsonRedisSerializer();\n        // key和 hashKey采用 string序列化\n        redisTemplate.setKeySerializer(RedisSerializer.string());\n        redisTemplate.setHashKeySerializer(RedisSerializer.string());\n        // value和 hashValue采用 JSON序列化\n        redisTemplate.setValueSerializer(jsonRedisSerializer);\n        redisTemplate.setHashValueSerializer(jsonRedisSerializer);\n        return redisTemplate;\n    }\n}\n```\n\n```java\n@SpringBootTest\npublic class RedisTest2 {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @Test\n    void testString() {\n        // 插入一条string类型数据\n        redisTemplate.opsForValue().set(\"name\", \"李四\");\n        // 读取一条string类型数据\n        Object name = redisTemplate.opsForValue().get(\"name\");\n        System.out.println(\"name = \" + name);\n    }\n    @Test\n    void testSaveObject() {\n        redisTemplate.opsForValue().set(\"user:100\",new Person(\"果冻\",28));\n        Person person = (Person) redisTemplate.opsForValue().get(\"user:100\");\n        System.out.println(person);\n    }\n```\n\n<br/>\n\n## StringRedisTemplate（RedisTemplate的序列化方式优化）\n\n- 尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2ajrax16lk74.webp\"  width=\"80%\" />\n\n- 为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销\n\n- 为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.35s7tory1l60.webp\" width=\"80%\" />\n\n- Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程：\n\n```java\n@SpringBootTest\npublic class StingRedisTemplateTests {\n\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    // JSON工具\n    private static final ObjectMapper mapper = new ObjectMapper();\n\n    @Test\n    void testStringTemplate() throws JsonProcessingException {\n        // 准备对象\n        Person user = new Person(\"lily\", 18);\n        // 手动序列化\n        String json = mapper.writeValueAsString(user);\n        // 写入一条数据到redis\n        stringRedisTemplate.opsForValue().set(\"user:200\", json);\n\n        // 读取数据\n        String val = stringRedisTemplate.opsForValue().get(\"user:200\");\n        // 反序列化\n        Person user1 = mapper.readValue(val, Person.class);\n        System.out.println(\"user1 = \" + user1);\n    }\n}\n```\n\n<br/>\n\n## RedisTemplate序列化总结\n\n### RedisTemplate的两种序列化实践方案：\n\n- 方案一：\n\n  - 自定义RedisTemplate\n  - 修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer\n\n  \n\n- 方案二：\n\n  - 使用StringRedisTemplate\n  - 写入Redis时，手动把对象序列化为JSON\n  - 读取Redis时，手动把读取到的JSON反序列化为对象\n\n<br/>\n\n# Redis企业实战\n\n## 商户点评\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6uz0qkh3xio0.webp\" width=\"80%\" />\n\n<br/>\n\n### 目录\n\n- 短信登录\n- 商户查询缓存\n- 优惠券秒杀\n- 达人探店\n- 好友关注\n- 附近的商户\n- 用户签到\n- UV统计\n\n<br/>\n\n### 短信登录\n\n#### （1）导入商户点评项目\n\n- [项目下载地址](https://gitee.com/ratears/data-resource/tree/master/db/redis/heima-dianping-init_and_import)\n\n> [hm-dianping.zip](https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hm-dianping.zip) (将其下载解压缩后复制到idea工作空间，然后利用idea打开即可)（修改自己的MySQL和Redis配置）\n>\n> - 启动项目后，在浏览器访问：http://localhost:8081/shop-type/list ，如果可以看到数据则证明运行没有问题\n>\n> [hmdp.sql](https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hmdp.sql)（导入SQL文件。Mysql的版本采用5.7及以上版本）（注意先创建数据库）\n>\n> [nginx-1.18.0.zip](https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/nginx-1.18.0.zip)（windows版本。解压缩后启动即可）\n>\n> - 访问: [http://127.0.0.1:8080](http://127.0.0.1:8080/) ，即可看到页面\n\n<br/>\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.32ghgq3ldhe0.webp?raw=true\" width=\"80%\"/>\n\n<br/>\n\n（2）基于Session实现登录\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1jcturrchsbk.webp?raw=true\" width=\"90%\" />\n\n- 集群的session共享问题\n- 基于Redis实现共享session登录\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Redis-hm","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsou005qdcta1jju82t0","content":"<h1 id=\"初识Redis\"><a href=\"#初识Redis\" class=\"headerlink\" title=\"初识Redis\"></a>初识Redis</h1><h2 id=\"SQL与NoSQL\"><a href=\"#SQL与NoSQL\" class=\"headerlink\" title=\"SQL与NoSQL\"></a>SQL与NoSQL</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">SQL（关系型数据库）</th>\n<th align=\"center\">NoSQL（非关系数据库）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据结构</td>\n<td align=\"center\">结构化</td>\n<td align=\"center\">非结构化</td>\n</tr>\n<tr>\n<td align=\"center\">数据关联</td>\n<td align=\"center\">关联的</td>\n<td align=\"center\">无关联的</td>\n</tr>\n<tr>\n<td align=\"center\">查询方式</td>\n<td align=\"center\">SQL查询</td>\n<td align=\"center\">非SQL</td>\n</tr>\n<tr>\n<td align=\"center\">事务特性</td>\n<td align=\"center\">ACID</td>\n<td align=\"center\">BASE</td>\n</tr>\n<tr>\n<td align=\"center\">存储方式</td>\n<td align=\"center\">磁盘</td>\n<td align=\"center\">内存</td>\n</tr>\n<tr>\n<td align=\"center\">扩展性</td>\n<td align=\"center\">垂直</td>\n<td align=\"center\">水平</td>\n</tr>\n<tr>\n<td align=\"center\">使用场景</td>\n<td align=\"center\">（1）数据结构固定<br/>（2）相关业务对数据安全性、一致性有较高要求</td>\n<td align=\"center\">（1）数据结构不固定<br/>（2）对一致性、安全性要求不高<br/>（3）对性能要求</td>\n</tr>\n</tbody></table>\n<br/>\n\n<ul>\n<li>数据结构</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/d30b03101d4e1a06a2ed1e5be56700b.31vpj58sbty0.webp\" width=\"80%\"/>\n\n<br/>\n\n<ul>\n<li>数据关联</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/e3f1c89793ff81d6babb11413fe2ebe.1smbrmpvghq8.webp\" width=\"80%\"/>\n\n<br/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1d6675040ee9bbcce9c49e3cc39747c.2fpd2jgc3xxc.webp\" width=\"80%\"/>\n\n<br/>\n\n<ul>\n<li>SQL查询</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/5cd0215e592bef1b35b0203d36b7a48.3x5xuvughi00.webp\" width=\"80%\" />\n\n<br/>\n\n<h3 id=\"常见NoSQL\"><a href=\"#常见NoSQL\" class=\"headerlink\" title=\"常见NoSQL\"></a>常见NoSQL</h3><h2 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h2><ul>\n<li>Redis诞生于2009年全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。</li>\n</ul>\n<h2 id=\"Redis特征\"><a href=\"#Redis特征\" class=\"headerlink\" title=\"Redis特征\"></a>Redis特征</h2><ul>\n<li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li>\n<li>单线程，每个命令具备原子性</li>\n<li>低延迟，速度快（基于内存、IO多路复用、良好的编码）</li>\n<li>支持数据持久化</li>\n<li>支持主从集群、分片集群</li>\n<li>支持多语言客户端</li>\n</ul>\n<h2 id=\"单机安装Redis\"><a href=\"#单机安装Redis\" class=\"headerlink\" title=\"单机安装Redis\"></a>单机安装Redis</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖 （Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖）</span></span><br><span class=\"line\">yum install -y gcc tcl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传/下载 安装包并解压</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/src/</span><br><span class=\"line\">wget https://download.redis.io/releases/redis-6.2.7.tar.gz</span><br><span class=\"line\">tar -zxvf redis-6.2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/src/redis-6.2.7</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装完成后。默认的安装路径是在 `/usr/local/bin`目录下</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon src]<span class=\"comment\"># cd /usr/local/bin/</span></span><br><span class=\"line\">[root@bogon bin]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 18924</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 4830088 7月  25 05:51 redis-benchmark</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-aof -&gt; redis-server</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-rdb -&gt; redis-server</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 5004192 7月  25 05:51 redis-cli</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-sentinel -&gt; redis-server</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 9535928 7月  25 05:51 redis-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-server</span><br><span class=\"line\"><span class=\"comment\"># 是redis的服务端启动脚本</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli</span><br><span class=\"line\"><span class=\"comment\"># 是redis提供的命令行客户端</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-sentinel</span><br><span class=\"line\"><span class=\"comment\"># 是redis的哨兵启动脚本</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Redis启动\"><a href=\"#Redis启动\" class=\"headerlink\" title=\"Redis启动\"></a>Redis启动</h2><h3 id=\"默认启动（前台启动）\"><a href=\"#默认启动（前台启动）\" class=\"headerlink\" title=\"默认启动（前台启动）\"></a>默认启动（前台启动）</h3><ul>\n<li>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"指定配置启动\"><a href=\"#指定配置启动\" class=\"headerlink\" title=\"指定配置启动\"></a>指定配置启动</h3><ul>\n<li>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们先将这个配置文件备份一份：</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后修改redis.conf文件中的一些配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">bind</span> <span class=\"string\">0.0.0.0</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 守护进程，修改为yes后即可后台运行</span></span><br><span class=\"line\"><span class=\"attr\">daemonize</span> <span class=\"string\">yes </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 密码，设置后访问Redis必须输入密码</span></span><br><span class=\"line\"><span class=\"attr\">requirepass</span> <span class=\"string\">redis@2022</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Redis的其它常见配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 监听的端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span> <span class=\"string\">6379</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class=\"line\"><span class=\"attr\">dir</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class=\"line\"><span class=\"attr\">databases</span> <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 设置redis能够使用的最大内存</span></span><br><span class=\"line\"><span class=\"attr\">maxmemory</span> <span class=\"string\">512mb</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span> <span class=\"string\">&quot;redis.6379.log&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定配置启动</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入redis安装目录 </span></span><br><span class=\"line\">[root@localhost redis]<span class=\"comment\"># /usr/local/bin</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon bin]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 19112</span><br><span class=\"line\">-rw-r--r--. 1 root root   93916 7月  25 06:16 redis.6379.conf</span><br><span class=\"line\">-rw-r--r--. 1 root root    1232 7月  25 06:20 redis.6379.log</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 4830088 7月  25 05:51 redis-benchmark</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-aof -&gt; redis-server</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-rdb -&gt; redis-server</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 5004192 7月  25 05:51 redis-cli</span><br><span class=\"line\">-rw-r--r--. 1 root root   93849 7月  25 06:08 redis.conf.bak</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-sentinel -&gt; redis-server</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 9535928 7月  25 05:51 redis-server</span><br><span class=\"line\">[root@bogon bin]<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost redis]<span class=\"comment\"># redis-server redis.6379.conf</span></span><br><span class=\"line\">[root@localhost redis]<span class=\"comment\">#</span></span><br><span class=\"line\">[root@bogon bin]<span class=\"comment\"># ps -ef |grep redis</span></span><br><span class=\"line\">root       8126      1  0 06:20 ?        00:00:00 redis-server 0.0.0.0:6379</span><br><span class=\"line\">root       8194   1552  0 06:21 pts/1    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"开机自启（把redis添加到系统服务）\"><a href=\"#开机自启（把redis添加到系统服务）\" class=\"headerlink\" title=\"开机自启（把redis添加到系统服务）\"></a>开机自启（把redis添加到系统服务）</h3><ul>\n<li>我们也可以通过配置来实现开机自启，首先，新建一个系统服务文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加如下内容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=redis-server</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/usr/local/bin/redis-server /usr/local/bin/redis.6379.conf</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后重载系统服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>现在，我们可以用下面这组命令来操作redis了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start redis</span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">systemctl stop redis</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">systemctl restart redis</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status redis</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行下面的命令，可以让redis开机自启</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> redis</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Redis的其它常见配置\"><a href=\"#Redis的其它常见配置\" class=\"headerlink\" title=\"Redis的其它常见配置\"></a>Redis的其它常见配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 监听的端口</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class=\"line\">databases 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置redis能够使用的最大内存</span></span><br><span class=\"line\">maxmemory 512mb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class=\"line\">logfile <span class=\"string\">&quot;redis.6379.log&quot;</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Redis停止\"><a href=\"#Redis停止\" class=\"headerlink\" title=\"Redis停止\"></a>Redis停止</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class=\"line\"><span class=\"comment\"># 因为之前配置了密码，因此需要通过 -a 来指定密码</span></span><br><span class=\"line\">redis-cli -a redis shutdown</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h1 id=\"Redis客户端\"><a href=\"#Redis客户端\" class=\"headerlink\" title=\"Redis客户端\"></a>Redis客户端</h1><h2 id=\"Redis命令行客户端\"><a href=\"#Redis命令行客户端\" class=\"headerlink\" title=\"Redis命令行客户端\"></a>Redis命令行客户端</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure>\n\n<p>其中常见的options有：</p>\n<ul>\n<li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li>\n<li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li>\n<li><code>-a 123321</code>：指定redis的访问密码 </li>\n</ul>\n<p>其中的commonds就是Redis的操作命令，例如：</p>\n<ul>\n<li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li>\n</ul>\n<p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image-20211211110439353.2aqqz6hz4m4g.webp\" width=\"80%\" />\n\n<br/>\n\n<h2 id=\"图形化桌面客户端\"><a href=\"#图形化桌面客户端\" class=\"headerlink\" title=\"图形化桌面客户端\"></a>图形化桌面客户端</h2><ul>\n<li><a class=\"link\"   href=\"https://github.com/lework/RedisDesktopManager-Windows/releases\" >https://github.com/lework/RedisDesktopManager-Windows/releases<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<br/>\n\n<h2 id=\"Redis的Java客户端\"><a href=\"#Redis的Java客户端\" class=\"headerlink\" title=\"Redis的Java客户端\"></a>Redis的Java客户端</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6lpitp9r4g00.webp\" width=\"80%\" />\n\n<br/>\n\n<h3 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h3><h4 id=\"Jedis使用的基本步骤\"><a href=\"#Jedis使用的基本步骤\" class=\"headerlink\" title=\"Jedis使用的基本步骤\"></a>Jedis使用的基本步骤</h4><p>（1）引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Redis依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）创建Jedis对象，建立连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">testJedis</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;192.168.163.200&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">       jedis.auth(<span class=\"string\">&quot;redis&quot;</span>);</span><br><span class=\"line\">       jedis.select(<span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）使用Jedis，方法名与Redis命令一致</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 插入数据，方法名称就是redis命令名称，非常简单</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> jedis.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;result = &quot;</span> + result);</span><br><span class=\"line\">    <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> jedis.get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>（4）释放资源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Deprecated</span><br><span class=\"line\">   void <span class=\"function\"><span class=\"title\">tearDown</span></span>() &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (jedis != null) &#123;</span><br><span class=\"line\">           jedis.close();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h4 id=\"Jedis连接池\"><a href=\"#Jedis连接池\" class=\"headerlink\" title=\"Jedis连接池\"></a>Jedis连接池</h4><ul>\n<li>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此推荐大家使用Jedis连接池代替Jedis的直连方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JedisConnectionFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> JedisPool jedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JedisPoolConfig</span> <span class=\"variable\">jedisPoolConfig</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JedisPoolConfig</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 最大连接</span></span><br><span class=\"line\">        jedisPoolConfig.setMaxTotal(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 最大空闲连接</span></span><br><span class=\"line\">        jedisPoolConfig.setMaxIdle(<span class=\"number\">8</span>); </span><br><span class=\"line\">        <span class=\"comment\">// 最小空闲连接</span></span><br><span class=\"line\">        jedisPoolConfig.setMinIdle(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置最长等待时间， ms</span></span><br><span class=\"line\">        jedisPoolConfig.setMaxWaitMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        jedisPool = <span class=\"keyword\">new</span> <span class=\"title class_\">JedisPool</span>(jedisPoolConfig, <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">6379</span>,</span><br><span class=\"line\">                <span class=\"number\">1000</span>, <span class=\"string\">&quot;123321&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取Jedis对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Jedis <span class=\"title function_\">getJedis</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jedisPool.getResource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"SpringDataRedis\"><a href=\"#SpringDataRedis\" class=\"headerlink\" title=\"SpringDataRedis\"></a>SpringDataRedis</h3><h4 id=\"SpringDataRedis简介\"><a href=\"#SpringDataRedis简介\" class=\"headerlink\" title=\"SpringDataRedis简介\"></a>SpringDataRedis简介</h4><ul>\n<li><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a class=\"link\"   href=\"https://spring.io/projects/spring-data-redis\" >https://spring.io/projects/spring-data-redis<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li>\n<li>提供了RedisTemplate统一API来操作Redis</li>\n<li>支持Redis的发布订阅模型</li>\n<li>支持Redis哨兵和Redis集群</li>\n<li>支持基于Lettuce的响应式编程</li>\n<li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li>\n<li>支持基于Redis的JDKCollection实现</li>\n</ul>\n</li>\n<li><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">返回值类型</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForValue()</td>\n<td align=\"center\">ValueOperations</td>\n<td align=\"center\">操作String类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForHash()</td>\n<td align=\"center\">HashOperations</td>\n<td align=\"center\">操作Hash类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForList()</td>\n<td align=\"center\">ListOperations</td>\n<td align=\"center\">操作List类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForSet()</td>\n<td align=\"center\">SetOperations</td>\n<td align=\"center\">操作Set类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForZSet()</td>\n<td align=\"center\">ZSetOperations</td>\n<td align=\"center\">操作SortedSet类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong></td>\n<td align=\"center\"></td>\n<td align=\"center\">通用的命令</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h4 id=\"SpringDataRedis快速入门\"><a href=\"#SpringDataRedis快速入门\" class=\"headerlink\" title=\"SpringDataRedis快速入门\"></a>SpringDataRedis快速入门</h4><ul>\n<li>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单</li>\n</ul>\n<p>（1）引入spring-boot-starter-data-redis依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Redis依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--连接池依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-pool2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）在application.yml配置Redis信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.163</span><span class=\"number\">.200</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">lettuce:</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">8</span> <span class=\"comment\"># 最大连接</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span> <span class=\"comment\"># 最大空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">0</span> <span class=\"comment\"># 最小空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"number\">100</span> <span class=\"comment\"># 连接等待时间</span></span><br></pre></td></tr></table></figure>\n<p>（3）注入RedisTemplate</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">private RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>\n\n<p>（4）编写测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testString</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 插入一条string类型数据</span></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读取一条string类型数据</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h1 id=\"Redis-数据类型与常见命令\"><a href=\"#Redis-数据类型与常见命令\" class=\"headerlink\" title=\"Redis 数据类型与常见命令\"></a>Redis 数据类型与常见命令</h1><h2 id=\"Redis-数据结构介绍\"><a href=\"#Redis-数据结构介绍\" class=\"headerlink\" title=\"Redis 数据结构介绍\"></a>Redis 数据结构介绍</h2><ul>\n<li>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样</li>\n</ul>\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.43orz7ks9kq0.webp?raw=true\" width=\"80%\"/>\n\n<h2 id=\"Redis通用命令\"><a href=\"#Redis通用命令\" class=\"headerlink\" title=\"Redis通用命令\"></a>Redis通用命令</h2><ul>\n<li>通用指令是部分数据类型的，都可以使用的指令，常见的有：<ul>\n<li>KEYS：查看符合模板的所有key</li>\n<li>DEL：删除一个指定的key</li>\n<li>EXISTS：判断key是否存在</li>\n<li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li>\n<li>TTL：查看一个KEY的剩余有效期</li>\n<li>通过help [command] 可以查看一个命令的具体用法</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h1 id=\"Redis-Serializer（Redis序列化）\"><a href=\"#Redis-Serializer（Redis序列化）\" class=\"headerlink\" title=\"Redis Serializer（Redis序列化）\"></a>Redis Serializer（Redis序列化）</h1><h2 id=\"SpringDataRedis的序列化方式\"><a href=\"#SpringDataRedis的序列化方式\" class=\"headerlink\" title=\"SpringDataRedis的序列化方式\"></a>SpringDataRedis的序列化方式</h2><ul>\n<li>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4cko09vu3y8.webp\" width=\"80%\" />\n\n<ul>\n<li>缺点：<ul>\n<li>可读性差</li>\n<li>内存占用较大</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h2 id=\"自定义RedisTemplate的序列化方式\"><a href=\"#自定义RedisTemplate的序列化方式\" class=\"headerlink\" title=\"自定义RedisTemplate的序列化方式\"></a>自定义RedisTemplate的序列化方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建Template</span></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 设置连接工厂</span></span><br><span class=\"line\">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        <span class=\"comment\">// 设置序列化工具</span></span><br><span class=\"line\">        <span class=\"type\">GenericJackson2JsonRedisSerializer</span> <span class=\"variable\">jsonRedisSerializer</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">GenericJackson2JsonRedisSerializer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// key和 hashKey采用 string序列化</span></span><br><span class=\"line\">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class=\"line\">        <span class=\"comment\">// value和 hashValue采用 JSON序列化</span></span><br><span class=\"line\">        redisTemplate.setValueSerializer(jsonRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(jsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisTest2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入一条string类型数据</span></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读取一条string类型数据</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testSaveObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;user:100&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;果冻&quot;</span>,<span class=\"number\">28</span>));</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (Person) redisTemplate.opsForValue().get(<span class=\"string\">&quot;user:100&quot;</span>);</span><br><span class=\"line\">        System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"StringRedisTemplate（RedisTemplate的序列化方式优化）\"><a href=\"#StringRedisTemplate（RedisTemplate的序列化方式优化）\" class=\"headerlink\" title=\"StringRedisTemplate（RedisTemplate的序列化方式优化）\"></a>StringRedisTemplate（RedisTemplate的序列化方式优化）</h2><ul>\n<li>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2ajrax16lk74.webp\"  width=\"80%\" />\n\n<ul>\n<li><p>为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销</p>\n</li>\n<li><p>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化</p>\n</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.35s7tory1l60.webp\" width=\"80%\" />\n\n<ul>\n<li>Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StingRedisTemplateTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// JSON工具</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ObjectMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testStringTemplate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 准备对象</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;lily&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 手动序列化</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> mapper.writeValueAsString(user);</span><br><span class=\"line\">        <span class=\"comment\">// 写入一条数据到redis</span></span><br><span class=\"line\">        stringRedisTemplate.opsForValue().set(<span class=\"string\">&quot;user:200&quot;</span>, json);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> stringRedisTemplate.opsForValue().get(<span class=\"string\">&quot;user:200&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">user1</span> <span class=\"operator\">=</span> mapper.readValue(val, Person.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;user1 = &quot;</span> + user1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"RedisTemplate序列化总结\"><a href=\"#RedisTemplate序列化总结\" class=\"headerlink\" title=\"RedisTemplate序列化总结\"></a>RedisTemplate序列化总结</h2><h3 id=\"RedisTemplate的两种序列化实践方案：\"><a href=\"#RedisTemplate的两种序列化实践方案：\" class=\"headerlink\" title=\"RedisTemplate的两种序列化实践方案：\"></a>RedisTemplate的两种序列化实践方案：</h3><ul>\n<li><p>方案一：</p>\n<ul>\n<li>自定义RedisTemplate</li>\n<li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li>\n</ul>\n</li>\n<li><p>方案二：</p>\n<ul>\n<li>使用StringRedisTemplate</li>\n<li>写入Redis时，手动把对象序列化为JSON</li>\n<li>读取Redis时，手动把读取到的JSON反序列化为对象</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h1 id=\"Redis企业实战\"><a href=\"#Redis企业实战\" class=\"headerlink\" title=\"Redis企业实战\"></a>Redis企业实战</h1><h2 id=\"商户点评\"><a href=\"#商户点评\" class=\"headerlink\" title=\"商户点评\"></a>商户点评</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6uz0qkh3xio0.webp\" width=\"80%\" />\n\n<br/>\n\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li>短信登录</li>\n<li>商户查询缓存</li>\n<li>优惠券秒杀</li>\n<li>达人探店</li>\n<li>好友关注</li>\n<li>附近的商户</li>\n<li>用户签到</li>\n<li>UV统计</li>\n</ul>\n<br/>\n\n<h3 id=\"短信登录\"><a href=\"#短信登录\" class=\"headerlink\" title=\"短信登录\"></a>短信登录</h3><h4 id=\"（1）导入商户点评项目\"><a href=\"#（1）导入商户点评项目\" class=\"headerlink\" title=\"（1）导入商户点评项目\"></a>（1）导入商户点评项目</h4><ul>\n<li><a class=\"link\"   href=\"https://gitee.com/ratears/data-resource/tree/master/db/redis/heima-dianping-init_and_import\" >项目下载地址<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<blockquote>\n<p><a class=\"link\"   href=\"https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hm-dianping.zip\" >hm-dianping.zip<i class=\"fas fa-external-link-alt\"></i></a> (将其下载解压缩后复制到idea工作空间，然后利用idea打开即可)（修改自己的MySQL和Redis配置）</p>\n<ul>\n<li>启动项目后，在浏览器访问：<a class=\"link\"   href=\"http://localhost:8081/shop-type/list\" >http://localhost:8081/shop-type/list<i class=\"fas fa-external-link-alt\"></i></a> ，如果可以看到数据则证明运行没有问题</li>\n</ul>\n<p><a class=\"link\"   href=\"https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hmdp.sql\" >hmdp.sql<i class=\"fas fa-external-link-alt\"></i></a>（导入SQL文件。Mysql的版本采用5.7及以上版本）（注意先创建数据库）</p>\n<p><a class=\"link\"   href=\"https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/nginx-1.18.0.zip\" >nginx-1.18.0.zip<i class=\"fas fa-external-link-alt\"></i></a>（windows版本。解压缩后启动即可）</p>\n<ul>\n<li>访问: <a class=\"link\"   href=\"http://127.0.0.1:8080/\" >http://127.0.0.1:8080<i class=\"fas fa-external-link-alt\"></i></a> ，即可看到页面</li>\n</ul>\n</blockquote>\n<br/>\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.32ghgq3ldhe0.webp?raw=true\" width=\"80%\"/>\n\n<br/>\n\n<p>（2）基于Session实现登录</p>\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1jcturrchsbk.webp?raw=true\" width=\"90%\" />\n\n<ul>\n<li>集群的session共享问题</li>\n<li>基于Redis实现共享session登录</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"初识Redis\"><a href=\"#初识Redis\" class=\"headerlink\" title=\"初识Redis\"></a>初识Redis</h1><h2 id=\"SQL与NoSQL\"><a href=\"#SQL与NoSQL\" class=\"headerlink\" title=\"SQL与NoSQL\"></a>SQL与NoSQL</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">SQL（关系型数据库）</th>\n<th align=\"center\">NoSQL（非关系数据库）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据结构</td>\n<td align=\"center\">结构化</td>\n<td align=\"center\">非结构化</td>\n</tr>\n<tr>\n<td align=\"center\">数据关联</td>\n<td align=\"center\">关联的</td>\n<td align=\"center\">无关联的</td>\n</tr>\n<tr>\n<td align=\"center\">查询方式</td>\n<td align=\"center\">SQL查询</td>\n<td align=\"center\">非SQL</td>\n</tr>\n<tr>\n<td align=\"center\">事务特性</td>\n<td align=\"center\">ACID</td>\n<td align=\"center\">BASE</td>\n</tr>\n<tr>\n<td align=\"center\">存储方式</td>\n<td align=\"center\">磁盘</td>\n<td align=\"center\">内存</td>\n</tr>\n<tr>\n<td align=\"center\">扩展性</td>\n<td align=\"center\">垂直</td>\n<td align=\"center\">水平</td>\n</tr>\n<tr>\n<td align=\"center\">使用场景</td>\n<td align=\"center\">（1）数据结构固定<br/>（2）相关业务对数据安全性、一致性有较高要求</td>\n<td align=\"center\">（1）数据结构不固定<br/>（2）对一致性、安全性要求不高<br/>（3）对性能要求</td>\n</tr>\n</tbody></table>\n<br/>\n\n<ul>\n<li>数据结构</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/d30b03101d4e1a06a2ed1e5be56700b.31vpj58sbty0.webp\" width=\"80%\"/>\n\n<br/>\n\n<ul>\n<li>数据关联</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/e3f1c89793ff81d6babb11413fe2ebe.1smbrmpvghq8.webp\" width=\"80%\"/>\n\n<br/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/1d6675040ee9bbcce9c49e3cc39747c.2fpd2jgc3xxc.webp\" width=\"80%\"/>\n\n<br/>\n\n<ul>\n<li>SQL查询</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/5cd0215e592bef1b35b0203d36b7a48.3x5xuvughi00.webp\" width=\"80%\" />\n\n<br/>\n\n<h3 id=\"常见NoSQL\"><a href=\"#常见NoSQL\" class=\"headerlink\" title=\"常见NoSQL\"></a>常见NoSQL</h3><h2 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h2><ul>\n<li>Redis诞生于2009年全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。</li>\n</ul>\n<h2 id=\"Redis特征\"><a href=\"#Redis特征\" class=\"headerlink\" title=\"Redis特征\"></a>Redis特征</h2><ul>\n<li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li>\n<li>单线程，每个命令具备原子性</li>\n<li>低延迟，速度快（基于内存、IO多路复用、良好的编码）</li>\n<li>支持数据持久化</li>\n<li>支持主从集群、分片集群</li>\n<li>支持多语言客户端</li>\n</ul>\n<h2 id=\"单机安装Redis\"><a href=\"#单机安装Redis\" class=\"headerlink\" title=\"单机安装Redis\"></a>单机安装Redis</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖 （Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖）</span></span><br><span class=\"line\">yum install -y gcc tcl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传/下载 安装包并解压</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/src/</span><br><span class=\"line\">wget https://download.redis.io/releases/redis-6.2.7.tar.gz</span><br><span class=\"line\">tar -zxvf redis-6.2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/src/redis-6.2.7</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装完成后。默认的安装路径是在 `/usr/local/bin`目录下</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon src]<span class=\"comment\"># cd /usr/local/bin/</span></span><br><span class=\"line\">[root@bogon bin]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 18924</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 4830088 7月  25 05:51 redis-benchmark</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-aof -&gt; redis-server</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-rdb -&gt; redis-server</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 5004192 7月  25 05:51 redis-cli</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-sentinel -&gt; redis-server</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 9535928 7月  25 05:51 redis-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-server</span><br><span class=\"line\"><span class=\"comment\"># 是redis的服务端启动脚本</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli</span><br><span class=\"line\"><span class=\"comment\"># 是redis提供的命令行客户端</span></span><br><span class=\"line\"></span><br><span class=\"line\">redis-sentinel</span><br><span class=\"line\"><span class=\"comment\"># 是redis的哨兵启动脚本</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Redis启动\"><a href=\"#Redis启动\" class=\"headerlink\" title=\"Redis启动\"></a>Redis启动</h2><h3 id=\"默认启动（前台启动）\"><a href=\"#默认启动（前台启动）\" class=\"headerlink\" title=\"默认启动（前台启动）\"></a>默认启动（前台启动）</h3><ul>\n<li>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"指定配置启动\"><a href=\"#指定配置启动\" class=\"headerlink\" title=\"指定配置启动\"></a>指定配置启动</h3><ul>\n<li>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们先将这个配置文件备份一份：</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后修改redis.conf文件中的一些配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">bind</span> <span class=\"string\">0.0.0.0</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 守护进程，修改为yes后即可后台运行</span></span><br><span class=\"line\"><span class=\"attr\">daemonize</span> <span class=\"string\">yes </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 密码，设置后访问Redis必须输入密码</span></span><br><span class=\"line\"><span class=\"attr\">requirepass</span> <span class=\"string\">redis@2022</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Redis的其它常见配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 监听的端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span> <span class=\"string\">6379</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class=\"line\"><span class=\"attr\">dir</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class=\"line\"><span class=\"attr\">databases</span> <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 设置redis能够使用的最大内存</span></span><br><span class=\"line\"><span class=\"attr\">maxmemory</span> <span class=\"string\">512mb</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span> <span class=\"string\">&quot;redis.6379.log&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定配置启动</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入redis安装目录 </span></span><br><span class=\"line\">[root@localhost redis]<span class=\"comment\"># /usr/local/bin</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon bin]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 19112</span><br><span class=\"line\">-rw-r--r--. 1 root root   93916 7月  25 06:16 redis.6379.conf</span><br><span class=\"line\">-rw-r--r--. 1 root root    1232 7月  25 06:20 redis.6379.log</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 4830088 7月  25 05:51 redis-benchmark</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-aof -&gt; redis-server</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-check-rdb -&gt; redis-server</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 5004192 7月  25 05:51 redis-cli</span><br><span class=\"line\">-rw-r--r--. 1 root root   93849 7月  25 06:08 redis.conf.bak</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      12 7月  25 05:51 redis-sentinel -&gt; redis-server</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 9535928 7月  25 05:51 redis-server</span><br><span class=\"line\">[root@bogon bin]<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost redis]<span class=\"comment\"># redis-server redis.6379.conf</span></span><br><span class=\"line\">[root@localhost redis]<span class=\"comment\">#</span></span><br><span class=\"line\">[root@bogon bin]<span class=\"comment\"># ps -ef |grep redis</span></span><br><span class=\"line\">root       8126      1  0 06:20 ?        00:00:00 redis-server 0.0.0.0:6379</span><br><span class=\"line\">root       8194   1552  0 06:21 pts/1    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"开机自启（把redis添加到系统服务）\"><a href=\"#开机自启（把redis添加到系统服务）\" class=\"headerlink\" title=\"开机自启（把redis添加到系统服务）\"></a>开机自启（把redis添加到系统服务）</h3><ul>\n<li>我们也可以通过配置来实现开机自启，首先，新建一个系统服务文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加如下内容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=redis-server</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/usr/local/bin/redis-server /usr/local/bin/redis.6379.conf</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后重载系统服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>现在，我们可以用下面这组命令来操作redis了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start redis</span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">systemctl stop redis</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">systemctl restart redis</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status redis</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行下面的命令，可以让redis开机自启</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> redis</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Redis的其它常见配置\"><a href=\"#Redis的其它常见配置\" class=\"headerlink\" title=\"Redis的其它常见配置\"></a>Redis的其它常见配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 监听的端口</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class=\"line\">databases 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置redis能够使用的最大内存</span></span><br><span class=\"line\">maxmemory 512mb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class=\"line\">logfile <span class=\"string\">&quot;redis.6379.log&quot;</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"Redis停止\"><a href=\"#Redis停止\" class=\"headerlink\" title=\"Redis停止\"></a>Redis停止</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class=\"line\"><span class=\"comment\"># 因为之前配置了密码，因此需要通过 -a 来指定密码</span></span><br><span class=\"line\">redis-cli -a redis shutdown</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h1 id=\"Redis客户端\"><a href=\"#Redis客户端\" class=\"headerlink\" title=\"Redis客户端\"></a>Redis客户端</h1><h2 id=\"Redis命令行客户端\"><a href=\"#Redis命令行客户端\" class=\"headerlink\" title=\"Redis命令行客户端\"></a>Redis命令行客户端</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure>\n\n<p>其中常见的options有：</p>\n<ul>\n<li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li>\n<li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li>\n<li><code>-a 123321</code>：指定redis的访问密码 </li>\n</ul>\n<p>其中的commonds就是Redis的操作命令，例如：</p>\n<ul>\n<li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li>\n</ul>\n<p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image-20211211110439353.2aqqz6hz4m4g.webp\" width=\"80%\" />\n\n<br/>\n\n<h2 id=\"图形化桌面客户端\"><a href=\"#图形化桌面客户端\" class=\"headerlink\" title=\"图形化桌面客户端\"></a>图形化桌面客户端</h2><ul>\n<li><a class=\"link\"   href=\"https://github.com/lework/RedisDesktopManager-Windows/releases\" >https://github.com/lework/RedisDesktopManager-Windows/releases<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<br/>\n\n<h2 id=\"Redis的Java客户端\"><a href=\"#Redis的Java客户端\" class=\"headerlink\" title=\"Redis的Java客户端\"></a>Redis的Java客户端</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6lpitp9r4g00.webp\" width=\"80%\" />\n\n<br/>\n\n<h3 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h3><h4 id=\"Jedis使用的基本步骤\"><a href=\"#Jedis使用的基本步骤\" class=\"headerlink\" title=\"Jedis使用的基本步骤\"></a>Jedis使用的基本步骤</h4><p>（1）引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Redis依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）创建Jedis对象，建立连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">testJedis</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;192.168.163.200&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">       jedis.auth(<span class=\"string\">&quot;redis&quot;</span>);</span><br><span class=\"line\">       jedis.select(<span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）使用Jedis，方法名与Redis命令一致</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 插入数据，方法名称就是redis命令名称，非常简单</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> jedis.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;result = &quot;</span> + result);</span><br><span class=\"line\">    <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> jedis.get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>（4）释放资源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Deprecated</span><br><span class=\"line\">   void <span class=\"function\"><span class=\"title\">tearDown</span></span>() &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (jedis != null) &#123;</span><br><span class=\"line\">           jedis.close();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h4 id=\"Jedis连接池\"><a href=\"#Jedis连接池\" class=\"headerlink\" title=\"Jedis连接池\"></a>Jedis连接池</h4><ul>\n<li>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此推荐大家使用Jedis连接池代替Jedis的直连方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JedisConnectionFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> JedisPool jedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JedisPoolConfig</span> <span class=\"variable\">jedisPoolConfig</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JedisPoolConfig</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 最大连接</span></span><br><span class=\"line\">        jedisPoolConfig.setMaxTotal(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 最大空闲连接</span></span><br><span class=\"line\">        jedisPoolConfig.setMaxIdle(<span class=\"number\">8</span>); </span><br><span class=\"line\">        <span class=\"comment\">// 最小空闲连接</span></span><br><span class=\"line\">        jedisPoolConfig.setMinIdle(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置最长等待时间， ms</span></span><br><span class=\"line\">        jedisPoolConfig.setMaxWaitMillis(<span class=\"number\">200</span>);</span><br><span class=\"line\">        jedisPool = <span class=\"keyword\">new</span> <span class=\"title class_\">JedisPool</span>(jedisPoolConfig, <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">6379</span>,</span><br><span class=\"line\">                <span class=\"number\">1000</span>, <span class=\"string\">&quot;123321&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取Jedis对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Jedis <span class=\"title function_\">getJedis</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jedisPool.getResource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"SpringDataRedis\"><a href=\"#SpringDataRedis\" class=\"headerlink\" title=\"SpringDataRedis\"></a>SpringDataRedis</h3><h4 id=\"SpringDataRedis简介\"><a href=\"#SpringDataRedis简介\" class=\"headerlink\" title=\"SpringDataRedis简介\"></a>SpringDataRedis简介</h4><ul>\n<li><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a class=\"link\"   href=\"https://spring.io/projects/spring-data-redis\" >https://spring.io/projects/spring-data-redis<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li>\n<li>提供了RedisTemplate统一API来操作Redis</li>\n<li>支持Redis的发布订阅模型</li>\n<li>支持Redis哨兵和Redis集群</li>\n<li>支持基于Lettuce的响应式编程</li>\n<li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li>\n<li>支持基于Redis的JDKCollection实现</li>\n</ul>\n</li>\n<li><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">返回值类型</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForValue()</td>\n<td align=\"center\">ValueOperations</td>\n<td align=\"center\">操作String类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForHash()</td>\n<td align=\"center\">HashOperations</td>\n<td align=\"center\">操作Hash类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForList()</td>\n<td align=\"center\">ListOperations</td>\n<td align=\"center\">操作List类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForSet()</td>\n<td align=\"center\">SetOperations</td>\n<td align=\"center\">操作Set类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong>.opsForZSet()</td>\n<td align=\"center\">ZSetOperations</td>\n<td align=\"center\">操作SortedSet类型数据</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>redisTemplate</strong></td>\n<td align=\"center\"></td>\n<td align=\"center\">通用的命令</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h4 id=\"SpringDataRedis快速入门\"><a href=\"#SpringDataRedis快速入门\" class=\"headerlink\" title=\"SpringDataRedis快速入门\"></a>SpringDataRedis快速入门</h4><ul>\n<li>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单</li>\n</ul>\n<p>（1）引入spring-boot-starter-data-redis依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Redis依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--连接池依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-pool2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）在application.yml配置Redis信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.163</span><span class=\"number\">.200</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">lettuce:</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">8</span> <span class=\"comment\"># 最大连接</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span> <span class=\"comment\"># 最大空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">0</span> <span class=\"comment\"># 最小空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"number\">100</span> <span class=\"comment\"># 连接等待时间</span></span><br></pre></td></tr></table></figure>\n<p>（3）注入RedisTemplate</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">private RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>\n\n<p>（4）编写测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testString</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 插入一条string类型数据</span></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读取一条string类型数据</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h1 id=\"Redis-数据类型与常见命令\"><a href=\"#Redis-数据类型与常见命令\" class=\"headerlink\" title=\"Redis 数据类型与常见命令\"></a>Redis 数据类型与常见命令</h1><h2 id=\"Redis-数据结构介绍\"><a href=\"#Redis-数据结构介绍\" class=\"headerlink\" title=\"Redis 数据结构介绍\"></a>Redis 数据结构介绍</h2><ul>\n<li>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样</li>\n</ul>\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.43orz7ks9kq0.webp?raw=true\" width=\"80%\"/>\n\n<h2 id=\"Redis通用命令\"><a href=\"#Redis通用命令\" class=\"headerlink\" title=\"Redis通用命令\"></a>Redis通用命令</h2><ul>\n<li>通用指令是部分数据类型的，都可以使用的指令，常见的有：<ul>\n<li>KEYS：查看符合模板的所有key</li>\n<li>DEL：删除一个指定的key</li>\n<li>EXISTS：判断key是否存在</li>\n<li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li>\n<li>TTL：查看一个KEY的剩余有效期</li>\n<li>通过help [command] 可以查看一个命令的具体用法</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h1 id=\"Redis-Serializer（Redis序列化）\"><a href=\"#Redis-Serializer（Redis序列化）\" class=\"headerlink\" title=\"Redis Serializer（Redis序列化）\"></a>Redis Serializer（Redis序列化）</h1><h2 id=\"SpringDataRedis的序列化方式\"><a href=\"#SpringDataRedis的序列化方式\" class=\"headerlink\" title=\"SpringDataRedis的序列化方式\"></a>SpringDataRedis的序列化方式</h2><ul>\n<li>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4cko09vu3y8.webp\" width=\"80%\" />\n\n<ul>\n<li>缺点：<ul>\n<li>可读性差</li>\n<li>内存占用较大</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h2 id=\"自定义RedisTemplate的序列化方式\"><a href=\"#自定义RedisTemplate的序列化方式\" class=\"headerlink\" title=\"自定义RedisTemplate的序列化方式\"></a>自定义RedisTemplate的序列化方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建Template</span></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 设置连接工厂</span></span><br><span class=\"line\">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        <span class=\"comment\">// 设置序列化工具</span></span><br><span class=\"line\">        <span class=\"type\">GenericJackson2JsonRedisSerializer</span> <span class=\"variable\">jsonRedisSerializer</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">GenericJackson2JsonRedisSerializer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// key和 hashKey采用 string序列化</span></span><br><span class=\"line\">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class=\"line\">        <span class=\"comment\">// value和 hashValue采用 JSON序列化</span></span><br><span class=\"line\">        redisTemplate.setValueSerializer(jsonRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(jsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisTest2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入一条string类型数据</span></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读取一条string类型数据</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testSaveObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;user:100&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;果冻&quot;</span>,<span class=\"number\">28</span>));</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (Person) redisTemplate.opsForValue().get(<span class=\"string\">&quot;user:100&quot;</span>);</span><br><span class=\"line\">        System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"StringRedisTemplate（RedisTemplate的序列化方式优化）\"><a href=\"#StringRedisTemplate（RedisTemplate的序列化方式优化）\" class=\"headerlink\" title=\"StringRedisTemplate（RedisTemplate的序列化方式优化）\"></a>StringRedisTemplate（RedisTemplate的序列化方式优化）</h2><ul>\n<li>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2ajrax16lk74.webp\"  width=\"80%\" />\n\n<ul>\n<li><p>为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销</p>\n</li>\n<li><p>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化</p>\n</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.35s7tory1l60.webp\" width=\"80%\" />\n\n<ul>\n<li>Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StingRedisTemplateTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// JSON工具</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ObjectMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testStringTemplate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 准备对象</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;lily&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 手动序列化</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> mapper.writeValueAsString(user);</span><br><span class=\"line\">        <span class=\"comment\">// 写入一条数据到redis</span></span><br><span class=\"line\">        stringRedisTemplate.opsForValue().set(<span class=\"string\">&quot;user:200&quot;</span>, json);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> stringRedisTemplate.opsForValue().get(<span class=\"string\">&quot;user:200&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">user1</span> <span class=\"operator\">=</span> mapper.readValue(val, Person.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;user1 = &quot;</span> + user1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"RedisTemplate序列化总结\"><a href=\"#RedisTemplate序列化总结\" class=\"headerlink\" title=\"RedisTemplate序列化总结\"></a>RedisTemplate序列化总结</h2><h3 id=\"RedisTemplate的两种序列化实践方案：\"><a href=\"#RedisTemplate的两种序列化实践方案：\" class=\"headerlink\" title=\"RedisTemplate的两种序列化实践方案：\"></a>RedisTemplate的两种序列化实践方案：</h3><ul>\n<li><p>方案一：</p>\n<ul>\n<li>自定义RedisTemplate</li>\n<li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li>\n</ul>\n</li>\n<li><p>方案二：</p>\n<ul>\n<li>使用StringRedisTemplate</li>\n<li>写入Redis时，手动把对象序列化为JSON</li>\n<li>读取Redis时，手动把读取到的JSON反序列化为对象</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<h1 id=\"Redis企业实战\"><a href=\"#Redis企业实战\" class=\"headerlink\" title=\"Redis企业实战\"></a>Redis企业实战</h1><h2 id=\"商户点评\"><a href=\"#商户点评\" class=\"headerlink\" title=\"商户点评\"></a>商户点评</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.6uz0qkh3xio0.webp\" width=\"80%\" />\n\n<br/>\n\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li>短信登录</li>\n<li>商户查询缓存</li>\n<li>优惠券秒杀</li>\n<li>达人探店</li>\n<li>好友关注</li>\n<li>附近的商户</li>\n<li>用户签到</li>\n<li>UV统计</li>\n</ul>\n<br/>\n\n<h3 id=\"短信登录\"><a href=\"#短信登录\" class=\"headerlink\" title=\"短信登录\"></a>短信登录</h3><h4 id=\"（1）导入商户点评项目\"><a href=\"#（1）导入商户点评项目\" class=\"headerlink\" title=\"（1）导入商户点评项目\"></a>（1）导入商户点评项目</h4><ul>\n<li><a class=\"link\"   href=\"https://gitee.com/ratears/data-resource/tree/master/db/redis/heima-dianping-init_and_import\" >项目下载地址<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<blockquote>\n<p><a class=\"link\"   href=\"https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hm-dianping.zip\" >hm-dianping.zip<i class=\"fas fa-external-link-alt\"></i></a> (将其下载解压缩后复制到idea工作空间，然后利用idea打开即可)（修改自己的MySQL和Redis配置）</p>\n<ul>\n<li>启动项目后，在浏览器访问：<a class=\"link\"   href=\"http://localhost:8081/shop-type/list\" >http://localhost:8081/shop-type/list<i class=\"fas fa-external-link-alt\"></i></a> ，如果可以看到数据则证明运行没有问题</li>\n</ul>\n<p><a class=\"link\"   href=\"https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/hmdp.sql\" >hmdp.sql<i class=\"fas fa-external-link-alt\"></i></a>（导入SQL文件。Mysql的版本采用5.7及以上版本）（注意先创建数据库）</p>\n<p><a class=\"link\"   href=\"https://gitee.com/ratears/data-resource/blob/master/db/redis/heima-dianping-init_and_import/nginx-1.18.0.zip\" >nginx-1.18.0.zip<i class=\"fas fa-external-link-alt\"></i></a>（windows版本。解压缩后启动即可）</p>\n<ul>\n<li>访问: <a class=\"link\"   href=\"http://127.0.0.1:8080/\" >http://127.0.0.1:8080<i class=\"fas fa-external-link-alt\"></i></a> ，即可看到页面</li>\n</ul>\n</blockquote>\n<br/>\n\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.32ghgq3ldhe0.webp?raw=true\" width=\"80%\"/>\n\n<br/>\n\n<p>（2）基于Session实现登录</p>\n<img src=\"https://git.poker/sonzonzy/image-hosting/blob/main/blog-img-bed/image.1jcturrchsbk.webp?raw=true\" width=\"90%\" />\n\n<ul>\n<li>集群的session共享问题</li>\n<li>基于Redis实现共享session登录</li>\n</ul>\n"},{"title":"《Kafka 核心技术与实战》study notes","author":"ratears","date":"2022-11-26T14:00:57.000Z","updated":"2022-11-26T14:00:57.000Z","_content":"\n\n\n# 开篇词 (1讲)\n\n## 开篇词 | 为什么要学习Kafka？\n\n- 当下互联网行业最火的技术当属 ABC 了\n  - AI 人工智能\n  - BigData 大数据\n  - Cloud 云计算云平台\n- 对于数据密集型应用来说，如何应对数据量激增、数据复杂度增加以及数据变化速率变快，是彰显大数据工程师、架构师功力的最有效表征\n  - Kafka 在帮助应对这些问题方面能起到非常好的效果（Kafka 能够有效隔离上下游业务，将上游突增的流量缓存起来，以平滑的方式传导到下游子系统中，避免了流量的不规则冲击）\n\n- Kafka 有着非常广阔的应用场景\n  - 目前 Apache Kafka 被认为是整个消息引擎领域的执牛耳者\n  - 从学习技术的角度而言，Kafka 也是很有亮点的（我们仅需要学习一套框架就能在实际业务系统中实现消息引擎应用、应用程序集成、分布式存储构建，甚至是流处理应用的开发与部署）\n  - Kafka 无论是作为消息引擎还是实时流处理平台，都能在大数据工程领域发挥重要的作用\n\n<br>\n\n### 学透 Kafka 推荐路径\n\n- 软件开发工程师\n\n1. 根据你掌握的编程语言去寻找对应的 Kafka 客户端\n2. 去官网上学习一下代码示例（如果能够正确编译和运行这些样例，就能轻松地驾驭客户端了）\n3. 尝试修改样例代码尝试去理解并使用其他的 API（观测修改的结果）\n4. 编写一个小型项目来验证下学习成果，然后就是改善和提升客户端的可靠性和性能了\n5. 熟读一遍 Kafka 官网文档，确保理解了那些可能影响可靠性和性能的参数\n6. 学习 Kafka 的高级功能（比如流处理应用开发。流处理 API 不仅能够生产和消费消息，还能执行高级的流式处理操作，比如时间窗口聚合、流处理连接等）\n\n\n\n- 系统管理员或运维工程师\n\n> 如果你是系统管理员或运维工程师，那么相应的学习目标应该是学习搭建及管理 Kafka 线上环境。如何根据实际业务需求评估、搭建生产线上环境将是你主要的学习目标。另外对生产环境的监控也是重中之重的工作，Kafka 提供了超多的 JMX 监控指标，你可以选择任意你熟知的框架进行监控。有了监控数据，作为系统运维管理员的你，势必要观测真实业务负载下的 Kafka 集群表现。之后如何利用已有的监控指标来找出系统瓶颈，然后提升整个系统的吞吐量，这也是最能体现你工作价值的地方\n\n<br>\n\n### 专栏思维导图\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.26rhfqn0svcw.webp\" width=\"100%\">\n\n<br>\n\n（1）Kafka 入门\n\n- 介绍消息引擎这类系统大致的原理和用途，以及作为优秀消息引擎代表的 Kafka 在这方面的表现\n\n（2）Kafka 的基本使用\n\n- 重点探讨 Kafka 如何用于生产环境，特别是线上环境方案的制定\n\n（3）客户端详解\n\n- 学习 Kafka 客户端的方方面面，既有生产者的实操讲解也有消费者的原理剖析\n\n（4）Kafka 原理介绍\n\n- 着重介绍 Kafka 最核心的设计原理，包括 Controller 的设计机制、请求处理全流程解析等\n\n（5）Kafka 运维与监控\n\n- 获得高效运维 Kafka 集群以及有效监控 Kafka 的实战经验\n\n（6）高级 Kafka 应用\n\n- Kafka 流处理组件 Kafka Streams 的实战应用\n\n<br>\n\n<br>\n\n<br>\n\n# Kafka入门 (5讲)\n\n## 01 | 消息引擎系统ABC\n\n- **Apache Kafka 是一款开源的消息引擎系统**\n- 消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递\n- Kafka使用纯二进制字节序列传递消息，消息也是有结构的\n\n<br>\n\n### 消息引擎传输消息模型\n\n- **点对点模型**：一对一发送or接收消息\n- **发布 / 订阅模型**：它有一个主题（Topic）的概念（可以理解成逻辑语义相近的消息容器）。发送方也称为发布者（Publisher），接收方称为订阅者（Subscriber）。和点对点模型不同的是，这个模型可能存在多个发布者向相同的主题发送消息，而订阅者也可能存在多个\n\n<br>\n\n- JMS：JMS 是 Java Message Service，它也是支持上面这两种消息引擎模型的。严格来说它并非传输协议而仅仅是一组 API 罢了\n\n<br>\n\n### 为什么要使用消息引擎\n\n- **削峰填谷**\n\n> ​\t所谓的“削峰填谷”就是指缓冲上下游瞬时突发流量，使其更平滑。特别是对于那种发送能力很强的上游系统，如果没有消息引擎的保护，“脆弱”的下游系统可能会直接被压垮导致全链路服务“雪崩”。但是，一旦有了消息引擎，它能够有效地对抗上游的流量冲击，真正做到将上游的“峰”填满到“谷”中，避免了流量的震荡。消息引擎系统的另一大好处在于发送方和接收方的松耦合，这也在一定程度上简化了应用的开发，减少了系统间不必要的交互。\n\n- 当引入了 Kafka 之后。上游订单服务不再直接与下游子服务进行交互。当新订单生成后它仅仅是向 Kafka Broker 发送一条订单消息即可。类似地，下游的各个子服务订阅 Kafka 中的对应主题，并实时从该主题的各自分区（Partition）中获取到订单消息进行处理，从而实现了上游订单服务与下游订单处理服务的解耦。这样当出现秒杀业务时，Kafka 能够将瞬时增加的订单流量全部以消息形式保存在对应的主题中，既不影响上游服务的 TPS，同时也给下游子服务留出了充足的时间去消费它们。这就是 Kafka 这类消息引擎系统的最大意义所在。\n\n<br>\n\n<br>\n\n## 02 | 一篇文章带你快速搞定Kafka术语\n\n- 消息：Record。Kafka 是消息引擎，这里的消息就是指 Kafka 处理的主要对象。\n- 主题：Topic。主题是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。\n- 分区：Partition。一个有序不变的消息序列。每个主题下可以有多个分区。\n- 消息位移：Offset。表示分区中每条消息的位置信息，是一个单调递增且不变的值。\n- 副本：Replica。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。\n- 生产者：Producer。向主题发布新消息的应用程序。\n- 消费者：Consumer。从主题订阅新消息的应用程序。\n- 消费者位移：Consumer Offset。表征消费者消费进度，每个消费者都有自己的消费者位移。\n- 消费者组：Consumer Group。多个消费者实例共同组成的一个组，同时消费多个分区以实现高吞吐。\n- 重平衡：Rebalance。消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2etr83rywssg.webp\" width=\"80%\">\n\n<br>\n\n- 生产者和消费者统称为客户端（Clients）\n- Kafka 的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成，Broker 负责接收和处理客户端发送过来的请求，以及对消息进行持久化。\n\n<br>\n\n### Kafka提供高可用的手段\n\n- 多个 Broker 进程能够运行在同一台机器上，但更常见的做法是将不同的 Broker 分散运行在不同的机器上（这样如果集群中某一台机器宕机，即使在它上面运行的所有 Broker 进程都挂掉了，其他机器上的 Broker 也依然能够对外提供服务）\n- 备份机制（Replication）（把相同的数据拷贝到多台机器上，而这些相同的数据拷贝在 Kafka 中被称为副本（Replica））\n\n<br>\n\n### 副本的工作机制\n\n- 生产者总是向领导者副本写消息；而消费者总是从领导者副本读消息。至于追随者副本，它只做一件事：向领导者副本发送请求，请求领导者把最新生产的消息发给它，这样它能保持与领导者的同步。\n- 副本机制可以保证数据的持久化或消息不丢失\n\n<br>\n\n### Kafka解决伸缩性\n\n- 伸缩性即所谓的 Scalability，是分布式系统中非常重要且必须要谨慎对待的问题\n- 什么是伸缩性：我们拿副本来说，虽然现在有了领导者副本和追随者副本，但倘若领导者副本积累了太多的数据以至于单台 Broker 机器都无法容纳了，此时应该怎么办呢？**把数据分割成多份保存在不同的 Broker 上**。这种机制就是所谓的分区（Partitioning）\n\n<br>\n\n#### 分区机制\n\n- Kafka 中的分区机制指的是将每个主题划分成多个分区（Partition），每个分区是一组有序的消息日志。\n\n> 生产者生产的每条消息只会被发送到一个分区中，也就是说如果向一个双分区的主题发送一条消息，这条消息要么在分区 0 中，要么在分区 1 中。如你所见，Kafka 的分区编号是从 0 开始的，如果 Topic 有 100 个分区，那么它们的分区号就是从 0 到 99。\n\n- **副本**：副本是在分区这个层级定义的。\n\n> 每个分区下可以配置若干个副本，其中只能有 1 个领导者副本和 N-1 个追随者副本。生产者向分区写入消息，每条消息在分区中的位置信息由一个叫位移（Offset）的数据来表征。分区位移总是从 0 开始，假设一个生产者向一个空分区写入了 10 条消息，那么这 10 条消息的位移依次是 0、1、2、…、9。\n\n<br>\n\n### Kafka 的三层消息架构\n\n- 第一层是主题层，每个主题可以配置 M 个分区，而每个分区又可以配置 N 个副本。\n- 第二层是分区层，每个分区的 N 个副本中只能有一个充当领导者角色，对外提供服务；其他 N-1 个副本是追随者副本，只是提供数据冗余之用。\n- 第三层是消息层，分区中包含若干条消息，每条消息的位移从 0 开始，依次递增。\n- 最后，客户端程序只能与分区的领导者副本进行交互。\n\n<br>\n\n### Kafka Broker 是如何持久化数据的\n\n- Kafka 使用消息日志（Log）来保存数据，一个日志就是磁盘上一个只能追加写（Append-only）消息的物理文件。\n\n> 因为只能追加写入，故避免了缓慢的随机 I/O 操作，改为性能较好的顺序 I/O 写操作，**这也是实现 Kafka 高吞吐量特性的一个重要手段。**\n\n- 日志段（Log Segment）机制\n  - 在 Kafka 底层，一个日志又近一步细分成多个日志段，消息被追加写到当前最新的日志段中，当写满了一个日志段后，Kafka 会自动切分出一个新的日志段，并将老的日志段封存起来。Kafka 在后台还有定时任务会定期地检查老的日志段是否能够被删除，从而实现回收磁盘空间的目的。\n\n<br>\n\n### 消费者组\n\n- Kafka 中实现这种 P2P 模型的方法就是引入了消费者组（Consumer Group）。\n\n> 所谓的消费者组，指的是多个消费者实例共同组成一个组来消费一组主题。这组主题中的每个分区都只会被组内的一个消费者实例消费，其他消费者实例不能消费它。为什么要引入消费者组呢？主要是为了提升消费者端的吞吐量。多个消费者实例同时消费，加速整个消费端的吞吐量（TPS）。\n\n> 这里的消费者实例可以是运行消费者应用的进程，也可以是一个线程，它们都称为一个消费者实例（Consumer Instance）。\n\n<br>\n\n### 重平衡\n\n> 消费者组里面的所有消费者实例不仅“瓜分”订阅主题的数据，而且更酷的是它们还能彼此协助。\n\n- 假设组内某个实例挂掉了，Kafka 能够自动检测到，然后把这个 Failed 实例之前负责的分区转移给其他活着的消费者。这个过程就是 Kafka 中大名鼎鼎的“重平衡”（Rebalance）。\n\n> 由重平衡引发的消费者问题比比皆是。事实上，目前很多重平衡的 Bug 社区都无力解决。\n\n<br>\n\n- 每个消费者在消费消息的过程中必然需要有个字段记录它当前消费到了分区的哪个位置上，这个字段就是消费者位移（Consumer Offset）。\n\n<br>\n\n<br>\n\n## 03 | Kafka只是消息引擎系统吗？\n\n**有的时候我们会觉得说了解一个系统或框架的前世今生似乎没什么必要，直接开始学具体的技术不是更快更好吗？其实，不论是学习哪种技术，直接扎到具体的细节中，亦或是从一个很小的点开始学习，你很快就会感到厌烦。为什么呢？因为你虽然快速地搞定了某个技术细节，但无法建立全局的认知观，这会导致你只是在单个的点上有所进展，却没法将其串联成一条线进而扩展成一个面，从而实现系统地学习。**\n\n- **Apache Kafka 是消息引擎系统，也是一个分布式流处理平台**（Distributed Streaming Platform）\n\n<br>\n\n- Kafka 在设计之初就旨在提供三个方面的特性：\n  - 提供一套 API 实现生产者和消费者；\n  - 降低网络传输和磁盘存储开销；\n  - 实现高伸缩性架构。\n\n<br>\n\n> 开源之后的 Kafka 被越来越多的公司应用到它们企业内部的数据管道中，特别是在大数据工程领域，Kafka 在承接上下游、串联数据流管道方面发挥了重要的作用：所有的数据几乎都要从一个系统流入 Kafka 然后再流向下游的另一个系统中。这样的使用方式屡见不鲜以至于引发了 Kafka 社区的思考：与其我把数据从一个系统传递到下一个系统中做处理，我为何不自己实现一套流处理框架呢？基于这个考量，Kafka 社区于 0.10.0.0 版本正式推出了流处理组件 Kafka Streams，也正是从这个版本开始，Kafka 正式“变身”为分布式的流处理平台，而不仅仅是消息引擎系统了。今天 Apache Kafka 是和 Apache Storm、Apache Spark 和 Apache Flink 同等级的实时流处理平台。\n\n<br>\n\n### Kafka 与其他主流大数据流式计算框架相比的优势\n\n- **第一点是更容易实现端到端的正确性（Correctness）**。\n  - **要实现正确性和提供能够推导时间的工具。实现正确性是流处理能够匹敌批处理的基石**。\n- **对于流式计算的定位**\n  - 需要自己选择适合的工具或系统来帮助 Kafka 流处理应用实现这些功能\n\n<br>\n\n<br>\n\n## 04 | 我应该选择哪种Kafka？\n\n### Kafka Connect\n\n- Kafka Connect 通过一个个具体的连接器（Connector），串联起上下游的外部系统。\n\n<br>\n\n- Kafka Connect 组件支持的一部分外部系统，如下图\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6ktbply8no00.webp\" width=\"60%\">\n\n<br>\n\n### Kafka种类\n\n#### **Apache Kafka**\n\n- Apache Kafka 是最“正宗”的 Kafka，也应该是你最熟悉的发行版了。自 Kafka 开源伊始，它便在 Apache 基金会孵化并最终毕业成为顶级项目，它也被称为社区版 Kafka。\n  - 后面提到的发行版要么是原封不动地继承了 Apache Kafka，要么是在此之上扩展了新功能\n  - 开发人数最多、版本迭代速度最快的 Kafka。社区活跃\n  - 劣势：仅仅提供最最基础的组件\n    - 社区版 Kafka 只提供一种连接器，即读写磁盘文件的连接器，而没有与其他外部系统交互的连接器，在实际使用过程中需要自行编写代码实现\n  - Apache Kafka 没有提供任何监控框架或工具。必然需要借助第三方的监控框架实现对 Kafka 的监控。（好消息是目前有一些开源的监控框架可以帮助用于监控 Kafka（比如 Kafka manager））\n\n\n\n- **如果你仅仅需要一个消息引擎系统亦或是简单的流处理应用场景，同时需要对系统有较大把控度，推荐你使用 Apache Kafka。**\n\n<br>\n\n#### **Confluent Kafka**\n\n- Confluent 公司，它主要从事商业化 Kafka 工具开发，并在此基础上发布了 Confluent Kafka。Confluent Kafka 提供了一些 Apache Kafka 没有的高级特性，比如跨数据中心备份、Schema 注册中心以及集群监控工具等。\n- Confluent Kafka 目前分为免费版和企业版两种。前者和 Apache Kafka 非常相像，除了常规的组件之外，免费版还包含 Schema 注册中心和 REST proxy 两大功能。前者是帮助你集中管理 Kafka 消息格式以实现数据前向 / 后向兼容；后者用开放 HTTP 接口的方式允许你通过网络访问 Kafka 的各种功能，这两个都是 Apache Kafka 所没有的。\n- 免费版包含了更多的连接器，它们都是 Confluent 公司开发并认证过的，你可以免费使用它们。至于企业版，它提供的功能就更多了。在我看来，最有用的当属跨数据中心备份和集群监控两大功能了。多个数据中心之间数据的同步以及对集群的监控历来是 Kafka 的痛点，Confluent Kafka 企业版提供了强大的解决方案帮助你“干掉”它们。\n- Confluent 公司暂时没有发展国内业务的计划，相关的资料以及技术支持都很欠缺，很多国内 Confluent Kafka 使用者甚至无法找到对应的中文文档，因此目前 Confluent Kafka 在国内的普及率是比较低的。\n\n<br>\n\n#### **Cloudera/Hortonworks Kafka**\n\n- Cloudera 提供的 CDH 和 Hortonworks 提供的 HDP 是非常著名的大数据平台，里面集成了目前主流的大数据框架，能够帮助用户实现从分布式存储、集群调度、流处理到机器学习、实时数据库等全方位的数据处理。很多创业公司在搭建数据平台时首选就是这两个产品。不管是 CDH 还是 HDP 里面都集成了 Apache Kafka，因此我把这两款产品中的 Kafka 称为 CDH Kafka 和 HDP Kafka。\n- Kafka（CDH/HDP Kafka）。这些大数据平台天然集成了 Apache Kafka，通过便捷化的界面操作将 Kafka 的安装、运维、管理、监控全部统一在控制台中。\n- 降低了你对 Kafka 集群的掌控程度。\n- 滞后：由于它有自己的发布周期，因此是否能及时地包含最新版本的 Kafka 就成为了一个问题。\n\n<br>\n\n- **如果需要快速地搭建消息引擎系统，或者你需要搭建的是多框架构成的数据平台且 Kafka 只是其中一个组件，那么我推荐你使用这些大数据云公司提供的 Kafka。**\n\n<br>\n\n### 小结\n\n- Apache Kafka，也称社区版 Kafka。优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度；缺陷在于仅提供基础核心组件，缺失一些高级的特性。\n- Confluent Kafka，Confluent 公司提供的 Kafka。优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。\n- CDH/HDP Kafka，大数据云公司提供的 Kafka，内嵌 Apache Kafka。优势在于操作简单，节省运维成本；缺陷在于把控度低，演进速度较慢。\n\n<br>\n\n<br>\n\n## 05 | 聊聊Kafka的版本号\n\n- 评判某 Kafka 版本是不是满足业务需求，就需要了解各个版本之间的差异和功能变化\n\n<br>\n\n### Kafka 版本命名\n\n- kafka-2.11-2.1.1\n  - 前面的版本号是编译 Kafka 源代码的 Scala 编译器版本。（Kafka 服务器端的代码完全由 Scala 语言编写）\n  - 真正的 Kafka 版本号实际上是 2.1.1\n    - 前面的 2 表示大版本号，即 Major Version；中间的 1 表示小版本号或次版本号，即 Minor Version；最后的 1 表示修订版本号，也就是 Patch 号。\n\n\n\n- Kafka 社区在发布 1.0.0 版本后特意写过一篇文章，宣布 Kafka 版本命名规则正式从 4 位演进到 3 位，比如 0.11.0.0 版本就是 4 位版本号。\n  - 假设碰到的 Kafka 版本是 0.10.2.2，你现在就知道了它的大版本是 0.10，小版本是 2，总共打了两个大的补丁，Patch 号是 2。\n\n<br>\n\n### Kafka 版本演进\n\n- Kafka 目前总共演进了 7 个大版本，分别是 0.7、0.8、0.9、0.10、0.11、1.0 和 2.0，其中的小版本和 Patch 版本很多。\n\n<br>\n\n- 0.7 版本\n  - 最早开源时的“上古”版本。这个版本只提供了最基础的消息队列功能，甚至连副本机制都没有\n- 0.8\n  - 正式引入了**副本机制**，至此 Kafka 成为了一个真正意义上完备的分布式高可靠消息队列解决方案。有了副本备份机制，Kafka 就能够比较好地做到消息无丢失。那时候生产和消费消息使用的还是老版本的客户端 API，所谓的老版本是指当你用它们的 API 开发生产者和消费者应用时，你需要指定 ZooKeeper 的地址而非 Broker 的地址。\n  - 老版本客户端有很多的问题，特别是生产者 API，它默认使用同步方式发送消息，可以想见其吞吐量一定不会太高。虽然它也支持异步的方式，但实际场景中可能会造成消息的丢失，因此 0.8.2.0 版本社区引入了**新版本 Producer API**，即需要指定 Broker 地址的 Producer。\n  - 国内依然有少部分用户在使用 0.8.1.1、0.8.2 版本。**建议是尽量使用比较新的版本。如果不能升级大版本，也建议至少要升级到 0.8.2.2 这个版本，因为该版本中老版本消费者 API 是比较稳定的。另外即使升到了 0.8.2.2，也不要使用新版本 Producer API，此时它的 Bug 还非常多。**\n- 0.9.0.0 版本\n  - 2015 年 11 月，社区正式发布了 0.9.0.0 版本。\n  - 0.9 大版本增加了基础的安全认证 / 权限功能，同时使用 Java 重写了新版本消费者 API，另外还引入了 Kafka Connect 组件用于实现高性能的数据抽取。\n  - **新版本 Producer API 在这个版本中算比较稳定了**。\n- 0.10.0.0\n  - 0.10.0.0 是里程碑式的大版本，因为该版本**引入了 Kafka Streams**。从这个版本起，Kafka 正式升级成分布式流处理平台，虽然此时的 Kafka Streams 还基本不能线上部署使用。\n  - **如果你依然在使用 0.10 大版本，我强烈建议你至少升级到 0.10.2.2 然后使用新版本 Consumer API。还有个事情不得不提，0.10.2.2 修复了一个可能导致 Producer 性能降低的 Bug。基于性能的缘故你也应该升级到 0.10.2.2。**\n- 0.11.0.0 版本\n  - 2017 年 6 月，社区发布了 0.11.0.0 版本，引入了两个重量级的功能变更：一个是提供幂等性 Producer API 以及事务（Transaction） API；另一个是对 Kafka 消息格式做了重构。\n\n<br>\n\n- 不论你用的是哪个版本，都请尽量保持服务器端版本和客户端版本一致，否则你将损失很多 Kafka 为你提供的性能优化收益。\n\n<br>\n\n<br>\n\n<br>\n\n# Kafka的基本使用 (3讲)\n\n## 06 | Kafka线上集群部署方案怎么做？\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","source":"_posts/2022/《Kafka-核心技术与实战》study-notes.md","raw":"---\ntitle: 《Kafka 核心技术与实战》study notes\nauthor: ratears\ncategories:\n\t- [MQ,Kafka]\ntags:\n  - Kafka\ndate: 2022-11-26 22:00:57\nupdated: 2022-11-26 22:00:57\n---\n\n\n\n# 开篇词 (1讲)\n\n## 开篇词 | 为什么要学习Kafka？\n\n- 当下互联网行业最火的技术当属 ABC 了\n  - AI 人工智能\n  - BigData 大数据\n  - Cloud 云计算云平台\n- 对于数据密集型应用来说，如何应对数据量激增、数据复杂度增加以及数据变化速率变快，是彰显大数据工程师、架构师功力的最有效表征\n  - Kafka 在帮助应对这些问题方面能起到非常好的效果（Kafka 能够有效隔离上下游业务，将上游突增的流量缓存起来，以平滑的方式传导到下游子系统中，避免了流量的不规则冲击）\n\n- Kafka 有着非常广阔的应用场景\n  - 目前 Apache Kafka 被认为是整个消息引擎领域的执牛耳者\n  - 从学习技术的角度而言，Kafka 也是很有亮点的（我们仅需要学习一套框架就能在实际业务系统中实现消息引擎应用、应用程序集成、分布式存储构建，甚至是流处理应用的开发与部署）\n  - Kafka 无论是作为消息引擎还是实时流处理平台，都能在大数据工程领域发挥重要的作用\n\n<br>\n\n### 学透 Kafka 推荐路径\n\n- 软件开发工程师\n\n1. 根据你掌握的编程语言去寻找对应的 Kafka 客户端\n2. 去官网上学习一下代码示例（如果能够正确编译和运行这些样例，就能轻松地驾驭客户端了）\n3. 尝试修改样例代码尝试去理解并使用其他的 API（观测修改的结果）\n4. 编写一个小型项目来验证下学习成果，然后就是改善和提升客户端的可靠性和性能了\n5. 熟读一遍 Kafka 官网文档，确保理解了那些可能影响可靠性和性能的参数\n6. 学习 Kafka 的高级功能（比如流处理应用开发。流处理 API 不仅能够生产和消费消息，还能执行高级的流式处理操作，比如时间窗口聚合、流处理连接等）\n\n\n\n- 系统管理员或运维工程师\n\n> 如果你是系统管理员或运维工程师，那么相应的学习目标应该是学习搭建及管理 Kafka 线上环境。如何根据实际业务需求评估、搭建生产线上环境将是你主要的学习目标。另外对生产环境的监控也是重中之重的工作，Kafka 提供了超多的 JMX 监控指标，你可以选择任意你熟知的框架进行监控。有了监控数据，作为系统运维管理员的你，势必要观测真实业务负载下的 Kafka 集群表现。之后如何利用已有的监控指标来找出系统瓶颈，然后提升整个系统的吞吐量，这也是最能体现你工作价值的地方\n\n<br>\n\n### 专栏思维导图\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.26rhfqn0svcw.webp\" width=\"100%\">\n\n<br>\n\n（1）Kafka 入门\n\n- 介绍消息引擎这类系统大致的原理和用途，以及作为优秀消息引擎代表的 Kafka 在这方面的表现\n\n（2）Kafka 的基本使用\n\n- 重点探讨 Kafka 如何用于生产环境，特别是线上环境方案的制定\n\n（3）客户端详解\n\n- 学习 Kafka 客户端的方方面面，既有生产者的实操讲解也有消费者的原理剖析\n\n（4）Kafka 原理介绍\n\n- 着重介绍 Kafka 最核心的设计原理，包括 Controller 的设计机制、请求处理全流程解析等\n\n（5）Kafka 运维与监控\n\n- 获得高效运维 Kafka 集群以及有效监控 Kafka 的实战经验\n\n（6）高级 Kafka 应用\n\n- Kafka 流处理组件 Kafka Streams 的实战应用\n\n<br>\n\n<br>\n\n<br>\n\n# Kafka入门 (5讲)\n\n## 01 | 消息引擎系统ABC\n\n- **Apache Kafka 是一款开源的消息引擎系统**\n- 消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递\n- Kafka使用纯二进制字节序列传递消息，消息也是有结构的\n\n<br>\n\n### 消息引擎传输消息模型\n\n- **点对点模型**：一对一发送or接收消息\n- **发布 / 订阅模型**：它有一个主题（Topic）的概念（可以理解成逻辑语义相近的消息容器）。发送方也称为发布者（Publisher），接收方称为订阅者（Subscriber）。和点对点模型不同的是，这个模型可能存在多个发布者向相同的主题发送消息，而订阅者也可能存在多个\n\n<br>\n\n- JMS：JMS 是 Java Message Service，它也是支持上面这两种消息引擎模型的。严格来说它并非传输协议而仅仅是一组 API 罢了\n\n<br>\n\n### 为什么要使用消息引擎\n\n- **削峰填谷**\n\n> ​\t所谓的“削峰填谷”就是指缓冲上下游瞬时突发流量，使其更平滑。特别是对于那种发送能力很强的上游系统，如果没有消息引擎的保护，“脆弱”的下游系统可能会直接被压垮导致全链路服务“雪崩”。但是，一旦有了消息引擎，它能够有效地对抗上游的流量冲击，真正做到将上游的“峰”填满到“谷”中，避免了流量的震荡。消息引擎系统的另一大好处在于发送方和接收方的松耦合，这也在一定程度上简化了应用的开发，减少了系统间不必要的交互。\n\n- 当引入了 Kafka 之后。上游订单服务不再直接与下游子服务进行交互。当新订单生成后它仅仅是向 Kafka Broker 发送一条订单消息即可。类似地，下游的各个子服务订阅 Kafka 中的对应主题，并实时从该主题的各自分区（Partition）中获取到订单消息进行处理，从而实现了上游订单服务与下游订单处理服务的解耦。这样当出现秒杀业务时，Kafka 能够将瞬时增加的订单流量全部以消息形式保存在对应的主题中，既不影响上游服务的 TPS，同时也给下游子服务留出了充足的时间去消费它们。这就是 Kafka 这类消息引擎系统的最大意义所在。\n\n<br>\n\n<br>\n\n## 02 | 一篇文章带你快速搞定Kafka术语\n\n- 消息：Record。Kafka 是消息引擎，这里的消息就是指 Kafka 处理的主要对象。\n- 主题：Topic。主题是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。\n- 分区：Partition。一个有序不变的消息序列。每个主题下可以有多个分区。\n- 消息位移：Offset。表示分区中每条消息的位置信息，是一个单调递增且不变的值。\n- 副本：Replica。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。\n- 生产者：Producer。向主题发布新消息的应用程序。\n- 消费者：Consumer。从主题订阅新消息的应用程序。\n- 消费者位移：Consumer Offset。表征消费者消费进度，每个消费者都有自己的消费者位移。\n- 消费者组：Consumer Group。多个消费者实例共同组成的一个组，同时消费多个分区以实现高吞吐。\n- 重平衡：Rebalance。消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2etr83rywssg.webp\" width=\"80%\">\n\n<br>\n\n- 生产者和消费者统称为客户端（Clients）\n- Kafka 的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成，Broker 负责接收和处理客户端发送过来的请求，以及对消息进行持久化。\n\n<br>\n\n### Kafka提供高可用的手段\n\n- 多个 Broker 进程能够运行在同一台机器上，但更常见的做法是将不同的 Broker 分散运行在不同的机器上（这样如果集群中某一台机器宕机，即使在它上面运行的所有 Broker 进程都挂掉了，其他机器上的 Broker 也依然能够对外提供服务）\n- 备份机制（Replication）（把相同的数据拷贝到多台机器上，而这些相同的数据拷贝在 Kafka 中被称为副本（Replica））\n\n<br>\n\n### 副本的工作机制\n\n- 生产者总是向领导者副本写消息；而消费者总是从领导者副本读消息。至于追随者副本，它只做一件事：向领导者副本发送请求，请求领导者把最新生产的消息发给它，这样它能保持与领导者的同步。\n- 副本机制可以保证数据的持久化或消息不丢失\n\n<br>\n\n### Kafka解决伸缩性\n\n- 伸缩性即所谓的 Scalability，是分布式系统中非常重要且必须要谨慎对待的问题\n- 什么是伸缩性：我们拿副本来说，虽然现在有了领导者副本和追随者副本，但倘若领导者副本积累了太多的数据以至于单台 Broker 机器都无法容纳了，此时应该怎么办呢？**把数据分割成多份保存在不同的 Broker 上**。这种机制就是所谓的分区（Partitioning）\n\n<br>\n\n#### 分区机制\n\n- Kafka 中的分区机制指的是将每个主题划分成多个分区（Partition），每个分区是一组有序的消息日志。\n\n> 生产者生产的每条消息只会被发送到一个分区中，也就是说如果向一个双分区的主题发送一条消息，这条消息要么在分区 0 中，要么在分区 1 中。如你所见，Kafka 的分区编号是从 0 开始的，如果 Topic 有 100 个分区，那么它们的分区号就是从 0 到 99。\n\n- **副本**：副本是在分区这个层级定义的。\n\n> 每个分区下可以配置若干个副本，其中只能有 1 个领导者副本和 N-1 个追随者副本。生产者向分区写入消息，每条消息在分区中的位置信息由一个叫位移（Offset）的数据来表征。分区位移总是从 0 开始，假设一个生产者向一个空分区写入了 10 条消息，那么这 10 条消息的位移依次是 0、1、2、…、9。\n\n<br>\n\n### Kafka 的三层消息架构\n\n- 第一层是主题层，每个主题可以配置 M 个分区，而每个分区又可以配置 N 个副本。\n- 第二层是分区层，每个分区的 N 个副本中只能有一个充当领导者角色，对外提供服务；其他 N-1 个副本是追随者副本，只是提供数据冗余之用。\n- 第三层是消息层，分区中包含若干条消息，每条消息的位移从 0 开始，依次递增。\n- 最后，客户端程序只能与分区的领导者副本进行交互。\n\n<br>\n\n### Kafka Broker 是如何持久化数据的\n\n- Kafka 使用消息日志（Log）来保存数据，一个日志就是磁盘上一个只能追加写（Append-only）消息的物理文件。\n\n> 因为只能追加写入，故避免了缓慢的随机 I/O 操作，改为性能较好的顺序 I/O 写操作，**这也是实现 Kafka 高吞吐量特性的一个重要手段。**\n\n- 日志段（Log Segment）机制\n  - 在 Kafka 底层，一个日志又近一步细分成多个日志段，消息被追加写到当前最新的日志段中，当写满了一个日志段后，Kafka 会自动切分出一个新的日志段，并将老的日志段封存起来。Kafka 在后台还有定时任务会定期地检查老的日志段是否能够被删除，从而实现回收磁盘空间的目的。\n\n<br>\n\n### 消费者组\n\n- Kafka 中实现这种 P2P 模型的方法就是引入了消费者组（Consumer Group）。\n\n> 所谓的消费者组，指的是多个消费者实例共同组成一个组来消费一组主题。这组主题中的每个分区都只会被组内的一个消费者实例消费，其他消费者实例不能消费它。为什么要引入消费者组呢？主要是为了提升消费者端的吞吐量。多个消费者实例同时消费，加速整个消费端的吞吐量（TPS）。\n\n> 这里的消费者实例可以是运行消费者应用的进程，也可以是一个线程，它们都称为一个消费者实例（Consumer Instance）。\n\n<br>\n\n### 重平衡\n\n> 消费者组里面的所有消费者实例不仅“瓜分”订阅主题的数据，而且更酷的是它们还能彼此协助。\n\n- 假设组内某个实例挂掉了，Kafka 能够自动检测到，然后把这个 Failed 实例之前负责的分区转移给其他活着的消费者。这个过程就是 Kafka 中大名鼎鼎的“重平衡”（Rebalance）。\n\n> 由重平衡引发的消费者问题比比皆是。事实上，目前很多重平衡的 Bug 社区都无力解决。\n\n<br>\n\n- 每个消费者在消费消息的过程中必然需要有个字段记录它当前消费到了分区的哪个位置上，这个字段就是消费者位移（Consumer Offset）。\n\n<br>\n\n<br>\n\n## 03 | Kafka只是消息引擎系统吗？\n\n**有的时候我们会觉得说了解一个系统或框架的前世今生似乎没什么必要，直接开始学具体的技术不是更快更好吗？其实，不论是学习哪种技术，直接扎到具体的细节中，亦或是从一个很小的点开始学习，你很快就会感到厌烦。为什么呢？因为你虽然快速地搞定了某个技术细节，但无法建立全局的认知观，这会导致你只是在单个的点上有所进展，却没法将其串联成一条线进而扩展成一个面，从而实现系统地学习。**\n\n- **Apache Kafka 是消息引擎系统，也是一个分布式流处理平台**（Distributed Streaming Platform）\n\n<br>\n\n- Kafka 在设计之初就旨在提供三个方面的特性：\n  - 提供一套 API 实现生产者和消费者；\n  - 降低网络传输和磁盘存储开销；\n  - 实现高伸缩性架构。\n\n<br>\n\n> 开源之后的 Kafka 被越来越多的公司应用到它们企业内部的数据管道中，特别是在大数据工程领域，Kafka 在承接上下游、串联数据流管道方面发挥了重要的作用：所有的数据几乎都要从一个系统流入 Kafka 然后再流向下游的另一个系统中。这样的使用方式屡见不鲜以至于引发了 Kafka 社区的思考：与其我把数据从一个系统传递到下一个系统中做处理，我为何不自己实现一套流处理框架呢？基于这个考量，Kafka 社区于 0.10.0.0 版本正式推出了流处理组件 Kafka Streams，也正是从这个版本开始，Kafka 正式“变身”为分布式的流处理平台，而不仅仅是消息引擎系统了。今天 Apache Kafka 是和 Apache Storm、Apache Spark 和 Apache Flink 同等级的实时流处理平台。\n\n<br>\n\n### Kafka 与其他主流大数据流式计算框架相比的优势\n\n- **第一点是更容易实现端到端的正确性（Correctness）**。\n  - **要实现正确性和提供能够推导时间的工具。实现正确性是流处理能够匹敌批处理的基石**。\n- **对于流式计算的定位**\n  - 需要自己选择适合的工具或系统来帮助 Kafka 流处理应用实现这些功能\n\n<br>\n\n<br>\n\n## 04 | 我应该选择哪种Kafka？\n\n### Kafka Connect\n\n- Kafka Connect 通过一个个具体的连接器（Connector），串联起上下游的外部系统。\n\n<br>\n\n- Kafka Connect 组件支持的一部分外部系统，如下图\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6ktbply8no00.webp\" width=\"60%\">\n\n<br>\n\n### Kafka种类\n\n#### **Apache Kafka**\n\n- Apache Kafka 是最“正宗”的 Kafka，也应该是你最熟悉的发行版了。自 Kafka 开源伊始，它便在 Apache 基金会孵化并最终毕业成为顶级项目，它也被称为社区版 Kafka。\n  - 后面提到的发行版要么是原封不动地继承了 Apache Kafka，要么是在此之上扩展了新功能\n  - 开发人数最多、版本迭代速度最快的 Kafka。社区活跃\n  - 劣势：仅仅提供最最基础的组件\n    - 社区版 Kafka 只提供一种连接器，即读写磁盘文件的连接器，而没有与其他外部系统交互的连接器，在实际使用过程中需要自行编写代码实现\n  - Apache Kafka 没有提供任何监控框架或工具。必然需要借助第三方的监控框架实现对 Kafka 的监控。（好消息是目前有一些开源的监控框架可以帮助用于监控 Kafka（比如 Kafka manager））\n\n\n\n- **如果你仅仅需要一个消息引擎系统亦或是简单的流处理应用场景，同时需要对系统有较大把控度，推荐你使用 Apache Kafka。**\n\n<br>\n\n#### **Confluent Kafka**\n\n- Confluent 公司，它主要从事商业化 Kafka 工具开发，并在此基础上发布了 Confluent Kafka。Confluent Kafka 提供了一些 Apache Kafka 没有的高级特性，比如跨数据中心备份、Schema 注册中心以及集群监控工具等。\n- Confluent Kafka 目前分为免费版和企业版两种。前者和 Apache Kafka 非常相像，除了常规的组件之外，免费版还包含 Schema 注册中心和 REST proxy 两大功能。前者是帮助你集中管理 Kafka 消息格式以实现数据前向 / 后向兼容；后者用开放 HTTP 接口的方式允许你通过网络访问 Kafka 的各种功能，这两个都是 Apache Kafka 所没有的。\n- 免费版包含了更多的连接器，它们都是 Confluent 公司开发并认证过的，你可以免费使用它们。至于企业版，它提供的功能就更多了。在我看来，最有用的当属跨数据中心备份和集群监控两大功能了。多个数据中心之间数据的同步以及对集群的监控历来是 Kafka 的痛点，Confluent Kafka 企业版提供了强大的解决方案帮助你“干掉”它们。\n- Confluent 公司暂时没有发展国内业务的计划，相关的资料以及技术支持都很欠缺，很多国内 Confluent Kafka 使用者甚至无法找到对应的中文文档，因此目前 Confluent Kafka 在国内的普及率是比较低的。\n\n<br>\n\n#### **Cloudera/Hortonworks Kafka**\n\n- Cloudera 提供的 CDH 和 Hortonworks 提供的 HDP 是非常著名的大数据平台，里面集成了目前主流的大数据框架，能够帮助用户实现从分布式存储、集群调度、流处理到机器学习、实时数据库等全方位的数据处理。很多创业公司在搭建数据平台时首选就是这两个产品。不管是 CDH 还是 HDP 里面都集成了 Apache Kafka，因此我把这两款产品中的 Kafka 称为 CDH Kafka 和 HDP Kafka。\n- Kafka（CDH/HDP Kafka）。这些大数据平台天然集成了 Apache Kafka，通过便捷化的界面操作将 Kafka 的安装、运维、管理、监控全部统一在控制台中。\n- 降低了你对 Kafka 集群的掌控程度。\n- 滞后：由于它有自己的发布周期，因此是否能及时地包含最新版本的 Kafka 就成为了一个问题。\n\n<br>\n\n- **如果需要快速地搭建消息引擎系统，或者你需要搭建的是多框架构成的数据平台且 Kafka 只是其中一个组件，那么我推荐你使用这些大数据云公司提供的 Kafka。**\n\n<br>\n\n### 小结\n\n- Apache Kafka，也称社区版 Kafka。优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度；缺陷在于仅提供基础核心组件，缺失一些高级的特性。\n- Confluent Kafka，Confluent 公司提供的 Kafka。优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。\n- CDH/HDP Kafka，大数据云公司提供的 Kafka，内嵌 Apache Kafka。优势在于操作简单，节省运维成本；缺陷在于把控度低，演进速度较慢。\n\n<br>\n\n<br>\n\n## 05 | 聊聊Kafka的版本号\n\n- 评判某 Kafka 版本是不是满足业务需求，就需要了解各个版本之间的差异和功能变化\n\n<br>\n\n### Kafka 版本命名\n\n- kafka-2.11-2.1.1\n  - 前面的版本号是编译 Kafka 源代码的 Scala 编译器版本。（Kafka 服务器端的代码完全由 Scala 语言编写）\n  - 真正的 Kafka 版本号实际上是 2.1.1\n    - 前面的 2 表示大版本号，即 Major Version；中间的 1 表示小版本号或次版本号，即 Minor Version；最后的 1 表示修订版本号，也就是 Patch 号。\n\n\n\n- Kafka 社区在发布 1.0.0 版本后特意写过一篇文章，宣布 Kafka 版本命名规则正式从 4 位演进到 3 位，比如 0.11.0.0 版本就是 4 位版本号。\n  - 假设碰到的 Kafka 版本是 0.10.2.2，你现在就知道了它的大版本是 0.10，小版本是 2，总共打了两个大的补丁，Patch 号是 2。\n\n<br>\n\n### Kafka 版本演进\n\n- Kafka 目前总共演进了 7 个大版本，分别是 0.7、0.8、0.9、0.10、0.11、1.0 和 2.0，其中的小版本和 Patch 版本很多。\n\n<br>\n\n- 0.7 版本\n  - 最早开源时的“上古”版本。这个版本只提供了最基础的消息队列功能，甚至连副本机制都没有\n- 0.8\n  - 正式引入了**副本机制**，至此 Kafka 成为了一个真正意义上完备的分布式高可靠消息队列解决方案。有了副本备份机制，Kafka 就能够比较好地做到消息无丢失。那时候生产和消费消息使用的还是老版本的客户端 API，所谓的老版本是指当你用它们的 API 开发生产者和消费者应用时，你需要指定 ZooKeeper 的地址而非 Broker 的地址。\n  - 老版本客户端有很多的问题，特别是生产者 API，它默认使用同步方式发送消息，可以想见其吞吐量一定不会太高。虽然它也支持异步的方式，但实际场景中可能会造成消息的丢失，因此 0.8.2.0 版本社区引入了**新版本 Producer API**，即需要指定 Broker 地址的 Producer。\n  - 国内依然有少部分用户在使用 0.8.1.1、0.8.2 版本。**建议是尽量使用比较新的版本。如果不能升级大版本，也建议至少要升级到 0.8.2.2 这个版本，因为该版本中老版本消费者 API 是比较稳定的。另外即使升到了 0.8.2.2，也不要使用新版本 Producer API，此时它的 Bug 还非常多。**\n- 0.9.0.0 版本\n  - 2015 年 11 月，社区正式发布了 0.9.0.0 版本。\n  - 0.9 大版本增加了基础的安全认证 / 权限功能，同时使用 Java 重写了新版本消费者 API，另外还引入了 Kafka Connect 组件用于实现高性能的数据抽取。\n  - **新版本 Producer API 在这个版本中算比较稳定了**。\n- 0.10.0.0\n  - 0.10.0.0 是里程碑式的大版本，因为该版本**引入了 Kafka Streams**。从这个版本起，Kafka 正式升级成分布式流处理平台，虽然此时的 Kafka Streams 还基本不能线上部署使用。\n  - **如果你依然在使用 0.10 大版本，我强烈建议你至少升级到 0.10.2.2 然后使用新版本 Consumer API。还有个事情不得不提，0.10.2.2 修复了一个可能导致 Producer 性能降低的 Bug。基于性能的缘故你也应该升级到 0.10.2.2。**\n- 0.11.0.0 版本\n  - 2017 年 6 月，社区发布了 0.11.0.0 版本，引入了两个重量级的功能变更：一个是提供幂等性 Producer API 以及事务（Transaction） API；另一个是对 Kafka 消息格式做了重构。\n\n<br>\n\n- 不论你用的是哪个版本，都请尽量保持服务器端版本和客户端版本一致，否则你将损失很多 Kafka 为你提供的性能优化收益。\n\n<br>\n\n<br>\n\n<br>\n\n# Kafka的基本使用 (3讲)\n\n## 06 | Kafka线上集群部署方案怎么做？\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 学习备注\n\n> 1\n\n```html\n&emsp;&emsp;\n```\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","slug":"《Kafka-核心技术与实战》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsow005udctad1743k2m","content":"<h1 id=\"开篇词-1讲\"><a href=\"#开篇词-1讲\" class=\"headerlink\" title=\"开篇词 (1讲)\"></a>开篇词 (1讲)</h1><h2 id=\"开篇词-为什么要学习Kafka？\"><a href=\"#开篇词-为什么要学习Kafka？\" class=\"headerlink\" title=\"开篇词 | 为什么要学习Kafka？\"></a>开篇词 | 为什么要学习Kafka？</h2><ul>\n<li><p>当下互联网行业最火的技术当属 ABC 了</p>\n<ul>\n<li>AI 人工智能</li>\n<li>BigData 大数据</li>\n<li>Cloud 云计算云平台</li>\n</ul>\n</li>\n<li><p>对于数据密集型应用来说，如何应对数据量激增、数据复杂度增加以及数据变化速率变快，是彰显大数据工程师、架构师功力的最有效表征</p>\n<ul>\n<li>Kafka 在帮助应对这些问题方面能起到非常好的效果（Kafka 能够有效隔离上下游业务，将上游突增的流量缓存起来，以平滑的方式传导到下游子系统中，避免了流量的不规则冲击）</li>\n</ul>\n</li>\n<li><p>Kafka 有着非常广阔的应用场景</p>\n<ul>\n<li>目前 Apache Kafka 被认为是整个消息引擎领域的执牛耳者</li>\n<li>从学习技术的角度而言，Kafka 也是很有亮点的（我们仅需要学习一套框架就能在实际业务系统中实现消息引擎应用、应用程序集成、分布式存储构建，甚至是流处理应用的开发与部署）</li>\n<li>Kafka 无论是作为消息引擎还是实时流处理平台，都能在大数据工程领域发挥重要的作用</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"学透-Kafka-推荐路径\"><a href=\"#学透-Kafka-推荐路径\" class=\"headerlink\" title=\"学透 Kafka 推荐路径\"></a>学透 Kafka 推荐路径</h3><ul>\n<li>软件开发工程师</li>\n</ul>\n<ol>\n<li>根据你掌握的编程语言去寻找对应的 Kafka 客户端</li>\n<li>去官网上学习一下代码示例（如果能够正确编译和运行这些样例，就能轻松地驾驭客户端了）</li>\n<li>尝试修改样例代码尝试去理解并使用其他的 API（观测修改的结果）</li>\n<li>编写一个小型项目来验证下学习成果，然后就是改善和提升客户端的可靠性和性能了</li>\n<li>熟读一遍 Kafka 官网文档，确保理解了那些可能影响可靠性和性能的参数</li>\n<li>学习 Kafka 的高级功能（比如流处理应用开发。流处理 API 不仅能够生产和消费消息，还能执行高级的流式处理操作，比如时间窗口聚合、流处理连接等）</li>\n</ol>\n<ul>\n<li>系统管理员或运维工程师</li>\n</ul>\n<blockquote>\n<p>如果你是系统管理员或运维工程师，那么相应的学习目标应该是学习搭建及管理 Kafka 线上环境。如何根据实际业务需求评估、搭建生产线上环境将是你主要的学习目标。另外对生产环境的监控也是重中之重的工作，Kafka 提供了超多的 JMX 监控指标，你可以选择任意你熟知的框架进行监控。有了监控数据，作为系统运维管理员的你，势必要观测真实业务负载下的 Kafka 集群表现。之后如何利用已有的监控指标来找出系统瓶颈，然后提升整个系统的吞吐量，这也是最能体现你工作价值的地方</p>\n</blockquote>\n<br>\n\n<h3 id=\"专栏思维导图\"><a href=\"#专栏思维导图\" class=\"headerlink\" title=\"专栏思维导图\"></a>专栏思维导图</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.26rhfqn0svcw.webp\" width=\"100%\">\n\n<br>\n\n<p>（1）Kafka 入门</p>\n<ul>\n<li>介绍消息引擎这类系统大致的原理和用途，以及作为优秀消息引擎代表的 Kafka 在这方面的表现</li>\n</ul>\n<p>（2）Kafka 的基本使用</p>\n<ul>\n<li>重点探讨 Kafka 如何用于生产环境，特别是线上环境方案的制定</li>\n</ul>\n<p>（3）客户端详解</p>\n<ul>\n<li>学习 Kafka 客户端的方方面面，既有生产者的实操讲解也有消费者的原理剖析</li>\n</ul>\n<p>（4）Kafka 原理介绍</p>\n<ul>\n<li>着重介绍 Kafka 最核心的设计原理，包括 Controller 的设计机制、请求处理全流程解析等</li>\n</ul>\n<p>（5）Kafka 运维与监控</p>\n<ul>\n<li>获得高效运维 Kafka 集群以及有效监控 Kafka 的实战经验</li>\n</ul>\n<p>（6）高级 Kafka 应用</p>\n<ul>\n<li>Kafka 流处理组件 Kafka Streams 的实战应用</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Kafka入门-5讲\"><a href=\"#Kafka入门-5讲\" class=\"headerlink\" title=\"Kafka入门 (5讲)\"></a>Kafka入门 (5讲)</h1><h2 id=\"01-消息引擎系统ABC\"><a href=\"#01-消息引擎系统ABC\" class=\"headerlink\" title=\"01 | 消息引擎系统ABC\"></a>01 | 消息引擎系统ABC</h2><ul>\n<li><strong>Apache Kafka 是一款开源的消息引擎系统</strong></li>\n<li>消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递</li>\n<li>Kafka使用纯二进制字节序列传递消息，消息也是有结构的</li>\n</ul>\n<br>\n\n<h3 id=\"消息引擎传输消息模型\"><a href=\"#消息引擎传输消息模型\" class=\"headerlink\" title=\"消息引擎传输消息模型\"></a>消息引擎传输消息模型</h3><ul>\n<li><strong>点对点模型</strong>：一对一发送or接收消息</li>\n<li><strong>发布 / 订阅模型</strong>：它有一个主题（Topic）的概念（可以理解成逻辑语义相近的消息容器）。发送方也称为发布者（Publisher），接收方称为订阅者（Subscriber）。和点对点模型不同的是，这个模型可能存在多个发布者向相同的主题发送消息，而订阅者也可能存在多个</li>\n</ul>\n<br>\n\n<ul>\n<li>JMS：JMS 是 Java Message Service，它也是支持上面这两种消息引擎模型的。严格来说它并非传输协议而仅仅是一组 API 罢了</li>\n</ul>\n<br>\n\n<h3 id=\"为什么要使用消息引擎\"><a href=\"#为什么要使用消息引擎\" class=\"headerlink\" title=\"为什么要使用消息引擎\"></a>为什么要使用消息引擎</h3><ul>\n<li><strong>削峰填谷</strong></li>\n</ul>\n<blockquote>\n<p>​    所谓的“削峰填谷”就是指缓冲上下游瞬时突发流量，使其更平滑。特别是对于那种发送能力很强的上游系统，如果没有消息引擎的保护，“脆弱”的下游系统可能会直接被压垮导致全链路服务“雪崩”。但是，一旦有了消息引擎，它能够有效地对抗上游的流量冲击，真正做到将上游的“峰”填满到“谷”中，避免了流量的震荡。消息引擎系统的另一大好处在于发送方和接收方的松耦合，这也在一定程度上简化了应用的开发，减少了系统间不必要的交互。</p>\n</blockquote>\n<ul>\n<li>当引入了 Kafka 之后。上游订单服务不再直接与下游子服务进行交互。当新订单生成后它仅仅是向 Kafka Broker 发送一条订单消息即可。类似地，下游的各个子服务订阅 Kafka 中的对应主题，并实时从该主题的各自分区（Partition）中获取到订单消息进行处理，从而实现了上游订单服务与下游订单处理服务的解耦。这样当出现秒杀业务时，Kafka 能够将瞬时增加的订单流量全部以消息形式保存在对应的主题中，既不影响上游服务的 TPS，同时也给下游子服务留出了充足的时间去消费它们。这就是 Kafka 这类消息引擎系统的最大意义所在。</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"02-一篇文章带你快速搞定Kafka术语\"><a href=\"#02-一篇文章带你快速搞定Kafka术语\" class=\"headerlink\" title=\"02 | 一篇文章带你快速搞定Kafka术语\"></a>02 | 一篇文章带你快速搞定Kafka术语</h2><ul>\n<li>消息：Record。Kafka 是消息引擎，这里的消息就是指 Kafka 处理的主要对象。</li>\n<li>主题：Topic。主题是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。</li>\n<li>分区：Partition。一个有序不变的消息序列。每个主题下可以有多个分区。</li>\n<li>消息位移：Offset。表示分区中每条消息的位置信息，是一个单调递增且不变的值。</li>\n<li>副本：Replica。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。</li>\n<li>生产者：Producer。向主题发布新消息的应用程序。</li>\n<li>消费者：Consumer。从主题订阅新消息的应用程序。</li>\n<li>消费者位移：Consumer Offset。表征消费者消费进度，每个消费者都有自己的消费者位移。</li>\n<li>消费者组：Consumer Group。多个消费者实例共同组成的一个组，同时消费多个分区以实现高吞吐。</li>\n<li>重平衡：Rebalance。消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2etr83rywssg.webp\" width=\"80%\">\n\n<br>\n\n<ul>\n<li>生产者和消费者统称为客户端（Clients）</li>\n<li>Kafka 的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成，Broker 负责接收和处理客户端发送过来的请求，以及对消息进行持久化。</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka提供高可用的手段\"><a href=\"#Kafka提供高可用的手段\" class=\"headerlink\" title=\"Kafka提供高可用的手段\"></a>Kafka提供高可用的手段</h3><ul>\n<li>多个 Broker 进程能够运行在同一台机器上，但更常见的做法是将不同的 Broker 分散运行在不同的机器上（这样如果集群中某一台机器宕机，即使在它上面运行的所有 Broker 进程都挂掉了，其他机器上的 Broker 也依然能够对外提供服务）</li>\n<li>备份机制（Replication）（把相同的数据拷贝到多台机器上，而这些相同的数据拷贝在 Kafka 中被称为副本（Replica））</li>\n</ul>\n<br>\n\n<h3 id=\"副本的工作机制\"><a href=\"#副本的工作机制\" class=\"headerlink\" title=\"副本的工作机制\"></a>副本的工作机制</h3><ul>\n<li>生产者总是向领导者副本写消息；而消费者总是从领导者副本读消息。至于追随者副本，它只做一件事：向领导者副本发送请求，请求领导者把最新生产的消息发给它，这样它能保持与领导者的同步。</li>\n<li>副本机制可以保证数据的持久化或消息不丢失</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka解决伸缩性\"><a href=\"#Kafka解决伸缩性\" class=\"headerlink\" title=\"Kafka解决伸缩性\"></a>Kafka解决伸缩性</h3><ul>\n<li>伸缩性即所谓的 Scalability，是分布式系统中非常重要且必须要谨慎对待的问题</li>\n<li>什么是伸缩性：我们拿副本来说，虽然现在有了领导者副本和追随者副本，但倘若领导者副本积累了太多的数据以至于单台 Broker 机器都无法容纳了，此时应该怎么办呢？<strong>把数据分割成多份保存在不同的 Broker 上</strong>。这种机制就是所谓的分区（Partitioning）</li>\n</ul>\n<br>\n\n<h4 id=\"分区机制\"><a href=\"#分区机制\" class=\"headerlink\" title=\"分区机制\"></a>分区机制</h4><ul>\n<li>Kafka 中的分区机制指的是将每个主题划分成多个分区（Partition），每个分区是一组有序的消息日志。</li>\n</ul>\n<blockquote>\n<p>生产者生产的每条消息只会被发送到一个分区中，也就是说如果向一个双分区的主题发送一条消息，这条消息要么在分区 0 中，要么在分区 1 中。如你所见，Kafka 的分区编号是从 0 开始的，如果 Topic 有 100 个分区，那么它们的分区号就是从 0 到 99。</p>\n</blockquote>\n<ul>\n<li><strong>副本</strong>：副本是在分区这个层级定义的。</li>\n</ul>\n<blockquote>\n<p>每个分区下可以配置若干个副本，其中只能有 1 个领导者副本和 N-1 个追随者副本。生产者向分区写入消息，每条消息在分区中的位置信息由一个叫位移（Offset）的数据来表征。分区位移总是从 0 开始，假设一个生产者向一个空分区写入了 10 条消息，那么这 10 条消息的位移依次是 0、1、2、…、9。</p>\n</blockquote>\n<br>\n\n<h3 id=\"Kafka-的三层消息架构\"><a href=\"#Kafka-的三层消息架构\" class=\"headerlink\" title=\"Kafka 的三层消息架构\"></a>Kafka 的三层消息架构</h3><ul>\n<li>第一层是主题层，每个主题可以配置 M 个分区，而每个分区又可以配置 N 个副本。</li>\n<li>第二层是分区层，每个分区的 N 个副本中只能有一个充当领导者角色，对外提供服务；其他 N-1 个副本是追随者副本，只是提供数据冗余之用。</li>\n<li>第三层是消息层，分区中包含若干条消息，每条消息的位移从 0 开始，依次递增。</li>\n<li>最后，客户端程序只能与分区的领导者副本进行交互。</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka-Broker-是如何持久化数据的\"><a href=\"#Kafka-Broker-是如何持久化数据的\" class=\"headerlink\" title=\"Kafka Broker 是如何持久化数据的\"></a>Kafka Broker 是如何持久化数据的</h3><ul>\n<li>Kafka 使用消息日志（Log）来保存数据，一个日志就是磁盘上一个只能追加写（Append-only）消息的物理文件。</li>\n</ul>\n<blockquote>\n<p>因为只能追加写入，故避免了缓慢的随机 I/O 操作，改为性能较好的顺序 I/O 写操作，<strong>这也是实现 Kafka 高吞吐量特性的一个重要手段。</strong></p>\n</blockquote>\n<ul>\n<li>日志段（Log Segment）机制<ul>\n<li>在 Kafka 底层，一个日志又近一步细分成多个日志段，消息被追加写到当前最新的日志段中，当写满了一个日志段后，Kafka 会自动切分出一个新的日志段，并将老的日志段封存起来。Kafka 在后台还有定时任务会定期地检查老的日志段是否能够被删除，从而实现回收磁盘空间的目的。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"消费者组\"><a href=\"#消费者组\" class=\"headerlink\" title=\"消费者组\"></a>消费者组</h3><ul>\n<li>Kafka 中实现这种 P2P 模型的方法就是引入了消费者组（Consumer Group）。</li>\n</ul>\n<blockquote>\n<p>所谓的消费者组，指的是多个消费者实例共同组成一个组来消费一组主题。这组主题中的每个分区都只会被组内的一个消费者实例消费，其他消费者实例不能消费它。为什么要引入消费者组呢？主要是为了提升消费者端的吞吐量。多个消费者实例同时消费，加速整个消费端的吞吐量（TPS）。</p>\n</blockquote>\n<blockquote>\n<p>这里的消费者实例可以是运行消费者应用的进程，也可以是一个线程，它们都称为一个消费者实例（Consumer Instance）。</p>\n</blockquote>\n<br>\n\n<h3 id=\"重平衡\"><a href=\"#重平衡\" class=\"headerlink\" title=\"重平衡\"></a>重平衡</h3><blockquote>\n<p>消费者组里面的所有消费者实例不仅“瓜分”订阅主题的数据，而且更酷的是它们还能彼此协助。</p>\n</blockquote>\n<ul>\n<li>假设组内某个实例挂掉了，Kafka 能够自动检测到，然后把这个 Failed 实例之前负责的分区转移给其他活着的消费者。这个过程就是 Kafka 中大名鼎鼎的“重平衡”（Rebalance）。</li>\n</ul>\n<blockquote>\n<p>由重平衡引发的消费者问题比比皆是。事实上，目前很多重平衡的 Bug 社区都无力解决。</p>\n</blockquote>\n<br>\n\n<ul>\n<li>每个消费者在消费消息的过程中必然需要有个字段记录它当前消费到了分区的哪个位置上，这个字段就是消费者位移（Consumer Offset）。</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"03-Kafka只是消息引擎系统吗？\"><a href=\"#03-Kafka只是消息引擎系统吗？\" class=\"headerlink\" title=\"03 | Kafka只是消息引擎系统吗？\"></a>03 | Kafka只是消息引擎系统吗？</h2><p><strong>有的时候我们会觉得说了解一个系统或框架的前世今生似乎没什么必要，直接开始学具体的技术不是更快更好吗？其实，不论是学习哪种技术，直接扎到具体的细节中，亦或是从一个很小的点开始学习，你很快就会感到厌烦。为什么呢？因为你虽然快速地搞定了某个技术细节，但无法建立全局的认知观，这会导致你只是在单个的点上有所进展，却没法将其串联成一条线进而扩展成一个面，从而实现系统地学习。</strong></p>\n<ul>\n<li><strong>Apache Kafka 是消息引擎系统，也是一个分布式流处理平台</strong>（Distributed Streaming Platform）</li>\n</ul>\n<br>\n\n<ul>\n<li>Kafka 在设计之初就旨在提供三个方面的特性：<ul>\n<li>提供一套 API 实现生产者和消费者；</li>\n<li>降低网络传输和磁盘存储开销；</li>\n<li>实现高伸缩性架构。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<blockquote>\n<p>开源之后的 Kafka 被越来越多的公司应用到它们企业内部的数据管道中，特别是在大数据工程领域，Kafka 在承接上下游、串联数据流管道方面发挥了重要的作用：所有的数据几乎都要从一个系统流入 Kafka 然后再流向下游的另一个系统中。这样的使用方式屡见不鲜以至于引发了 Kafka 社区的思考：与其我把数据从一个系统传递到下一个系统中做处理，我为何不自己实现一套流处理框架呢？基于这个考量，Kafka 社区于 0.10.0.0 版本正式推出了流处理组件 Kafka Streams，也正是从这个版本开始，Kafka 正式“变身”为分布式的流处理平台，而不仅仅是消息引擎系统了。今天 Apache Kafka 是和 Apache Storm、Apache Spark 和 Apache Flink 同等级的实时流处理平台。</p>\n</blockquote>\n<br>\n\n<h3 id=\"Kafka-与其他主流大数据流式计算框架相比的优势\"><a href=\"#Kafka-与其他主流大数据流式计算框架相比的优势\" class=\"headerlink\" title=\"Kafka 与其他主流大数据流式计算框架相比的优势\"></a>Kafka 与其他主流大数据流式计算框架相比的优势</h3><ul>\n<li><strong>第一点是更容易实现端到端的正确性（Correctness）</strong>。<ul>\n<li><strong>要实现正确性和提供能够推导时间的工具。实现正确性是流处理能够匹敌批处理的基石</strong>。</li>\n</ul>\n</li>\n<li><strong>对于流式计算的定位</strong><ul>\n<li>需要自己选择适合的工具或系统来帮助 Kafka 流处理应用实现这些功能</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"04-我应该选择哪种Kafka？\"><a href=\"#04-我应该选择哪种Kafka？\" class=\"headerlink\" title=\"04 | 我应该选择哪种Kafka？\"></a>04 | 我应该选择哪种Kafka？</h2><h3 id=\"Kafka-Connect\"><a href=\"#Kafka-Connect\" class=\"headerlink\" title=\"Kafka Connect\"></a>Kafka Connect</h3><ul>\n<li>Kafka Connect 通过一个个具体的连接器（Connector），串联起上下游的外部系统。</li>\n</ul>\n<br>\n\n<ul>\n<li>Kafka Connect 组件支持的一部分外部系统，如下图</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6ktbply8no00.webp\" width=\"60%\">\n\n<br>\n\n<h3 id=\"Kafka种类\"><a href=\"#Kafka种类\" class=\"headerlink\" title=\"Kafka种类\"></a>Kafka种类</h3><h4 id=\"Apache-Kafka\"><a href=\"#Apache-Kafka\" class=\"headerlink\" title=\"Apache Kafka\"></a><strong>Apache Kafka</strong></h4><ul>\n<li>Apache Kafka 是最“正宗”的 Kafka，也应该是你最熟悉的发行版了。自 Kafka 开源伊始，它便在 Apache 基金会孵化并最终毕业成为顶级项目，它也被称为社区版 Kafka。<ul>\n<li>后面提到的发行版要么是原封不动地继承了 Apache Kafka，要么是在此之上扩展了新功能</li>\n<li>开发人数最多、版本迭代速度最快的 Kafka。社区活跃</li>\n<li>劣势：仅仅提供最最基础的组件<ul>\n<li>社区版 Kafka 只提供一种连接器，即读写磁盘文件的连接器，而没有与其他外部系统交互的连接器，在实际使用过程中需要自行编写代码实现</li>\n</ul>\n</li>\n<li>Apache Kafka 没有提供任何监控框架或工具。必然需要借助第三方的监控框架实现对 Kafka 的监控。（好消息是目前有一些开源的监控框架可以帮助用于监控 Kafka（比如 Kafka manager））</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>如果你仅仅需要一个消息引擎系统亦或是简单的流处理应用场景，同时需要对系统有较大把控度，推荐你使用 Apache Kafka。</strong></li>\n</ul>\n<br>\n\n<h4 id=\"Confluent-Kafka\"><a href=\"#Confluent-Kafka\" class=\"headerlink\" title=\"Confluent Kafka\"></a><strong>Confluent Kafka</strong></h4><ul>\n<li>Confluent 公司，它主要从事商业化 Kafka 工具开发，并在此基础上发布了 Confluent Kafka。Confluent Kafka 提供了一些 Apache Kafka 没有的高级特性，比如跨数据中心备份、Schema 注册中心以及集群监控工具等。</li>\n<li>Confluent Kafka 目前分为免费版和企业版两种。前者和 Apache Kafka 非常相像，除了常规的组件之外，免费版还包含 Schema 注册中心和 REST proxy 两大功能。前者是帮助你集中管理 Kafka 消息格式以实现数据前向 / 后向兼容；后者用开放 HTTP 接口的方式允许你通过网络访问 Kafka 的各种功能，这两个都是 Apache Kafka 所没有的。</li>\n<li>免费版包含了更多的连接器，它们都是 Confluent 公司开发并认证过的，你可以免费使用它们。至于企业版，它提供的功能就更多了。在我看来，最有用的当属跨数据中心备份和集群监控两大功能了。多个数据中心之间数据的同步以及对集群的监控历来是 Kafka 的痛点，Confluent Kafka 企业版提供了强大的解决方案帮助你“干掉”它们。</li>\n<li>Confluent 公司暂时没有发展国内业务的计划，相关的资料以及技术支持都很欠缺，很多国内 Confluent Kafka 使用者甚至无法找到对应的中文文档，因此目前 Confluent Kafka 在国内的普及率是比较低的。</li>\n</ul>\n<br>\n\n<h4 id=\"Cloudera-Hortonworks-Kafka\"><a href=\"#Cloudera-Hortonworks-Kafka\" class=\"headerlink\" title=\"Cloudera/Hortonworks Kafka\"></a><strong>Cloudera/Hortonworks Kafka</strong></h4><ul>\n<li>Cloudera 提供的 CDH 和 Hortonworks 提供的 HDP 是非常著名的大数据平台，里面集成了目前主流的大数据框架，能够帮助用户实现从分布式存储、集群调度、流处理到机器学习、实时数据库等全方位的数据处理。很多创业公司在搭建数据平台时首选就是这两个产品。不管是 CDH 还是 HDP 里面都集成了 Apache Kafka，因此我把这两款产品中的 Kafka 称为 CDH Kafka 和 HDP Kafka。</li>\n<li>Kafka（CDH/HDP Kafka）。这些大数据平台天然集成了 Apache Kafka，通过便捷化的界面操作将 Kafka 的安装、运维、管理、监控全部统一在控制台中。</li>\n<li>降低了你对 Kafka 集群的掌控程度。</li>\n<li>滞后：由于它有自己的发布周期，因此是否能及时地包含最新版本的 Kafka 就成为了一个问题。</li>\n</ul>\n<br>\n\n<ul>\n<li><strong>如果需要快速地搭建消息引擎系统，或者你需要搭建的是多框架构成的数据平台且 Kafka 只是其中一个组件，那么我推荐你使用这些大数据云公司提供的 Kafka。</strong></li>\n</ul>\n<br>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li>Apache Kafka，也称社区版 Kafka。优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度；缺陷在于仅提供基础核心组件，缺失一些高级的特性。</li>\n<li>Confluent Kafka，Confluent 公司提供的 Kafka。优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。</li>\n<li>CDH/HDP Kafka，大数据云公司提供的 Kafka，内嵌 Apache Kafka。优势在于操作简单，节省运维成本；缺陷在于把控度低，演进速度较慢。</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"05-聊聊Kafka的版本号\"><a href=\"#05-聊聊Kafka的版本号\" class=\"headerlink\" title=\"05 | 聊聊Kafka的版本号\"></a>05 | 聊聊Kafka的版本号</h2><ul>\n<li>评判某 Kafka 版本是不是满足业务需求，就需要了解各个版本之间的差异和功能变化</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka-版本命名\"><a href=\"#Kafka-版本命名\" class=\"headerlink\" title=\"Kafka 版本命名\"></a>Kafka 版本命名</h3><ul>\n<li>kafka-2.11-2.1.1<ul>\n<li>前面的版本号是编译 Kafka 源代码的 Scala 编译器版本。（Kafka 服务器端的代码完全由 Scala 语言编写）</li>\n<li>真正的 Kafka 版本号实际上是 2.1.1<ul>\n<li>前面的 2 表示大版本号，即 Major Version；中间的 1 表示小版本号或次版本号，即 Minor Version；最后的 1 表示修订版本号，也就是 Patch 号。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Kafka 社区在发布 1.0.0 版本后特意写过一篇文章，宣布 Kafka 版本命名规则正式从 4 位演进到 3 位，比如 0.11.0.0 版本就是 4 位版本号。<ul>\n<li>假设碰到的 Kafka 版本是 0.10.2.2，你现在就知道了它的大版本是 0.10，小版本是 2，总共打了两个大的补丁，Patch 号是 2。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka-版本演进\"><a href=\"#Kafka-版本演进\" class=\"headerlink\" title=\"Kafka 版本演进\"></a>Kafka 版本演进</h3><ul>\n<li>Kafka 目前总共演进了 7 个大版本，分别是 0.7、0.8、0.9、0.10、0.11、1.0 和 2.0，其中的小版本和 Patch 版本很多。</li>\n</ul>\n<br>\n\n<ul>\n<li>0.7 版本<ul>\n<li>最早开源时的“上古”版本。这个版本只提供了最基础的消息队列功能，甚至连副本机制都没有</li>\n</ul>\n</li>\n<li>0.8<ul>\n<li>正式引入了<strong>副本机制</strong>，至此 Kafka 成为了一个真正意义上完备的分布式高可靠消息队列解决方案。有了副本备份机制，Kafka 就能够比较好地做到消息无丢失。那时候生产和消费消息使用的还是老版本的客户端 API，所谓的老版本是指当你用它们的 API 开发生产者和消费者应用时，你需要指定 ZooKeeper 的地址而非 Broker 的地址。</li>\n<li>老版本客户端有很多的问题，特别是生产者 API，它默认使用同步方式发送消息，可以想见其吞吐量一定不会太高。虽然它也支持异步的方式，但实际场景中可能会造成消息的丢失，因此 0.8.2.0 版本社区引入了<strong>新版本 Producer API</strong>，即需要指定 Broker 地址的 Producer。</li>\n<li>国内依然有少部分用户在使用 0.8.1.1、0.8.2 版本。<strong>建议是尽量使用比较新的版本。如果不能升级大版本，也建议至少要升级到 0.8.2.2 这个版本，因为该版本中老版本消费者 API 是比较稳定的。另外即使升到了 0.8.2.2，也不要使用新版本 Producer API，此时它的 Bug 还非常多。</strong></li>\n</ul>\n</li>\n<li>0.9.0.0 版本<ul>\n<li>2015 年 11 月，社区正式发布了 0.9.0.0 版本。</li>\n<li>0.9 大版本增加了基础的安全认证 / 权限功能，同时使用 Java 重写了新版本消费者 API，另外还引入了 Kafka Connect 组件用于实现高性能的数据抽取。</li>\n<li><strong>新版本 Producer API 在这个版本中算比较稳定了</strong>。</li>\n</ul>\n</li>\n<li>0.10.0.0<ul>\n<li>0.10.0.0 是里程碑式的大版本，因为该版本<strong>引入了 Kafka Streams</strong>。从这个版本起，Kafka 正式升级成分布式流处理平台，虽然此时的 Kafka Streams 还基本不能线上部署使用。</li>\n<li><strong>如果你依然在使用 0.10 大版本，我强烈建议你至少升级到 0.10.2.2 然后使用新版本 Consumer API。还有个事情不得不提，0.10.2.2 修复了一个可能导致 Producer 性能降低的 Bug。基于性能的缘故你也应该升级到 0.10.2.2。</strong></li>\n</ul>\n</li>\n<li>0.11.0.0 版本<ul>\n<li>2017 年 6 月，社区发布了 0.11.0.0 版本，引入了两个重量级的功能变更：一个是提供幂等性 Producer API 以及事务（Transaction） API；另一个是对 Kafka 消息格式做了重构。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>不论你用的是哪个版本，都请尽量保持服务器端版本和客户端版本一致，否则你将损失很多 Kafka 为你提供的性能优化收益。</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Kafka的基本使用-3讲\"><a href=\"#Kafka的基本使用-3讲\" class=\"headerlink\" title=\"Kafka的基本使用 (3讲)\"></a>Kafka的基本使用 (3讲)</h1><h2 id=\"06-Kafka线上集群部署方案怎么做？\"><a href=\"#06-Kafka线上集群部署方案怎么做？\" class=\"headerlink\" title=\"06 | Kafka线上集群部署方案怎么做？\"></a>06 | Kafka线上集群部署方案怎么做？</h2><br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开篇词-1讲\"><a href=\"#开篇词-1讲\" class=\"headerlink\" title=\"开篇词 (1讲)\"></a>开篇词 (1讲)</h1><h2 id=\"开篇词-为什么要学习Kafka？\"><a href=\"#开篇词-为什么要学习Kafka？\" class=\"headerlink\" title=\"开篇词 | 为什么要学习Kafka？\"></a>开篇词 | 为什么要学习Kafka？</h2><ul>\n<li><p>当下互联网行业最火的技术当属 ABC 了</p>\n<ul>\n<li>AI 人工智能</li>\n<li>BigData 大数据</li>\n<li>Cloud 云计算云平台</li>\n</ul>\n</li>\n<li><p>对于数据密集型应用来说，如何应对数据量激增、数据复杂度增加以及数据变化速率变快，是彰显大数据工程师、架构师功力的最有效表征</p>\n<ul>\n<li>Kafka 在帮助应对这些问题方面能起到非常好的效果（Kafka 能够有效隔离上下游业务，将上游突增的流量缓存起来，以平滑的方式传导到下游子系统中，避免了流量的不规则冲击）</li>\n</ul>\n</li>\n<li><p>Kafka 有着非常广阔的应用场景</p>\n<ul>\n<li>目前 Apache Kafka 被认为是整个消息引擎领域的执牛耳者</li>\n<li>从学习技术的角度而言，Kafka 也是很有亮点的（我们仅需要学习一套框架就能在实际业务系统中实现消息引擎应用、应用程序集成、分布式存储构建，甚至是流处理应用的开发与部署）</li>\n<li>Kafka 无论是作为消息引擎还是实时流处理平台，都能在大数据工程领域发挥重要的作用</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"学透-Kafka-推荐路径\"><a href=\"#学透-Kafka-推荐路径\" class=\"headerlink\" title=\"学透 Kafka 推荐路径\"></a>学透 Kafka 推荐路径</h3><ul>\n<li>软件开发工程师</li>\n</ul>\n<ol>\n<li>根据你掌握的编程语言去寻找对应的 Kafka 客户端</li>\n<li>去官网上学习一下代码示例（如果能够正确编译和运行这些样例，就能轻松地驾驭客户端了）</li>\n<li>尝试修改样例代码尝试去理解并使用其他的 API（观测修改的结果）</li>\n<li>编写一个小型项目来验证下学习成果，然后就是改善和提升客户端的可靠性和性能了</li>\n<li>熟读一遍 Kafka 官网文档，确保理解了那些可能影响可靠性和性能的参数</li>\n<li>学习 Kafka 的高级功能（比如流处理应用开发。流处理 API 不仅能够生产和消费消息，还能执行高级的流式处理操作，比如时间窗口聚合、流处理连接等）</li>\n</ol>\n<ul>\n<li>系统管理员或运维工程师</li>\n</ul>\n<blockquote>\n<p>如果你是系统管理员或运维工程师，那么相应的学习目标应该是学习搭建及管理 Kafka 线上环境。如何根据实际业务需求评估、搭建生产线上环境将是你主要的学习目标。另外对生产环境的监控也是重中之重的工作，Kafka 提供了超多的 JMX 监控指标，你可以选择任意你熟知的框架进行监控。有了监控数据，作为系统运维管理员的你，势必要观测真实业务负载下的 Kafka 集群表现。之后如何利用已有的监控指标来找出系统瓶颈，然后提升整个系统的吞吐量，这也是最能体现你工作价值的地方</p>\n</blockquote>\n<br>\n\n<h3 id=\"专栏思维导图\"><a href=\"#专栏思维导图\" class=\"headerlink\" title=\"专栏思维导图\"></a>专栏思维导图</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.26rhfqn0svcw.webp\" width=\"100%\">\n\n<br>\n\n<p>（1）Kafka 入门</p>\n<ul>\n<li>介绍消息引擎这类系统大致的原理和用途，以及作为优秀消息引擎代表的 Kafka 在这方面的表现</li>\n</ul>\n<p>（2）Kafka 的基本使用</p>\n<ul>\n<li>重点探讨 Kafka 如何用于生产环境，特别是线上环境方案的制定</li>\n</ul>\n<p>（3）客户端详解</p>\n<ul>\n<li>学习 Kafka 客户端的方方面面，既有生产者的实操讲解也有消费者的原理剖析</li>\n</ul>\n<p>（4）Kafka 原理介绍</p>\n<ul>\n<li>着重介绍 Kafka 最核心的设计原理，包括 Controller 的设计机制、请求处理全流程解析等</li>\n</ul>\n<p>（5）Kafka 运维与监控</p>\n<ul>\n<li>获得高效运维 Kafka 集群以及有效监控 Kafka 的实战经验</li>\n</ul>\n<p>（6）高级 Kafka 应用</p>\n<ul>\n<li>Kafka 流处理组件 Kafka Streams 的实战应用</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Kafka入门-5讲\"><a href=\"#Kafka入门-5讲\" class=\"headerlink\" title=\"Kafka入门 (5讲)\"></a>Kafka入门 (5讲)</h1><h2 id=\"01-消息引擎系统ABC\"><a href=\"#01-消息引擎系统ABC\" class=\"headerlink\" title=\"01 | 消息引擎系统ABC\"></a>01 | 消息引擎系统ABC</h2><ul>\n<li><strong>Apache Kafka 是一款开源的消息引擎系统</strong></li>\n<li>消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递</li>\n<li>Kafka使用纯二进制字节序列传递消息，消息也是有结构的</li>\n</ul>\n<br>\n\n<h3 id=\"消息引擎传输消息模型\"><a href=\"#消息引擎传输消息模型\" class=\"headerlink\" title=\"消息引擎传输消息模型\"></a>消息引擎传输消息模型</h3><ul>\n<li><strong>点对点模型</strong>：一对一发送or接收消息</li>\n<li><strong>发布 / 订阅模型</strong>：它有一个主题（Topic）的概念（可以理解成逻辑语义相近的消息容器）。发送方也称为发布者（Publisher），接收方称为订阅者（Subscriber）。和点对点模型不同的是，这个模型可能存在多个发布者向相同的主题发送消息，而订阅者也可能存在多个</li>\n</ul>\n<br>\n\n<ul>\n<li>JMS：JMS 是 Java Message Service，它也是支持上面这两种消息引擎模型的。严格来说它并非传输协议而仅仅是一组 API 罢了</li>\n</ul>\n<br>\n\n<h3 id=\"为什么要使用消息引擎\"><a href=\"#为什么要使用消息引擎\" class=\"headerlink\" title=\"为什么要使用消息引擎\"></a>为什么要使用消息引擎</h3><ul>\n<li><strong>削峰填谷</strong></li>\n</ul>\n<blockquote>\n<p>​    所谓的“削峰填谷”就是指缓冲上下游瞬时突发流量，使其更平滑。特别是对于那种发送能力很强的上游系统，如果没有消息引擎的保护，“脆弱”的下游系统可能会直接被压垮导致全链路服务“雪崩”。但是，一旦有了消息引擎，它能够有效地对抗上游的流量冲击，真正做到将上游的“峰”填满到“谷”中，避免了流量的震荡。消息引擎系统的另一大好处在于发送方和接收方的松耦合，这也在一定程度上简化了应用的开发，减少了系统间不必要的交互。</p>\n</blockquote>\n<ul>\n<li>当引入了 Kafka 之后。上游订单服务不再直接与下游子服务进行交互。当新订单生成后它仅仅是向 Kafka Broker 发送一条订单消息即可。类似地，下游的各个子服务订阅 Kafka 中的对应主题，并实时从该主题的各自分区（Partition）中获取到订单消息进行处理，从而实现了上游订单服务与下游订单处理服务的解耦。这样当出现秒杀业务时，Kafka 能够将瞬时增加的订单流量全部以消息形式保存在对应的主题中，既不影响上游服务的 TPS，同时也给下游子服务留出了充足的时间去消费它们。这就是 Kafka 这类消息引擎系统的最大意义所在。</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"02-一篇文章带你快速搞定Kafka术语\"><a href=\"#02-一篇文章带你快速搞定Kafka术语\" class=\"headerlink\" title=\"02 | 一篇文章带你快速搞定Kafka术语\"></a>02 | 一篇文章带你快速搞定Kafka术语</h2><ul>\n<li>消息：Record。Kafka 是消息引擎，这里的消息就是指 Kafka 处理的主要对象。</li>\n<li>主题：Topic。主题是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。</li>\n<li>分区：Partition。一个有序不变的消息序列。每个主题下可以有多个分区。</li>\n<li>消息位移：Offset。表示分区中每条消息的位置信息，是一个单调递增且不变的值。</li>\n<li>副本：Replica。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。</li>\n<li>生产者：Producer。向主题发布新消息的应用程序。</li>\n<li>消费者：Consumer。从主题订阅新消息的应用程序。</li>\n<li>消费者位移：Consumer Offset。表征消费者消费进度，每个消费者都有自己的消费者位移。</li>\n<li>消费者组：Consumer Group。多个消费者实例共同组成的一个组，同时消费多个分区以实现高吞吐。</li>\n<li>重平衡：Rebalance。消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。</li>\n</ul>\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2etr83rywssg.webp\" width=\"80%\">\n\n<br>\n\n<ul>\n<li>生产者和消费者统称为客户端（Clients）</li>\n<li>Kafka 的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成，Broker 负责接收和处理客户端发送过来的请求，以及对消息进行持久化。</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka提供高可用的手段\"><a href=\"#Kafka提供高可用的手段\" class=\"headerlink\" title=\"Kafka提供高可用的手段\"></a>Kafka提供高可用的手段</h3><ul>\n<li>多个 Broker 进程能够运行在同一台机器上，但更常见的做法是将不同的 Broker 分散运行在不同的机器上（这样如果集群中某一台机器宕机，即使在它上面运行的所有 Broker 进程都挂掉了，其他机器上的 Broker 也依然能够对外提供服务）</li>\n<li>备份机制（Replication）（把相同的数据拷贝到多台机器上，而这些相同的数据拷贝在 Kafka 中被称为副本（Replica））</li>\n</ul>\n<br>\n\n<h3 id=\"副本的工作机制\"><a href=\"#副本的工作机制\" class=\"headerlink\" title=\"副本的工作机制\"></a>副本的工作机制</h3><ul>\n<li>生产者总是向领导者副本写消息；而消费者总是从领导者副本读消息。至于追随者副本，它只做一件事：向领导者副本发送请求，请求领导者把最新生产的消息发给它，这样它能保持与领导者的同步。</li>\n<li>副本机制可以保证数据的持久化或消息不丢失</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka解决伸缩性\"><a href=\"#Kafka解决伸缩性\" class=\"headerlink\" title=\"Kafka解决伸缩性\"></a>Kafka解决伸缩性</h3><ul>\n<li>伸缩性即所谓的 Scalability，是分布式系统中非常重要且必须要谨慎对待的问题</li>\n<li>什么是伸缩性：我们拿副本来说，虽然现在有了领导者副本和追随者副本，但倘若领导者副本积累了太多的数据以至于单台 Broker 机器都无法容纳了，此时应该怎么办呢？<strong>把数据分割成多份保存在不同的 Broker 上</strong>。这种机制就是所谓的分区（Partitioning）</li>\n</ul>\n<br>\n\n<h4 id=\"分区机制\"><a href=\"#分区机制\" class=\"headerlink\" title=\"分区机制\"></a>分区机制</h4><ul>\n<li>Kafka 中的分区机制指的是将每个主题划分成多个分区（Partition），每个分区是一组有序的消息日志。</li>\n</ul>\n<blockquote>\n<p>生产者生产的每条消息只会被发送到一个分区中，也就是说如果向一个双分区的主题发送一条消息，这条消息要么在分区 0 中，要么在分区 1 中。如你所见，Kafka 的分区编号是从 0 开始的，如果 Topic 有 100 个分区，那么它们的分区号就是从 0 到 99。</p>\n</blockquote>\n<ul>\n<li><strong>副本</strong>：副本是在分区这个层级定义的。</li>\n</ul>\n<blockquote>\n<p>每个分区下可以配置若干个副本，其中只能有 1 个领导者副本和 N-1 个追随者副本。生产者向分区写入消息，每条消息在分区中的位置信息由一个叫位移（Offset）的数据来表征。分区位移总是从 0 开始，假设一个生产者向一个空分区写入了 10 条消息，那么这 10 条消息的位移依次是 0、1、2、…、9。</p>\n</blockquote>\n<br>\n\n<h3 id=\"Kafka-的三层消息架构\"><a href=\"#Kafka-的三层消息架构\" class=\"headerlink\" title=\"Kafka 的三层消息架构\"></a>Kafka 的三层消息架构</h3><ul>\n<li>第一层是主题层，每个主题可以配置 M 个分区，而每个分区又可以配置 N 个副本。</li>\n<li>第二层是分区层，每个分区的 N 个副本中只能有一个充当领导者角色，对外提供服务；其他 N-1 个副本是追随者副本，只是提供数据冗余之用。</li>\n<li>第三层是消息层，分区中包含若干条消息，每条消息的位移从 0 开始，依次递增。</li>\n<li>最后，客户端程序只能与分区的领导者副本进行交互。</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka-Broker-是如何持久化数据的\"><a href=\"#Kafka-Broker-是如何持久化数据的\" class=\"headerlink\" title=\"Kafka Broker 是如何持久化数据的\"></a>Kafka Broker 是如何持久化数据的</h3><ul>\n<li>Kafka 使用消息日志（Log）来保存数据，一个日志就是磁盘上一个只能追加写（Append-only）消息的物理文件。</li>\n</ul>\n<blockquote>\n<p>因为只能追加写入，故避免了缓慢的随机 I/O 操作，改为性能较好的顺序 I/O 写操作，<strong>这也是实现 Kafka 高吞吐量特性的一个重要手段。</strong></p>\n</blockquote>\n<ul>\n<li>日志段（Log Segment）机制<ul>\n<li>在 Kafka 底层，一个日志又近一步细分成多个日志段，消息被追加写到当前最新的日志段中，当写满了一个日志段后，Kafka 会自动切分出一个新的日志段，并将老的日志段封存起来。Kafka 在后台还有定时任务会定期地检查老的日志段是否能够被删除，从而实现回收磁盘空间的目的。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"消费者组\"><a href=\"#消费者组\" class=\"headerlink\" title=\"消费者组\"></a>消费者组</h3><ul>\n<li>Kafka 中实现这种 P2P 模型的方法就是引入了消费者组（Consumer Group）。</li>\n</ul>\n<blockquote>\n<p>所谓的消费者组，指的是多个消费者实例共同组成一个组来消费一组主题。这组主题中的每个分区都只会被组内的一个消费者实例消费，其他消费者实例不能消费它。为什么要引入消费者组呢？主要是为了提升消费者端的吞吐量。多个消费者实例同时消费，加速整个消费端的吞吐量（TPS）。</p>\n</blockquote>\n<blockquote>\n<p>这里的消费者实例可以是运行消费者应用的进程，也可以是一个线程，它们都称为一个消费者实例（Consumer Instance）。</p>\n</blockquote>\n<br>\n\n<h3 id=\"重平衡\"><a href=\"#重平衡\" class=\"headerlink\" title=\"重平衡\"></a>重平衡</h3><blockquote>\n<p>消费者组里面的所有消费者实例不仅“瓜分”订阅主题的数据，而且更酷的是它们还能彼此协助。</p>\n</blockquote>\n<ul>\n<li>假设组内某个实例挂掉了，Kafka 能够自动检测到，然后把这个 Failed 实例之前负责的分区转移给其他活着的消费者。这个过程就是 Kafka 中大名鼎鼎的“重平衡”（Rebalance）。</li>\n</ul>\n<blockquote>\n<p>由重平衡引发的消费者问题比比皆是。事实上，目前很多重平衡的 Bug 社区都无力解决。</p>\n</blockquote>\n<br>\n\n<ul>\n<li>每个消费者在消费消息的过程中必然需要有个字段记录它当前消费到了分区的哪个位置上，这个字段就是消费者位移（Consumer Offset）。</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"03-Kafka只是消息引擎系统吗？\"><a href=\"#03-Kafka只是消息引擎系统吗？\" class=\"headerlink\" title=\"03 | Kafka只是消息引擎系统吗？\"></a>03 | Kafka只是消息引擎系统吗？</h2><p><strong>有的时候我们会觉得说了解一个系统或框架的前世今生似乎没什么必要，直接开始学具体的技术不是更快更好吗？其实，不论是学习哪种技术，直接扎到具体的细节中，亦或是从一个很小的点开始学习，你很快就会感到厌烦。为什么呢？因为你虽然快速地搞定了某个技术细节，但无法建立全局的认知观，这会导致你只是在单个的点上有所进展，却没法将其串联成一条线进而扩展成一个面，从而实现系统地学习。</strong></p>\n<ul>\n<li><strong>Apache Kafka 是消息引擎系统，也是一个分布式流处理平台</strong>（Distributed Streaming Platform）</li>\n</ul>\n<br>\n\n<ul>\n<li>Kafka 在设计之初就旨在提供三个方面的特性：<ul>\n<li>提供一套 API 实现生产者和消费者；</li>\n<li>降低网络传输和磁盘存储开销；</li>\n<li>实现高伸缩性架构。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<blockquote>\n<p>开源之后的 Kafka 被越来越多的公司应用到它们企业内部的数据管道中，特别是在大数据工程领域，Kafka 在承接上下游、串联数据流管道方面发挥了重要的作用：所有的数据几乎都要从一个系统流入 Kafka 然后再流向下游的另一个系统中。这样的使用方式屡见不鲜以至于引发了 Kafka 社区的思考：与其我把数据从一个系统传递到下一个系统中做处理，我为何不自己实现一套流处理框架呢？基于这个考量，Kafka 社区于 0.10.0.0 版本正式推出了流处理组件 Kafka Streams，也正是从这个版本开始，Kafka 正式“变身”为分布式的流处理平台，而不仅仅是消息引擎系统了。今天 Apache Kafka 是和 Apache Storm、Apache Spark 和 Apache Flink 同等级的实时流处理平台。</p>\n</blockquote>\n<br>\n\n<h3 id=\"Kafka-与其他主流大数据流式计算框架相比的优势\"><a href=\"#Kafka-与其他主流大数据流式计算框架相比的优势\" class=\"headerlink\" title=\"Kafka 与其他主流大数据流式计算框架相比的优势\"></a>Kafka 与其他主流大数据流式计算框架相比的优势</h3><ul>\n<li><strong>第一点是更容易实现端到端的正确性（Correctness）</strong>。<ul>\n<li><strong>要实现正确性和提供能够推导时间的工具。实现正确性是流处理能够匹敌批处理的基石</strong>。</li>\n</ul>\n</li>\n<li><strong>对于流式计算的定位</strong><ul>\n<li>需要自己选择适合的工具或系统来帮助 Kafka 流处理应用实现这些功能</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"04-我应该选择哪种Kafka？\"><a href=\"#04-我应该选择哪种Kafka？\" class=\"headerlink\" title=\"04 | 我应该选择哪种Kafka？\"></a>04 | 我应该选择哪种Kafka？</h2><h3 id=\"Kafka-Connect\"><a href=\"#Kafka-Connect\" class=\"headerlink\" title=\"Kafka Connect\"></a>Kafka Connect</h3><ul>\n<li>Kafka Connect 通过一个个具体的连接器（Connector），串联起上下游的外部系统。</li>\n</ul>\n<br>\n\n<ul>\n<li>Kafka Connect 组件支持的一部分外部系统，如下图</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6ktbply8no00.webp\" width=\"60%\">\n\n<br>\n\n<h3 id=\"Kafka种类\"><a href=\"#Kafka种类\" class=\"headerlink\" title=\"Kafka种类\"></a>Kafka种类</h3><h4 id=\"Apache-Kafka\"><a href=\"#Apache-Kafka\" class=\"headerlink\" title=\"Apache Kafka\"></a><strong>Apache Kafka</strong></h4><ul>\n<li>Apache Kafka 是最“正宗”的 Kafka，也应该是你最熟悉的发行版了。自 Kafka 开源伊始，它便在 Apache 基金会孵化并最终毕业成为顶级项目，它也被称为社区版 Kafka。<ul>\n<li>后面提到的发行版要么是原封不动地继承了 Apache Kafka，要么是在此之上扩展了新功能</li>\n<li>开发人数最多、版本迭代速度最快的 Kafka。社区活跃</li>\n<li>劣势：仅仅提供最最基础的组件<ul>\n<li>社区版 Kafka 只提供一种连接器，即读写磁盘文件的连接器，而没有与其他外部系统交互的连接器，在实际使用过程中需要自行编写代码实现</li>\n</ul>\n</li>\n<li>Apache Kafka 没有提供任何监控框架或工具。必然需要借助第三方的监控框架实现对 Kafka 的监控。（好消息是目前有一些开源的监控框架可以帮助用于监控 Kafka（比如 Kafka manager））</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>如果你仅仅需要一个消息引擎系统亦或是简单的流处理应用场景，同时需要对系统有较大把控度，推荐你使用 Apache Kafka。</strong></li>\n</ul>\n<br>\n\n<h4 id=\"Confluent-Kafka\"><a href=\"#Confluent-Kafka\" class=\"headerlink\" title=\"Confluent Kafka\"></a><strong>Confluent Kafka</strong></h4><ul>\n<li>Confluent 公司，它主要从事商业化 Kafka 工具开发，并在此基础上发布了 Confluent Kafka。Confluent Kafka 提供了一些 Apache Kafka 没有的高级特性，比如跨数据中心备份、Schema 注册中心以及集群监控工具等。</li>\n<li>Confluent Kafka 目前分为免费版和企业版两种。前者和 Apache Kafka 非常相像，除了常规的组件之外，免费版还包含 Schema 注册中心和 REST proxy 两大功能。前者是帮助你集中管理 Kafka 消息格式以实现数据前向 / 后向兼容；后者用开放 HTTP 接口的方式允许你通过网络访问 Kafka 的各种功能，这两个都是 Apache Kafka 所没有的。</li>\n<li>免费版包含了更多的连接器，它们都是 Confluent 公司开发并认证过的，你可以免费使用它们。至于企业版，它提供的功能就更多了。在我看来，最有用的当属跨数据中心备份和集群监控两大功能了。多个数据中心之间数据的同步以及对集群的监控历来是 Kafka 的痛点，Confluent Kafka 企业版提供了强大的解决方案帮助你“干掉”它们。</li>\n<li>Confluent 公司暂时没有发展国内业务的计划，相关的资料以及技术支持都很欠缺，很多国内 Confluent Kafka 使用者甚至无法找到对应的中文文档，因此目前 Confluent Kafka 在国内的普及率是比较低的。</li>\n</ul>\n<br>\n\n<h4 id=\"Cloudera-Hortonworks-Kafka\"><a href=\"#Cloudera-Hortonworks-Kafka\" class=\"headerlink\" title=\"Cloudera/Hortonworks Kafka\"></a><strong>Cloudera/Hortonworks Kafka</strong></h4><ul>\n<li>Cloudera 提供的 CDH 和 Hortonworks 提供的 HDP 是非常著名的大数据平台，里面集成了目前主流的大数据框架，能够帮助用户实现从分布式存储、集群调度、流处理到机器学习、实时数据库等全方位的数据处理。很多创业公司在搭建数据平台时首选就是这两个产品。不管是 CDH 还是 HDP 里面都集成了 Apache Kafka，因此我把这两款产品中的 Kafka 称为 CDH Kafka 和 HDP Kafka。</li>\n<li>Kafka（CDH/HDP Kafka）。这些大数据平台天然集成了 Apache Kafka，通过便捷化的界面操作将 Kafka 的安装、运维、管理、监控全部统一在控制台中。</li>\n<li>降低了你对 Kafka 集群的掌控程度。</li>\n<li>滞后：由于它有自己的发布周期，因此是否能及时地包含最新版本的 Kafka 就成为了一个问题。</li>\n</ul>\n<br>\n\n<ul>\n<li><strong>如果需要快速地搭建消息引擎系统，或者你需要搭建的是多框架构成的数据平台且 Kafka 只是其中一个组件，那么我推荐你使用这些大数据云公司提供的 Kafka。</strong></li>\n</ul>\n<br>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li>Apache Kafka，也称社区版 Kafka。优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度；缺陷在于仅提供基础核心组件，缺失一些高级的特性。</li>\n<li>Confluent Kafka，Confluent 公司提供的 Kafka。优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。</li>\n<li>CDH/HDP Kafka，大数据云公司提供的 Kafka，内嵌 Apache Kafka。优势在于操作简单，节省运维成本；缺陷在于把控度低，演进速度较慢。</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"05-聊聊Kafka的版本号\"><a href=\"#05-聊聊Kafka的版本号\" class=\"headerlink\" title=\"05 | 聊聊Kafka的版本号\"></a>05 | 聊聊Kafka的版本号</h2><ul>\n<li>评判某 Kafka 版本是不是满足业务需求，就需要了解各个版本之间的差异和功能变化</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka-版本命名\"><a href=\"#Kafka-版本命名\" class=\"headerlink\" title=\"Kafka 版本命名\"></a>Kafka 版本命名</h3><ul>\n<li>kafka-2.11-2.1.1<ul>\n<li>前面的版本号是编译 Kafka 源代码的 Scala 编译器版本。（Kafka 服务器端的代码完全由 Scala 语言编写）</li>\n<li>真正的 Kafka 版本号实际上是 2.1.1<ul>\n<li>前面的 2 表示大版本号，即 Major Version；中间的 1 表示小版本号或次版本号，即 Minor Version；最后的 1 表示修订版本号，也就是 Patch 号。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Kafka 社区在发布 1.0.0 版本后特意写过一篇文章，宣布 Kafka 版本命名规则正式从 4 位演进到 3 位，比如 0.11.0.0 版本就是 4 位版本号。<ul>\n<li>假设碰到的 Kafka 版本是 0.10.2.2，你现在就知道了它的大版本是 0.10，小版本是 2，总共打了两个大的补丁，Patch 号是 2。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"Kafka-版本演进\"><a href=\"#Kafka-版本演进\" class=\"headerlink\" title=\"Kafka 版本演进\"></a>Kafka 版本演进</h3><ul>\n<li>Kafka 目前总共演进了 7 个大版本，分别是 0.7、0.8、0.9、0.10、0.11、1.0 和 2.0，其中的小版本和 Patch 版本很多。</li>\n</ul>\n<br>\n\n<ul>\n<li>0.7 版本<ul>\n<li>最早开源时的“上古”版本。这个版本只提供了最基础的消息队列功能，甚至连副本机制都没有</li>\n</ul>\n</li>\n<li>0.8<ul>\n<li>正式引入了<strong>副本机制</strong>，至此 Kafka 成为了一个真正意义上完备的分布式高可靠消息队列解决方案。有了副本备份机制，Kafka 就能够比较好地做到消息无丢失。那时候生产和消费消息使用的还是老版本的客户端 API，所谓的老版本是指当你用它们的 API 开发生产者和消费者应用时，你需要指定 ZooKeeper 的地址而非 Broker 的地址。</li>\n<li>老版本客户端有很多的问题，特别是生产者 API，它默认使用同步方式发送消息，可以想见其吞吐量一定不会太高。虽然它也支持异步的方式，但实际场景中可能会造成消息的丢失，因此 0.8.2.0 版本社区引入了<strong>新版本 Producer API</strong>，即需要指定 Broker 地址的 Producer。</li>\n<li>国内依然有少部分用户在使用 0.8.1.1、0.8.2 版本。<strong>建议是尽量使用比较新的版本。如果不能升级大版本，也建议至少要升级到 0.8.2.2 这个版本，因为该版本中老版本消费者 API 是比较稳定的。另外即使升到了 0.8.2.2，也不要使用新版本 Producer API，此时它的 Bug 还非常多。</strong></li>\n</ul>\n</li>\n<li>0.9.0.0 版本<ul>\n<li>2015 年 11 月，社区正式发布了 0.9.0.0 版本。</li>\n<li>0.9 大版本增加了基础的安全认证 / 权限功能，同时使用 Java 重写了新版本消费者 API，另外还引入了 Kafka Connect 组件用于实现高性能的数据抽取。</li>\n<li><strong>新版本 Producer API 在这个版本中算比较稳定了</strong>。</li>\n</ul>\n</li>\n<li>0.10.0.0<ul>\n<li>0.10.0.0 是里程碑式的大版本，因为该版本<strong>引入了 Kafka Streams</strong>。从这个版本起，Kafka 正式升级成分布式流处理平台，虽然此时的 Kafka Streams 还基本不能线上部署使用。</li>\n<li><strong>如果你依然在使用 0.10 大版本，我强烈建议你至少升级到 0.10.2.2 然后使用新版本 Consumer API。还有个事情不得不提，0.10.2.2 修复了一个可能导致 Producer 性能降低的 Bug。基于性能的缘故你也应该升级到 0.10.2.2。</strong></li>\n</ul>\n</li>\n<li>0.11.0.0 版本<ul>\n<li>2017 年 6 月，社区发布了 0.11.0.0 版本，引入了两个重量级的功能变更：一个是提供幂等性 Producer API 以及事务（Transaction） API；另一个是对 Kafka 消息格式做了重构。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>不论你用的是哪个版本，都请尽量保持服务器端版本和客户端版本一致，否则你将损失很多 Kafka 为你提供的性能优化收益。</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Kafka的基本使用-3讲\"><a href=\"#Kafka的基本使用-3讲\" class=\"headerlink\" title=\"Kafka的基本使用 (3讲)\"></a>Kafka的基本使用 (3讲)</h1><h2 id=\"06-Kafka线上集群部署方案怎么做？\"><a href=\"#06-Kafka线上集群部署方案怎么做？\" class=\"headerlink\" title=\"06 | Kafka线上集群部署方案怎么做？\"></a>06 | Kafka线上集群部署方案怎么做？</h2><br>\n\n<br>\n\n<br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;emsp;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"60%\">\n\n<br>"},{"title":"《MySQL 必知必会》study notes","author":"ratears","date":"2022-06-04T06:56:48.000Z","updated":"2022-06-04T06:56:48.000Z","_content":"\n# 前言\n\n- 近期学习了极客时间的专栏《MySQL 必知必会》，对专栏的核心知识做了学习笔记，便于参考及查漏补缺\n\n<br>\n\n<br>\n\n<br>\n\n# 课前准备 (2讲)\n\n## 开篇词-在实战中学习，是解锁MySQL技能的最佳方法\n\n- 熟练使用MySQL，对技术人来说变得越来越重要，是我们拿到心仪Offer的敲门砖\n- <font color=\"red\">**最重要的绝对不是你的知识储备量，而是你解决实际问题的能力**</font>\n- **正确的学习方法，远比你投入的时间更重要**。而实战，就是最高效的方法\n- **项目的实际需求-->解决问题所需的知识点-->用好这些知识的实战经验**\n\n<br>\n\n<br>\n\n<br>\n\n# 实践篇 (13讲)\n\n## 01 | 存储：一个完整的数据存储过程是怎样的？\n\n- 一个完整的**数据存储过程总共有4步，分别是创建数据库、确认字段、创建数据表、插入数据**\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4qktlsqna5y0.webp\" width=\"65%\"/>\n\n\n\n- MySQL数据库系统从大到小依次是：数据库服务器、数据库、数据表、数据表的行与列\n- **数据库是MySQL里面最大的存储单元** \n\n<br>\n\n<br>\n\n## ① 创建数据库\n\n```mysql\n# 创建数据库\nCREATE DATABASE `demo`  DEFAULT CHARACTER SET utf8mb4;\n\n# 查看数据库\nmysql> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| demo               |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.00 sec)\n```\n\n- “information_schema”是MySQL系统自带的数据库，主要保存MySQL数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件所在的文件夹和系统使用的文件夹，等等。\n- “performance_schema”是MySQL系统自带的数据库，可以用来监控MySQL的各类性能指标\n- “sys”数据库是MySQL系统自带的数据库，主要作用是，以一种更容易被理解的方式展示MySQL数据库服务器的各类性能指标，帮助系统管理员和开发人员监控MySQL的技术性能\n- “mysql”数据库保存了MySQL数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等\n\n- 想深入了解MySQL数据库系统的相关信息，可以看下[官方文档](https://dev.mysql.com/doc/refman/8.0/en/system-schema.html)\n\n<br>\n\n<br>\n\n## ② 确认字段\n\n- MySQL会让我们确认新表中有哪些列，以及它们的数据类型。这些列就是MySQL数据表的字段\n\n<br>\n\n<br>\n\n## ③ 创建数据表\n\n- **创建表的时候，最好指明数据库**\n\n```mysql\nCREATE TABLE demo.test\n( \n  barcode text,\n  goodsname text,\n  price int\n); \n```\n\n<br>\n\n### 查看表的结构\n\n```mysql\n# 查看表的结构\nmysql> describe demo.test;\n+-----------+------+------+-----+---------+-------+\n| Field     | Type | Null | Key | Default | Extra |\n+-----------+------+------+-----+---------+-------+\n| barcode   | text | YES  |     | NULL    |       |\n| goodsname | text | YES  |     | NULL    |       |\n| price     | int  | YES  |     | NULL    |       |\n+-----------+------+------+-----+---------+-------+\n3 rows in set (0.01 sec)\n```\n\n- Field：表示字段名称\n- Type：表示字段类型\n- Null：表示这个字段是否允许是空值（NULL）。注意，**在MySQL里面，空值不等于空字符串。一个空字符串的长度是0，而一个空值的长度是空。而且，在MySQL里面，空值是占用空间的。**\n- Key：我们暂时把它叫做键。\n- Default：表示默认值。\n- Extra：表示附加信息。\n\n<br>\n\n### 查看数据库中的表\n\n```mysql\nUSE demo;\nSHOW TABLES;\n```\n\n<br>\n\n### 设置主键\n\n- MySQL中数据表的主键，是表中的一个字段或者几个字段的组合。它主要有3个特征：\n  - 必须唯一，不能重复；\n  - 不能是空；\n  - 必须可以唯一标识数据表中的记录\n\n> 一个MySQL数据表中只能有一个主键。虽然MySQL也允许创建没有主键的表，但是，**建议一定要给表定义主键，并且养成习惯。因为主键可以帮助减少错误数据，并且提高查询的速度**\n\n```mysql\n# 如果数据表中所有的字段都有重复的可能。我们可以自己添加一个不会重复的字段来做主键\nALTER TABLE demo.test ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;\n```\n\n<br>\n\n<br>\n\n## ④ 插入数据\n\n```mysql\nINSERT INTO demo.test VALUES ('003','橡皮',3);\n```\n\n- 要插入数据的字段名也可以不写，但是建议不要怕麻烦，**一定要每次都写**。这样做的好处是可读性好，不易出错，而且容易修改。否则，如果记不住表的字段，就只能去查表的结构，才能知道值所对应的字段了。\n- 由于字段itemnumber定义了AUTO_INCREMENT，所以我们插入一条记录的时候，不给它赋值，系统也会自动给它赋值。而且，每次赋值，都会在上次的赋值基础上，自动增加1。也可以在插入一条记录的时候给itemnumber 赋值，由于它是主键，新的值必须与已有记录的itemnumber值不同，否则系统会提示错误。\n\n<br>\n\n<br>\n\n## 小结（sql汇总）\n\n```mysql\n-- 创建数据库\nCREATE DATABASE demo；\n-- 删除数据库\nDROP DATABASE demo；\n-- 查看数据库\nSHOW DATABASES;\n-- 创建数据表：\nCREATE TABLE demo.test\n(  \n  barcode text,\n  goodsname text,\n  price int\n); \n-- 查看表结构\nDESCRIBE demo.test;\n-- 查看所有表\nDESCRIBE TABLES;\n-- 添加主键\nALTER TABLE demo.test\nADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;\n-- 向表中添加数据\nINSERT INTO demo.test\n(barcode,goodsname,price)\nVALUES ('0001','本',3);\n```\n\n<br>\n\n<br>\n\n## 02 | 字段：这么多字段类型，该怎么定义？\n\n> MySQL中有很多字段类型，比如整数、文本、浮点数，等等。如果类型定义合理，就能节省存储空间，提升数据查询和处理的速度，相反，如果数据类型定义不合理，就有可能会导致数据超出取值范围，引发系统报错，甚至可能会出现计算错误的情况，进而影响到整个系统。\n\n<br>\n\n<br>\n\n### 整数类型\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5qvu0awjo5s0.webp\" width=\"75%\"/>\n\n\n\n- 在评估用哪种整数类型的时候，**需要考虑存储空间和可靠性的平衡问题**：一方面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间，使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起系统错误，影响可靠性。\n\n- 最佳实践\n  - 在评估用哪种整数类型的时候，**需要考虑存储空间和可靠性的平衡问题**（在实际工作中，系统故障产生的成本远远超过增加几个字段存储空间所产生的成本）\n  - **确保数据不会超过取值范围**，再去考虑如何节省存储空间\n\n<br>\n\n<br>\n\n### 浮点数类型和定点数类型\n\n> 可以把整数看成小数的一个特例\n\n- FLOAT表示单精度浮点数\n- DOUBLE表示双精度浮点数\n- REAL默认就是DOUBLE。如果你把SQL模式设定为启用“REAL_AS_FLOAT”，那么，MySQL就认为REAL是FLOAT\n\n```mysql\n# 如果要启用“REAL_AS_FLOAT”，就可以通过以下SQL语句实现：\nSET sql_mode = “REAL_AS_FLOAT”;\n```\n\n- FLOAT占用字节数少，取值范围小；DOUBLE占用字节数多，取值范围也大\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3rxrxdypui80.webp\" width=\"70%\" />\n\n\n\n- 为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？\n\n> 原因是：MySQL是按照这个格式存储浮点数的：符号（S）、尾数（M）和阶码（E）。因此，无论有没有符号，MySQL的浮点数都会存储表示符号的部分。因此，所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。\n\n<br>\n\n#### 浮点数类型有缺陷：不精准\n\n- 不精准问题原因在于：**MySQL对浮点类型数据的存储方式上**\n\n> MySQL用4个字节存储FLOAT类型数据，用8个字节来存储DOUBLE类型数据。无论哪个，都是采用二进制的方式来进行存储的。比如9.625，用二进制来表达，就是1001.101，或者表达成1.001101×2^3。看到了吗？如果尾数不是0或5（比如9.624），你就无法用一个二进制数来精确表达。怎么办呢？就只好在取值允许的范围内进行近似（四舍五入）。\n>\n\n- 为什么数据类型是DOUBLE的时候，计算结果误差比FLOAT小一点？\n\n> 原因：DOUBLE有8位字节，精度更高\n\n<br>\n\n#### **定点数类型：DECIMAL**\n\n- DECIMAL的存储方式决定了它一定是精准的\n\n> 浮点数类型是把十进制数转换成二进制数存储，DECIMAL则不同，它是把十进制数的整数部分和小数部分拆开，分别转换成十六进制数，进行存储。这样，所有的数值，就都可以精准表达了，不会存在因为无法表达而损失精度的问题\n\n\n\n#### 小结：浮点数和定点数的特点/适用场景/最佳实践\n\n> 浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）；定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景（比如涉及金额计算的场景）\n\n<br>\n\n### 文本类型\n\n- CHAR(M)：固定长度字符串。CHAR(M)类型必须预先定义字符串长度。如果太短，数据可能会超出范围；如果太长，又浪费存储空间。\n- VARCHAR(M)： 可变长度字符串。VARCHAR(M)也需要预先知道字符串的最大长度，不过只要不超过这个最大长度，具体存储的时候，是按照实际字符串长度存储的。\n- TEXT：字符串。系统自动按照实际长度存储，不需要预先定义长度。\n- ENUM： 枚举类型，取值必须是预先设定的一组字符串值范围之内的一个，必须要知道字符串所有可能的取值。\n- SET：是一个字符串对象，取值必须是在预先设定的字符串值范围之内的0个或多个，也必须知道字符串所有可能的取值。\n\n\n\n- TEXT类型也有4种，它们的区别就是最大长度不同。\n\n  - TINYTEXT：占用255字符。\n\n  - TEXT： 占用65535字符。\n\n  - MEDIUMTEXT：占用16777215字符。\n\n  - LONGTEXT： 占用4294967295字符（相当于4GB）\n\n- TEXT类型存在的问题：**由于实际存储的长度不确定，MySQL不允许TEXT类型的字段做主键。遇到这种情况，你只能采用CHAR(M)，或者VARCHAR(M)**\n\n- 最佳实践\n  - 项目中，只要不是主键字段，就可以按照数据可能的最大长度，选择这几种TEXT类型中的的一种，作为存储字符串的数据类型\n\n<br>\n\n<br>\n\n### 日期与时间类型\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4fo8vblt22w0.webp\" width=\"70%\" />\n\n- 最佳实践\n\n> **在实际项目中，尽量用DATETIME类型**。因为这个数据类型包括了完整的日期和时间信息，使用起来比较方便\n>\n> 为了确保数据的完整性和系统的稳定性，优先考虑使用DATETIME类型。因为虽然DATETIME类型占用的存储空间最多，但是它表达的时间最为完整，取值范围也最大\n\n\n\n- 为什么时间类型TIME的取值范围不是-23:59:59～23:59:59呢\n\n> 原因是MySQL设计的TIME类型，不光表示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过24小时。\n\n\n\n#### 小结\n\n```mysql\n-- 修改字段类型语句\nALTER TABLE demo.goodsmaster\nMODIFY COLUMN price DOUBLE;\n-- 计算字段合计函数：\nSELECT SUM(price)\nFROM demo.goodsmaster;\n```\n\n\n\n> 在定义数据类型时，如果确定是整数，就用INT；如果是小数，一定用定点数类型DECIMAL；如果是字符串，只要不是主键，就用TEXT；如果是日期与时间，就用DATETIME。（首先确保你的系统不会因为数据类型定义出错。）\n\n<br>\n\n<br>\n\n## 03 | 表：怎么创建和修改数据表？\n\n### 创建数据表\n\n```mysql\nCREATE TABLE <表名>\n{\n字段名1 数据类型 [字段级别约束] [默认值]，\n字段名2 数据类型 [字段级别约束] [默认值]，\n......\n[表级别约束]\n};\n```\n\n- **“约束”限定了表中数据应该满足的条件**\n- MySQL会根据这些限定条件，对表的操作进行监控，阻止破坏约束条件的操作执行，并提示错误，从而确保表中数据的唯一性、合法性和完整性\n\n<br>\n\n<br>\n\n### 都有哪些约束\n\n**1.非空约束**\n\n- 非空约束表示字段值不能为空\n\n**2.唯一性约束**\n\n- 唯一性约束表示这个字段的值不能重复。**满足主键约束的字段，自动满足非空约束，但是满足唯一性约束的字段，则可以是空值**\n\n**3.自增约束**\n\n- 在数据表中，只有整数类型的字段（包括TINYINT、SMALLINT、MEDIUMINT、INT和BIGINT），才可以定义自增约束。自增约束的字段，每增加一条数据，值自动增加1。\n- 给自增约束的字段赋值，这个时候，MySQL会重置自增约束字段的自增基数，下次添加数据的时候，自动以自增约束字段的最大值加1为新的字段值。\n\n<br>\n\n<br>\n\n### 如何修改表\n\n```mysql\nCREATE demo.importheadhist\nLIKE demo.importhead;\n\nALTER TABLE demo.importheadhist ADD confirmer INT;\n\nALTER TABLE demo.importheadhist ADD confirmdate DATETIME;\n```\n\n<br>\n\n<br>\n\n### 修改字段\n\n- change 可以更改列名 和 列类型 (每次都要把新列名和旧列名写上, 即使两个列名没有更改,只是改了类型)\n- modify 只能更改列属性 只需要写一次列名, 比change 省事点\n\n```mysql\n-- modify 能修改字段类型、类型长度、默认值、注释\nALTER  TABLE 表名 MODIFY [COLUMN] 字段名 新数据类型 新类型长度  新默认值  新注释;\n\nALTER  TABLE 表名 CHANGE [column] 旧字段名 新字段名 新数据类型;\n\n-- 指定添加字段在表中位置\nALTER TABLE demo.importheadhist ADD suppliername TEXT AFTER supplierid;\n```\n\n<br>\n\n<br>\n\n### 小结\n\n```mysql\nCREATE TABLE\n(\n字段名 字段类型 PRIMARY KEY\n);\nCREATE TABLE\n(\n字段名 字段类型 NOT NULL\n);\nCREATE TABLE\n(\n字段名 字段类型 UNIQUE\n);\nCREATE TABLE\n(\n字段名 字段类型 DEFAULT 值\n);\n-- 这里要注意自增类型的条件，字段类型必须是整数类型。\nCREATE TABLE\n(\n字段名 字段类型 AUTO_INCREMENT\n);\n-- 在一个已经存在的表基础上，创建一个新表\nCREATE demo.importheadhist LIKE demo.importhead;\n-- 修改表的相关语句\nALTER TABLE 表名 CHANGE 旧字段名 新字段名 数据类型;\nALTER TABLE 表名 ADD COLUMN 字段名 字段类型 FIRST|AFTER 字段名;\nALTER TABLE 表名 MODIFY 字段名 字段类型 FIRST|AFTER 字段名;\n```\n\n<br>\n\n<br>\n\n## 04 | 增删改查：如何操作表中的数据？\n\n### 添加数据\n\n```mysql\nINSERT INTO 表名 [(字段名 [,字段名] ...)] VALUES (值的列表);\n```\n\n<br>\n\n<br>\n\n### 插入数据记录\n\n- **部分插入一条数据记录是可以的，但前提是，没有赋值的字段，一定要让MySQL知道如何处理，比如可以为空、有默认值，或者是自增约束字段，等等，否则，MySQL会提示错误的**\n\n<br>\n\n<br>\n\n### 插入查询结果\n\n```mysql\nINSERT INTO 表名 （字段名）\nSELECT 字段名或值\nFROM 表名\nWHERE 条件\n```\n\n<br>\n\n<br>\n\n### 删除数据\n\n```mysql\nDELETE FROM 表名 WHERE 条件\n```\n\n<br>\n\n<br>\n\n### 修改数据\n\n```mysql\nUPDATE 表名 SET 字段名=值 WHERE 条件\n```\n\n- **不要修改主键字段的值**，如果你必须要修改主键的值，那有可能就是主键设置得不合理\n\n<br>\n\n<br>\n\n### 查询数据\n\n```mysql\nSELECT *|字段列表\nFROM 数据源\nWHERE 条件\nGROUP BY 字段\nHAVING 条件\nORDER BY 字段\nLIMIT 起始点，行数\n\n-- GROUP BY：作用是告诉MySQL，查询结果要如何分组，经常与MySQL的聚合函数一起使用\n-- HAVING：用于筛选查询结果，跟WHERE类似\n```\n\n<br>\n\n<br>\n\n### 小结\n\n```mysql\nINSERT INTO 表名 [(字段名 [,字段名] ...)] VALUES (值的列表);\n \nINSERT INTO 表名 （字段名）\nSELECT 字段名或值\nFROM 表名\nWHERE 条件\n \nDELETE FROM 表名\nWHERE 条件\n \nUPDATE 表名\nSET 字段名=值\nWHERE 条件\n\nSELECT *|字段列表\nFROM 数据源\nWHERE 条件\nGROUP BY 字段\nHAVING 条件\nORDER BY 字段\nLIMIT 起始点，行数\n```\n\n- 如果我们把查询的结果插入到表中时，导致主键约束或者唯一性约束被破坏了，就可以用“ON DUPLICATE”关键字进行处理。这个关键字的作用是，告诉MySQL，如果遇到重复的数据，该如何处理。\n\n```mysql\nINSERT INTO demo.goodsmaster \nSELECT *\nFROM demo.goodsmaster1 as a\nON DUPLICATE KEY UPDATE barcode = a.barcode,goodsname=a.goodsname;\n```\n\n<br>\n\n<br>\n\n# 05 | 主键：如何正确设置主键？\n\n### 业务字段做主键\n\n- **尽量不要用业务字段，也就是跟业务有关的字段做主键**。毕竟，作为项目设计的技术人员，我们谁也无法预测在项目的整个生命周期中，哪个业务字段会因为项目的业务需求而有重复，或者重用之类的情况出现\n\n<br>\n\n### 使用自增字段做主键\n\n```mysql\nUPDATE demo.trans AS a,demo.membermaster AS b\nSET a.memberid=b.id\nWHERE a.transactionno > 0  \nAND a.cardno = b.cardno; \n-- 这样操作可以不用删除trans的内容，在实际工作中更适合\n```\n\n- 如果是一个小项目，只有一个MySQL数据库服务器，用添加自增字段作为主键的办法是可以的。不过，这并不意味着，在任何情况下你都可以这么做\n- **自增字段做主键，对于单机系统来说是没问题的。但是，如果有多台服务器，各自都可以录入数据，那就不一定适用了。因为如果每台机器各自产生的数据需要合并，就可能会出现主键重复的问题**\n\n<br>\n\n### 手动赋值字段做主键\n\n- **我们可以采用手动赋值的办法，通过一定的逻辑，确保字段值在全系统的唯一性，这样就可以规避主键重复的问题了**\n\n> 取消字段“id”的自增属性，改成信息系统在添加会员的时候对“id”进行赋值。\n>\n> 门店在添加会员的时候，先到总部MySQL数据库中获取这个最大值，在这个基础上加1，然后用这个值作为新会员的“id”，同时，更新总部MySQL数据库管理信息表中的当前会员编号的最大值\n>\n> 各个门店添加会员的时候，都对同一个总部MySQL数据库中的数据表字段进行操作，就解决了各门店添加会员时会员编号冲突的问题，同时也避免了使用业务字段导致数据错误的问题\n\n<br>\n\n### 最佳实践\n\n- 刚开始使用MySQL时，很多人都很容易犯的错误是喜欢用业务字段做主键，想当然地认为了解业务需求，但实际情况往往出乎意料，而更改主键设置的成本非常高。所以，如果你的系统比较复杂，尽量给表加一个字段做主键，采用手动赋值的办法，虽然系统开发的时候麻烦一点，却可以避免后面出大问题。\n\n<br>\n\n<br>\n\n# 06 | 外键和连接：如何做关联查询？\n\n- **把分散在多个不同的表里的数据查询出来的操作，就是多表查询**\n\n<br>\n\n### 创建外键\n\n- **外键就是从表中用来引用主表中数据的那个公共字段**\n\n> 在MySQL中，外键是通过外键约束来定义的。外键约束就是约束的一种，它必须在从表中定义，包括指明哪个是外键字段，以及外键字段所引用的主表中的主键字段是什么。MySQL系统会根据外键约束的定义，监控对主表中数据的删除操作。如果发现要删除的主表记录，正在被从表中某条记录的外键字段所引用，MySQL就会提示错误，从而确保了关联数据不会缺失。\n\n```mysql\n\n-- 外键约束定义的语法结构\n[CONSTRAINT <外键约束名称>] FOREIGN KEY 字段名\nREFERENCES <主表名> 字段名\n\n-- 外键约束可以在创建表的时候定义\nCREATE TABLE 从表名\n(\n  字段名 类型,\n  ...\n-- 定义外键约束，指出外键字段和参照的主表字段\nCONSTRAINT 外键约束名\nFOREIGN KEY (字段名) REFERENCES 主表名 (字段名)\n)\n\n-- 可以通过修改表来定义。\nALTER TABLE 从表名 ADD CONSTRAINT 约束名 FOREIGN KEY 字段名 REFERENCES 主表名 （字段名）;\n```\n\n<br>\n\n### 连接\n\n- MySQL中，有2种类型的连接，分别是内连接（INNER JOIN）和外连接（OUTER JOIN\n  - 内连接表示查询结果只返回符合连接条件的记录\n  - 外连接则不同，表示查询结果返回某一个表中的所有记录，以及另一个表中满足连接条件的记录\n    - 左连接，一般简写成LEFT JOIN，返回左边表中的所有记录，以及右表中符合连接条件的记录。\n    - 右连接，一般简写成RIGHT JOIN，返回右边表中的所有记录，以及左表中符合连接条件的记录\n\n- 在MySQL里面，关键字JOIN、INNER JOIN、CROSS JOIN的含义是一样的，都表示内连接\n\n\n\n> 大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以，MySQL允许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。\n\n<br>\n\n### 小结\n\n```mysql\n-- 定义外键约束：\nCREATE TABLE 从表名\n(\n字段 字段类型\n....\nCONSTRAINT 外键约束名称\nFOREIGN KEY (字段名) REFERENCES 主表名 (字段名称)\n);\nALTER TABLE 从表名 ADD CONSTRAINT 约束名 FOREIGN KEY 字段名 REFERENCES 主表名 （字段名）;\n\n-- 连接查询\nSELECT 字段名\nFROM 表名 AS a\nJOIN 表名 AS b\nON (a.字段名称=b.字段名称);\n \nSELECT 字段名\nFROM 表名 AS a\nLEFT JOIN 表名 AS b\nON (a.字段名称=b.字段名称);\n \nSELECT 字段名\nFROM 表名 AS a\nRIGHT JOIN 表名 AS b\nON (a.字段名称=b.字段名称);\n```\n\n- **无法承担外键约束的成本，也可以不定义外键约束，但是一定要在应用层面实现外键约束的逻辑功能，这样才能确保系统的正确可靠**\n\n<br>\n\n<br>\n\n# 07 | 条件语句：WHERE 与 HAVING有什么不同?\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 08 | 聚合函数：怎么高效地进行分组统计？\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 09 | 时间函数：时间类数据，MySQL是怎么处理的？\n\n\n\n\n\n\n\n\n\n<br/>\n\n# SQL汇总\n\n```mysql\n-- 创建数据库\nCREATE DATABASE demo；\n-- 删除数据库\nDROP DATABASE demo；\n-- 查看数据库\nSHOW DATABASES;\n-- 创建数据表：\nCREATE TABLE demo.test\n(  \n  barcode text,\n  goodsname text,\n  price int\n); \n-- 查看表结构\nDESCRIBE demo.test;\n-- 查看所有表\n-- DESCRIBE TABLES;\n-- 添加主键\nALTER TABLE demo.test\nADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;\n-- 向表中添加数据\nINSERT INTO demo.test\n(barcode,goodsname,price)\nVALUES ('0001','本',3);\n\n-- 修改字段类型语句\nALTER TABLE demo.goodsmaster\nMODIFY COLUMN price DOUBLE;\n-- 计算字段合计函数：\nSELECT SUM(price)\nFROM demo.goodsmaster;\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 参考延伸\n\n- [SQL样式指南](https://www.sqlstyle.guide/zh/)\n- \n\n\n\n# 学习备注\n\n> 1. work_bench 的熟悉使用\n> 2. 浮点数存储数据的方式，需要深入理解一下\n> 3. 需要了解，修改表名，不同位置插入等\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"70\"/>\n\n<br>\n\n","source":"_posts/2022/《MySQL-必知必会》study-notes.md","raw":"---\ntitle: 《MySQL 必知必会》study notes\nauthor: ratears\ndate: 2022-06-04 14:56:48\nupdated: 2022-06-04 14:56:48\ncategories:\n  - [database,MySQL]\ntags:\n  - MySQL\n  - database\n---\n\n# 前言\n\n- 近期学习了极客时间的专栏《MySQL 必知必会》，对专栏的核心知识做了学习笔记，便于参考及查漏补缺\n\n<br>\n\n<br>\n\n<br>\n\n# 课前准备 (2讲)\n\n## 开篇词-在实战中学习，是解锁MySQL技能的最佳方法\n\n- 熟练使用MySQL，对技术人来说变得越来越重要，是我们拿到心仪Offer的敲门砖\n- <font color=\"red\">**最重要的绝对不是你的知识储备量，而是你解决实际问题的能力**</font>\n- **正确的学习方法，远比你投入的时间更重要**。而实战，就是最高效的方法\n- **项目的实际需求-->解决问题所需的知识点-->用好这些知识的实战经验**\n\n<br>\n\n<br>\n\n<br>\n\n# 实践篇 (13讲)\n\n## 01 | 存储：一个完整的数据存储过程是怎样的？\n\n- 一个完整的**数据存储过程总共有4步，分别是创建数据库、确认字段、创建数据表、插入数据**\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4qktlsqna5y0.webp\" width=\"65%\"/>\n\n\n\n- MySQL数据库系统从大到小依次是：数据库服务器、数据库、数据表、数据表的行与列\n- **数据库是MySQL里面最大的存储单元** \n\n<br>\n\n<br>\n\n## ① 创建数据库\n\n```mysql\n# 创建数据库\nCREATE DATABASE `demo`  DEFAULT CHARACTER SET utf8mb4;\n\n# 查看数据库\nmysql> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| demo               |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.00 sec)\n```\n\n- “information_schema”是MySQL系统自带的数据库，主要保存MySQL数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件所在的文件夹和系统使用的文件夹，等等。\n- “performance_schema”是MySQL系统自带的数据库，可以用来监控MySQL的各类性能指标\n- “sys”数据库是MySQL系统自带的数据库，主要作用是，以一种更容易被理解的方式展示MySQL数据库服务器的各类性能指标，帮助系统管理员和开发人员监控MySQL的技术性能\n- “mysql”数据库保存了MySQL数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等\n\n- 想深入了解MySQL数据库系统的相关信息，可以看下[官方文档](https://dev.mysql.com/doc/refman/8.0/en/system-schema.html)\n\n<br>\n\n<br>\n\n## ② 确认字段\n\n- MySQL会让我们确认新表中有哪些列，以及它们的数据类型。这些列就是MySQL数据表的字段\n\n<br>\n\n<br>\n\n## ③ 创建数据表\n\n- **创建表的时候，最好指明数据库**\n\n```mysql\nCREATE TABLE demo.test\n( \n  barcode text,\n  goodsname text,\n  price int\n); \n```\n\n<br>\n\n### 查看表的结构\n\n```mysql\n# 查看表的结构\nmysql> describe demo.test;\n+-----------+------+------+-----+---------+-------+\n| Field     | Type | Null | Key | Default | Extra |\n+-----------+------+------+-----+---------+-------+\n| barcode   | text | YES  |     | NULL    |       |\n| goodsname | text | YES  |     | NULL    |       |\n| price     | int  | YES  |     | NULL    |       |\n+-----------+------+------+-----+---------+-------+\n3 rows in set (0.01 sec)\n```\n\n- Field：表示字段名称\n- Type：表示字段类型\n- Null：表示这个字段是否允许是空值（NULL）。注意，**在MySQL里面，空值不等于空字符串。一个空字符串的长度是0，而一个空值的长度是空。而且，在MySQL里面，空值是占用空间的。**\n- Key：我们暂时把它叫做键。\n- Default：表示默认值。\n- Extra：表示附加信息。\n\n<br>\n\n### 查看数据库中的表\n\n```mysql\nUSE demo;\nSHOW TABLES;\n```\n\n<br>\n\n### 设置主键\n\n- MySQL中数据表的主键，是表中的一个字段或者几个字段的组合。它主要有3个特征：\n  - 必须唯一，不能重复；\n  - 不能是空；\n  - 必须可以唯一标识数据表中的记录\n\n> 一个MySQL数据表中只能有一个主键。虽然MySQL也允许创建没有主键的表，但是，**建议一定要给表定义主键，并且养成习惯。因为主键可以帮助减少错误数据，并且提高查询的速度**\n\n```mysql\n# 如果数据表中所有的字段都有重复的可能。我们可以自己添加一个不会重复的字段来做主键\nALTER TABLE demo.test ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;\n```\n\n<br>\n\n<br>\n\n## ④ 插入数据\n\n```mysql\nINSERT INTO demo.test VALUES ('003','橡皮',3);\n```\n\n- 要插入数据的字段名也可以不写，但是建议不要怕麻烦，**一定要每次都写**。这样做的好处是可读性好，不易出错，而且容易修改。否则，如果记不住表的字段，就只能去查表的结构，才能知道值所对应的字段了。\n- 由于字段itemnumber定义了AUTO_INCREMENT，所以我们插入一条记录的时候，不给它赋值，系统也会自动给它赋值。而且，每次赋值，都会在上次的赋值基础上，自动增加1。也可以在插入一条记录的时候给itemnumber 赋值，由于它是主键，新的值必须与已有记录的itemnumber值不同，否则系统会提示错误。\n\n<br>\n\n<br>\n\n## 小结（sql汇总）\n\n```mysql\n-- 创建数据库\nCREATE DATABASE demo；\n-- 删除数据库\nDROP DATABASE demo；\n-- 查看数据库\nSHOW DATABASES;\n-- 创建数据表：\nCREATE TABLE demo.test\n(  \n  barcode text,\n  goodsname text,\n  price int\n); \n-- 查看表结构\nDESCRIBE demo.test;\n-- 查看所有表\nDESCRIBE TABLES;\n-- 添加主键\nALTER TABLE demo.test\nADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;\n-- 向表中添加数据\nINSERT INTO demo.test\n(barcode,goodsname,price)\nVALUES ('0001','本',3);\n```\n\n<br>\n\n<br>\n\n## 02 | 字段：这么多字段类型，该怎么定义？\n\n> MySQL中有很多字段类型，比如整数、文本、浮点数，等等。如果类型定义合理，就能节省存储空间，提升数据查询和处理的速度，相反，如果数据类型定义不合理，就有可能会导致数据超出取值范围，引发系统报错，甚至可能会出现计算错误的情况，进而影响到整个系统。\n\n<br>\n\n<br>\n\n### 整数类型\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5qvu0awjo5s0.webp\" width=\"75%\"/>\n\n\n\n- 在评估用哪种整数类型的时候，**需要考虑存储空间和可靠性的平衡问题**：一方面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间，使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起系统错误，影响可靠性。\n\n- 最佳实践\n  - 在评估用哪种整数类型的时候，**需要考虑存储空间和可靠性的平衡问题**（在实际工作中，系统故障产生的成本远远超过增加几个字段存储空间所产生的成本）\n  - **确保数据不会超过取值范围**，再去考虑如何节省存储空间\n\n<br>\n\n<br>\n\n### 浮点数类型和定点数类型\n\n> 可以把整数看成小数的一个特例\n\n- FLOAT表示单精度浮点数\n- DOUBLE表示双精度浮点数\n- REAL默认就是DOUBLE。如果你把SQL模式设定为启用“REAL_AS_FLOAT”，那么，MySQL就认为REAL是FLOAT\n\n```mysql\n# 如果要启用“REAL_AS_FLOAT”，就可以通过以下SQL语句实现：\nSET sql_mode = “REAL_AS_FLOAT”;\n```\n\n- FLOAT占用字节数少，取值范围小；DOUBLE占用字节数多，取值范围也大\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3rxrxdypui80.webp\" width=\"70%\" />\n\n\n\n- 为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？\n\n> 原因是：MySQL是按照这个格式存储浮点数的：符号（S）、尾数（M）和阶码（E）。因此，无论有没有符号，MySQL的浮点数都会存储表示符号的部分。因此，所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。\n\n<br>\n\n#### 浮点数类型有缺陷：不精准\n\n- 不精准问题原因在于：**MySQL对浮点类型数据的存储方式上**\n\n> MySQL用4个字节存储FLOAT类型数据，用8个字节来存储DOUBLE类型数据。无论哪个，都是采用二进制的方式来进行存储的。比如9.625，用二进制来表达，就是1001.101，或者表达成1.001101×2^3。看到了吗？如果尾数不是0或5（比如9.624），你就无法用一个二进制数来精确表达。怎么办呢？就只好在取值允许的范围内进行近似（四舍五入）。\n>\n\n- 为什么数据类型是DOUBLE的时候，计算结果误差比FLOAT小一点？\n\n> 原因：DOUBLE有8位字节，精度更高\n\n<br>\n\n#### **定点数类型：DECIMAL**\n\n- DECIMAL的存储方式决定了它一定是精准的\n\n> 浮点数类型是把十进制数转换成二进制数存储，DECIMAL则不同，它是把十进制数的整数部分和小数部分拆开，分别转换成十六进制数，进行存储。这样，所有的数值，就都可以精准表达了，不会存在因为无法表达而损失精度的问题\n\n\n\n#### 小结：浮点数和定点数的特点/适用场景/最佳实践\n\n> 浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）；定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景（比如涉及金额计算的场景）\n\n<br>\n\n### 文本类型\n\n- CHAR(M)：固定长度字符串。CHAR(M)类型必须预先定义字符串长度。如果太短，数据可能会超出范围；如果太长，又浪费存储空间。\n- VARCHAR(M)： 可变长度字符串。VARCHAR(M)也需要预先知道字符串的最大长度，不过只要不超过这个最大长度，具体存储的时候，是按照实际字符串长度存储的。\n- TEXT：字符串。系统自动按照实际长度存储，不需要预先定义长度。\n- ENUM： 枚举类型，取值必须是预先设定的一组字符串值范围之内的一个，必须要知道字符串所有可能的取值。\n- SET：是一个字符串对象，取值必须是在预先设定的字符串值范围之内的0个或多个，也必须知道字符串所有可能的取值。\n\n\n\n- TEXT类型也有4种，它们的区别就是最大长度不同。\n\n  - TINYTEXT：占用255字符。\n\n  - TEXT： 占用65535字符。\n\n  - MEDIUMTEXT：占用16777215字符。\n\n  - LONGTEXT： 占用4294967295字符（相当于4GB）\n\n- TEXT类型存在的问题：**由于实际存储的长度不确定，MySQL不允许TEXT类型的字段做主键。遇到这种情况，你只能采用CHAR(M)，或者VARCHAR(M)**\n\n- 最佳实践\n  - 项目中，只要不是主键字段，就可以按照数据可能的最大长度，选择这几种TEXT类型中的的一种，作为存储字符串的数据类型\n\n<br>\n\n<br>\n\n### 日期与时间类型\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4fo8vblt22w0.webp\" width=\"70%\" />\n\n- 最佳实践\n\n> **在实际项目中，尽量用DATETIME类型**。因为这个数据类型包括了完整的日期和时间信息，使用起来比较方便\n>\n> 为了确保数据的完整性和系统的稳定性，优先考虑使用DATETIME类型。因为虽然DATETIME类型占用的存储空间最多，但是它表达的时间最为完整，取值范围也最大\n\n\n\n- 为什么时间类型TIME的取值范围不是-23:59:59～23:59:59呢\n\n> 原因是MySQL设计的TIME类型，不光表示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过24小时。\n\n\n\n#### 小结\n\n```mysql\n-- 修改字段类型语句\nALTER TABLE demo.goodsmaster\nMODIFY COLUMN price DOUBLE;\n-- 计算字段合计函数：\nSELECT SUM(price)\nFROM demo.goodsmaster;\n```\n\n\n\n> 在定义数据类型时，如果确定是整数，就用INT；如果是小数，一定用定点数类型DECIMAL；如果是字符串，只要不是主键，就用TEXT；如果是日期与时间，就用DATETIME。（首先确保你的系统不会因为数据类型定义出错。）\n\n<br>\n\n<br>\n\n## 03 | 表：怎么创建和修改数据表？\n\n### 创建数据表\n\n```mysql\nCREATE TABLE <表名>\n{\n字段名1 数据类型 [字段级别约束] [默认值]，\n字段名2 数据类型 [字段级别约束] [默认值]，\n......\n[表级别约束]\n};\n```\n\n- **“约束”限定了表中数据应该满足的条件**\n- MySQL会根据这些限定条件，对表的操作进行监控，阻止破坏约束条件的操作执行，并提示错误，从而确保表中数据的唯一性、合法性和完整性\n\n<br>\n\n<br>\n\n### 都有哪些约束\n\n**1.非空约束**\n\n- 非空约束表示字段值不能为空\n\n**2.唯一性约束**\n\n- 唯一性约束表示这个字段的值不能重复。**满足主键约束的字段，自动满足非空约束，但是满足唯一性约束的字段，则可以是空值**\n\n**3.自增约束**\n\n- 在数据表中，只有整数类型的字段（包括TINYINT、SMALLINT、MEDIUMINT、INT和BIGINT），才可以定义自增约束。自增约束的字段，每增加一条数据，值自动增加1。\n- 给自增约束的字段赋值，这个时候，MySQL会重置自增约束字段的自增基数，下次添加数据的时候，自动以自增约束字段的最大值加1为新的字段值。\n\n<br>\n\n<br>\n\n### 如何修改表\n\n```mysql\nCREATE demo.importheadhist\nLIKE demo.importhead;\n\nALTER TABLE demo.importheadhist ADD confirmer INT;\n\nALTER TABLE demo.importheadhist ADD confirmdate DATETIME;\n```\n\n<br>\n\n<br>\n\n### 修改字段\n\n- change 可以更改列名 和 列类型 (每次都要把新列名和旧列名写上, 即使两个列名没有更改,只是改了类型)\n- modify 只能更改列属性 只需要写一次列名, 比change 省事点\n\n```mysql\n-- modify 能修改字段类型、类型长度、默认值、注释\nALTER  TABLE 表名 MODIFY [COLUMN] 字段名 新数据类型 新类型长度  新默认值  新注释;\n\nALTER  TABLE 表名 CHANGE [column] 旧字段名 新字段名 新数据类型;\n\n-- 指定添加字段在表中位置\nALTER TABLE demo.importheadhist ADD suppliername TEXT AFTER supplierid;\n```\n\n<br>\n\n<br>\n\n### 小结\n\n```mysql\nCREATE TABLE\n(\n字段名 字段类型 PRIMARY KEY\n);\nCREATE TABLE\n(\n字段名 字段类型 NOT NULL\n);\nCREATE TABLE\n(\n字段名 字段类型 UNIQUE\n);\nCREATE TABLE\n(\n字段名 字段类型 DEFAULT 值\n);\n-- 这里要注意自增类型的条件，字段类型必须是整数类型。\nCREATE TABLE\n(\n字段名 字段类型 AUTO_INCREMENT\n);\n-- 在一个已经存在的表基础上，创建一个新表\nCREATE demo.importheadhist LIKE demo.importhead;\n-- 修改表的相关语句\nALTER TABLE 表名 CHANGE 旧字段名 新字段名 数据类型;\nALTER TABLE 表名 ADD COLUMN 字段名 字段类型 FIRST|AFTER 字段名;\nALTER TABLE 表名 MODIFY 字段名 字段类型 FIRST|AFTER 字段名;\n```\n\n<br>\n\n<br>\n\n## 04 | 增删改查：如何操作表中的数据？\n\n### 添加数据\n\n```mysql\nINSERT INTO 表名 [(字段名 [,字段名] ...)] VALUES (值的列表);\n```\n\n<br>\n\n<br>\n\n### 插入数据记录\n\n- **部分插入一条数据记录是可以的，但前提是，没有赋值的字段，一定要让MySQL知道如何处理，比如可以为空、有默认值，或者是自增约束字段，等等，否则，MySQL会提示错误的**\n\n<br>\n\n<br>\n\n### 插入查询结果\n\n```mysql\nINSERT INTO 表名 （字段名）\nSELECT 字段名或值\nFROM 表名\nWHERE 条件\n```\n\n<br>\n\n<br>\n\n### 删除数据\n\n```mysql\nDELETE FROM 表名 WHERE 条件\n```\n\n<br>\n\n<br>\n\n### 修改数据\n\n```mysql\nUPDATE 表名 SET 字段名=值 WHERE 条件\n```\n\n- **不要修改主键字段的值**，如果你必须要修改主键的值，那有可能就是主键设置得不合理\n\n<br>\n\n<br>\n\n### 查询数据\n\n```mysql\nSELECT *|字段列表\nFROM 数据源\nWHERE 条件\nGROUP BY 字段\nHAVING 条件\nORDER BY 字段\nLIMIT 起始点，行数\n\n-- GROUP BY：作用是告诉MySQL，查询结果要如何分组，经常与MySQL的聚合函数一起使用\n-- HAVING：用于筛选查询结果，跟WHERE类似\n```\n\n<br>\n\n<br>\n\n### 小结\n\n```mysql\nINSERT INTO 表名 [(字段名 [,字段名] ...)] VALUES (值的列表);\n \nINSERT INTO 表名 （字段名）\nSELECT 字段名或值\nFROM 表名\nWHERE 条件\n \nDELETE FROM 表名\nWHERE 条件\n \nUPDATE 表名\nSET 字段名=值\nWHERE 条件\n\nSELECT *|字段列表\nFROM 数据源\nWHERE 条件\nGROUP BY 字段\nHAVING 条件\nORDER BY 字段\nLIMIT 起始点，行数\n```\n\n- 如果我们把查询的结果插入到表中时，导致主键约束或者唯一性约束被破坏了，就可以用“ON DUPLICATE”关键字进行处理。这个关键字的作用是，告诉MySQL，如果遇到重复的数据，该如何处理。\n\n```mysql\nINSERT INTO demo.goodsmaster \nSELECT *\nFROM demo.goodsmaster1 as a\nON DUPLICATE KEY UPDATE barcode = a.barcode,goodsname=a.goodsname;\n```\n\n<br>\n\n<br>\n\n# 05 | 主键：如何正确设置主键？\n\n### 业务字段做主键\n\n- **尽量不要用业务字段，也就是跟业务有关的字段做主键**。毕竟，作为项目设计的技术人员，我们谁也无法预测在项目的整个生命周期中，哪个业务字段会因为项目的业务需求而有重复，或者重用之类的情况出现\n\n<br>\n\n### 使用自增字段做主键\n\n```mysql\nUPDATE demo.trans AS a,demo.membermaster AS b\nSET a.memberid=b.id\nWHERE a.transactionno > 0  \nAND a.cardno = b.cardno; \n-- 这样操作可以不用删除trans的内容，在实际工作中更适合\n```\n\n- 如果是一个小项目，只有一个MySQL数据库服务器，用添加自增字段作为主键的办法是可以的。不过，这并不意味着，在任何情况下你都可以这么做\n- **自增字段做主键，对于单机系统来说是没问题的。但是，如果有多台服务器，各自都可以录入数据，那就不一定适用了。因为如果每台机器各自产生的数据需要合并，就可能会出现主键重复的问题**\n\n<br>\n\n### 手动赋值字段做主键\n\n- **我们可以采用手动赋值的办法，通过一定的逻辑，确保字段值在全系统的唯一性，这样就可以规避主键重复的问题了**\n\n> 取消字段“id”的自增属性，改成信息系统在添加会员的时候对“id”进行赋值。\n>\n> 门店在添加会员的时候，先到总部MySQL数据库中获取这个最大值，在这个基础上加1，然后用这个值作为新会员的“id”，同时，更新总部MySQL数据库管理信息表中的当前会员编号的最大值\n>\n> 各个门店添加会员的时候，都对同一个总部MySQL数据库中的数据表字段进行操作，就解决了各门店添加会员时会员编号冲突的问题，同时也避免了使用业务字段导致数据错误的问题\n\n<br>\n\n### 最佳实践\n\n- 刚开始使用MySQL时，很多人都很容易犯的错误是喜欢用业务字段做主键，想当然地认为了解业务需求，但实际情况往往出乎意料，而更改主键设置的成本非常高。所以，如果你的系统比较复杂，尽量给表加一个字段做主键，采用手动赋值的办法，虽然系统开发的时候麻烦一点，却可以避免后面出大问题。\n\n<br>\n\n<br>\n\n# 06 | 外键和连接：如何做关联查询？\n\n- **把分散在多个不同的表里的数据查询出来的操作，就是多表查询**\n\n<br>\n\n### 创建外键\n\n- **外键就是从表中用来引用主表中数据的那个公共字段**\n\n> 在MySQL中，外键是通过外键约束来定义的。外键约束就是约束的一种，它必须在从表中定义，包括指明哪个是外键字段，以及外键字段所引用的主表中的主键字段是什么。MySQL系统会根据外键约束的定义，监控对主表中数据的删除操作。如果发现要删除的主表记录，正在被从表中某条记录的外键字段所引用，MySQL就会提示错误，从而确保了关联数据不会缺失。\n\n```mysql\n\n-- 外键约束定义的语法结构\n[CONSTRAINT <外键约束名称>] FOREIGN KEY 字段名\nREFERENCES <主表名> 字段名\n\n-- 外键约束可以在创建表的时候定义\nCREATE TABLE 从表名\n(\n  字段名 类型,\n  ...\n-- 定义外键约束，指出外键字段和参照的主表字段\nCONSTRAINT 外键约束名\nFOREIGN KEY (字段名) REFERENCES 主表名 (字段名)\n)\n\n-- 可以通过修改表来定义。\nALTER TABLE 从表名 ADD CONSTRAINT 约束名 FOREIGN KEY 字段名 REFERENCES 主表名 （字段名）;\n```\n\n<br>\n\n### 连接\n\n- MySQL中，有2种类型的连接，分别是内连接（INNER JOIN）和外连接（OUTER JOIN\n  - 内连接表示查询结果只返回符合连接条件的记录\n  - 外连接则不同，表示查询结果返回某一个表中的所有记录，以及另一个表中满足连接条件的记录\n    - 左连接，一般简写成LEFT JOIN，返回左边表中的所有记录，以及右表中符合连接条件的记录。\n    - 右连接，一般简写成RIGHT JOIN，返回右边表中的所有记录，以及左表中符合连接条件的记录\n\n- 在MySQL里面，关键字JOIN、INNER JOIN、CROSS JOIN的含义是一样的，都表示内连接\n\n\n\n> 大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以，MySQL允许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。\n\n<br>\n\n### 小结\n\n```mysql\n-- 定义外键约束：\nCREATE TABLE 从表名\n(\n字段 字段类型\n....\nCONSTRAINT 外键约束名称\nFOREIGN KEY (字段名) REFERENCES 主表名 (字段名称)\n);\nALTER TABLE 从表名 ADD CONSTRAINT 约束名 FOREIGN KEY 字段名 REFERENCES 主表名 （字段名）;\n\n-- 连接查询\nSELECT 字段名\nFROM 表名 AS a\nJOIN 表名 AS b\nON (a.字段名称=b.字段名称);\n \nSELECT 字段名\nFROM 表名 AS a\nLEFT JOIN 表名 AS b\nON (a.字段名称=b.字段名称);\n \nSELECT 字段名\nFROM 表名 AS a\nRIGHT JOIN 表名 AS b\nON (a.字段名称=b.字段名称);\n```\n\n- **无法承担外键约束的成本，也可以不定义外键约束，但是一定要在应用层面实现外键约束的逻辑功能，这样才能确保系统的正确可靠**\n\n<br>\n\n<br>\n\n# 07 | 条件语句：WHERE 与 HAVING有什么不同?\n\n\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 08 | 聚合函数：怎么高效地进行分组统计？\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n# 09 | 时间函数：时间类数据，MySQL是怎么处理的？\n\n\n\n\n\n\n\n\n\n<br/>\n\n# SQL汇总\n\n```mysql\n-- 创建数据库\nCREATE DATABASE demo；\n-- 删除数据库\nDROP DATABASE demo；\n-- 查看数据库\nSHOW DATABASES;\n-- 创建数据表：\nCREATE TABLE demo.test\n(  \n  barcode text,\n  goodsname text,\n  price int\n); \n-- 查看表结构\nDESCRIBE demo.test;\n-- 查看所有表\n-- DESCRIBE TABLES;\n-- 添加主键\nALTER TABLE demo.test\nADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;\n-- 向表中添加数据\nINSERT INTO demo.test\n(barcode,goodsname,price)\nVALUES ('0001','本',3);\n\n-- 修改字段类型语句\nALTER TABLE demo.goodsmaster\nMODIFY COLUMN price DOUBLE;\n-- 计算字段合计函数：\nSELECT SUM(price)\nFROM demo.goodsmaster;\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 参考延伸\n\n- [SQL样式指南](https://www.sqlstyle.guide/zh/)\n- \n\n\n\n# 学习备注\n\n> 1. work_bench 的熟悉使用\n> 2. 浮点数存储数据的方式，需要深入理解一下\n> 3. 需要了解，修改表名，不同位置插入等\n\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"70\"/>\n\n<br>\n\n","slug":"《MySQL-必知必会》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsoy005wdcta43awej1z","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>近期学习了极客时间的专栏《MySQL 必知必会》，对专栏的核心知识做了学习笔记，便于参考及查漏补缺</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"课前准备-2讲\"><a href=\"#课前准备-2讲\" class=\"headerlink\" title=\"课前准备 (2讲)\"></a>课前准备 (2讲)</h1><h2 id=\"开篇词-在实战中学习，是解锁MySQL技能的最佳方法\"><a href=\"#开篇词-在实战中学习，是解锁MySQL技能的最佳方法\" class=\"headerlink\" title=\"开篇词-在实战中学习，是解锁MySQL技能的最佳方法\"></a>开篇词-在实战中学习，是解锁MySQL技能的最佳方法</h2><ul>\n<li>熟练使用MySQL，对技术人来说变得越来越重要，是我们拿到心仪Offer的敲门砖</li>\n<li><font color=\"red\"><strong>最重要的绝对不是你的知识储备量，而是你解决实际问题的能力</strong></font></li>\n<li><strong>正确的学习方法，远比你投入的时间更重要</strong>。而实战，就是最高效的方法</li>\n<li><strong>项目的实际需求–&gt;解决问题所需的知识点–&gt;用好这些知识的实战经验</strong></li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"实践篇-13讲\"><a href=\"#实践篇-13讲\" class=\"headerlink\" title=\"实践篇 (13讲)\"></a>实践篇 (13讲)</h1><h2 id=\"01-存储：一个完整的数据存储过程是怎样的？\"><a href=\"#01-存储：一个完整的数据存储过程是怎样的？\" class=\"headerlink\" title=\"01 | 存储：一个完整的数据存储过程是怎样的？\"></a>01 | 存储：一个完整的数据存储过程是怎样的？</h2><ul>\n<li>一个完整的<strong>数据存储过程总共有4步，分别是创建数据库、确认字段、创建数据表、插入数据</strong></li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4qktlsqna5y0.webp\" width=\"65%\"/>\n\n\n\n<ul>\n<li>MySQL数据库系统从大到小依次是：数据库服务器、数据库、数据表、数据表的行与列</li>\n<li><strong>数据库是MySQL里面最大的存储单元</strong> </li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"①-创建数据库\"><a href=\"#①-创建数据库\" class=\"headerlink\" title=\"① 创建数据库\"></a>① 创建数据库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建数据库</span><br><span class=\"line\">CREATE DATABASE `demo`  DEFAULT CHARACTER SET utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看数据库</span><br><span class=\"line\">mysql&gt; SHOW DATABASES;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| demo               |</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sys                |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>“information_schema”是MySQL系统自带的数据库，主要保存MySQL数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件所在的文件夹和系统使用的文件夹，等等。</p>\n</li>\n<li><p>“performance_schema”是MySQL系统自带的数据库，可以用来监控MySQL的各类性能指标</p>\n</li>\n<li><p>“sys”数据库是MySQL系统自带的数据库，主要作用是，以一种更容易被理解的方式展示MySQL数据库服务器的各类性能指标，帮助系统管理员和开发人员监控MySQL的技术性能</p>\n</li>\n<li><p>“mysql”数据库保存了MySQL数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等</p>\n</li>\n<li><p>想深入了解MySQL数据库系统的相关信息，可以看下<a class=\"link\"   href=\"https://dev.mysql.com/doc/refman/8.0/en/system-schema.html\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"②-确认字段\"><a href=\"#②-确认字段\" class=\"headerlink\" title=\"② 确认字段\"></a>② 确认字段</h2><ul>\n<li>MySQL会让我们确认新表中有哪些列，以及它们的数据类型。这些列就是MySQL数据表的字段</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"③-创建数据表\"><a href=\"#③-创建数据表\" class=\"headerlink\" title=\"③ 创建数据表\"></a>③ 创建数据表</h2><ul>\n<li><strong>创建表的时候，最好指明数据库</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE demo.test</span><br><span class=\"line\">( </span><br><span class=\"line\">  barcode text,</span><br><span class=\"line\">  goodsname text,</span><br><span class=\"line\">  price int</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"查看表的结构\"><a href=\"#查看表的结构\" class=\"headerlink\" title=\"查看表的结构\"></a>查看表的结构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看表的结构</span><br><span class=\"line\">mysql&gt; describe demo.test;</span><br><span class=\"line\">+-----------+------+------+-----+---------+-------+</span><br><span class=\"line\">| Field     | Type | Null | Key | Default | Extra |</span><br><span class=\"line\">+-----------+------+------+-----+---------+-------+</span><br><span class=\"line\">| barcode   | text | YES  |     | NULL    |       |</span><br><span class=\"line\">| goodsname | text | YES  |     | NULL    |       |</span><br><span class=\"line\">| price     | int  | YES  |     | NULL    |       |</span><br><span class=\"line\">+-----------+------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Field：表示字段名称</li>\n<li>Type：表示字段类型</li>\n<li>Null：表示这个字段是否允许是空值（NULL）。注意，<strong>在MySQL里面，空值不等于空字符串。一个空字符串的长度是0，而一个空值的长度是空。而且，在MySQL里面，空值是占用空间的。</strong></li>\n<li>Key：我们暂时把它叫做键。</li>\n<li>Default：表示默认值。</li>\n<li>Extra：表示附加信息。</li>\n</ul>\n<br>\n\n<h3 id=\"查看数据库中的表\"><a href=\"#查看数据库中的表\" class=\"headerlink\" title=\"查看数据库中的表\"></a>查看数据库中的表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE demo;</span><br><span class=\"line\">SHOW TABLES;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"设置主键\"><a href=\"#设置主键\" class=\"headerlink\" title=\"设置主键\"></a>设置主键</h3><ul>\n<li>MySQL中数据表的主键，是表中的一个字段或者几个字段的组合。它主要有3个特征：<ul>\n<li>必须唯一，不能重复；</li>\n<li>不能是空；</li>\n<li>必须可以唯一标识数据表中的记录</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>一个MySQL数据表中只能有一个主键。虽然MySQL也允许创建没有主键的表，但是，<strong>建议一定要给表定义主键，并且养成习惯。因为主键可以帮助减少错误数据，并且提高查询的速度</strong></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果数据表中所有的字段都有重复的可能。我们可以自己添加一个不会重复的字段来做主键</span><br><span class=\"line\">ALTER TABLE demo.test ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"④-插入数据\"><a href=\"#④-插入数据\" class=\"headerlink\" title=\"④ 插入数据\"></a>④ 插入数据</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO demo.test VALUES (&#x27;003&#x27;,&#x27;橡皮&#x27;,3);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>要插入数据的字段名也可以不写，但是建议不要怕麻烦，<strong>一定要每次都写</strong>。这样做的好处是可读性好，不易出错，而且容易修改。否则，如果记不住表的字段，就只能去查表的结构，才能知道值所对应的字段了。</li>\n<li>由于字段itemnumber定义了AUTO_INCREMENT，所以我们插入一条记录的时候，不给它赋值，系统也会自动给它赋值。而且，每次赋值，都会在上次的赋值基础上，自动增加1。也可以在插入一条记录的时候给itemnumber 赋值，由于它是主键，新的值必须与已有记录的itemnumber值不同，否则系统会提示错误。</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"小结（sql汇总）\"><a href=\"#小结（sql汇总）\" class=\"headerlink\" title=\"小结（sql汇总）\"></a>小结（sql汇总）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建数据库</span><br><span class=\"line\">CREATE DATABASE demo；</span><br><span class=\"line\">-- 删除数据库</span><br><span class=\"line\">DROP DATABASE demo；</span><br><span class=\"line\">-- 查看数据库</span><br><span class=\"line\">SHOW DATABASES;</span><br><span class=\"line\">-- 创建数据表：</span><br><span class=\"line\">CREATE TABLE demo.test</span><br><span class=\"line\">(  </span><br><span class=\"line\">  barcode text,</span><br><span class=\"line\">  goodsname text,</span><br><span class=\"line\">  price int</span><br><span class=\"line\">); </span><br><span class=\"line\">-- 查看表结构</span><br><span class=\"line\">DESCRIBE demo.test;</span><br><span class=\"line\">-- 查看所有表</span><br><span class=\"line\">DESCRIBE TABLES;</span><br><span class=\"line\">-- 添加主键</span><br><span class=\"line\">ALTER TABLE demo.test</span><br><span class=\"line\">ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;</span><br><span class=\"line\">-- 向表中添加数据</span><br><span class=\"line\">INSERT INTO demo.test</span><br><span class=\"line\">(barcode,goodsname,price)</span><br><span class=\"line\">VALUES (&#x27;0001&#x27;,&#x27;本&#x27;,3);</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"02-字段：这么多字段类型，该怎么定义？\"><a href=\"#02-字段：这么多字段类型，该怎么定义？\" class=\"headerlink\" title=\"02 | 字段：这么多字段类型，该怎么定义？\"></a>02 | 字段：这么多字段类型，该怎么定义？</h2><blockquote>\n<p>MySQL中有很多字段类型，比如整数、文本、浮点数，等等。如果类型定义合理，就能节省存储空间，提升数据查询和处理的速度，相反，如果数据类型定义不合理，就有可能会导致数据超出取值范围，引发系统报错，甚至可能会出现计算错误的情况，进而影响到整个系统。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5qvu0awjo5s0.webp\" width=\"75%\"/>\n\n\n\n<ul>\n<li><p>在评估用哪种整数类型的时候，<strong>需要考虑存储空间和可靠性的平衡问题</strong>：一方面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间，使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起系统错误，影响可靠性。</p>\n</li>\n<li><p>最佳实践</p>\n<ul>\n<li>在评估用哪种整数类型的时候，<strong>需要考虑存储空间和可靠性的平衡问题</strong>（在实际工作中，系统故障产生的成本远远超过增加几个字段存储空间所产生的成本）</li>\n<li><strong>确保数据不会超过取值范围</strong>，再去考虑如何节省存储空间</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"浮点数类型和定点数类型\"><a href=\"#浮点数类型和定点数类型\" class=\"headerlink\" title=\"浮点数类型和定点数类型\"></a>浮点数类型和定点数类型</h3><blockquote>\n<p>可以把整数看成小数的一个特例</p>\n</blockquote>\n<ul>\n<li>FLOAT表示单精度浮点数</li>\n<li>DOUBLE表示双精度浮点数</li>\n<li>REAL默认就是DOUBLE。如果你把SQL模式设定为启用“REAL_AS_FLOAT”，那么，MySQL就认为REAL是FLOAT</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果要启用“REAL_AS_FLOAT”，就可以通过以下SQL语句实现：</span><br><span class=\"line\">SET sql_mode = “REAL_AS_FLOAT”;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>FLOAT占用字节数少，取值范围小；DOUBLE占用字节数多，取值范围也大</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3rxrxdypui80.webp\" width=\"70%\" />\n\n\n\n<ul>\n<li>为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？</li>\n</ul>\n<blockquote>\n<p>原因是：MySQL是按照这个格式存储浮点数的：符号（S）、尾数（M）和阶码（E）。因此，无论有没有符号，MySQL的浮点数都会存储表示符号的部分。因此，所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p>\n</blockquote>\n<br>\n\n<h4 id=\"浮点数类型有缺陷：不精准\"><a href=\"#浮点数类型有缺陷：不精准\" class=\"headerlink\" title=\"浮点数类型有缺陷：不精准\"></a>浮点数类型有缺陷：不精准</h4><ul>\n<li>不精准问题原因在于：<strong>MySQL对浮点类型数据的存储方式上</strong></li>\n</ul>\n<blockquote>\n<p>MySQL用4个字节存储FLOAT类型数据，用8个字节来存储DOUBLE类型数据。无论哪个，都是采用二进制的方式来进行存储的。比如9.625，用二进制来表达，就是1001.101，或者表达成1.001101×2^3。看到了吗？如果尾数不是0或5（比如9.624），你就无法用一个二进制数来精确表达。怎么办呢？就只好在取值允许的范围内进行近似（四舍五入）。</p>\n</blockquote>\n<ul>\n<li>为什么数据类型是DOUBLE的时候，计算结果误差比FLOAT小一点？</li>\n</ul>\n<blockquote>\n<p>原因：DOUBLE有8位字节，精度更高</p>\n</blockquote>\n<br>\n\n<h4 id=\"定点数类型：DECIMAL\"><a href=\"#定点数类型：DECIMAL\" class=\"headerlink\" title=\"定点数类型：DECIMAL\"></a><strong>定点数类型：DECIMAL</strong></h4><ul>\n<li>DECIMAL的存储方式决定了它一定是精准的</li>\n</ul>\n<blockquote>\n<p>浮点数类型是把十进制数转换成二进制数存储，DECIMAL则不同，它是把十进制数的整数部分和小数部分拆开，分别转换成十六进制数，进行存储。这样，所有的数值，就都可以精准表达了，不会存在因为无法表达而损失精度的问题</p>\n</blockquote>\n<h4 id=\"小结：浮点数和定点数的特点-适用场景-最佳实践\"><a href=\"#小结：浮点数和定点数的特点-适用场景-最佳实践\" class=\"headerlink\" title=\"小结：浮点数和定点数的特点/适用场景/最佳实践\"></a>小结：浮点数和定点数的特点/适用场景/最佳实践</h4><blockquote>\n<p>浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）；定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景（比如涉及金额计算的场景）</p>\n</blockquote>\n<br>\n\n<h3 id=\"文本类型\"><a href=\"#文本类型\" class=\"headerlink\" title=\"文本类型\"></a>文本类型</h3><ul>\n<li>CHAR(M)：固定长度字符串。CHAR(M)类型必须预先定义字符串长度。如果太短，数据可能会超出范围；如果太长，又浪费存储空间。</li>\n<li>VARCHAR(M)： 可变长度字符串。VARCHAR(M)也需要预先知道字符串的最大长度，不过只要不超过这个最大长度，具体存储的时候，是按照实际字符串长度存储的。</li>\n<li>TEXT：字符串。系统自动按照实际长度存储，不需要预先定义长度。</li>\n<li>ENUM： 枚举类型，取值必须是预先设定的一组字符串值范围之内的一个，必须要知道字符串所有可能的取值。</li>\n<li>SET：是一个字符串对象，取值必须是在预先设定的字符串值范围之内的0个或多个，也必须知道字符串所有可能的取值。</li>\n</ul>\n<ul>\n<li><p>TEXT类型也有4种，它们的区别就是最大长度不同。</p>\n<ul>\n<li><p>TINYTEXT：占用255字符。</p>\n</li>\n<li><p>TEXT： 占用65535字符。</p>\n</li>\n<li><p>MEDIUMTEXT：占用16777215字符。</p>\n</li>\n<li><p>LONGTEXT： 占用4294967295字符（相当于4GB）</p>\n</li>\n</ul>\n</li>\n<li><p>TEXT类型存在的问题：<strong>由于实际存储的长度不确定，MySQL不允许TEXT类型的字段做主键。遇到这种情况，你只能采用CHAR(M)，或者VARCHAR(M)</strong></p>\n</li>\n<li><p>最佳实践</p>\n<ul>\n<li>项目中，只要不是主键字段，就可以按照数据可能的最大长度，选择这几种TEXT类型中的的一种，作为存储字符串的数据类型</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"日期与时间类型\"><a href=\"#日期与时间类型\" class=\"headerlink\" title=\"日期与时间类型\"></a>日期与时间类型</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4fo8vblt22w0.webp\" width=\"70%\" />\n\n<ul>\n<li>最佳实践</li>\n</ul>\n<blockquote>\n<p><strong>在实际项目中，尽量用DATETIME类型</strong>。因为这个数据类型包括了完整的日期和时间信息，使用起来比较方便</p>\n<p>为了确保数据的完整性和系统的稳定性，优先考虑使用DATETIME类型。因为虽然DATETIME类型占用的存储空间最多，但是它表达的时间最为完整，取值范围也最大</p>\n</blockquote>\n<ul>\n<li>为什么时间类型TIME的取值范围不是-23:59:59～23:59:59呢</li>\n</ul>\n<blockquote>\n<p>原因是MySQL设计的TIME类型，不光表示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过24小时。</p>\n</blockquote>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 修改字段类型语句</span><br><span class=\"line\">ALTER TABLE demo.goodsmaster</span><br><span class=\"line\">MODIFY COLUMN price DOUBLE;</span><br><span class=\"line\">-- 计算字段合计函数：</span><br><span class=\"line\">SELECT SUM(price)</span><br><span class=\"line\">FROM demo.goodsmaster;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在定义数据类型时，如果确定是整数，就用INT；如果是小数，一定用定点数类型DECIMAL；如果是字符串，只要不是主键，就用TEXT；如果是日期与时间，就用DATETIME。（首先确保你的系统不会因为数据类型定义出错。）</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"03-表：怎么创建和修改数据表？\"><a href=\"#03-表：怎么创建和修改数据表？\" class=\"headerlink\" title=\"03 | 表：怎么创建和修改数据表？\"></a>03 | 表：怎么创建和修改数据表？</h2><h3 id=\"创建数据表\"><a href=\"#创建数据表\" class=\"headerlink\" title=\"创建数据表\"></a>创建数据表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &lt;表名&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">字段名1 数据类型 [字段级别约束] [默认值]，</span><br><span class=\"line\">字段名2 数据类型 [字段级别约束] [默认值]，</span><br><span class=\"line\">......</span><br><span class=\"line\">[表级别约束]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>“约束”限定了表中数据应该满足的条件</strong></li>\n<li>MySQL会根据这些限定条件，对表的操作进行监控，阻止破坏约束条件的操作执行，并提示错误，从而确保表中数据的唯一性、合法性和完整性</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"都有哪些约束\"><a href=\"#都有哪些约束\" class=\"headerlink\" title=\"都有哪些约束\"></a>都有哪些约束</h3><p><strong>1.非空约束</strong></p>\n<ul>\n<li>非空约束表示字段值不能为空</li>\n</ul>\n<p><strong>2.唯一性约束</strong></p>\n<ul>\n<li>唯一性约束表示这个字段的值不能重复。<strong>满足主键约束的字段，自动满足非空约束，但是满足唯一性约束的字段，则可以是空值</strong></li>\n</ul>\n<p><strong>3.自增约束</strong></p>\n<ul>\n<li>在数据表中，只有整数类型的字段（包括TINYINT、SMALLINT、MEDIUMINT、INT和BIGINT），才可以定义自增约束。自增约束的字段，每增加一条数据，值自动增加1。</li>\n<li>给自增约束的字段赋值，这个时候，MySQL会重置自增约束字段的自增基数，下次添加数据的时候，自动以自增约束字段的最大值加1为新的字段值。</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"如何修改表\"><a href=\"#如何修改表\" class=\"headerlink\" title=\"如何修改表\"></a>如何修改表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE demo.importheadhist</span><br><span class=\"line\">LIKE demo.importhead;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE demo.importheadhist ADD confirmer INT;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE demo.importheadhist ADD confirmdate DATETIME;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"修改字段\"><a href=\"#修改字段\" class=\"headerlink\" title=\"修改字段\"></a>修改字段</h3><ul>\n<li>change 可以更改列名 和 列类型 (每次都要把新列名和旧列名写上, 即使两个列名没有更改,只是改了类型)</li>\n<li>modify 只能更改列属性 只需要写一次列名, 比change 省事点</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- modify 能修改字段类型、类型长度、默认值、注释</span><br><span class=\"line\">ALTER  TABLE 表名 MODIFY [COLUMN] 字段名 新数据类型 新类型长度  新默认值  新注释;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER  TABLE 表名 CHANGE [column] 旧字段名 新字段名 新数据类型;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 指定添加字段在表中位置</span><br><span class=\"line\">ALTER TABLE demo.importheadhist ADD suppliername TEXT AFTER supplierid;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 PRIMARY KEY</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 NOT NULL</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 UNIQUE</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 DEFAULT 值</span><br><span class=\"line\">);</span><br><span class=\"line\">-- 这里要注意自增类型的条件，字段类型必须是整数类型。</span><br><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 AUTO_INCREMENT</span><br><span class=\"line\">);</span><br><span class=\"line\">-- 在一个已经存在的表基础上，创建一个新表</span><br><span class=\"line\">CREATE demo.importheadhist LIKE demo.importhead;</span><br><span class=\"line\">-- 修改表的相关语句</span><br><span class=\"line\">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 数据类型;</span><br><span class=\"line\">ALTER TABLE 表名 ADD COLUMN 字段名 字段类型 FIRST|AFTER 字段名;</span><br><span class=\"line\">ALTER TABLE 表名 MODIFY 字段名 字段类型 FIRST|AFTER 字段名;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"04-增删改查：如何操作表中的数据？\"><a href=\"#04-增删改查：如何操作表中的数据？\" class=\"headerlink\" title=\"04 | 增删改查：如何操作表中的数据？\"></a>04 | 增删改查：如何操作表中的数据？</h2><h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 [(字段名 [,字段名] ...)] VALUES (值的列表);</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"插入数据记录\"><a href=\"#插入数据记录\" class=\"headerlink\" title=\"插入数据记录\"></a>插入数据记录</h3><ul>\n<li><strong>部分插入一条数据记录是可以的，但前提是，没有赋值的字段，一定要让MySQL知道如何处理，比如可以为空、有默认值，或者是自增约束字段，等等，否则，MySQL会提示错误的</strong></li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"插入查询结果\"><a href=\"#插入查询结果\" class=\"headerlink\" title=\"插入查询结果\"></a>插入查询结果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 （字段名）</span><br><span class=\"line\">SELECT 字段名或值</span><br><span class=\"line\">FROM 表名</span><br><span class=\"line\">WHERE 条件</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM 表名 WHERE 条件</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE 表名 SET 字段名=值 WHERE 条件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>不要修改主键字段的值</strong>，如果你必须要修改主键的值，那有可能就是主键设置得不合理</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT *|字段列表</span><br><span class=\"line\">FROM 数据源</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\">GROUP BY 字段</span><br><span class=\"line\">HAVING 条件</span><br><span class=\"line\">ORDER BY 字段</span><br><span class=\"line\">LIMIT 起始点，行数</span><br><span class=\"line\"></span><br><span class=\"line\">-- GROUP BY：作用是告诉MySQL，查询结果要如何分组，经常与MySQL的聚合函数一起使用</span><br><span class=\"line\">-- HAVING：用于筛选查询结果，跟WHERE类似</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 [(字段名 [,字段名] ...)] VALUES (值的列表);</span><br><span class=\"line\"> </span><br><span class=\"line\">INSERT INTO 表名 （字段名）</span><br><span class=\"line\">SELECT 字段名或值</span><br><span class=\"line\">FROM 表名</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\"> </span><br><span class=\"line\">DELETE FROM 表名</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\"> </span><br><span class=\"line\">UPDATE 表名</span><br><span class=\"line\">SET 字段名=值</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT *|字段列表</span><br><span class=\"line\">FROM 数据源</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\">GROUP BY 字段</span><br><span class=\"line\">HAVING 条件</span><br><span class=\"line\">ORDER BY 字段</span><br><span class=\"line\">LIMIT 起始点，行数</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果我们把查询的结果插入到表中时，导致主键约束或者唯一性约束被破坏了，就可以用“ON DUPLICATE”关键字进行处理。这个关键字的作用是，告诉MySQL，如果遇到重复的数据，该如何处理。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO demo.goodsmaster </span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM demo.goodsmaster1 as a</span><br><span class=\"line\">ON DUPLICATE KEY UPDATE barcode = a.barcode,goodsname=a.goodsname;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h1 id=\"05-主键：如何正确设置主键？\"><a href=\"#05-主键：如何正确设置主键？\" class=\"headerlink\" title=\"05 | 主键：如何正确设置主键？\"></a>05 | 主键：如何正确设置主键？</h1><h3 id=\"业务字段做主键\"><a href=\"#业务字段做主键\" class=\"headerlink\" title=\"业务字段做主键\"></a>业务字段做主键</h3><ul>\n<li><strong>尽量不要用业务字段，也就是跟业务有关的字段做主键</strong>。毕竟，作为项目设计的技术人员，我们谁也无法预测在项目的整个生命周期中，哪个业务字段会因为项目的业务需求而有重复，或者重用之类的情况出现</li>\n</ul>\n<br>\n\n<h3 id=\"使用自增字段做主键\"><a href=\"#使用自增字段做主键\" class=\"headerlink\" title=\"使用自增字段做主键\"></a>使用自增字段做主键</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE demo.trans AS a,demo.membermaster AS b</span><br><span class=\"line\">SET a.memberid=b.id</span><br><span class=\"line\">WHERE a.transactionno &gt; 0  </span><br><span class=\"line\">AND a.cardno = b.cardno; </span><br><span class=\"line\">-- 这样操作可以不用删除trans的内容，在实际工作中更适合</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果是一个小项目，只有一个MySQL数据库服务器，用添加自增字段作为主键的办法是可以的。不过，这并不意味着，在任何情况下你都可以这么做</li>\n<li><strong>自增字段做主键，对于单机系统来说是没问题的。但是，如果有多台服务器，各自都可以录入数据，那就不一定适用了。因为如果每台机器各自产生的数据需要合并，就可能会出现主键重复的问题</strong></li>\n</ul>\n<br>\n\n<h3 id=\"手动赋值字段做主键\"><a href=\"#手动赋值字段做主键\" class=\"headerlink\" title=\"手动赋值字段做主键\"></a>手动赋值字段做主键</h3><ul>\n<li><strong>我们可以采用手动赋值的办法，通过一定的逻辑，确保字段值在全系统的唯一性，这样就可以规避主键重复的问题了</strong></li>\n</ul>\n<blockquote>\n<p>取消字段“id”的自增属性，改成信息系统在添加会员的时候对“id”进行赋值。</p>\n<p>门店在添加会员的时候，先到总部MySQL数据库中获取这个最大值，在这个基础上加1，然后用这个值作为新会员的“id”，同时，更新总部MySQL数据库管理信息表中的当前会员编号的最大值</p>\n<p>各个门店添加会员的时候，都对同一个总部MySQL数据库中的数据表字段进行操作，就解决了各门店添加会员时会员编号冲突的问题，同时也避免了使用业务字段导致数据错误的问题</p>\n</blockquote>\n<br>\n\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>刚开始使用MySQL时，很多人都很容易犯的错误是喜欢用业务字段做主键，想当然地认为了解业务需求，但实际情况往往出乎意料，而更改主键设置的成本非常高。所以，如果你的系统比较复杂，尽量给表加一个字段做主键，采用手动赋值的办法，虽然系统开发的时候麻烦一点，却可以避免后面出大问题。</li>\n</ul>\n<br>\n\n<br>\n\n<h1 id=\"06-外键和连接：如何做关联查询？\"><a href=\"#06-外键和连接：如何做关联查询？\" class=\"headerlink\" title=\"06 | 外键和连接：如何做关联查询？\"></a>06 | 外键和连接：如何做关联查询？</h1><ul>\n<li><strong>把分散在多个不同的表里的数据查询出来的操作，就是多表查询</strong></li>\n</ul>\n<br>\n\n<h3 id=\"创建外键\"><a href=\"#创建外键\" class=\"headerlink\" title=\"创建外键\"></a>创建外键</h3><ul>\n<li><strong>外键就是从表中用来引用主表中数据的那个公共字段</strong></li>\n</ul>\n<blockquote>\n<p>在MySQL中，外键是通过外键约束来定义的。外键约束就是约束的一种，它必须在从表中定义，包括指明哪个是外键字段，以及外键字段所引用的主表中的主键字段是什么。MySQL系统会根据外键约束的定义，监控对主表中数据的删除操作。如果发现要删除的主表记录，正在被从表中某条记录的外键字段所引用，MySQL就会提示错误，从而确保了关联数据不会缺失。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-- 外键约束定义的语法结构</span><br><span class=\"line\">[CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY 字段名</span><br><span class=\"line\">REFERENCES &lt;主表名&gt; 字段名</span><br><span class=\"line\"></span><br><span class=\"line\">-- 外键约束可以在创建表的时候定义</span><br><span class=\"line\">CREATE TABLE 从表名</span><br><span class=\"line\">(</span><br><span class=\"line\">  字段名 类型,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">-- 定义外键约束，指出外键字段和参照的主表字段</span><br><span class=\"line\">CONSTRAINT 外键约束名</span><br><span class=\"line\">FOREIGN KEY (字段名) REFERENCES 主表名 (字段名)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">-- 可以通过修改表来定义。</span><br><span class=\"line\">ALTER TABLE 从表名 ADD CONSTRAINT 约束名 FOREIGN KEY 字段名 REFERENCES 主表名 （字段名）;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><ul>\n<li><p>MySQL中，有2种类型的连接，分别是内连接（INNER JOIN）和外连接（OUTER JOIN</p>\n<ul>\n<li>内连接表示查询结果只返回符合连接条件的记录</li>\n<li>外连接则不同，表示查询结果返回某一个表中的所有记录，以及另一个表中满足连接条件的记录<ul>\n<li>左连接，一般简写成LEFT JOIN，返回左边表中的所有记录，以及右表中符合连接条件的记录。</li>\n<li>右连接，一般简写成RIGHT JOIN，返回右边表中的所有记录，以及左表中符合连接条件的记录</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>在MySQL里面，关键字JOIN、INNER JOIN、CROSS JOIN的含义是一样的，都表示内连接</p>\n</li>\n</ul>\n<blockquote>\n<p>大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以，MySQL允许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p>\n</blockquote>\n<br>\n\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 定义外键约束：</span><br><span class=\"line\">CREATE TABLE 从表名</span><br><span class=\"line\">(</span><br><span class=\"line\">字段 字段类型</span><br><span class=\"line\">....</span><br><span class=\"line\">CONSTRAINT 外键约束名称</span><br><span class=\"line\">FOREIGN KEY (字段名) REFERENCES 主表名 (字段名称)</span><br><span class=\"line\">);</span><br><span class=\"line\">ALTER TABLE 从表名 ADD CONSTRAINT 约束名 FOREIGN KEY 字段名 REFERENCES 主表名 （字段名）;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 连接查询</span><br><span class=\"line\">SELECT 字段名</span><br><span class=\"line\">FROM 表名 AS a</span><br><span class=\"line\">JOIN 表名 AS b</span><br><span class=\"line\">ON (a.字段名称=b.字段名称);</span><br><span class=\"line\"> </span><br><span class=\"line\">SELECT 字段名</span><br><span class=\"line\">FROM 表名 AS a</span><br><span class=\"line\">LEFT JOIN 表名 AS b</span><br><span class=\"line\">ON (a.字段名称=b.字段名称);</span><br><span class=\"line\"> </span><br><span class=\"line\">SELECT 字段名</span><br><span class=\"line\">FROM 表名 AS a</span><br><span class=\"line\">RIGHT JOIN 表名 AS b</span><br><span class=\"line\">ON (a.字段名称=b.字段名称);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>无法承担外键约束的成本，也可以不定义外键约束，但是一定要在应用层面实现外键约束的逻辑功能，这样才能确保系统的正确可靠</strong></li>\n</ul>\n<br>\n\n<br>\n\n<h1 id=\"07-条件语句：WHERE-与-HAVING有什么不同\"><a href=\"#07-条件语句：WHERE-与-HAVING有什么不同\" class=\"headerlink\" title=\"07 | 条件语句：WHERE 与 HAVING有什么不同?\"></a>07 | 条件语句：WHERE 与 HAVING有什么不同?</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"08-聚合函数：怎么高效地进行分组统计？\"><a href=\"#08-聚合函数：怎么高效地进行分组统计？\" class=\"headerlink\" title=\"08 | 聚合函数：怎么高效地进行分组统计？\"></a>08 | 聚合函数：怎么高效地进行分组统计？</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"09-时间函数：时间类数据，MySQL是怎么处理的？\"><a href=\"#09-时间函数：时间类数据，MySQL是怎么处理的？\" class=\"headerlink\" title=\"09 | 时间函数：时间类数据，MySQL是怎么处理的？\"></a>09 | 时间函数：时间类数据，MySQL是怎么处理的？</h1><br/>\n\n<h1 id=\"SQL汇总\"><a href=\"#SQL汇总\" class=\"headerlink\" title=\"SQL汇总\"></a>SQL汇总</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建数据库</span><br><span class=\"line\">CREATE DATABASE demo；</span><br><span class=\"line\">-- 删除数据库</span><br><span class=\"line\">DROP DATABASE demo；</span><br><span class=\"line\">-- 查看数据库</span><br><span class=\"line\">SHOW DATABASES;</span><br><span class=\"line\">-- 创建数据表：</span><br><span class=\"line\">CREATE TABLE demo.test</span><br><span class=\"line\">(  </span><br><span class=\"line\">  barcode text,</span><br><span class=\"line\">  goodsname text,</span><br><span class=\"line\">  price int</span><br><span class=\"line\">); </span><br><span class=\"line\">-- 查看表结构</span><br><span class=\"line\">DESCRIBE demo.test;</span><br><span class=\"line\">-- 查看所有表</span><br><span class=\"line\">-- DESCRIBE TABLES;</span><br><span class=\"line\">-- 添加主键</span><br><span class=\"line\">ALTER TABLE demo.test</span><br><span class=\"line\">ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;</span><br><span class=\"line\">-- 向表中添加数据</span><br><span class=\"line\">INSERT INTO demo.test</span><br><span class=\"line\">(barcode,goodsname,price)</span><br><span class=\"line\">VALUES (&#x27;0001&#x27;,&#x27;本&#x27;,3);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 修改字段类型语句</span><br><span class=\"line\">ALTER TABLE demo.goodsmaster</span><br><span class=\"line\">MODIFY COLUMN price DOUBLE;</span><br><span class=\"line\">-- 计算字段合计函数：</span><br><span class=\"line\">SELECT SUM(price)</span><br><span class=\"line\">FROM demo.goodsmaster;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"参考延伸\"><a href=\"#参考延伸\" class=\"headerlink\" title=\"参考延伸\"></a>参考延伸</h1><ul>\n<li><a class=\"link\"   href=\"https://www.sqlstyle.guide/zh/\" >SQL样式指南<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li></li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>work_bench 的熟悉使用</li>\n<li>浮点数存储数据的方式，需要深入理解一下</li>\n<li>需要了解，修改表名，不同位置插入等</li>\n</ol>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"70\"/>\n\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>近期学习了极客时间的专栏《MySQL 必知必会》，对专栏的核心知识做了学习笔记，便于参考及查漏补缺</li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"课前准备-2讲\"><a href=\"#课前准备-2讲\" class=\"headerlink\" title=\"课前准备 (2讲)\"></a>课前准备 (2讲)</h1><h2 id=\"开篇词-在实战中学习，是解锁MySQL技能的最佳方法\"><a href=\"#开篇词-在实战中学习，是解锁MySQL技能的最佳方法\" class=\"headerlink\" title=\"开篇词-在实战中学习，是解锁MySQL技能的最佳方法\"></a>开篇词-在实战中学习，是解锁MySQL技能的最佳方法</h2><ul>\n<li>熟练使用MySQL，对技术人来说变得越来越重要，是我们拿到心仪Offer的敲门砖</li>\n<li><font color=\"red\"><strong>最重要的绝对不是你的知识储备量，而是你解决实际问题的能力</strong></font></li>\n<li><strong>正确的学习方法，远比你投入的时间更重要</strong>。而实战，就是最高效的方法</li>\n<li><strong>项目的实际需求–&gt;解决问题所需的知识点–&gt;用好这些知识的实战经验</strong></li>\n</ul>\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"实践篇-13讲\"><a href=\"#实践篇-13讲\" class=\"headerlink\" title=\"实践篇 (13讲)\"></a>实践篇 (13讲)</h1><h2 id=\"01-存储：一个完整的数据存储过程是怎样的？\"><a href=\"#01-存储：一个完整的数据存储过程是怎样的？\" class=\"headerlink\" title=\"01 | 存储：一个完整的数据存储过程是怎样的？\"></a>01 | 存储：一个完整的数据存储过程是怎样的？</h2><ul>\n<li>一个完整的<strong>数据存储过程总共有4步，分别是创建数据库、确认字段、创建数据表、插入数据</strong></li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4qktlsqna5y0.webp\" width=\"65%\"/>\n\n\n\n<ul>\n<li>MySQL数据库系统从大到小依次是：数据库服务器、数据库、数据表、数据表的行与列</li>\n<li><strong>数据库是MySQL里面最大的存储单元</strong> </li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"①-创建数据库\"><a href=\"#①-创建数据库\" class=\"headerlink\" title=\"① 创建数据库\"></a>① 创建数据库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建数据库</span><br><span class=\"line\">CREATE DATABASE `demo`  DEFAULT CHARACTER SET utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看数据库</span><br><span class=\"line\">mysql&gt; SHOW DATABASES;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| demo               |</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sys                |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>“information_schema”是MySQL系统自带的数据库，主要保存MySQL数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件所在的文件夹和系统使用的文件夹，等等。</p>\n</li>\n<li><p>“performance_schema”是MySQL系统自带的数据库，可以用来监控MySQL的各类性能指标</p>\n</li>\n<li><p>“sys”数据库是MySQL系统自带的数据库，主要作用是，以一种更容易被理解的方式展示MySQL数据库服务器的各类性能指标，帮助系统管理员和开发人员监控MySQL的技术性能</p>\n</li>\n<li><p>“mysql”数据库保存了MySQL数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等</p>\n</li>\n<li><p>想深入了解MySQL数据库系统的相关信息，可以看下<a class=\"link\"   href=\"https://dev.mysql.com/doc/refman/8.0/en/system-schema.html\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"②-确认字段\"><a href=\"#②-确认字段\" class=\"headerlink\" title=\"② 确认字段\"></a>② 确认字段</h2><ul>\n<li>MySQL会让我们确认新表中有哪些列，以及它们的数据类型。这些列就是MySQL数据表的字段</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"③-创建数据表\"><a href=\"#③-创建数据表\" class=\"headerlink\" title=\"③ 创建数据表\"></a>③ 创建数据表</h2><ul>\n<li><strong>创建表的时候，最好指明数据库</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE demo.test</span><br><span class=\"line\">( </span><br><span class=\"line\">  barcode text,</span><br><span class=\"line\">  goodsname text,</span><br><span class=\"line\">  price int</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"查看表的结构\"><a href=\"#查看表的结构\" class=\"headerlink\" title=\"查看表的结构\"></a>查看表的结构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看表的结构</span><br><span class=\"line\">mysql&gt; describe demo.test;</span><br><span class=\"line\">+-----------+------+------+-----+---------+-------+</span><br><span class=\"line\">| Field     | Type | Null | Key | Default | Extra |</span><br><span class=\"line\">+-----------+------+------+-----+---------+-------+</span><br><span class=\"line\">| barcode   | text | YES  |     | NULL    |       |</span><br><span class=\"line\">| goodsname | text | YES  |     | NULL    |       |</span><br><span class=\"line\">| price     | int  | YES  |     | NULL    |       |</span><br><span class=\"line\">+-----------+------+------+-----+---------+-------+</span><br><span class=\"line\">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Field：表示字段名称</li>\n<li>Type：表示字段类型</li>\n<li>Null：表示这个字段是否允许是空值（NULL）。注意，<strong>在MySQL里面，空值不等于空字符串。一个空字符串的长度是0，而一个空值的长度是空。而且，在MySQL里面，空值是占用空间的。</strong></li>\n<li>Key：我们暂时把它叫做键。</li>\n<li>Default：表示默认值。</li>\n<li>Extra：表示附加信息。</li>\n</ul>\n<br>\n\n<h3 id=\"查看数据库中的表\"><a href=\"#查看数据库中的表\" class=\"headerlink\" title=\"查看数据库中的表\"></a>查看数据库中的表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE demo;</span><br><span class=\"line\">SHOW TABLES;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"设置主键\"><a href=\"#设置主键\" class=\"headerlink\" title=\"设置主键\"></a>设置主键</h3><ul>\n<li>MySQL中数据表的主键，是表中的一个字段或者几个字段的组合。它主要有3个特征：<ul>\n<li>必须唯一，不能重复；</li>\n<li>不能是空；</li>\n<li>必须可以唯一标识数据表中的记录</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>一个MySQL数据表中只能有一个主键。虽然MySQL也允许创建没有主键的表，但是，<strong>建议一定要给表定义主键，并且养成习惯。因为主键可以帮助减少错误数据，并且提高查询的速度</strong></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果数据表中所有的字段都有重复的可能。我们可以自己添加一个不会重复的字段来做主键</span><br><span class=\"line\">ALTER TABLE demo.test ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"④-插入数据\"><a href=\"#④-插入数据\" class=\"headerlink\" title=\"④ 插入数据\"></a>④ 插入数据</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO demo.test VALUES (&#x27;003&#x27;,&#x27;橡皮&#x27;,3);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>要插入数据的字段名也可以不写，但是建议不要怕麻烦，<strong>一定要每次都写</strong>。这样做的好处是可读性好，不易出错，而且容易修改。否则，如果记不住表的字段，就只能去查表的结构，才能知道值所对应的字段了。</li>\n<li>由于字段itemnumber定义了AUTO_INCREMENT，所以我们插入一条记录的时候，不给它赋值，系统也会自动给它赋值。而且，每次赋值，都会在上次的赋值基础上，自动增加1。也可以在插入一条记录的时候给itemnumber 赋值，由于它是主键，新的值必须与已有记录的itemnumber值不同，否则系统会提示错误。</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"小结（sql汇总）\"><a href=\"#小结（sql汇总）\" class=\"headerlink\" title=\"小结（sql汇总）\"></a>小结（sql汇总）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建数据库</span><br><span class=\"line\">CREATE DATABASE demo；</span><br><span class=\"line\">-- 删除数据库</span><br><span class=\"line\">DROP DATABASE demo；</span><br><span class=\"line\">-- 查看数据库</span><br><span class=\"line\">SHOW DATABASES;</span><br><span class=\"line\">-- 创建数据表：</span><br><span class=\"line\">CREATE TABLE demo.test</span><br><span class=\"line\">(  </span><br><span class=\"line\">  barcode text,</span><br><span class=\"line\">  goodsname text,</span><br><span class=\"line\">  price int</span><br><span class=\"line\">); </span><br><span class=\"line\">-- 查看表结构</span><br><span class=\"line\">DESCRIBE demo.test;</span><br><span class=\"line\">-- 查看所有表</span><br><span class=\"line\">DESCRIBE TABLES;</span><br><span class=\"line\">-- 添加主键</span><br><span class=\"line\">ALTER TABLE demo.test</span><br><span class=\"line\">ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;</span><br><span class=\"line\">-- 向表中添加数据</span><br><span class=\"line\">INSERT INTO demo.test</span><br><span class=\"line\">(barcode,goodsname,price)</span><br><span class=\"line\">VALUES (&#x27;0001&#x27;,&#x27;本&#x27;,3);</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"02-字段：这么多字段类型，该怎么定义？\"><a href=\"#02-字段：这么多字段类型，该怎么定义？\" class=\"headerlink\" title=\"02 | 字段：这么多字段类型，该怎么定义？\"></a>02 | 字段：这么多字段类型，该怎么定义？</h2><blockquote>\n<p>MySQL中有很多字段类型，比如整数、文本、浮点数，等等。如果类型定义合理，就能节省存储空间，提升数据查询和处理的速度，相反，如果数据类型定义不合理，就有可能会导致数据超出取值范围，引发系统报错，甚至可能会出现计算错误的情况，进而影响到整个系统。</p>\n</blockquote>\n<br>\n\n<br>\n\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5qvu0awjo5s0.webp\" width=\"75%\"/>\n\n\n\n<ul>\n<li><p>在评估用哪种整数类型的时候，<strong>需要考虑存储空间和可靠性的平衡问题</strong>：一方面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间，使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起系统错误，影响可靠性。</p>\n</li>\n<li><p>最佳实践</p>\n<ul>\n<li>在评估用哪种整数类型的时候，<strong>需要考虑存储空间和可靠性的平衡问题</strong>（在实际工作中，系统故障产生的成本远远超过增加几个字段存储空间所产生的成本）</li>\n<li><strong>确保数据不会超过取值范围</strong>，再去考虑如何节省存储空间</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"浮点数类型和定点数类型\"><a href=\"#浮点数类型和定点数类型\" class=\"headerlink\" title=\"浮点数类型和定点数类型\"></a>浮点数类型和定点数类型</h3><blockquote>\n<p>可以把整数看成小数的一个特例</p>\n</blockquote>\n<ul>\n<li>FLOAT表示单精度浮点数</li>\n<li>DOUBLE表示双精度浮点数</li>\n<li>REAL默认就是DOUBLE。如果你把SQL模式设定为启用“REAL_AS_FLOAT”，那么，MySQL就认为REAL是FLOAT</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果要启用“REAL_AS_FLOAT”，就可以通过以下SQL语句实现：</span><br><span class=\"line\">SET sql_mode = “REAL_AS_FLOAT”;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>FLOAT占用字节数少，取值范围小；DOUBLE占用字节数多，取值范围也大</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3rxrxdypui80.webp\" width=\"70%\" />\n\n\n\n<ul>\n<li>为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？</li>\n</ul>\n<blockquote>\n<p>原因是：MySQL是按照这个格式存储浮点数的：符号（S）、尾数（M）和阶码（E）。因此，无论有没有符号，MySQL的浮点数都会存储表示符号的部分。因此，所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p>\n</blockquote>\n<br>\n\n<h4 id=\"浮点数类型有缺陷：不精准\"><a href=\"#浮点数类型有缺陷：不精准\" class=\"headerlink\" title=\"浮点数类型有缺陷：不精准\"></a>浮点数类型有缺陷：不精准</h4><ul>\n<li>不精准问题原因在于：<strong>MySQL对浮点类型数据的存储方式上</strong></li>\n</ul>\n<blockquote>\n<p>MySQL用4个字节存储FLOAT类型数据，用8个字节来存储DOUBLE类型数据。无论哪个，都是采用二进制的方式来进行存储的。比如9.625，用二进制来表达，就是1001.101，或者表达成1.001101×2^3。看到了吗？如果尾数不是0或5（比如9.624），你就无法用一个二进制数来精确表达。怎么办呢？就只好在取值允许的范围内进行近似（四舍五入）。</p>\n</blockquote>\n<ul>\n<li>为什么数据类型是DOUBLE的时候，计算结果误差比FLOAT小一点？</li>\n</ul>\n<blockquote>\n<p>原因：DOUBLE有8位字节，精度更高</p>\n</blockquote>\n<br>\n\n<h4 id=\"定点数类型：DECIMAL\"><a href=\"#定点数类型：DECIMAL\" class=\"headerlink\" title=\"定点数类型：DECIMAL\"></a><strong>定点数类型：DECIMAL</strong></h4><ul>\n<li>DECIMAL的存储方式决定了它一定是精准的</li>\n</ul>\n<blockquote>\n<p>浮点数类型是把十进制数转换成二进制数存储，DECIMAL则不同，它是把十进制数的整数部分和小数部分拆开，分别转换成十六进制数，进行存储。这样，所有的数值，就都可以精准表达了，不会存在因为无法表达而损失精度的问题</p>\n</blockquote>\n<h4 id=\"小结：浮点数和定点数的特点-适用场景-最佳实践\"><a href=\"#小结：浮点数和定点数的特点-适用场景-最佳实践\" class=\"headerlink\" title=\"小结：浮点数和定点数的特点/适用场景/最佳实践\"></a>小结：浮点数和定点数的特点/适用场景/最佳实践</h4><blockquote>\n<p>浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）；定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景（比如涉及金额计算的场景）</p>\n</blockquote>\n<br>\n\n<h3 id=\"文本类型\"><a href=\"#文本类型\" class=\"headerlink\" title=\"文本类型\"></a>文本类型</h3><ul>\n<li>CHAR(M)：固定长度字符串。CHAR(M)类型必须预先定义字符串长度。如果太短，数据可能会超出范围；如果太长，又浪费存储空间。</li>\n<li>VARCHAR(M)： 可变长度字符串。VARCHAR(M)也需要预先知道字符串的最大长度，不过只要不超过这个最大长度，具体存储的时候，是按照实际字符串长度存储的。</li>\n<li>TEXT：字符串。系统自动按照实际长度存储，不需要预先定义长度。</li>\n<li>ENUM： 枚举类型，取值必须是预先设定的一组字符串值范围之内的一个，必须要知道字符串所有可能的取值。</li>\n<li>SET：是一个字符串对象，取值必须是在预先设定的字符串值范围之内的0个或多个，也必须知道字符串所有可能的取值。</li>\n</ul>\n<ul>\n<li><p>TEXT类型也有4种，它们的区别就是最大长度不同。</p>\n<ul>\n<li><p>TINYTEXT：占用255字符。</p>\n</li>\n<li><p>TEXT： 占用65535字符。</p>\n</li>\n<li><p>MEDIUMTEXT：占用16777215字符。</p>\n</li>\n<li><p>LONGTEXT： 占用4294967295字符（相当于4GB）</p>\n</li>\n</ul>\n</li>\n<li><p>TEXT类型存在的问题：<strong>由于实际存储的长度不确定，MySQL不允许TEXT类型的字段做主键。遇到这种情况，你只能采用CHAR(M)，或者VARCHAR(M)</strong></p>\n</li>\n<li><p>最佳实践</p>\n<ul>\n<li>项目中，只要不是主键字段，就可以按照数据可能的最大长度，选择这几种TEXT类型中的的一种，作为存储字符串的数据类型</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"日期与时间类型\"><a href=\"#日期与时间类型\" class=\"headerlink\" title=\"日期与时间类型\"></a>日期与时间类型</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4fo8vblt22w0.webp\" width=\"70%\" />\n\n<ul>\n<li>最佳实践</li>\n</ul>\n<blockquote>\n<p><strong>在实际项目中，尽量用DATETIME类型</strong>。因为这个数据类型包括了完整的日期和时间信息，使用起来比较方便</p>\n<p>为了确保数据的完整性和系统的稳定性，优先考虑使用DATETIME类型。因为虽然DATETIME类型占用的存储空间最多，但是它表达的时间最为完整，取值范围也最大</p>\n</blockquote>\n<ul>\n<li>为什么时间类型TIME的取值范围不是-23:59:59～23:59:59呢</li>\n</ul>\n<blockquote>\n<p>原因是MySQL设计的TIME类型，不光表示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过24小时。</p>\n</blockquote>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 修改字段类型语句</span><br><span class=\"line\">ALTER TABLE demo.goodsmaster</span><br><span class=\"line\">MODIFY COLUMN price DOUBLE;</span><br><span class=\"line\">-- 计算字段合计函数：</span><br><span class=\"line\">SELECT SUM(price)</span><br><span class=\"line\">FROM demo.goodsmaster;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在定义数据类型时，如果确定是整数，就用INT；如果是小数，一定用定点数类型DECIMAL；如果是字符串，只要不是主键，就用TEXT；如果是日期与时间，就用DATETIME。（首先确保你的系统不会因为数据类型定义出错。）</p>\n</blockquote>\n<br>\n\n<br>\n\n<h2 id=\"03-表：怎么创建和修改数据表？\"><a href=\"#03-表：怎么创建和修改数据表？\" class=\"headerlink\" title=\"03 | 表：怎么创建和修改数据表？\"></a>03 | 表：怎么创建和修改数据表？</h2><h3 id=\"创建数据表\"><a href=\"#创建数据表\" class=\"headerlink\" title=\"创建数据表\"></a>创建数据表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &lt;表名&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">字段名1 数据类型 [字段级别约束] [默认值]，</span><br><span class=\"line\">字段名2 数据类型 [字段级别约束] [默认值]，</span><br><span class=\"line\">......</span><br><span class=\"line\">[表级别约束]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>“约束”限定了表中数据应该满足的条件</strong></li>\n<li>MySQL会根据这些限定条件，对表的操作进行监控，阻止破坏约束条件的操作执行，并提示错误，从而确保表中数据的唯一性、合法性和完整性</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"都有哪些约束\"><a href=\"#都有哪些约束\" class=\"headerlink\" title=\"都有哪些约束\"></a>都有哪些约束</h3><p><strong>1.非空约束</strong></p>\n<ul>\n<li>非空约束表示字段值不能为空</li>\n</ul>\n<p><strong>2.唯一性约束</strong></p>\n<ul>\n<li>唯一性约束表示这个字段的值不能重复。<strong>满足主键约束的字段，自动满足非空约束，但是满足唯一性约束的字段，则可以是空值</strong></li>\n</ul>\n<p><strong>3.自增约束</strong></p>\n<ul>\n<li>在数据表中，只有整数类型的字段（包括TINYINT、SMALLINT、MEDIUMINT、INT和BIGINT），才可以定义自增约束。自增约束的字段，每增加一条数据，值自动增加1。</li>\n<li>给自增约束的字段赋值，这个时候，MySQL会重置自增约束字段的自增基数，下次添加数据的时候，自动以自增约束字段的最大值加1为新的字段值。</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"如何修改表\"><a href=\"#如何修改表\" class=\"headerlink\" title=\"如何修改表\"></a>如何修改表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE demo.importheadhist</span><br><span class=\"line\">LIKE demo.importhead;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE demo.importheadhist ADD confirmer INT;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE demo.importheadhist ADD confirmdate DATETIME;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"修改字段\"><a href=\"#修改字段\" class=\"headerlink\" title=\"修改字段\"></a>修改字段</h3><ul>\n<li>change 可以更改列名 和 列类型 (每次都要把新列名和旧列名写上, 即使两个列名没有更改,只是改了类型)</li>\n<li>modify 只能更改列属性 只需要写一次列名, 比change 省事点</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- modify 能修改字段类型、类型长度、默认值、注释</span><br><span class=\"line\">ALTER  TABLE 表名 MODIFY [COLUMN] 字段名 新数据类型 新类型长度  新默认值  新注释;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER  TABLE 表名 CHANGE [column] 旧字段名 新字段名 新数据类型;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 指定添加字段在表中位置</span><br><span class=\"line\">ALTER TABLE demo.importheadhist ADD suppliername TEXT AFTER supplierid;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 PRIMARY KEY</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 NOT NULL</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 UNIQUE</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 DEFAULT 值</span><br><span class=\"line\">);</span><br><span class=\"line\">-- 这里要注意自增类型的条件，字段类型必须是整数类型。</span><br><span class=\"line\">CREATE TABLE</span><br><span class=\"line\">(</span><br><span class=\"line\">字段名 字段类型 AUTO_INCREMENT</span><br><span class=\"line\">);</span><br><span class=\"line\">-- 在一个已经存在的表基础上，创建一个新表</span><br><span class=\"line\">CREATE demo.importheadhist LIKE demo.importhead;</span><br><span class=\"line\">-- 修改表的相关语句</span><br><span class=\"line\">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 数据类型;</span><br><span class=\"line\">ALTER TABLE 表名 ADD COLUMN 字段名 字段类型 FIRST|AFTER 字段名;</span><br><span class=\"line\">ALTER TABLE 表名 MODIFY 字段名 字段类型 FIRST|AFTER 字段名;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"04-增删改查：如何操作表中的数据？\"><a href=\"#04-增删改查：如何操作表中的数据？\" class=\"headerlink\" title=\"04 | 增删改查：如何操作表中的数据？\"></a>04 | 增删改查：如何操作表中的数据？</h2><h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 [(字段名 [,字段名] ...)] VALUES (值的列表);</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"插入数据记录\"><a href=\"#插入数据记录\" class=\"headerlink\" title=\"插入数据记录\"></a>插入数据记录</h3><ul>\n<li><strong>部分插入一条数据记录是可以的，但前提是，没有赋值的字段，一定要让MySQL知道如何处理，比如可以为空、有默认值，或者是自增约束字段，等等，否则，MySQL会提示错误的</strong></li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"插入查询结果\"><a href=\"#插入查询结果\" class=\"headerlink\" title=\"插入查询结果\"></a>插入查询结果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 （字段名）</span><br><span class=\"line\">SELECT 字段名或值</span><br><span class=\"line\">FROM 表名</span><br><span class=\"line\">WHERE 条件</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM 表名 WHERE 条件</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE 表名 SET 字段名=值 WHERE 条件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>不要修改主键字段的值</strong>，如果你必须要修改主键的值，那有可能就是主键设置得不合理</li>\n</ul>\n<br>\n\n<br>\n\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT *|字段列表</span><br><span class=\"line\">FROM 数据源</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\">GROUP BY 字段</span><br><span class=\"line\">HAVING 条件</span><br><span class=\"line\">ORDER BY 字段</span><br><span class=\"line\">LIMIT 起始点，行数</span><br><span class=\"line\"></span><br><span class=\"line\">-- GROUP BY：作用是告诉MySQL，查询结果要如何分组，经常与MySQL的聚合函数一起使用</span><br><span class=\"line\">-- HAVING：用于筛选查询结果，跟WHERE类似</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 [(字段名 [,字段名] ...)] VALUES (值的列表);</span><br><span class=\"line\"> </span><br><span class=\"line\">INSERT INTO 表名 （字段名）</span><br><span class=\"line\">SELECT 字段名或值</span><br><span class=\"line\">FROM 表名</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\"> </span><br><span class=\"line\">DELETE FROM 表名</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\"> </span><br><span class=\"line\">UPDATE 表名</span><br><span class=\"line\">SET 字段名=值</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT *|字段列表</span><br><span class=\"line\">FROM 数据源</span><br><span class=\"line\">WHERE 条件</span><br><span class=\"line\">GROUP BY 字段</span><br><span class=\"line\">HAVING 条件</span><br><span class=\"line\">ORDER BY 字段</span><br><span class=\"line\">LIMIT 起始点，行数</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果我们把查询的结果插入到表中时，导致主键约束或者唯一性约束被破坏了，就可以用“ON DUPLICATE”关键字进行处理。这个关键字的作用是，告诉MySQL，如果遇到重复的数据，该如何处理。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO demo.goodsmaster </span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM demo.goodsmaster1 as a</span><br><span class=\"line\">ON DUPLICATE KEY UPDATE barcode = a.barcode,goodsname=a.goodsname;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h1 id=\"05-主键：如何正确设置主键？\"><a href=\"#05-主键：如何正确设置主键？\" class=\"headerlink\" title=\"05 | 主键：如何正确设置主键？\"></a>05 | 主键：如何正确设置主键？</h1><h3 id=\"业务字段做主键\"><a href=\"#业务字段做主键\" class=\"headerlink\" title=\"业务字段做主键\"></a>业务字段做主键</h3><ul>\n<li><strong>尽量不要用业务字段，也就是跟业务有关的字段做主键</strong>。毕竟，作为项目设计的技术人员，我们谁也无法预测在项目的整个生命周期中，哪个业务字段会因为项目的业务需求而有重复，或者重用之类的情况出现</li>\n</ul>\n<br>\n\n<h3 id=\"使用自增字段做主键\"><a href=\"#使用自增字段做主键\" class=\"headerlink\" title=\"使用自增字段做主键\"></a>使用自增字段做主键</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE demo.trans AS a,demo.membermaster AS b</span><br><span class=\"line\">SET a.memberid=b.id</span><br><span class=\"line\">WHERE a.transactionno &gt; 0  </span><br><span class=\"line\">AND a.cardno = b.cardno; </span><br><span class=\"line\">-- 这样操作可以不用删除trans的内容，在实际工作中更适合</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果是一个小项目，只有一个MySQL数据库服务器，用添加自增字段作为主键的办法是可以的。不过，这并不意味着，在任何情况下你都可以这么做</li>\n<li><strong>自增字段做主键，对于单机系统来说是没问题的。但是，如果有多台服务器，各自都可以录入数据，那就不一定适用了。因为如果每台机器各自产生的数据需要合并，就可能会出现主键重复的问题</strong></li>\n</ul>\n<br>\n\n<h3 id=\"手动赋值字段做主键\"><a href=\"#手动赋值字段做主键\" class=\"headerlink\" title=\"手动赋值字段做主键\"></a>手动赋值字段做主键</h3><ul>\n<li><strong>我们可以采用手动赋值的办法，通过一定的逻辑，确保字段值在全系统的唯一性，这样就可以规避主键重复的问题了</strong></li>\n</ul>\n<blockquote>\n<p>取消字段“id”的自增属性，改成信息系统在添加会员的时候对“id”进行赋值。</p>\n<p>门店在添加会员的时候，先到总部MySQL数据库中获取这个最大值，在这个基础上加1，然后用这个值作为新会员的“id”，同时，更新总部MySQL数据库管理信息表中的当前会员编号的最大值</p>\n<p>各个门店添加会员的时候，都对同一个总部MySQL数据库中的数据表字段进行操作，就解决了各门店添加会员时会员编号冲突的问题，同时也避免了使用业务字段导致数据错误的问题</p>\n</blockquote>\n<br>\n\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>刚开始使用MySQL时，很多人都很容易犯的错误是喜欢用业务字段做主键，想当然地认为了解业务需求，但实际情况往往出乎意料，而更改主键设置的成本非常高。所以，如果你的系统比较复杂，尽量给表加一个字段做主键，采用手动赋值的办法，虽然系统开发的时候麻烦一点，却可以避免后面出大问题。</li>\n</ul>\n<br>\n\n<br>\n\n<h1 id=\"06-外键和连接：如何做关联查询？\"><a href=\"#06-外键和连接：如何做关联查询？\" class=\"headerlink\" title=\"06 | 外键和连接：如何做关联查询？\"></a>06 | 外键和连接：如何做关联查询？</h1><ul>\n<li><strong>把分散在多个不同的表里的数据查询出来的操作，就是多表查询</strong></li>\n</ul>\n<br>\n\n<h3 id=\"创建外键\"><a href=\"#创建外键\" class=\"headerlink\" title=\"创建外键\"></a>创建外键</h3><ul>\n<li><strong>外键就是从表中用来引用主表中数据的那个公共字段</strong></li>\n</ul>\n<blockquote>\n<p>在MySQL中，外键是通过外键约束来定义的。外键约束就是约束的一种，它必须在从表中定义，包括指明哪个是外键字段，以及外键字段所引用的主表中的主键字段是什么。MySQL系统会根据外键约束的定义，监控对主表中数据的删除操作。如果发现要删除的主表记录，正在被从表中某条记录的外键字段所引用，MySQL就会提示错误，从而确保了关联数据不会缺失。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-- 外键约束定义的语法结构</span><br><span class=\"line\">[CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY 字段名</span><br><span class=\"line\">REFERENCES &lt;主表名&gt; 字段名</span><br><span class=\"line\"></span><br><span class=\"line\">-- 外键约束可以在创建表的时候定义</span><br><span class=\"line\">CREATE TABLE 从表名</span><br><span class=\"line\">(</span><br><span class=\"line\">  字段名 类型,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">-- 定义外键约束，指出外键字段和参照的主表字段</span><br><span class=\"line\">CONSTRAINT 外键约束名</span><br><span class=\"line\">FOREIGN KEY (字段名) REFERENCES 主表名 (字段名)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">-- 可以通过修改表来定义。</span><br><span class=\"line\">ALTER TABLE 从表名 ADD CONSTRAINT 约束名 FOREIGN KEY 字段名 REFERENCES 主表名 （字段名）;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><ul>\n<li><p>MySQL中，有2种类型的连接，分别是内连接（INNER JOIN）和外连接（OUTER JOIN</p>\n<ul>\n<li>内连接表示查询结果只返回符合连接条件的记录</li>\n<li>外连接则不同，表示查询结果返回某一个表中的所有记录，以及另一个表中满足连接条件的记录<ul>\n<li>左连接，一般简写成LEFT JOIN，返回左边表中的所有记录，以及右表中符合连接条件的记录。</li>\n<li>右连接，一般简写成RIGHT JOIN，返回右边表中的所有记录，以及左表中符合连接条件的记录</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>在MySQL里面，关键字JOIN、INNER JOIN、CROSS JOIN的含义是一样的，都表示内连接</p>\n</li>\n</ul>\n<blockquote>\n<p>大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以，MySQL允许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p>\n</blockquote>\n<br>\n\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 定义外键约束：</span><br><span class=\"line\">CREATE TABLE 从表名</span><br><span class=\"line\">(</span><br><span class=\"line\">字段 字段类型</span><br><span class=\"line\">....</span><br><span class=\"line\">CONSTRAINT 外键约束名称</span><br><span class=\"line\">FOREIGN KEY (字段名) REFERENCES 主表名 (字段名称)</span><br><span class=\"line\">);</span><br><span class=\"line\">ALTER TABLE 从表名 ADD CONSTRAINT 约束名 FOREIGN KEY 字段名 REFERENCES 主表名 （字段名）;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 连接查询</span><br><span class=\"line\">SELECT 字段名</span><br><span class=\"line\">FROM 表名 AS a</span><br><span class=\"line\">JOIN 表名 AS b</span><br><span class=\"line\">ON (a.字段名称=b.字段名称);</span><br><span class=\"line\"> </span><br><span class=\"line\">SELECT 字段名</span><br><span class=\"line\">FROM 表名 AS a</span><br><span class=\"line\">LEFT JOIN 表名 AS b</span><br><span class=\"line\">ON (a.字段名称=b.字段名称);</span><br><span class=\"line\"> </span><br><span class=\"line\">SELECT 字段名</span><br><span class=\"line\">FROM 表名 AS a</span><br><span class=\"line\">RIGHT JOIN 表名 AS b</span><br><span class=\"line\">ON (a.字段名称=b.字段名称);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>无法承担外键约束的成本，也可以不定义外键约束，但是一定要在应用层面实现外键约束的逻辑功能，这样才能确保系统的正确可靠</strong></li>\n</ul>\n<br>\n\n<br>\n\n<h1 id=\"07-条件语句：WHERE-与-HAVING有什么不同\"><a href=\"#07-条件语句：WHERE-与-HAVING有什么不同\" class=\"headerlink\" title=\"07 | 条件语句：WHERE 与 HAVING有什么不同?\"></a>07 | 条件语句：WHERE 与 HAVING有什么不同?</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"08-聚合函数：怎么高效地进行分组统计？\"><a href=\"#08-聚合函数：怎么高效地进行分组统计？\" class=\"headerlink\" title=\"08 | 聚合函数：怎么高效地进行分组统计？\"></a>08 | 聚合函数：怎么高效地进行分组统计？</h1><br>\n\n<br>\n\n<br>\n\n<h1 id=\"09-时间函数：时间类数据，MySQL是怎么处理的？\"><a href=\"#09-时间函数：时间类数据，MySQL是怎么处理的？\" class=\"headerlink\" title=\"09 | 时间函数：时间类数据，MySQL是怎么处理的？\"></a>09 | 时间函数：时间类数据，MySQL是怎么处理的？</h1><br/>\n\n<h1 id=\"SQL汇总\"><a href=\"#SQL汇总\" class=\"headerlink\" title=\"SQL汇总\"></a>SQL汇总</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建数据库</span><br><span class=\"line\">CREATE DATABASE demo；</span><br><span class=\"line\">-- 删除数据库</span><br><span class=\"line\">DROP DATABASE demo；</span><br><span class=\"line\">-- 查看数据库</span><br><span class=\"line\">SHOW DATABASES;</span><br><span class=\"line\">-- 创建数据表：</span><br><span class=\"line\">CREATE TABLE demo.test</span><br><span class=\"line\">(  </span><br><span class=\"line\">  barcode text,</span><br><span class=\"line\">  goodsname text,</span><br><span class=\"line\">  price int</span><br><span class=\"line\">); </span><br><span class=\"line\">-- 查看表结构</span><br><span class=\"line\">DESCRIBE demo.test;</span><br><span class=\"line\">-- 查看所有表</span><br><span class=\"line\">-- DESCRIBE TABLES;</span><br><span class=\"line\">-- 添加主键</span><br><span class=\"line\">ALTER TABLE demo.test</span><br><span class=\"line\">ADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT;</span><br><span class=\"line\">-- 向表中添加数据</span><br><span class=\"line\">INSERT INTO demo.test</span><br><span class=\"line\">(barcode,goodsname,price)</span><br><span class=\"line\">VALUES (&#x27;0001&#x27;,&#x27;本&#x27;,3);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 修改字段类型语句</span><br><span class=\"line\">ALTER TABLE demo.goodsmaster</span><br><span class=\"line\">MODIFY COLUMN price DOUBLE;</span><br><span class=\"line\">-- 计算字段合计函数：</span><br><span class=\"line\">SELECT SUM(price)</span><br><span class=\"line\">FROM demo.goodsmaster;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"参考延伸\"><a href=\"#参考延伸\" class=\"headerlink\" title=\"参考延伸\"></a>参考延伸</h1><ul>\n<li><a class=\"link\"   href=\"https://www.sqlstyle.guide/zh/\" >SQL样式指南<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li></li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>work_bench 的熟悉使用</li>\n<li>浮点数存储数据的方式，需要深入理解一下</li>\n<li>需要了解，修改表名，不同位置插入等</li>\n</ol>\n</blockquote>\n<br>\n\n<br>\n\n<br>\n\n<img src=\"\" width=\"70\"/>\n\n<br>\n\n"},{"title":"《Nginx体系化深度精讲》study notes","author":"ratears","date":"2019-05-23T18:47:23.000Z","updated":"2022-05-23T18:47:23.000Z","_content":"\n# Nginx初体验\n\n## Nginx概念\n\n- Nginx (engine x) 是一个**高性能的HTTP和反向代理web服务器**，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，公开版本1.19.6发布于2020年12月15日。\n\n- 其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2022年01月25日，nginx 1.21.6发布。\n- Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好。\n\n<br>\n\n<br>\n\n## Nginx缘起历史\n\n- 互联网数据的快速增长\n- Apache处理请求的低效性\n\n|        Apache        |        Nginx         |\n| :------------------: | :------------------: |\n| 一个进程处理一个请求 | 一个进程处理多个请求 |\n|       阻塞式的       |      非阻塞式的      |\n\n<br>\n\n<br>\n\n## Nginx三个主要企业应用场景\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4z8gliurmhc0.webp\" width=\"90%\" />\n\n<br>\n\n<br>\n\n## Nginx核心优势\n\n- 高并发、高性能\n- 扩展性好\n- 异步非阻塞的事件驱动模型\n- 高可靠性\n- 热部署\n\n<br>\n\n<br>\n\n## 安装rpm包Nginx\n\n```shell\n# （1）下载epel yum源\nyum install epel-release -y\n\n# （2）查看yum源里可安装的nginx\nyum list all |grep nginx\n\n# （3）下载nginx\nyum install nginx -y\n\n# （4）列出 nginx 安装的文件\nrpm -ql nginx\n\t\n# （5）查看nginx启动文件所在目录\nrpm -ql nginx |grep bin\n\n# Nginx的二进制文件所在目录\n/usr/sbin/nginx\n```\n\n<br>\n\n<br>\n\n<br>\n\n# Nginx进程结构与热部署\n\n## 多进程与多线程\n\n### 多进程\n\n\n\n## Nginx的进程结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/56b03da1dfa88b5a292f320a90fbb9d.2bzqwmpmcuas.webp\" width=\"70%\"/>\n\n- 真正处理请求的不是 master process，二是 worker process\n\n<br>\n\n<br>\n\n## Linux的信号量管理机制\n\n- linux中的所有信号量\n\n```bash\n[root@localhost nginx]# kill -l\n 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP\n 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1\n11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM\n16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP\n21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ\n26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR\n31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3\n38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8\n43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13\n48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12\n53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7\n58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2\n63) SIGRTMAX-1  64) SIGRTMAX\n```\n\n- 常用信号量\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2l38lbs30tc0.webp\" width=\"50%\"/>\n\n<br>\n\n<br>\n\n## 利用信号量管理Nginx\n\n```bash\n# 关闭nginx\nkill -s SIGTERM [nginx master进程pid]\n\n# 重新读取配置文件，会关闭之前的work子进程，生成新的work子进程 \nkill -s SIGHUP [nginx master进程pid]\n```\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.682s0oj5i400.webp\" width=\"50%\"/>\n\n<br>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4ouapvas0x40.webp\" width=\"50%\"/>\n\n<br/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.zftbgjpnhzk.webp\" width=\"50%\"/>\n\n<br>\n\n<br>\n\n## 配置文件重载的原理真相\n\n### `reload` 重载配置文件的流程\n\n1. 向master进程发送HUP信号（reload命令）\n2. master进程检查配置语法是否正确\n3. master进程打开监听端口\n4. master进程使用新的配置文件启动新的worker子进程\n5. master进程向老的worker子进程发送QUIT信号\n6. 旧的worker进程关闭监听句柄，处理完当前连接后关闭进程\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7cv9qios6300.webp\" width=\"65%\" />\n\n<br>\n\n<br>\n\n## Nginx的热部署\n\n### 热升级的流程（前提：新旧Nginx的编译目录一致）\n\n1. 将旧的nginx文件替换成新的nginx文件（二进制主程序文件）\n2. 向master进程发送USR2信号\n3. master进程修改pid文件，加后缀.oldbin\n4. master进程用新nginx文件启动新master进程\n5. 向旧的master进程发送WINCH信号，旧的worker子进程退出\n6. 回滚槽形：向旧master发送HUP ,向新的master发送QUIT\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3s80krndr7m0.webp\" width=\"75%\" />\n\n<br>\n\n### Nginx热部署完整步骤演示\n\n#### Nginx热升级核心命令解释\n\n```bash\n# 备份nginx二进制文件\ncp nginx nginx.bak\n\n# 生成新的nginx 主进程 和子进程（新老master、worker进程共存）\nkill -s SIGUSR2 [pid]\n\n# 关闭nginx master进程下的worker子进程\nkill -s SIGWINCH [pid]\n\n# 关闭进程\nkill -s SIGQUIT [pid]\n\n# 让旧master进程 启动work子进程（使用的还是旧的nginx二进制文件）\nkill -s SIGHUP [pid]\n```\n\n- 注意事项\n\n> 不能使用 `kill -s SIGHU []` 退出旧的master进程，如果这样做的话，旧的 master主进程和其子进程会直接退出（被kill掉），这样（当新启的nginx进程有问题时）就无法回滚。\n>\n> 所以应该使用 `kill -s SIGWINCH []`，先将旧的master主进程下的work子进程全部kill掉，验证新启的nginx进程没有问题后，再使用 `kill -s SIGHU []`\tkill掉旧的master进程。如果验证新启的nginx进程有问题，这时使用 `kill -s SIGHUP []` 就可以让旧master进程重新启动work子进程。（达到回滚的效果）\n\n<br/>\n\n#### Nginx正常热升级详细步骤演示\n\n```bash\n# （1）查看nginx处于正常运行状态\n[root@bogon nginx]# ps -ef |grep nginx\nroot     105723   1480  0 16:35 pts/0    00:00:00 grep --color=auto nginx\n[root@bogon nginx]# /usr/local/nginx/sbin/nginx\n[root@bogon nginx]# ps -ef |grep nginx\nroot     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process\nroot     105747   1480  0 16:35 pts/0    00:00:00 grep --color=auto nginx\n\n# （2）备份nginx的二进制文件，并将新的nginx替换成旧的nginx\n[root@bogon nginx]# cd /usr/local/nginx/sbin/\n[root@bogon sbin]# ll\n总用量 6128\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n[root@bogon sbin]# cp nginx nginx.old\n[root@bogon sbin]# ll\n总用量 12256\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:36 nginx.old\n\n# （3）给旧的nginx master 进程发送 SIGUSR2信号后。nginx 新旧master进程、worker子进程共存。\n[root@bogon sbin]# ps -ef |grep nginx\nroot     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process\nroot     106243   1480  0 16:45 pts/0    00:00:00 grep --color=auto nginx\n[root@bogon sbin]# kill -s SIGUSR2 105739\n[root@bogon sbin]# ps -ef |grep nginx\nroot     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process\nroot     106255 105739  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     106268   1480  0 16:45 pts/0    00:00:00 grep --color=auto nginx\n\n\n[root@bogon nginx]# ll pid/\n总用量 8\n-rw-r--r--. 1 root root 7 10月  6 16:45 nginx.pid\n-rw-r--r--. 1 root root 7 10月  6 16:35 nginx.pid.oldbin\n[root@bogon nginx]# cat pid/nginx.pid\n106255\n[root@bogon nginx]# cat pid/nginx.pid.oldbin\n105739\n\n\n# （4）向旧的master进程发送 SIGWINCH 信号，旧的 worker子进程退出。此时，所有请求会被新的worker进程处理\n[root@bogon nginx]# kill -s SIGWINCH 105739\n[root@bogon nginx]# ps -ef |grep nginx\nroot     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nroot     106255 105739  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     106643   1480  0 16:52 pts/0    00:00:00 grep --color=auto nginx\n\n# （5）验证新的ngixn 的 worker子进程没有错误后，向旧的master进程发送 SIGQUIT 信号。此时 旧的master进程退出。\n# 至此，nginx热升级成功\n[root@bogon nginx]# kill -s SIGQUIT 105739\n[root@bogon nginx]#\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     106814   1480  0 16:56 pts/0    00:00:00 grep --color=auto nginx\n\n[root@bogon nginx]# ll pid/\n总用量 4\n-rw-r--r--. 1 root root 7 10月  6 16:45 nginx.pid\n[root@bogon nginx]# cat pid/nginx.pid\n106255\n\n[root@bogon nginx]# ll sbin/\n总用量 12256\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:36 nginx.old\n[root@bogon nginx]# rm -rf sbin/nginx.old\n```\n\n<br/>\n\n#### Nginx热升级——回滚情形演示\n\n```bash\n# （1）~（2）查看nginx处于正常运行状态；备份nginx的二进制文件，并将新的nginx替换成旧的nginx\n[root@bogon nginx]# ll sbin/\n总用量 6128\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n[root@bogon nginx]# cp sbin/nginx sbin/nginx.bak\n[root@bogon nginx]# ll sbin/\n总用量 12256\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n-rwxr-xr-x. 1 root root 6272440 10月  6 17:01 nginx.bak\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     107093   1480  0 17:01 pts/0    00:00:00 grep --color=auto nginx\n\n# （3）给旧的nginx master 进程发送 SIGUSR2信号后。nginx 新旧master进程、worker子进程共存。\n[root@bogon nginx]# kill -s SIGUSR2 106255\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process\nroot     107217   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx\n\n# （4）向旧的master进程发送 SIGWINCH 信号，旧的 worker子进程退出。此时，所有请求会被新的worker进程处理\n[root@bogon nginx]# kill -s SIGWINCH 106255\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nroot     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process\nroot     107264   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx\n\n# （5）验证新的ngixn 的 worker子进程 发现有错误，开启回滚：\n# 向旧的master 发送 SIGHUP 信号；向 新的master进程发送 SIGQUIT 信号\n[root@bogon nginx]# kill -s SIGWINCH 106255\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nroot     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process\nroot     107264   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx\n[root@bogon nginx]# kill -s SIGHUP 106255\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nroot     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107401 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107402 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107403 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107404 106255  0 17:07 ?        00:00:00 nginx: worker process\nroot     107412   1480  0 17:07 pts/0    00:00:00 grep --color=auto nginx\n[root@bogon nginx]# kill -s SIGQUIT 107206\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107401 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107402 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107403 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107404 106255  0 17:07 ?        00:00:00 nginx: worker process\nroot     107440   1480  0 17:08 pts/0    00:00:00 grep --color=auto nginx\n\n# 至此，nginx热升级回滚成功\n```\n\n<br>\n\n<br>\n\n## Nginx模块化设计机制\n\n### 模块结构图\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5piekf14yes0.webp\" width=\"60%\" />\n\n<br/>\n\n<br>\n\n### 模块体系结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2miqh0m6jdo0.webp\" width=\"40%\" />\n\n<br/>\n\n<br>\n\n## Nginx编译安装的配置参数\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7jfdxqlxm340.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n## 定制编译安装Nginx\n\n```bash\n# （0）准备nginx的管理用户\n[root@bogon install]# useradd nginx\n\n# （1）准备安装文件\n[root@localhost install]# wget https://nginx.org/download/nginx-1.22.1.tar.gz\n\n[root@bogon install]# ll\n总用量 3688\n-rw-r--r--. 1 root root 1073322 5月  24 22:29 nginx-1.22.0.tar.gz\n-rw-r--r--. 1 root root 2085854 10月  6 16:08 pcre-8.43.tar.gz\n-rw-r--r--. 1 root root  607698 1月  16 2017 zlib-1.2.11.tar.gz\n\n\n# （2）解压安装文件\n[root@bogon install]# ll\n总用量 16\ndrwxr-xr-x.  8 1001  1001  158 5月  24 07:59 nginx-1.22.0\ndrwxr-xr-x.  7 1169  1169 8192 2月  24 2019 pcre-8.43\ndrwxr-xr-x. 14  501 games 4096 1月  16 2017 zlib-1.2.11\n\n# （3）解压后进入 nginx源码目录，查看相关编译参数\n[root@bogon nginx-1.22.0]# ./configure --help\n\n# （4）编译安装前下载相关依赖\n[root@bogon nginx-1.22.0]# yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel gd gd-devel\n\n# （5）编译安装\n[root@bogon nginx-1.22.0]# ./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/conf/nginx.conf --user=nginx --group=nginx --pid-path=/usr/local/nginx/pid/nginx.pid --error-log-path=/usr/local/nginx/logs/error.log --with-pcre=/install/pcre-8.43 --with-zlib=/install/zlib-1.2.11 --with-http_ssl_module --with-http_image_filter_module --with-http_stub_status_module --http-log-path=/usr/local/nginx/logs/access.log\n\n[root@bogon nginx-1.22.0]# make\n\n[root@bogon nginx-1.22.0]# make install\n\n# 至次，nginx编译安装完成\n\n[root@bogon nginx-1.22.0]# cd /usr/local/nginx/\n[root@bogon nginx]# ll\n总用量 4\ndrwxr-xr-x. 2 root root 4096 10月  6 16:16 conf\ndrwxr-xr-x. 2 root root   40 10月  6 16:16 html\ndrwxr-xr-x. 2 root root    6 10月  6 16:16 logs\ndrwxr-xr-x. 2 root root    6 10月  6 16:16 pid\ndrwxr-xr-x. 2 root root   19 10月  6 16:16 sbin\n\n[root@bogon nginx]# sbin/nginx\n[root@bogon nginx]# ps -ef | grep nginx\nroot     104771      1  0 16:18 ?        00:00:00 nginx: master process sbin/nginx\nnginx    104772 104771  0 16:18 ?        00:00:00 nginx: worker process\nroot     104780   1480  0 16:18 pts/0    00:00:00 grep --color=auto nginx\n```\n\n<br>\n\n<br>\n\n## Nginx配置文件结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.69cd7t6e47k0.webp\" width=\"65%\"/>\n\n<br>\n\n<br>\n\n## 虚拟主机的分类（三种）\n\n- 基于多IP的虚拟主机\n  - 多网卡多IP\n  - 单网卡多IP\n- 基于多端口的虚拟主机\n- 基于域名的虚拟主机\n\n<br>\n\n### 基于多网卡的虚拟主机实现\n\n- 这里我们使用多网卡多IP的方式\n\n```nginx\nserver {\n\tlisten\t192.168.146.132:8080;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_ip/132;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t192.168.146.133:8080;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_ip/133;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t192.168.146.134:8080;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_ip/134;\n\t\tindex\tindex.html;\n\t}\n}\n```\n\n\n\n<br>\n\n### 基于端口的虚拟主机实现\n\n```nginx\nserver {\n\tlisten\t90;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_port/90;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t91;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_port/91;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t92;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_port/92;\n\t\tindex\tindex.html;\n\t}\n}\n```\n\n<br>\n\n### 基于域名的虚拟主机实现\n\n```nginx\nserver {\n\tlisten\t9090;\n\tserver_name\ttest1.nginx.com;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_domain/test1;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t9090;\n\tserver_name\ttest2.nginx.com;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_domain/test2;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t9090;\n\tserver_name\ttest3.nginx.com;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_domain/test3;\n\t\tindex\tindex.html;\n\t}\n}\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 核心指令-Nginx基础应用\n\n## 配置文件main段核心参数用法\n\n```nginx\n# main段核心参数:\nuser USERNAME [GROUP]\n    解释：指定运行nginx的worker子进程的属主和属组，其中属组可以不指定 \n\t示例：\n\t\tuser nginx nginx;\n\npid DIR\n    解释：指定运行nginx的master主进程的pid文件存放路径 \n\t示例：\n\t\tpid /ropt/nginx/logs/nginx.pid;\n\nworker_rlimit_nofile number\n   \t解春：指定worker子进程可以打开的最大文件句柄数 \n\t示例：\n         worker_rlimit_nofile 20480;\n\nworker_rlimit_core size\n \t一 解释：指定worker子进程异常终止后的core文件，用于记录分析问题 \n\t示例：\n         worker_rlimit_core 50M;\n         working_directory /opt/nginx/tmp;\n\nworker_processes number | auto\n   解释：指定nginx启动的worker子进程数量\n   示例：\n         worker_processes 4;\n         worker_processes auto;\n\nworker_cpu_affinity cpumaskl cpumask2...\n   解霹：将每个worker子进程与我们的CPU物理核心绑定。\n   示例：\n         worker_cpu_affinity 0001 0010 0100 1000； #\n         4个物理核心，4个worker子进程\n         worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000\n         00100060 01000000 10000000; # 8物理核心，8个worker子进程\n         worker_cpu_affinity 01 10 01 10;         # 2个物理核心，4个子进程\n  备注：将每个worker子进程与特定CPU物理核心绑定，优势在于：避免同个worker子进程\n  在不同的CPU核心上切换，缓存失效，降低性能；其并不能真正的避免进程切换\n\nworker_priority number\n   解释：指定worker子进程的nice值，以调整运行nginx的优先级，通常设定为负值，以优先 调用nginx\n   示例：\n        worker_priority -10;\n   备注：Linux默认进程的优先级值是120,值越小越优先；nice设定范围为-20到+19\n\nworker_shutdown_timeout time\n   解春：指定证WOrker子进程优雅退出时的超时时间\n   示例：\n        worker_shutdown_timeout 5s;\n\ntimer_resolution time\n   解释：worker子进程内部使用的计时器精度，调整时间间隔越大，系统调用越少，有利于性 能提升；反之，系统调用越多，性能下降\n   示例：\n        worker_resolution 100ms;\n\ndaemon on|off\n  解释：设定nginx的运行方式，前台还是后台，前台用户调试，后台用于生产 示例：\n       daemon off;\n\nlock_file DIR\n  解释：负载均衡互斥锁文件存放路径\n       lock_file logs/nginx.lock\n\t\n```\n\n<br>\n\n## 配置文件events段核心参数用法\n\n|        参数        |                 含义                 |\n| :----------------: | :----------------------------------: |\n|        use         |      nginx使用何种事件驱动模型       |\n| worker_connections | worker子进程能够处理的最大并发连接数 |\n|    accept_mutex    |        是否打开负载均衡互斥锁        |\n| accept_mutex_delay |  新连接分配给worker子进程的超时时间  |\n|    muti_accept     |   worker子进程可以接收的新连接个数   |\n\n\n\n|        参数        |           语法            |                      可选值                       |         默认配置         |                     推荐配置                     |\n| :----------------: | :-----------------------: | :-----------------------------------------------: | :----------------------: | :----------------------------------------------: |\n|        use         |        use method         | select、poll、kqueue、epoll、/dev/poll、eventport |            无            |             不指定，让nginx自己选择              |\n| worker_connections | worker_connections number |                                                   | worker_connections 1024  | worker_connections 65535/worker_processes\\|65535 |\n|    accept_mutex    |   accept_mutex on\\|off    |                      on、off                      |     accept_mutex off     |                 accept_mutex on                  |\n| accept_mutex_delay |  accept_mutex_delay time  |                                                   | accept_mutex_delay 500ms |             accept_mutex_delay 200ms             |\n|    muti_accept     |    muti_accept on\\|off    |                      on、off                      |     muti_accept off      |                  muti_accept on                  |\n\n<br>\n\n## 配置文件http段核心参数用法\n\n### server_name指令\n\n```shell\n# 可以写多个server name，可以使用正则表达式，通配符，也可以是ip 具体的域名。\nserver_name name1 name2 name3;\n```\n\n- 匹配优先级\n  - 精确匹配 > 左侧通配符匹配 > 右侧通配符匹配 > 正则表达式匹配\n\n<br>\n\n### root和alias\n\n|       |    语法     |         上下文          |       共同点        |           区别            |\n| :---: | :---------: | :---------------------: | :-----------------: | :-----------------------: |\n| root  | root path;  | http server location if | URI到磁盘文件的映射 | root会将定义路径与URI叠加 |\n| alias | alias path; |        location         | URI到磁盘文件的映射 |     alias只取定义路径     |\n\n<br>\n\n### location的基础用法\n\n```shell\n# 语法：\n\tlocaltion [ = | ~ | ~* | ^~ ] uri {...}\n\t\n# 上下文：\n\tserver location\n```\n\n|   匹配规则   |          含义          |               示例               |\n| :----------: | :--------------------: | :------------------------------: |\n|      =       |        精确匹配        |   `location = /images/ {...}`    |\n|      ~       |  正则匹配，区分大小写  | `location ~ \\.(jpg|gif)$ {...}`  |\n|      ~*      | 正则匹配，不区分大小写 | `location ~* \\.(jpg|gif)$ {...}` |\n|      ^~      |    匹配到即停止搜索    |   `location ^~ /images/ {...}`   |\n| 不带任何符号 |                        |        `location / {...}`        |\n\n- 匹配规则优先级\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4dfzxu6vkws0.webp\" width=\"45%\" />\n\n<br>\n\n### 理解location中url结尾的反斜线\n\n```shell\nlocation /some-dir {\n\n}\n\nlocation /some-dir/ {\n\n}\n```\n\n- 如果URL的结构是`https://domain.com/some-dir/`。尾部如果缺少`/`将导致重定向。因为根据约定，URL尾部的`/`表示目录，没有`/`表示文件。\n  - 所以访问`/some-dir/`时，服务器会自动去该目录下找对应的默认文件。\n  - 如果访问`/some-dir`的话，服务器会先去找`some-dir`文件，找不到的话会将`some-dir`当成目录，重定向到`/some-dir/`，去该目录下找默认文件。\n\n<br>\n\n### stub_status模块用法\n\n- `stub_status`的使用，需要Nginx编译进去\n\n```shell\n# 语法结构\n\tstub_status;\n# 低于1.7.5 版本：\n\tstub_status on;\n\n# 上下文：\n\tserver location\n\t\n# 配置示例\n\tlocation /uri {\n\t\tstub_status;\n\t}\n```\n\n- 状态项\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.98fiesmzwzk.webp\" width=\"65%\" />\n\n<br>\n\n- 内嵌变量\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5h4bf27xt4c0.webp\" width=\"65%\" />\n\n<br>\n\n<br>\n\n<br>\n\n# HTTP核心模块\n\n## connection & request\n\n- connection 是连接，即常说的tcp连接，三次握手，状态机\n- request是请求，例如http请求，无状态的协议\n- request是必须建立在connection之上的\n\n\n\n\n\n\n\n\n\n# 学习备注\n\n> 1. linux信号量这块的管理机制可以再抽时间深入理解一下\n> 2. 第三章、4 的相关内容算是比较简单，后续实践一下\n> 3. 需要理解请求过程，连接、请求\n> 4. 其实第二章的内容也很重要，要对Nginx有总体上的认知，特点、优势等等，需要说出个所以然来\n> 5. 多进程和多线程相关的知识还需要深入理解一下\n> 6. Nginx的模块整体还需要有一个把握\n> 7. location这块的内容 还需要进一步熟悉一下\n\n<br>\n\n<img src=\"\" width=\"65%\" />\n\n<br>\n\n<br>\n\n","source":"_posts/2022/《Nginx体系化深度精讲》study-notes.md","raw":"---\ntitle: 《Nginx体系化深度精讲》study notes\nauthor: ratears\ndate: 2019-05-24 02:47:23\nupdated: 2022-05-24 02:47:23\ncategories:\n  - Nginx\ntags:\n  - Nginx\n---\n\n# Nginx初体验\n\n## Nginx概念\n\n- Nginx (engine x) 是一个**高性能的HTTP和反向代理web服务器**，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，公开版本1.19.6发布于2020年12月15日。\n\n- 其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2022年01月25日，nginx 1.21.6发布。\n- Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好。\n\n<br>\n\n<br>\n\n## Nginx缘起历史\n\n- 互联网数据的快速增长\n- Apache处理请求的低效性\n\n|        Apache        |        Nginx         |\n| :------------------: | :------------------: |\n| 一个进程处理一个请求 | 一个进程处理多个请求 |\n|       阻塞式的       |      非阻塞式的      |\n\n<br>\n\n<br>\n\n## Nginx三个主要企业应用场景\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4z8gliurmhc0.webp\" width=\"90%\" />\n\n<br>\n\n<br>\n\n## Nginx核心优势\n\n- 高并发、高性能\n- 扩展性好\n- 异步非阻塞的事件驱动模型\n- 高可靠性\n- 热部署\n\n<br>\n\n<br>\n\n## 安装rpm包Nginx\n\n```shell\n# （1）下载epel yum源\nyum install epel-release -y\n\n# （2）查看yum源里可安装的nginx\nyum list all |grep nginx\n\n# （3）下载nginx\nyum install nginx -y\n\n# （4）列出 nginx 安装的文件\nrpm -ql nginx\n\t\n# （5）查看nginx启动文件所在目录\nrpm -ql nginx |grep bin\n\n# Nginx的二进制文件所在目录\n/usr/sbin/nginx\n```\n\n<br>\n\n<br>\n\n<br>\n\n# Nginx进程结构与热部署\n\n## 多进程与多线程\n\n### 多进程\n\n\n\n## Nginx的进程结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/56b03da1dfa88b5a292f320a90fbb9d.2bzqwmpmcuas.webp\" width=\"70%\"/>\n\n- 真正处理请求的不是 master process，二是 worker process\n\n<br>\n\n<br>\n\n## Linux的信号量管理机制\n\n- linux中的所有信号量\n\n```bash\n[root@localhost nginx]# kill -l\n 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP\n 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1\n11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM\n16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP\n21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ\n26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR\n31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3\n38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8\n43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13\n48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12\n53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7\n58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2\n63) SIGRTMAX-1  64) SIGRTMAX\n```\n\n- 常用信号量\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2l38lbs30tc0.webp\" width=\"50%\"/>\n\n<br>\n\n<br>\n\n## 利用信号量管理Nginx\n\n```bash\n# 关闭nginx\nkill -s SIGTERM [nginx master进程pid]\n\n# 重新读取配置文件，会关闭之前的work子进程，生成新的work子进程 \nkill -s SIGHUP [nginx master进程pid]\n```\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.682s0oj5i400.webp\" width=\"50%\"/>\n\n<br>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4ouapvas0x40.webp\" width=\"50%\"/>\n\n<br/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.zftbgjpnhzk.webp\" width=\"50%\"/>\n\n<br>\n\n<br>\n\n## 配置文件重载的原理真相\n\n### `reload` 重载配置文件的流程\n\n1. 向master进程发送HUP信号（reload命令）\n2. master进程检查配置语法是否正确\n3. master进程打开监听端口\n4. master进程使用新的配置文件启动新的worker子进程\n5. master进程向老的worker子进程发送QUIT信号\n6. 旧的worker进程关闭监听句柄，处理完当前连接后关闭进程\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7cv9qios6300.webp\" width=\"65%\" />\n\n<br>\n\n<br>\n\n## Nginx的热部署\n\n### 热升级的流程（前提：新旧Nginx的编译目录一致）\n\n1. 将旧的nginx文件替换成新的nginx文件（二进制主程序文件）\n2. 向master进程发送USR2信号\n3. master进程修改pid文件，加后缀.oldbin\n4. master进程用新nginx文件启动新master进程\n5. 向旧的master进程发送WINCH信号，旧的worker子进程退出\n6. 回滚槽形：向旧master发送HUP ,向新的master发送QUIT\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3s80krndr7m0.webp\" width=\"75%\" />\n\n<br>\n\n### Nginx热部署完整步骤演示\n\n#### Nginx热升级核心命令解释\n\n```bash\n# 备份nginx二进制文件\ncp nginx nginx.bak\n\n# 生成新的nginx 主进程 和子进程（新老master、worker进程共存）\nkill -s SIGUSR2 [pid]\n\n# 关闭nginx master进程下的worker子进程\nkill -s SIGWINCH [pid]\n\n# 关闭进程\nkill -s SIGQUIT [pid]\n\n# 让旧master进程 启动work子进程（使用的还是旧的nginx二进制文件）\nkill -s SIGHUP [pid]\n```\n\n- 注意事项\n\n> 不能使用 `kill -s SIGHU []` 退出旧的master进程，如果这样做的话，旧的 master主进程和其子进程会直接退出（被kill掉），这样（当新启的nginx进程有问题时）就无法回滚。\n>\n> 所以应该使用 `kill -s SIGWINCH []`，先将旧的master主进程下的work子进程全部kill掉，验证新启的nginx进程没有问题后，再使用 `kill -s SIGHU []`\tkill掉旧的master进程。如果验证新启的nginx进程有问题，这时使用 `kill -s SIGHUP []` 就可以让旧master进程重新启动work子进程。（达到回滚的效果）\n\n<br/>\n\n#### Nginx正常热升级详细步骤演示\n\n```bash\n# （1）查看nginx处于正常运行状态\n[root@bogon nginx]# ps -ef |grep nginx\nroot     105723   1480  0 16:35 pts/0    00:00:00 grep --color=auto nginx\n[root@bogon nginx]# /usr/local/nginx/sbin/nginx\n[root@bogon nginx]# ps -ef |grep nginx\nroot     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process\nroot     105747   1480  0 16:35 pts/0    00:00:00 grep --color=auto nginx\n\n# （2）备份nginx的二进制文件，并将新的nginx替换成旧的nginx\n[root@bogon nginx]# cd /usr/local/nginx/sbin/\n[root@bogon sbin]# ll\n总用量 6128\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n[root@bogon sbin]# cp nginx nginx.old\n[root@bogon sbin]# ll\n总用量 12256\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:36 nginx.old\n\n# （3）给旧的nginx master 进程发送 SIGUSR2信号后。nginx 新旧master进程、worker子进程共存。\n[root@bogon sbin]# ps -ef |grep nginx\nroot     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process\nroot     106243   1480  0 16:45 pts/0    00:00:00 grep --color=auto nginx\n[root@bogon sbin]# kill -s SIGUSR2 105739\n[root@bogon sbin]# ps -ef |grep nginx\nroot     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process\nnginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process\nroot     106255 105739  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     106268   1480  0 16:45 pts/0    00:00:00 grep --color=auto nginx\n\n\n[root@bogon nginx]# ll pid/\n总用量 8\n-rw-r--r--. 1 root root 7 10月  6 16:45 nginx.pid\n-rw-r--r--. 1 root root 7 10月  6 16:35 nginx.pid.oldbin\n[root@bogon nginx]# cat pid/nginx.pid\n106255\n[root@bogon nginx]# cat pid/nginx.pid.oldbin\n105739\n\n\n# （4）向旧的master进程发送 SIGWINCH 信号，旧的 worker子进程退出。此时，所有请求会被新的worker进程处理\n[root@bogon nginx]# kill -s SIGWINCH 105739\n[root@bogon nginx]# ps -ef |grep nginx\nroot     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nroot     106255 105739  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     106643   1480  0 16:52 pts/0    00:00:00 grep --color=auto nginx\n\n# （5）验证新的ngixn 的 worker子进程没有错误后，向旧的master进程发送 SIGQUIT 信号。此时 旧的master进程退出。\n# 至此，nginx热升级成功\n[root@bogon nginx]# kill -s SIGQUIT 105739\n[root@bogon nginx]#\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     106814   1480  0 16:56 pts/0    00:00:00 grep --color=auto nginx\n\n[root@bogon nginx]# ll pid/\n总用量 4\n-rw-r--r--. 1 root root 7 10月  6 16:45 nginx.pid\n[root@bogon nginx]# cat pid/nginx.pid\n106255\n\n[root@bogon nginx]# ll sbin/\n总用量 12256\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:36 nginx.old\n[root@bogon nginx]# rm -rf sbin/nginx.old\n```\n\n<br/>\n\n#### Nginx热升级——回滚情形演示\n\n```bash\n# （1）~（2）查看nginx处于正常运行状态；备份nginx的二进制文件，并将新的nginx替换成旧的nginx\n[root@bogon nginx]# ll sbin/\n总用量 6128\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n[root@bogon nginx]# cp sbin/nginx sbin/nginx.bak\n[root@bogon nginx]# ll sbin/\n总用量 12256\n-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx\n-rwxr-xr-x. 1 root root 6272440 10月  6 17:01 nginx.bak\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     107093   1480  0 17:01 pts/0    00:00:00 grep --color=auto nginx\n\n# （3）给旧的nginx master 进程发送 SIGUSR2信号后。nginx 新旧master进程、worker子进程共存。\n[root@bogon nginx]# kill -s SIGUSR2 106255\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process\nnginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process\nroot     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process\nroot     107217   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx\n\n# （4）向旧的master进程发送 SIGWINCH 信号，旧的 worker子进程退出。此时，所有请求会被新的worker进程处理\n[root@bogon nginx]# kill -s SIGWINCH 106255\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nroot     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process\nroot     107264   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx\n\n# （5）验证新的ngixn 的 worker子进程 发现有错误，开启回滚：\n# 向旧的master 发送 SIGHUP 信号；向 新的master进程发送 SIGQUIT 信号\n[root@bogon nginx]# kill -s SIGWINCH 106255\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nroot     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process\nroot     107264   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx\n[root@bogon nginx]# kill -s SIGHUP 106255\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nroot     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process\nnginx    107401 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107402 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107403 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107404 106255  0 17:07 ?        00:00:00 nginx: worker process\nroot     107412   1480  0 17:07 pts/0    00:00:00 grep --color=auto nginx\n[root@bogon nginx]# kill -s SIGQUIT 107206\n[root@bogon nginx]# ps -ef |grep nginx\nroot     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnginx    107401 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107402 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107403 106255  0 17:07 ?        00:00:00 nginx: worker process\nnginx    107404 106255  0 17:07 ?        00:00:00 nginx: worker process\nroot     107440   1480  0 17:08 pts/0    00:00:00 grep --color=auto nginx\n\n# 至此，nginx热升级回滚成功\n```\n\n<br>\n\n<br>\n\n## Nginx模块化设计机制\n\n### 模块结构图\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5piekf14yes0.webp\" width=\"60%\" />\n\n<br/>\n\n<br>\n\n### 模块体系结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2miqh0m6jdo0.webp\" width=\"40%\" />\n\n<br/>\n\n<br>\n\n## Nginx编译安装的配置参数\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7jfdxqlxm340.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n## 定制编译安装Nginx\n\n```bash\n# （0）准备nginx的管理用户\n[root@bogon install]# useradd nginx\n\n# （1）准备安装文件\n[root@localhost install]# wget https://nginx.org/download/nginx-1.22.1.tar.gz\n\n[root@bogon install]# ll\n总用量 3688\n-rw-r--r--. 1 root root 1073322 5月  24 22:29 nginx-1.22.0.tar.gz\n-rw-r--r--. 1 root root 2085854 10月  6 16:08 pcre-8.43.tar.gz\n-rw-r--r--. 1 root root  607698 1月  16 2017 zlib-1.2.11.tar.gz\n\n\n# （2）解压安装文件\n[root@bogon install]# ll\n总用量 16\ndrwxr-xr-x.  8 1001  1001  158 5月  24 07:59 nginx-1.22.0\ndrwxr-xr-x.  7 1169  1169 8192 2月  24 2019 pcre-8.43\ndrwxr-xr-x. 14  501 games 4096 1月  16 2017 zlib-1.2.11\n\n# （3）解压后进入 nginx源码目录，查看相关编译参数\n[root@bogon nginx-1.22.0]# ./configure --help\n\n# （4）编译安装前下载相关依赖\n[root@bogon nginx-1.22.0]# yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel gd gd-devel\n\n# （5）编译安装\n[root@bogon nginx-1.22.0]# ./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/conf/nginx.conf --user=nginx --group=nginx --pid-path=/usr/local/nginx/pid/nginx.pid --error-log-path=/usr/local/nginx/logs/error.log --with-pcre=/install/pcre-8.43 --with-zlib=/install/zlib-1.2.11 --with-http_ssl_module --with-http_image_filter_module --with-http_stub_status_module --http-log-path=/usr/local/nginx/logs/access.log\n\n[root@bogon nginx-1.22.0]# make\n\n[root@bogon nginx-1.22.0]# make install\n\n# 至次，nginx编译安装完成\n\n[root@bogon nginx-1.22.0]# cd /usr/local/nginx/\n[root@bogon nginx]# ll\n总用量 4\ndrwxr-xr-x. 2 root root 4096 10月  6 16:16 conf\ndrwxr-xr-x. 2 root root   40 10月  6 16:16 html\ndrwxr-xr-x. 2 root root    6 10月  6 16:16 logs\ndrwxr-xr-x. 2 root root    6 10月  6 16:16 pid\ndrwxr-xr-x. 2 root root   19 10月  6 16:16 sbin\n\n[root@bogon nginx]# sbin/nginx\n[root@bogon nginx]# ps -ef | grep nginx\nroot     104771      1  0 16:18 ?        00:00:00 nginx: master process sbin/nginx\nnginx    104772 104771  0 16:18 ?        00:00:00 nginx: worker process\nroot     104780   1480  0 16:18 pts/0    00:00:00 grep --color=auto nginx\n```\n\n<br>\n\n<br>\n\n## Nginx配置文件结构\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.69cd7t6e47k0.webp\" width=\"65%\"/>\n\n<br>\n\n<br>\n\n## 虚拟主机的分类（三种）\n\n- 基于多IP的虚拟主机\n  - 多网卡多IP\n  - 单网卡多IP\n- 基于多端口的虚拟主机\n- 基于域名的虚拟主机\n\n<br>\n\n### 基于多网卡的虚拟主机实现\n\n- 这里我们使用多网卡多IP的方式\n\n```nginx\nserver {\n\tlisten\t192.168.146.132:8080;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_ip/132;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t192.168.146.133:8080;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_ip/133;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t192.168.146.134:8080;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_ip/134;\n\t\tindex\tindex.html;\n\t}\n}\n```\n\n\n\n<br>\n\n### 基于端口的虚拟主机实现\n\n```nginx\nserver {\n\tlisten\t90;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_port/90;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t91;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_port/91;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t92;\n\tserver_name\tlocalhost;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_port/92;\n\t\tindex\tindex.html;\n\t}\n}\n```\n\n<br>\n\n### 基于域名的虚拟主机实现\n\n```nginx\nserver {\n\tlisten\t9090;\n\tserver_name\ttest1.nginx.com;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_domain/test1;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t9090;\n\tserver_name\ttest2.nginx.com;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_domain/test2;\n\t\tindex\tindex.html;\n\t}\n}\nserver {\n\tlisten\t9090;\n\tserver_name\ttest3.nginx.com;\n\tlocation / {\n\t\troot\t/usr/local/nginx/html/virtual_host_by_domain/test3;\n\t\tindex\tindex.html;\n\t}\n}\n```\n\n<br>\n\n<br>\n\n<br>\n\n# 核心指令-Nginx基础应用\n\n## 配置文件main段核心参数用法\n\n```nginx\n# main段核心参数:\nuser USERNAME [GROUP]\n    解释：指定运行nginx的worker子进程的属主和属组，其中属组可以不指定 \n\t示例：\n\t\tuser nginx nginx;\n\npid DIR\n    解释：指定运行nginx的master主进程的pid文件存放路径 \n\t示例：\n\t\tpid /ropt/nginx/logs/nginx.pid;\n\nworker_rlimit_nofile number\n   \t解春：指定worker子进程可以打开的最大文件句柄数 \n\t示例：\n         worker_rlimit_nofile 20480;\n\nworker_rlimit_core size\n \t一 解释：指定worker子进程异常终止后的core文件，用于记录分析问题 \n\t示例：\n         worker_rlimit_core 50M;\n         working_directory /opt/nginx/tmp;\n\nworker_processes number | auto\n   解释：指定nginx启动的worker子进程数量\n   示例：\n         worker_processes 4;\n         worker_processes auto;\n\nworker_cpu_affinity cpumaskl cpumask2...\n   解霹：将每个worker子进程与我们的CPU物理核心绑定。\n   示例：\n         worker_cpu_affinity 0001 0010 0100 1000； #\n         4个物理核心，4个worker子进程\n         worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000\n         00100060 01000000 10000000; # 8物理核心，8个worker子进程\n         worker_cpu_affinity 01 10 01 10;         # 2个物理核心，4个子进程\n  备注：将每个worker子进程与特定CPU物理核心绑定，优势在于：避免同个worker子进程\n  在不同的CPU核心上切换，缓存失效，降低性能；其并不能真正的避免进程切换\n\nworker_priority number\n   解释：指定worker子进程的nice值，以调整运行nginx的优先级，通常设定为负值，以优先 调用nginx\n   示例：\n        worker_priority -10;\n   备注：Linux默认进程的优先级值是120,值越小越优先；nice设定范围为-20到+19\n\nworker_shutdown_timeout time\n   解春：指定证WOrker子进程优雅退出时的超时时间\n   示例：\n        worker_shutdown_timeout 5s;\n\ntimer_resolution time\n   解释：worker子进程内部使用的计时器精度，调整时间间隔越大，系统调用越少，有利于性 能提升；反之，系统调用越多，性能下降\n   示例：\n        worker_resolution 100ms;\n\ndaemon on|off\n  解释：设定nginx的运行方式，前台还是后台，前台用户调试，后台用于生产 示例：\n       daemon off;\n\nlock_file DIR\n  解释：负载均衡互斥锁文件存放路径\n       lock_file logs/nginx.lock\n\t\n```\n\n<br>\n\n## 配置文件events段核心参数用法\n\n|        参数        |                 含义                 |\n| :----------------: | :----------------------------------: |\n|        use         |      nginx使用何种事件驱动模型       |\n| worker_connections | worker子进程能够处理的最大并发连接数 |\n|    accept_mutex    |        是否打开负载均衡互斥锁        |\n| accept_mutex_delay |  新连接分配给worker子进程的超时时间  |\n|    muti_accept     |   worker子进程可以接收的新连接个数   |\n\n\n\n|        参数        |           语法            |                      可选值                       |         默认配置         |                     推荐配置                     |\n| :----------------: | :-----------------------: | :-----------------------------------------------: | :----------------------: | :----------------------------------------------: |\n|        use         |        use method         | select、poll、kqueue、epoll、/dev/poll、eventport |            无            |             不指定，让nginx自己选择              |\n| worker_connections | worker_connections number |                                                   | worker_connections 1024  | worker_connections 65535/worker_processes\\|65535 |\n|    accept_mutex    |   accept_mutex on\\|off    |                      on、off                      |     accept_mutex off     |                 accept_mutex on                  |\n| accept_mutex_delay |  accept_mutex_delay time  |                                                   | accept_mutex_delay 500ms |             accept_mutex_delay 200ms             |\n|    muti_accept     |    muti_accept on\\|off    |                      on、off                      |     muti_accept off      |                  muti_accept on                  |\n\n<br>\n\n## 配置文件http段核心参数用法\n\n### server_name指令\n\n```shell\n# 可以写多个server name，可以使用正则表达式，通配符，也可以是ip 具体的域名。\nserver_name name1 name2 name3;\n```\n\n- 匹配优先级\n  - 精确匹配 > 左侧通配符匹配 > 右侧通配符匹配 > 正则表达式匹配\n\n<br>\n\n### root和alias\n\n|       |    语法     |         上下文          |       共同点        |           区别            |\n| :---: | :---------: | :---------------------: | :-----------------: | :-----------------------: |\n| root  | root path;  | http server location if | URI到磁盘文件的映射 | root会将定义路径与URI叠加 |\n| alias | alias path; |        location         | URI到磁盘文件的映射 |     alias只取定义路径     |\n\n<br>\n\n### location的基础用法\n\n```shell\n# 语法：\n\tlocaltion [ = | ~ | ~* | ^~ ] uri {...}\n\t\n# 上下文：\n\tserver location\n```\n\n|   匹配规则   |          含义          |               示例               |\n| :----------: | :--------------------: | :------------------------------: |\n|      =       |        精确匹配        |   `location = /images/ {...}`    |\n|      ~       |  正则匹配，区分大小写  | `location ~ \\.(jpg|gif)$ {...}`  |\n|      ~*      | 正则匹配，不区分大小写 | `location ~* \\.(jpg|gif)$ {...}` |\n|      ^~      |    匹配到即停止搜索    |   `location ^~ /images/ {...}`   |\n| 不带任何符号 |                        |        `location / {...}`        |\n\n- 匹配规则优先级\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4dfzxu6vkws0.webp\" width=\"45%\" />\n\n<br>\n\n### 理解location中url结尾的反斜线\n\n```shell\nlocation /some-dir {\n\n}\n\nlocation /some-dir/ {\n\n}\n```\n\n- 如果URL的结构是`https://domain.com/some-dir/`。尾部如果缺少`/`将导致重定向。因为根据约定，URL尾部的`/`表示目录，没有`/`表示文件。\n  - 所以访问`/some-dir/`时，服务器会自动去该目录下找对应的默认文件。\n  - 如果访问`/some-dir`的话，服务器会先去找`some-dir`文件，找不到的话会将`some-dir`当成目录，重定向到`/some-dir/`，去该目录下找默认文件。\n\n<br>\n\n### stub_status模块用法\n\n- `stub_status`的使用，需要Nginx编译进去\n\n```shell\n# 语法结构\n\tstub_status;\n# 低于1.7.5 版本：\n\tstub_status on;\n\n# 上下文：\n\tserver location\n\t\n# 配置示例\n\tlocation /uri {\n\t\tstub_status;\n\t}\n```\n\n- 状态项\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.98fiesmzwzk.webp\" width=\"65%\" />\n\n<br>\n\n- 内嵌变量\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5h4bf27xt4c0.webp\" width=\"65%\" />\n\n<br>\n\n<br>\n\n<br>\n\n# HTTP核心模块\n\n## connection & request\n\n- connection 是连接，即常说的tcp连接，三次握手，状态机\n- request是请求，例如http请求，无状态的协议\n- request是必须建立在connection之上的\n\n\n\n\n\n\n\n\n\n# 学习备注\n\n> 1. linux信号量这块的管理机制可以再抽时间深入理解一下\n> 2. 第三章、4 的相关内容算是比较简单，后续实践一下\n> 3. 需要理解请求过程，连接、请求\n> 4. 其实第二章的内容也很重要，要对Nginx有总体上的认知，特点、优势等等，需要说出个所以然来\n> 5. 多进程和多线程相关的知识还需要深入理解一下\n> 6. Nginx的模块整体还需要有一个把握\n> 7. location这块的内容 还需要进一步熟悉一下\n\n<br>\n\n<img src=\"\" width=\"65%\" />\n\n<br>\n\n<br>\n\n","slug":"《Nginx体系化深度精讲》study-notes","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsoz0061dctagmht7tkd","content":"<h1 id=\"Nginx初体验\"><a href=\"#Nginx初体验\" class=\"headerlink\" title=\"Nginx初体验\"></a>Nginx初体验</h1><h2 id=\"Nginx概念\"><a href=\"#Nginx概念\" class=\"headerlink\" title=\"Nginx概念\"></a>Nginx概念</h2><ul>\n<li><p>Nginx (engine x) 是一个<strong>高性能的HTTP和反向代理web服务器</strong>，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，公开版本1.19.6发布于2020年12月15日。</p>\n</li>\n<li><p>其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2022年01月25日，nginx 1.21.6发布。</p>\n</li>\n<li><p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好。</p>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"Nginx缘起历史\"><a href=\"#Nginx缘起历史\" class=\"headerlink\" title=\"Nginx缘起历史\"></a>Nginx缘起历史</h2><ul>\n<li>互联网数据的快速增长</li>\n<li>Apache处理请求的低效性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Apache</th>\n<th align=\"center\">Nginx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">一个进程处理一个请求</td>\n<td align=\"center\">一个进程处理多个请求</td>\n</tr>\n<tr>\n<td align=\"center\">阻塞式的</td>\n<td align=\"center\">非阻塞式的</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"Nginx三个主要企业应用场景\"><a href=\"#Nginx三个主要企业应用场景\" class=\"headerlink\" title=\"Nginx三个主要企业应用场景\"></a>Nginx三个主要企业应用场景</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4z8gliurmhc0.webp\" width=\"90%\" />\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx核心优势\"><a href=\"#Nginx核心优势\" class=\"headerlink\" title=\"Nginx核心优势\"></a>Nginx核心优势</h2><ul>\n<li>高并发、高性能</li>\n<li>扩展性好</li>\n<li>异步非阻塞的事件驱动模型</li>\n<li>高可靠性</li>\n<li>热部署</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"安装rpm包Nginx\"><a href=\"#安装rpm包Nginx\" class=\"headerlink\" title=\"安装rpm包Nginx\"></a>安装rpm包Nginx</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）下载epel yum源</span></span><br><span class=\"line\">yum install epel-release -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（2）查看yum源里可安装的nginx</span></span><br><span class=\"line\">yum list all |grep nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（3）下载nginx</span></span><br><span class=\"line\">yum install nginx -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（4）列出 nginx 安装的文件</span></span><br><span class=\"line\">rpm -ql nginx</span><br><span class=\"line\"><span class=\"meta prompt_\">\t</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（5）查看nginx启动文件所在目录</span></span><br><span class=\"line\">rpm -ql nginx |grep bin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Nginx的二进制文件所在目录</span></span><br><span class=\"line\">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Nginx进程结构与热部署\"><a href=\"#Nginx进程结构与热部署\" class=\"headerlink\" title=\"Nginx进程结构与热部署\"></a>Nginx进程结构与热部署</h1><h2 id=\"多进程与多线程\"><a href=\"#多进程与多线程\" class=\"headerlink\" title=\"多进程与多线程\"></a>多进程与多线程</h2><h3 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h3><h2 id=\"Nginx的进程结构\"><a href=\"#Nginx的进程结构\" class=\"headerlink\" title=\"Nginx的进程结构\"></a>Nginx的进程结构</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/56b03da1dfa88b5a292f320a90fbb9d.2bzqwmpmcuas.webp\" width=\"70%\"/>\n\n<ul>\n<li>真正处理请求的不是 master process，二是 worker process</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"Linux的信号量管理机制\"><a href=\"#Linux的信号量管理机制\" class=\"headerlink\" title=\"Linux的信号量管理机制\"></a>Linux的信号量管理机制</h2><ul>\n<li>linux中的所有信号量</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># kill -l</span></span><br><span class=\"line\"> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span><br><span class=\"line\"> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span><br><span class=\"line\">11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span><br><span class=\"line\">16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class=\"line\">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span><br><span class=\"line\">26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span><br><span class=\"line\">31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span><br><span class=\"line\">38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class=\"line\">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class=\"line\">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class=\"line\">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span><br><span class=\"line\">58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class=\"line\">63) SIGRTMAX-1  64) SIGRTMAX</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>常用信号量</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2l38lbs30tc0.webp\" width=\"50%\"/>\n\n<br>\n\n<br>\n\n<h2 id=\"利用信号量管理Nginx\"><a href=\"#利用信号量管理Nginx\" class=\"headerlink\" title=\"利用信号量管理Nginx\"></a>利用信号量管理Nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭nginx</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGTERM [nginx master进程pid]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新读取配置文件，会关闭之前的work子进程，生成新的work子进程 </span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGHUP [nginx master进程pid]</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.682s0oj5i400.webp\" width=\"50%\"/>\n\n<br>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4ouapvas0x40.webp\" width=\"50%\"/>\n\n<br/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.zftbgjpnhzk.webp\" width=\"50%\"/>\n\n<br>\n\n<br>\n\n<h2 id=\"配置文件重载的原理真相\"><a href=\"#配置文件重载的原理真相\" class=\"headerlink\" title=\"配置文件重载的原理真相\"></a>配置文件重载的原理真相</h2><h3 id=\"reload-重载配置文件的流程\"><a href=\"#reload-重载配置文件的流程\" class=\"headerlink\" title=\"reload 重载配置文件的流程\"></a><code>reload</code> 重载配置文件的流程</h3><ol>\n<li>向master进程发送HUP信号（reload命令）</li>\n<li>master进程检查配置语法是否正确</li>\n<li>master进程打开监听端口</li>\n<li>master进程使用新的配置文件启动新的worker子进程</li>\n<li>master进程向老的worker子进程发送QUIT信号</li>\n<li>旧的worker进程关闭监听句柄，处理完当前连接后关闭进程</li>\n</ol>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7cv9qios6300.webp\" width=\"65%\" />\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx的热部署\"><a href=\"#Nginx的热部署\" class=\"headerlink\" title=\"Nginx的热部署\"></a>Nginx的热部署</h2><h3 id=\"热升级的流程（前提：新旧Nginx的编译目录一致）\"><a href=\"#热升级的流程（前提：新旧Nginx的编译目录一致）\" class=\"headerlink\" title=\"热升级的流程（前提：新旧Nginx的编译目录一致）\"></a>热升级的流程（前提：新旧Nginx的编译目录一致）</h3><ol>\n<li>将旧的nginx文件替换成新的nginx文件（二进制主程序文件）</li>\n<li>向master进程发送USR2信号</li>\n<li>master进程修改pid文件，加后缀.oldbin</li>\n<li>master进程用新nginx文件启动新master进程</li>\n<li>向旧的master进程发送WINCH信号，旧的worker子进程退出</li>\n<li>回滚槽形：向旧master发送HUP ,向新的master发送QUIT</li>\n</ol>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3s80krndr7m0.webp\" width=\"75%\" />\n\n<br>\n\n<h3 id=\"Nginx热部署完整步骤演示\"><a href=\"#Nginx热部署完整步骤演示\" class=\"headerlink\" title=\"Nginx热部署完整步骤演示\"></a>Nginx热部署完整步骤演示</h3><h4 id=\"Nginx热升级核心命令解释\"><a href=\"#Nginx热升级核心命令解释\" class=\"headerlink\" title=\"Nginx热升级核心命令解释\"></a>Nginx热升级核心命令解释</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份nginx二进制文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> nginx nginx.bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成新的nginx 主进程 和子进程（新老master、worker进程共存）</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGUSR2 [pid]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭nginx master进程下的worker子进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGWINCH [pid]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGQUIT [pid]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 让旧master进程 启动work子进程（使用的还是旧的nginx二进制文件）</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGHUP [pid]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意事项</li>\n</ul>\n<blockquote>\n<p>不能使用 <code>kill -s SIGHU []</code> 退出旧的master进程，如果这样做的话，旧的 master主进程和其子进程会直接退出（被kill掉），这样（当新启的nginx进程有问题时）就无法回滚。</p>\n<p>所以应该使用 <code>kill -s SIGWINCH []</code>，先将旧的master主进程下的work子进程全部kill掉，验证新启的nginx进程没有问题后，再使用 <code>kill -s SIGHU []</code>    kill掉旧的master进程。如果验证新启的nginx进程有问题，这时使用 <code>kill -s SIGHUP []</code> 就可以让旧master进程重新启动work子进程。（达到回滚的效果）</p>\n</blockquote>\n<br/>\n\n<h4 id=\"Nginx正常热升级详细步骤演示\"><a href=\"#Nginx正常热升级详细步骤演示\" class=\"headerlink\" title=\"Nginx正常热升级详细步骤演示\"></a>Nginx正常热升级详细步骤演示</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># （1）查看nginx处于正常运行状态</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105723   1480  0 16:35 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># /usr/local/nginx/sbin/nginx</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     105747   1480  0 16:35 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （2）备份nginx的二进制文件，并将新的nginx替换成旧的nginx</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cd /usr/local/nginx/sbin/</span></span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 6128</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># cp nginx nginx.old</span></span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 12256</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:36 nginx.old</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （3）给旧的nginx master 进程发送 SIGUSR2信号后。nginx 新旧master进程、worker子进程共存。</span></span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106243   1480  0 16:45 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># kill -s SIGUSR2 105739</span></span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106255 105739  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106268   1480  0 16:45 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll pid/</span></span><br><span class=\"line\">总用量 8</span><br><span class=\"line\">-rw-r--r--. 1 root root 7 10月  6 16:45 nginx.pid</span><br><span class=\"line\">-rw-r--r--. 1 root root 7 10月  6 16:35 nginx.pid.oldbin</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cat pid/nginx.pid</span></span><br><span class=\"line\">106255</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cat pid/nginx.pid.oldbin</span></span><br><span class=\"line\">105739</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （4）向旧的master进程发送 SIGWINCH 信号，旧的 worker子进程退出。此时，所有请求会被新的worker进程处理</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGWINCH 105739</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">root     106255 105739  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106643   1480  0 16:52 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （5）验证新的ngixn 的 worker子进程没有错误后，向旧的master进程发送 SIGQUIT 信号。此时 旧的master进程退出。</span></span><br><span class=\"line\"><span class=\"comment\"># 至此，nginx热升级成功</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGQUIT 105739</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\">#</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106814   1480  0 16:56 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll pid/</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-r--r--. 1 root root 7 10月  6 16:45 nginx.pid</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cat pid/nginx.pid</span></span><br><span class=\"line\">106255</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll sbin/</span></span><br><span class=\"line\">总用量 12256</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:36 nginx.old</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># rm -rf sbin/nginx.old</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h4 id=\"Nginx热升级——回滚情形演示\"><a href=\"#Nginx热升级——回滚情形演示\" class=\"headerlink\" title=\"Nginx热升级——回滚情形演示\"></a>Nginx热升级——回滚情形演示</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># （1）~（2）查看nginx处于正常运行状态；备份nginx的二进制文件，并将新的nginx替换成旧的nginx</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll sbin/</span></span><br><span class=\"line\">总用量 6128</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cp sbin/nginx sbin/nginx.bak</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll sbin/</span></span><br><span class=\"line\">总用量 12256</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 17:01 nginx.bak</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107093   1480  0 17:01 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （3）给旧的nginx master 进程发送 SIGUSR2信号后。nginx 新旧master进程、worker子进程共存。</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGUSR2 106255</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107217   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （4）向旧的master进程发送 SIGWINCH 信号，旧的 worker子进程退出。此时，所有请求会被新的worker进程处理</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGWINCH 106255</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">root     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107264   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （5）验证新的ngixn 的 worker子进程 发现有错误，开启回滚：</span></span><br><span class=\"line\"><span class=\"comment\"># 向旧的master 发送 SIGHUP 信号；向 新的master进程发送 SIGQUIT 信号</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGWINCH 106255</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">root     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107264   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGHUP 106255</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">root     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107401 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107402 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107403 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107404 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107412   1480  0 17:07 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGQUIT 107206</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107401 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107402 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107403 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107404 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107440   1480  0 17:08 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 至此，nginx热升级回滚成功</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx模块化设计机制\"><a href=\"#Nginx模块化设计机制\" class=\"headerlink\" title=\"Nginx模块化设计机制\"></a>Nginx模块化设计机制</h2><h3 id=\"模块结构图\"><a href=\"#模块结构图\" class=\"headerlink\" title=\"模块结构图\"></a>模块结构图</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5piekf14yes0.webp\" width=\"60%\" />\n\n<br/>\n\n<br>\n\n<h3 id=\"模块体系结构\"><a href=\"#模块体系结构\" class=\"headerlink\" title=\"模块体系结构\"></a>模块体系结构</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2miqh0m6jdo0.webp\" width=\"40%\" />\n\n<br/>\n\n<br>\n\n<h2 id=\"Nginx编译安装的配置参数\"><a href=\"#Nginx编译安装的配置参数\" class=\"headerlink\" title=\"Nginx编译安装的配置参数\"></a>Nginx编译安装的配置参数</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7jfdxqlxm340.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n<h2 id=\"定制编译安装Nginx\"><a href=\"#定制编译安装Nginx\" class=\"headerlink\" title=\"定制编译安装Nginx\"></a>定制编译安装Nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># （0）准备nginx的管理用户</span></span><br><span class=\"line\">[root@bogon install]<span class=\"comment\"># useradd nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （1）准备安装文件</span></span><br><span class=\"line\">[root@localhost install]<span class=\"comment\"># wget https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon install]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 3688</span><br><span class=\"line\">-rw-r--r--. 1 root root 1073322 5月  24 22:29 nginx-1.22.0.tar.gz</span><br><span class=\"line\">-rw-r--r--. 1 root root 2085854 10月  6 16:08 pcre-8.43.tar.gz</span><br><span class=\"line\">-rw-r--r--. 1 root root  607698 1月  16 2017 zlib-1.2.11.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （2）解压安装文件</span></span><br><span class=\"line\">[root@bogon install]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 16</span><br><span class=\"line\">drwxr-xr-x.  8 1001  1001  158 5月  24 07:59 nginx-1.22.0</span><br><span class=\"line\">drwxr-xr-x.  7 1169  1169 8192 2月  24 2019 pcre-8.43</span><br><span class=\"line\">drwxr-xr-x. 14  501 games 4096 1月  16 2017 zlib-1.2.11</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （3）解压后进入 nginx源码目录，查看相关编译参数</span></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># ./configure --help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （4）编译安装前下载相关依赖</span></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel gd gd-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （5）编译安装</span></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># ./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/conf/nginx.conf --user=nginx --group=nginx --pid-path=/usr/local/nginx/pid/nginx.pid --error-log-path=/usr/local/nginx/logs/error.log --with-pcre=/install/pcre-8.43 --with-zlib=/install/zlib-1.2.11 --with-http_ssl_module --with-http_image_filter_module --with-http_stub_status_module --http-log-path=/usr/local/nginx/logs/access.log</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># make</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># make install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 至次，nginx编译安装完成</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># cd /usr/local/nginx/</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxr-xr-x. 2 root root 4096 10月  6 16:16 conf</span><br><span class=\"line\">drwxr-xr-x. 2 root root   40 10月  6 16:16 html</span><br><span class=\"line\">drwxr-xr-x. 2 root root    6 10月  6 16:16 logs</span><br><span class=\"line\">drwxr-xr-x. 2 root root    6 10月  6 16:16 pid</span><br><span class=\"line\">drwxr-xr-x. 2 root root   19 10月  6 16:16 sbin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># sbin/nginx</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef | grep nginx</span></span><br><span class=\"line\">root     104771      1  0 16:18 ?        00:00:00 nginx: master process sbin/nginx</span><br><span class=\"line\">nginx    104772 104771  0 16:18 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     104780   1480  0 16:18 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx配置文件结构\"><a href=\"#Nginx配置文件结构\" class=\"headerlink\" title=\"Nginx配置文件结构\"></a>Nginx配置文件结构</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.69cd7t6e47k0.webp\" width=\"65%\"/>\n\n<br>\n\n<br>\n\n<h2 id=\"虚拟主机的分类（三种）\"><a href=\"#虚拟主机的分类（三种）\" class=\"headerlink\" title=\"虚拟主机的分类（三种）\"></a>虚拟主机的分类（三种）</h2><ul>\n<li>基于多IP的虚拟主机<ul>\n<li>多网卡多IP</li>\n<li>单网卡多IP</li>\n</ul>\n</li>\n<li>基于多端口的虚拟主机</li>\n<li>基于域名的虚拟主机</li>\n</ul>\n<br>\n\n<h3 id=\"基于多网卡的虚拟主机实现\"><a href=\"#基于多网卡的虚拟主机实现\" class=\"headerlink\" title=\"基于多网卡的虚拟主机实现\"></a>基于多网卡的虚拟主机实现</h3><ul>\n<li>这里我们使用多网卡多IP的方式</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">192.168.146.132:8080</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_ip/<span class=\"number\">132</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">192.168.146.133:8080</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_ip/<span class=\"number\">133</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">192.168.146.134:8080</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_ip/<span class=\"number\">134</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h3 id=\"基于端口的虚拟主机实现\"><a href=\"#基于端口的虚拟主机实现\" class=\"headerlink\" title=\"基于端口的虚拟主机实现\"></a>基于端口的虚拟主机实现</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">90</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_port/<span class=\"number\">90</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">91</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_port/<span class=\"number\">91</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">92</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_port/<span class=\"number\">92</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"基于域名的虚拟主机实现\"><a href=\"#基于域名的虚拟主机实现\" class=\"headerlink\" title=\"基于域名的虚拟主机实现\"></a>基于域名的虚拟主机实现</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">9090</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\ttest1.nginx.com;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_domain/test1;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">9090</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\ttest2.nginx.com;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_domain/test2;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">9090</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\ttest3.nginx.com;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_domain/test3;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"核心指令-Nginx基础应用\"><a href=\"#核心指令-Nginx基础应用\" class=\"headerlink\" title=\"核心指令-Nginx基础应用\"></a>核心指令-Nginx基础应用</h1><h2 id=\"配置文件main段核心参数用法\"><a href=\"#配置文件main段核心参数用法\" class=\"headerlink\" title=\"配置文件main段核心参数用法\"></a>配置文件main段核心参数用法</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main段核心参数:</span></span><br><span class=\"line\"><span class=\"attribute\">user</span> USERNAME [GROUP]</span><br><span class=\"line\">    解释：指定运行nginx的worker子进程的属主和属组，其中属组可以不指定 </span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">\t\tuser nginx nginx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">pid</span> DIR</span><br><span class=\"line\">    解释：指定运行nginx的master主进程的pid文件存放路径 </span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">\t\tpid /ropt/nginx/logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_rlimit_nofile</span> number</span><br><span class=\"line\">   \t解春：指定worker子进程可以打开的最大文件句柄数 </span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">         worker_rlimit_nofile <span class=\"number\">20480</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_rlimit_core</span> size</span><br><span class=\"line\"> \t一 解释：指定worker子进程异常终止后的core文件，用于记录分析问题 </span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">         worker_rlimit_core <span class=\"number\">50M</span>;</span><br><span class=\"line\">         <span class=\"attribute\">working_directory</span> /opt/nginx/tmp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> number | auto</span><br><span class=\"line\">   解释：指定nginx启动的worker子进程数量</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">         worker_processes <span class=\"number\">4</span>;</span><br><span class=\"line\">         <span class=\"attribute\">worker_processes</span> auto;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_cpu_affinity</span> cpumaskl cpumask2...</span><br><span class=\"line\">   解霹：将每个worker子进程与我们的CPU物理核心绑定。</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">         worker_cpu_affinity <span class=\"number\">0001</span> <span class=\"number\">0010</span> <span class=\"number\">0100</span> <span class=\"number\">1000</span>； <span class=\"comment\">#</span></span><br><span class=\"line\">         <span class=\"number\">4</span>个物理核心，<span class=\"number\">4</span>个worker子进程</span><br><span class=\"line\">         worker_cpu_affinity <span class=\"number\">00000001</span> <span class=\"number\">00000010</span> <span class=\"number\">00000100</span> <span class=\"number\">00001000</span> <span class=\"number\">00010000</span></span><br><span class=\"line\">         <span class=\"number\">00100060</span> <span class=\"number\">01000000</span> <span class=\"number\">10000000</span>; <span class=\"comment\"># 8物理核心，8个worker子进程</span></span><br><span class=\"line\">         <span class=\"attribute\">worker_cpu_affinity</span> <span class=\"number\">01</span> <span class=\"number\">10</span> <span class=\"number\">01</span> <span class=\"number\">10</span>;         <span class=\"comment\"># 2个物理核心，4个子进程</span></span><br><span class=\"line\">  备注：将每个worker子进程与特定CPU物理核心绑定，优势在于：避免同个worker子进程</span><br><span class=\"line\">  在不同的CPU核心上切换，缓存失效，降低性能；其并不能真正的避免进程切换</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_priority</span> number</span><br><span class=\"line\">   解释：指定worker子进程的nice值，以调整运行nginx的优先级，通常设定为负值，以优先 调用nginx</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">        worker_priority -<span class=\"number\">10</span>;</span><br><span class=\"line\">   备注：Linux默认进程的优先级值是120,值越小越优先；nice设定范围为-20到+19</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_shutdown_timeout</span> time</span><br><span class=\"line\">   解春：指定证WOrker子进程优雅退出时的超时时间</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">        worker_shutdown_timeout <span class=\"number\">5s</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">timer_resolution</span> time</span><br><span class=\"line\">   解释：worker子进程内部使用的计时器精度，调整时间间隔越大，系统调用越少，有利于性 能提升；反之，系统调用越多，性能下降</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">        worker_resolution 100ms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">daemon</span> <span class=\"literal\">on</span>|<span class=\"literal\">off</span></span><br><span class=\"line\">  解释：设定nginx的运行方式，前台还是后台，前台用户调试，后台用于生产 示例：</span><br><span class=\"line\">       daemon <span class=\"literal\">off</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">lock_file</span> DIR</span><br><span class=\"line\">  解释：负载均衡互斥锁文件存放路径</span><br><span class=\"line\">       lock_file logs/nginx.lock</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"配置文件events段核心参数用法\"><a href=\"#配置文件events段核心参数用法\" class=\"headerlink\" title=\"配置文件events段核心参数用法\"></a>配置文件events段核心参数用法</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">use</td>\n<td align=\"center\">nginx使用何种事件驱动模型</td>\n</tr>\n<tr>\n<td align=\"center\">worker_connections</td>\n<td align=\"center\">worker子进程能够处理的最大并发连接数</td>\n</tr>\n<tr>\n<td align=\"center\">accept_mutex</td>\n<td align=\"center\">是否打开负载均衡互斥锁</td>\n</tr>\n<tr>\n<td align=\"center\">accept_mutex_delay</td>\n<td align=\"center\">新连接分配给worker子进程的超时时间</td>\n</tr>\n<tr>\n<td align=\"center\">muti_accept</td>\n<td align=\"center\">worker子进程可以接收的新连接个数</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">语法</th>\n<th align=\"center\">可选值</th>\n<th align=\"center\">默认配置</th>\n<th align=\"center\">推荐配置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">use</td>\n<td align=\"center\">use method</td>\n<td align=\"center\">select、poll、kqueue、epoll、/dev/poll、eventport</td>\n<td align=\"center\">无</td>\n<td align=\"center\">不指定，让nginx自己选择</td>\n</tr>\n<tr>\n<td align=\"center\">worker_connections</td>\n<td align=\"center\">worker_connections number</td>\n<td align=\"center\"></td>\n<td align=\"center\">worker_connections 1024</td>\n<td align=\"center\">worker_connections 65535/worker_processes|65535</td>\n</tr>\n<tr>\n<td align=\"center\">accept_mutex</td>\n<td align=\"center\">accept_mutex on|off</td>\n<td align=\"center\">on、off</td>\n<td align=\"center\">accept_mutex off</td>\n<td align=\"center\">accept_mutex on</td>\n</tr>\n<tr>\n<td align=\"center\">accept_mutex_delay</td>\n<td align=\"center\">accept_mutex_delay time</td>\n<td align=\"center\"></td>\n<td align=\"center\">accept_mutex_delay 500ms</td>\n<td align=\"center\">accept_mutex_delay 200ms</td>\n</tr>\n<tr>\n<td align=\"center\">muti_accept</td>\n<td align=\"center\">muti_accept on|off</td>\n<td align=\"center\">on、off</td>\n<td align=\"center\">muti_accept off</td>\n<td align=\"center\">muti_accept on</td>\n</tr>\n</tbody></table>\n<br>\n\n<h2 id=\"配置文件http段核心参数用法\"><a href=\"#配置文件http段核心参数用法\" class=\"headerlink\" title=\"配置文件http段核心参数用法\"></a>配置文件http段核心参数用法</h2><h3 id=\"server-name指令\"><a href=\"#server-name指令\" class=\"headerlink\" title=\"server_name指令\"></a>server_name指令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可以写多个server name，可以使用正则表达式，通配符，也可以是ip 具体的域名。</span></span><br><span class=\"line\">server_name name1 name2 name3;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>匹配优先级<ul>\n<li>精确匹配 &gt; 左侧通配符匹配 &gt; 右侧通配符匹配 &gt; 正则表达式匹配</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"root和alias\"><a href=\"#root和alias\" class=\"headerlink\" title=\"root和alias\"></a>root和alias</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">语法</th>\n<th align=\"center\">上下文</th>\n<th align=\"center\">共同点</th>\n<th align=\"center\">区别</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">root</td>\n<td align=\"center\">root path;</td>\n<td align=\"center\">http server location if</td>\n<td align=\"center\">URI到磁盘文件的映射</td>\n<td align=\"center\">root会将定义路径与URI叠加</td>\n</tr>\n<tr>\n<td align=\"center\">alias</td>\n<td align=\"center\">alias path;</td>\n<td align=\"center\">location</td>\n<td align=\"center\">URI到磁盘文件的映射</td>\n<td align=\"center\">alias只取定义路径</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"location的基础用法\"><a href=\"#location的基础用法\" class=\"headerlink\" title=\"location的基础用法\"></a>location的基础用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">语法：</span></span><br><span class=\"line\">\tlocaltion [ = | ~ | ~* | ^~ ] uri &#123;...&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">\t</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上下文：</span></span><br><span class=\"line\">\tserver location</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">匹配规则</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">=</td>\n<td align=\"center\">精确匹配</td>\n<td align=\"center\"><code>location = /images/ &#123;...&#125;</code></td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">正则匹配，区分大小写</td>\n<td align=\"center\">`location ~ .(jpg</td>\n</tr>\n<tr>\n<td align=\"center\">~*</td>\n<td align=\"center\">正则匹配，不区分大小写</td>\n<td align=\"center\">`location ~* .(jpg</td>\n</tr>\n<tr>\n<td align=\"center\">^~</td>\n<td align=\"center\">匹配到即停止搜索</td>\n<td align=\"center\"><code>location ^~ /images/ &#123;...&#125;</code></td>\n</tr>\n<tr>\n<td align=\"center\">不带任何符号</td>\n<td align=\"center\"></td>\n<td align=\"center\"><code>location / &#123;...&#125;</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li>匹配规则优先级</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4dfzxu6vkws0.webp\" width=\"45%\" />\n\n<br>\n\n<h3 id=\"理解location中url结尾的反斜线\"><a href=\"#理解location中url结尾的反斜线\" class=\"headerlink\" title=\"理解location中url结尾的反斜线\"></a>理解location中url结尾的反斜线</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /some-dir &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location /some-dir/ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果URL的结构是<code>https://domain.com/some-dir/</code>。尾部如果缺少<code>/</code>将导致重定向。因为根据约定，URL尾部的<code>/</code>表示目录，没有<code>/</code>表示文件。<ul>\n<li>所以访问<code>/some-dir/</code>时，服务器会自动去该目录下找对应的默认文件。</li>\n<li>如果访问<code>/some-dir</code>的话，服务器会先去找<code>some-dir</code>文件，找不到的话会将<code>some-dir</code>当成目录，重定向到<code>/some-dir/</code>，去该目录下找默认文件。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"stub-status模块用法\"><a href=\"#stub-status模块用法\" class=\"headerlink\" title=\"stub_status模块用法\"></a>stub_status模块用法</h3><ul>\n<li><code>stub_status</code>的使用，需要Nginx编译进去</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">语法结构</span></span><br><span class=\"line\">\tstub_status;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">低于1.7.5 版本：</span></span><br><span class=\"line\">\tstub_status on;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上下文：</span></span><br><span class=\"line\">\tserver location</span><br><span class=\"line\"><span class=\"meta prompt_\">\t</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置示例</span></span><br><span class=\"line\">\tlocation /uri &#123;</span><br><span class=\"line\">\t\tstub_status;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>状态项</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.98fiesmzwzk.webp\" width=\"65%\" />\n\n<br>\n\n<ul>\n<li>内嵌变量</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5h4bf27xt4c0.webp\" width=\"65%\" />\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"HTTP核心模块\"><a href=\"#HTTP核心模块\" class=\"headerlink\" title=\"HTTP核心模块\"></a>HTTP核心模块</h1><h2 id=\"connection-amp-request\"><a href=\"#connection-amp-request\" class=\"headerlink\" title=\"connection &amp; request\"></a>connection &amp; request</h2><ul>\n<li>connection 是连接，即常说的tcp连接，三次握手，状态机</li>\n<li>request是请求，例如http请求，无状态的协议</li>\n<li>request是必须建立在connection之上的</li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>linux信号量这块的管理机制可以再抽时间深入理解一下</li>\n<li>第三章、4 的相关内容算是比较简单，后续实践一下</li>\n<li>需要理解请求过程，连接、请求</li>\n<li>其实第二章的内容也很重要，要对Nginx有总体上的认知，特点、优势等等，需要说出个所以然来</li>\n<li>多进程和多线程相关的知识还需要深入理解一下</li>\n<li>Nginx的模块整体还需要有一个把握</li>\n<li>location这块的内容 还需要进一步熟悉一下</li>\n</ol>\n</blockquote>\n<br>\n\n<img src=\"\" width=\"65%\" />\n\n<br>\n\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nginx初体验\"><a href=\"#Nginx初体验\" class=\"headerlink\" title=\"Nginx初体验\"></a>Nginx初体验</h1><h2 id=\"Nginx概念\"><a href=\"#Nginx概念\" class=\"headerlink\" title=\"Nginx概念\"></a>Nginx概念</h2><ul>\n<li><p>Nginx (engine x) 是一个<strong>高性能的HTTP和反向代理web服务器</strong>，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，公开版本1.19.6发布于2020年12月15日。</p>\n</li>\n<li><p>其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2022年01月25日，nginx 1.21.6发布。</p>\n</li>\n<li><p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好。</p>\n</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"Nginx缘起历史\"><a href=\"#Nginx缘起历史\" class=\"headerlink\" title=\"Nginx缘起历史\"></a>Nginx缘起历史</h2><ul>\n<li>互联网数据的快速增长</li>\n<li>Apache处理请求的低效性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Apache</th>\n<th align=\"center\">Nginx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">一个进程处理一个请求</td>\n<td align=\"center\">一个进程处理多个请求</td>\n</tr>\n<tr>\n<td align=\"center\">阻塞式的</td>\n<td align=\"center\">非阻塞式的</td>\n</tr>\n</tbody></table>\n<br>\n\n<br>\n\n<h2 id=\"Nginx三个主要企业应用场景\"><a href=\"#Nginx三个主要企业应用场景\" class=\"headerlink\" title=\"Nginx三个主要企业应用场景\"></a>Nginx三个主要企业应用场景</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4z8gliurmhc0.webp\" width=\"90%\" />\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx核心优势\"><a href=\"#Nginx核心优势\" class=\"headerlink\" title=\"Nginx核心优势\"></a>Nginx核心优势</h2><ul>\n<li>高并发、高性能</li>\n<li>扩展性好</li>\n<li>异步非阻塞的事件驱动模型</li>\n<li>高可靠性</li>\n<li>热部署</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"安装rpm包Nginx\"><a href=\"#安装rpm包Nginx\" class=\"headerlink\" title=\"安装rpm包Nginx\"></a>安装rpm包Nginx</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（1）下载epel yum源</span></span><br><span class=\"line\">yum install epel-release -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（2）查看yum源里可安装的nginx</span></span><br><span class=\"line\">yum list all |grep nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（3）下载nginx</span></span><br><span class=\"line\">yum install nginx -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（4）列出 nginx 安装的文件</span></span><br><span class=\"line\">rpm -ql nginx</span><br><span class=\"line\"><span class=\"meta prompt_\">\t</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（5）查看nginx启动文件所在目录</span></span><br><span class=\"line\">rpm -ql nginx |grep bin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Nginx的二进制文件所在目录</span></span><br><span class=\"line\">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"Nginx进程结构与热部署\"><a href=\"#Nginx进程结构与热部署\" class=\"headerlink\" title=\"Nginx进程结构与热部署\"></a>Nginx进程结构与热部署</h1><h2 id=\"多进程与多线程\"><a href=\"#多进程与多线程\" class=\"headerlink\" title=\"多进程与多线程\"></a>多进程与多线程</h2><h3 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h3><h2 id=\"Nginx的进程结构\"><a href=\"#Nginx的进程结构\" class=\"headerlink\" title=\"Nginx的进程结构\"></a>Nginx的进程结构</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/56b03da1dfa88b5a292f320a90fbb9d.2bzqwmpmcuas.webp\" width=\"70%\"/>\n\n<ul>\n<li>真正处理请求的不是 master process，二是 worker process</li>\n</ul>\n<br>\n\n<br>\n\n<h2 id=\"Linux的信号量管理机制\"><a href=\"#Linux的信号量管理机制\" class=\"headerlink\" title=\"Linux的信号量管理机制\"></a>Linux的信号量管理机制</h2><ul>\n<li>linux中的所有信号量</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]<span class=\"comment\"># kill -l</span></span><br><span class=\"line\"> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span><br><span class=\"line\"> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span><br><span class=\"line\">11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span><br><span class=\"line\">16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class=\"line\">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span><br><span class=\"line\">26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span><br><span class=\"line\">31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span><br><span class=\"line\">38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class=\"line\">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class=\"line\">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class=\"line\">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span><br><span class=\"line\">58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class=\"line\">63) SIGRTMAX-1  64) SIGRTMAX</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>常用信号量</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2l38lbs30tc0.webp\" width=\"50%\"/>\n\n<br>\n\n<br>\n\n<h2 id=\"利用信号量管理Nginx\"><a href=\"#利用信号量管理Nginx\" class=\"headerlink\" title=\"利用信号量管理Nginx\"></a>利用信号量管理Nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭nginx</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGTERM [nginx master进程pid]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新读取配置文件，会关闭之前的work子进程，生成新的work子进程 </span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGHUP [nginx master进程pid]</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.682s0oj5i400.webp\" width=\"50%\"/>\n\n<br>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.4ouapvas0x40.webp\" width=\"50%\"/>\n\n<br/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.zftbgjpnhzk.webp\" width=\"50%\"/>\n\n<br>\n\n<br>\n\n<h2 id=\"配置文件重载的原理真相\"><a href=\"#配置文件重载的原理真相\" class=\"headerlink\" title=\"配置文件重载的原理真相\"></a>配置文件重载的原理真相</h2><h3 id=\"reload-重载配置文件的流程\"><a href=\"#reload-重载配置文件的流程\" class=\"headerlink\" title=\"reload 重载配置文件的流程\"></a><code>reload</code> 重载配置文件的流程</h3><ol>\n<li>向master进程发送HUP信号（reload命令）</li>\n<li>master进程检查配置语法是否正确</li>\n<li>master进程打开监听端口</li>\n<li>master进程使用新的配置文件启动新的worker子进程</li>\n<li>master进程向老的worker子进程发送QUIT信号</li>\n<li>旧的worker进程关闭监听句柄，处理完当前连接后关闭进程</li>\n</ol>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7cv9qios6300.webp\" width=\"65%\" />\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx的热部署\"><a href=\"#Nginx的热部署\" class=\"headerlink\" title=\"Nginx的热部署\"></a>Nginx的热部署</h2><h3 id=\"热升级的流程（前提：新旧Nginx的编译目录一致）\"><a href=\"#热升级的流程（前提：新旧Nginx的编译目录一致）\" class=\"headerlink\" title=\"热升级的流程（前提：新旧Nginx的编译目录一致）\"></a>热升级的流程（前提：新旧Nginx的编译目录一致）</h3><ol>\n<li>将旧的nginx文件替换成新的nginx文件（二进制主程序文件）</li>\n<li>向master进程发送USR2信号</li>\n<li>master进程修改pid文件，加后缀.oldbin</li>\n<li>master进程用新nginx文件启动新master进程</li>\n<li>向旧的master进程发送WINCH信号，旧的worker子进程退出</li>\n<li>回滚槽形：向旧master发送HUP ,向新的master发送QUIT</li>\n</ol>\n<img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.3s80krndr7m0.webp\" width=\"75%\" />\n\n<br>\n\n<h3 id=\"Nginx热部署完整步骤演示\"><a href=\"#Nginx热部署完整步骤演示\" class=\"headerlink\" title=\"Nginx热部署完整步骤演示\"></a>Nginx热部署完整步骤演示</h3><h4 id=\"Nginx热升级核心命令解释\"><a href=\"#Nginx热升级核心命令解释\" class=\"headerlink\" title=\"Nginx热升级核心命令解释\"></a>Nginx热升级核心命令解释</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份nginx二进制文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> nginx nginx.bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成新的nginx 主进程 和子进程（新老master、worker进程共存）</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGUSR2 [pid]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭nginx master进程下的worker子进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGWINCH [pid]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGQUIT [pid]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 让旧master进程 启动work子进程（使用的还是旧的nginx二进制文件）</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGHUP [pid]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意事项</li>\n</ul>\n<blockquote>\n<p>不能使用 <code>kill -s SIGHU []</code> 退出旧的master进程，如果这样做的话，旧的 master主进程和其子进程会直接退出（被kill掉），这样（当新启的nginx进程有问题时）就无法回滚。</p>\n<p>所以应该使用 <code>kill -s SIGWINCH []</code>，先将旧的master主进程下的work子进程全部kill掉，验证新启的nginx进程没有问题后，再使用 <code>kill -s SIGHU []</code>    kill掉旧的master进程。如果验证新启的nginx进程有问题，这时使用 <code>kill -s SIGHUP []</code> 就可以让旧master进程重新启动work子进程。（达到回滚的效果）</p>\n</blockquote>\n<br/>\n\n<h4 id=\"Nginx正常热升级详细步骤演示\"><a href=\"#Nginx正常热升级详细步骤演示\" class=\"headerlink\" title=\"Nginx正常热升级详细步骤演示\"></a>Nginx正常热升级详细步骤演示</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># （1）查看nginx处于正常运行状态</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105723   1480  0 16:35 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># /usr/local/nginx/sbin/nginx</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     105747   1480  0 16:35 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （2）备份nginx的二进制文件，并将新的nginx替换成旧的nginx</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cd /usr/local/nginx/sbin/</span></span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 6128</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># cp nginx nginx.old</span></span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 12256</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:36 nginx.old</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （3）给旧的nginx master 进程发送 SIGUSR2信号后。nginx 新旧master进程、worker子进程共存。</span></span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106243   1480  0 16:45 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># kill -s SIGUSR2 105739</span></span><br><span class=\"line\">[root@bogon sbin]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    105740 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105741 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105742 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    105743 105739  0 16:35 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106255 105739  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106268   1480  0 16:45 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll pid/</span></span><br><span class=\"line\">总用量 8</span><br><span class=\"line\">-rw-r--r--. 1 root root 7 10月  6 16:45 nginx.pid</span><br><span class=\"line\">-rw-r--r--. 1 root root 7 10月  6 16:35 nginx.pid.oldbin</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cat pid/nginx.pid</span></span><br><span class=\"line\">106255</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cat pid/nginx.pid.oldbin</span></span><br><span class=\"line\">105739</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （4）向旧的master进程发送 SIGWINCH 信号，旧的 worker子进程退出。此时，所有请求会被新的worker进程处理</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGWINCH 105739</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     105739      1  0 16:35 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">root     106255 105739  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106643   1480  0 16:52 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （5）验证新的ngixn 的 worker子进程没有错误后，向旧的master进程发送 SIGQUIT 信号。此时 旧的master进程退出。</span></span><br><span class=\"line\"><span class=\"comment\"># 至此，nginx热升级成功</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGQUIT 105739</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\">#</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     106814   1480  0 16:56 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll pid/</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-r--r--. 1 root root 7 10月  6 16:45 nginx.pid</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cat pid/nginx.pid</span></span><br><span class=\"line\">106255</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll sbin/</span></span><br><span class=\"line\">总用量 12256</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:36 nginx.old</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># rm -rf sbin/nginx.old</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h4 id=\"Nginx热升级——回滚情形演示\"><a href=\"#Nginx热升级——回滚情形演示\" class=\"headerlink\" title=\"Nginx热升级——回滚情形演示\"></a>Nginx热升级——回滚情形演示</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># （1）~（2）查看nginx处于正常运行状态；备份nginx的二进制文件，并将新的nginx替换成旧的nginx</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll sbin/</span></span><br><span class=\"line\">总用量 6128</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># cp sbin/nginx sbin/nginx.bak</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll sbin/</span></span><br><span class=\"line\">总用量 12256</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 16:16 nginx</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 6272440 10月  6 17:01 nginx.bak</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107093   1480  0 17:01 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （3）给旧的nginx master 进程发送 SIGUSR2信号后。nginx 新旧master进程、worker子进程共存。</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGUSR2 106255</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    106256 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106257 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106258 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    106259 106255  0 16:45 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107217   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （4）向旧的master进程发送 SIGWINCH 信号，旧的 worker子进程退出。此时，所有请求会被新的worker进程处理</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGWINCH 106255</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">root     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107264   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （5）验证新的ngixn 的 worker子进程 发现有错误，开启回滚：</span></span><br><span class=\"line\"><span class=\"comment\"># 向旧的master 发送 SIGHUP 信号；向 新的master进程发送 SIGQUIT 信号</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGWINCH 106255</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">root     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107264   1480  0 17:04 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGHUP 106255</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">root     107206 106255  0 17:03 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107207 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107208 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107209 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107210 107206  0 17:03 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107401 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107402 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107403 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107404 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107412   1480  0 17:07 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># kill -s SIGQUIT 107206</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef |grep nginx</span></span><br><span class=\"line\">root     106255      1  0 16:45 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx    107401 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107402 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107403 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">nginx    107404 106255  0 17:07 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     107440   1480  0 17:08 pts/0    00:00:00 grep --color=auto nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 至此，nginx热升级回滚成功</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx模块化设计机制\"><a href=\"#Nginx模块化设计机制\" class=\"headerlink\" title=\"Nginx模块化设计机制\"></a>Nginx模块化设计机制</h2><h3 id=\"模块结构图\"><a href=\"#模块结构图\" class=\"headerlink\" title=\"模块结构图\"></a>模块结构图</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.5piekf14yes0.webp\" width=\"60%\" />\n\n<br/>\n\n<br>\n\n<h3 id=\"模块体系结构\"><a href=\"#模块体系结构\" class=\"headerlink\" title=\"模块体系结构\"></a>模块体系结构</h3><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.2miqh0m6jdo0.webp\" width=\"40%\" />\n\n<br/>\n\n<br>\n\n<h2 id=\"Nginx编译安装的配置参数\"><a href=\"#Nginx编译安装的配置参数\" class=\"headerlink\" title=\"Nginx编译安装的配置参数\"></a>Nginx编译安装的配置参数</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.7jfdxqlxm340.webp\" width=\"60%\"/>\n\n<br>\n\n<br>\n\n<h2 id=\"定制编译安装Nginx\"><a href=\"#定制编译安装Nginx\" class=\"headerlink\" title=\"定制编译安装Nginx\"></a>定制编译安装Nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># （0）准备nginx的管理用户</span></span><br><span class=\"line\">[root@bogon install]<span class=\"comment\"># useradd nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （1）准备安装文件</span></span><br><span class=\"line\">[root@localhost install]<span class=\"comment\"># wget https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon install]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 3688</span><br><span class=\"line\">-rw-r--r--. 1 root root 1073322 5月  24 22:29 nginx-1.22.0.tar.gz</span><br><span class=\"line\">-rw-r--r--. 1 root root 2085854 10月  6 16:08 pcre-8.43.tar.gz</span><br><span class=\"line\">-rw-r--r--. 1 root root  607698 1月  16 2017 zlib-1.2.11.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （2）解压安装文件</span></span><br><span class=\"line\">[root@bogon install]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 16</span><br><span class=\"line\">drwxr-xr-x.  8 1001  1001  158 5月  24 07:59 nginx-1.22.0</span><br><span class=\"line\">drwxr-xr-x.  7 1169  1169 8192 2月  24 2019 pcre-8.43</span><br><span class=\"line\">drwxr-xr-x. 14  501 games 4096 1月  16 2017 zlib-1.2.11</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （3）解压后进入 nginx源码目录，查看相关编译参数</span></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># ./configure --help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （4）编译安装前下载相关依赖</span></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel gd gd-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （5）编译安装</span></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># ./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/conf/nginx.conf --user=nginx --group=nginx --pid-path=/usr/local/nginx/pid/nginx.pid --error-log-path=/usr/local/nginx/logs/error.log --with-pcre=/install/pcre-8.43 --with-zlib=/install/zlib-1.2.11 --with-http_ssl_module --with-http_image_filter_module --with-http_stub_status_module --http-log-path=/usr/local/nginx/logs/access.log</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># make</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># make install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 至次，nginx编译安装完成</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx-1.22.0]<span class=\"comment\"># cd /usr/local/nginx/</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxr-xr-x. 2 root root 4096 10月  6 16:16 conf</span><br><span class=\"line\">drwxr-xr-x. 2 root root   40 10月  6 16:16 html</span><br><span class=\"line\">drwxr-xr-x. 2 root root    6 10月  6 16:16 logs</span><br><span class=\"line\">drwxr-xr-x. 2 root root    6 10月  6 16:16 pid</span><br><span class=\"line\">drwxr-xr-x. 2 root root   19 10月  6 16:16 sbin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># sbin/nginx</span></span><br><span class=\"line\">[root@bogon nginx]<span class=\"comment\"># ps -ef | grep nginx</span></span><br><span class=\"line\">root     104771      1  0 16:18 ?        00:00:00 nginx: master process sbin/nginx</span><br><span class=\"line\">nginx    104772 104771  0 16:18 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root     104780   1480  0 16:18 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<h2 id=\"Nginx配置文件结构\"><a href=\"#Nginx配置文件结构\" class=\"headerlink\" title=\"Nginx配置文件结构\"></a>Nginx配置文件结构</h2><img src=\"https://cdn.jsdelivr.net/gh/sonzonzy/image-hosting@main/blog-img-bed/image.69cd7t6e47k0.webp\" width=\"65%\"/>\n\n<br>\n\n<br>\n\n<h2 id=\"虚拟主机的分类（三种）\"><a href=\"#虚拟主机的分类（三种）\" class=\"headerlink\" title=\"虚拟主机的分类（三种）\"></a>虚拟主机的分类（三种）</h2><ul>\n<li>基于多IP的虚拟主机<ul>\n<li>多网卡多IP</li>\n<li>单网卡多IP</li>\n</ul>\n</li>\n<li>基于多端口的虚拟主机</li>\n<li>基于域名的虚拟主机</li>\n</ul>\n<br>\n\n<h3 id=\"基于多网卡的虚拟主机实现\"><a href=\"#基于多网卡的虚拟主机实现\" class=\"headerlink\" title=\"基于多网卡的虚拟主机实现\"></a>基于多网卡的虚拟主机实现</h3><ul>\n<li>这里我们使用多网卡多IP的方式</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">192.168.146.132:8080</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_ip/<span class=\"number\">132</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">192.168.146.133:8080</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_ip/<span class=\"number\">133</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">192.168.146.134:8080</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_ip/<span class=\"number\">134</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h3 id=\"基于端口的虚拟主机实现\"><a href=\"#基于端口的虚拟主机实现\" class=\"headerlink\" title=\"基于端口的虚拟主机实现\"></a>基于端口的虚拟主机实现</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">90</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_port/<span class=\"number\">90</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">91</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_port/<span class=\"number\">91</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">92</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\tlocalhost;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_port/<span class=\"number\">92</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"基于域名的虚拟主机实现\"><a href=\"#基于域名的虚拟主机实现\" class=\"headerlink\" title=\"基于域名的虚拟主机实现\"></a>基于域名的虚拟主机实现</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">9090</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\ttest1.nginx.com;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_domain/test1;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">9090</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\ttest2.nginx.com;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_domain/test2;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>\t<span class=\"number\">9090</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>\ttest3.nginx.com;</span><br><span class=\"line\">\t<span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>\t/usr/local/nginx/html/virtual_host_by_domain/test3;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>\tindex.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"核心指令-Nginx基础应用\"><a href=\"#核心指令-Nginx基础应用\" class=\"headerlink\" title=\"核心指令-Nginx基础应用\"></a>核心指令-Nginx基础应用</h1><h2 id=\"配置文件main段核心参数用法\"><a href=\"#配置文件main段核心参数用法\" class=\"headerlink\" title=\"配置文件main段核心参数用法\"></a>配置文件main段核心参数用法</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main段核心参数:</span></span><br><span class=\"line\"><span class=\"attribute\">user</span> USERNAME [GROUP]</span><br><span class=\"line\">    解释：指定运行nginx的worker子进程的属主和属组，其中属组可以不指定 </span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">\t\tuser nginx nginx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">pid</span> DIR</span><br><span class=\"line\">    解释：指定运行nginx的master主进程的pid文件存放路径 </span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">\t\tpid /ropt/nginx/logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_rlimit_nofile</span> number</span><br><span class=\"line\">   \t解春：指定worker子进程可以打开的最大文件句柄数 </span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">         worker_rlimit_nofile <span class=\"number\">20480</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_rlimit_core</span> size</span><br><span class=\"line\"> \t一 解释：指定worker子进程异常终止后的core文件，用于记录分析问题 </span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">         worker_rlimit_core <span class=\"number\">50M</span>;</span><br><span class=\"line\">         <span class=\"attribute\">working_directory</span> /opt/nginx/tmp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> number | auto</span><br><span class=\"line\">   解释：指定nginx启动的worker子进程数量</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">         worker_processes <span class=\"number\">4</span>;</span><br><span class=\"line\">         <span class=\"attribute\">worker_processes</span> auto;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_cpu_affinity</span> cpumaskl cpumask2...</span><br><span class=\"line\">   解霹：将每个worker子进程与我们的CPU物理核心绑定。</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">         worker_cpu_affinity <span class=\"number\">0001</span> <span class=\"number\">0010</span> <span class=\"number\">0100</span> <span class=\"number\">1000</span>； <span class=\"comment\">#</span></span><br><span class=\"line\">         <span class=\"number\">4</span>个物理核心，<span class=\"number\">4</span>个worker子进程</span><br><span class=\"line\">         worker_cpu_affinity <span class=\"number\">00000001</span> <span class=\"number\">00000010</span> <span class=\"number\">00000100</span> <span class=\"number\">00001000</span> <span class=\"number\">00010000</span></span><br><span class=\"line\">         <span class=\"number\">00100060</span> <span class=\"number\">01000000</span> <span class=\"number\">10000000</span>; <span class=\"comment\"># 8物理核心，8个worker子进程</span></span><br><span class=\"line\">         <span class=\"attribute\">worker_cpu_affinity</span> <span class=\"number\">01</span> <span class=\"number\">10</span> <span class=\"number\">01</span> <span class=\"number\">10</span>;         <span class=\"comment\"># 2个物理核心，4个子进程</span></span><br><span class=\"line\">  备注：将每个worker子进程与特定CPU物理核心绑定，优势在于：避免同个worker子进程</span><br><span class=\"line\">  在不同的CPU核心上切换，缓存失效，降低性能；其并不能真正的避免进程切换</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_priority</span> number</span><br><span class=\"line\">   解释：指定worker子进程的nice值，以调整运行nginx的优先级，通常设定为负值，以优先 调用nginx</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">        worker_priority -<span class=\"number\">10</span>;</span><br><span class=\"line\">   备注：Linux默认进程的优先级值是120,值越小越优先；nice设定范围为-20到+19</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">worker_shutdown_timeout</span> time</span><br><span class=\"line\">   解春：指定证WOrker子进程优雅退出时的超时时间</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">        worker_shutdown_timeout <span class=\"number\">5s</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">timer_resolution</span> time</span><br><span class=\"line\">   解释：worker子进程内部使用的计时器精度，调整时间间隔越大，系统调用越少，有利于性 能提升；反之，系统调用越多，性能下降</span><br><span class=\"line\">   示例：</span><br><span class=\"line\">        worker_resolution 100ms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">daemon</span> <span class=\"literal\">on</span>|<span class=\"literal\">off</span></span><br><span class=\"line\">  解释：设定nginx的运行方式，前台还是后台，前台用户调试，后台用于生产 示例：</span><br><span class=\"line\">       daemon <span class=\"literal\">off</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">lock_file</span> DIR</span><br><span class=\"line\">  解释：负载均衡互斥锁文件存放路径</span><br><span class=\"line\">       lock_file logs/nginx.lock</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"配置文件events段核心参数用法\"><a href=\"#配置文件events段核心参数用法\" class=\"headerlink\" title=\"配置文件events段核心参数用法\"></a>配置文件events段核心参数用法</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">use</td>\n<td align=\"center\">nginx使用何种事件驱动模型</td>\n</tr>\n<tr>\n<td align=\"center\">worker_connections</td>\n<td align=\"center\">worker子进程能够处理的最大并发连接数</td>\n</tr>\n<tr>\n<td align=\"center\">accept_mutex</td>\n<td align=\"center\">是否打开负载均衡互斥锁</td>\n</tr>\n<tr>\n<td align=\"center\">accept_mutex_delay</td>\n<td align=\"center\">新连接分配给worker子进程的超时时间</td>\n</tr>\n<tr>\n<td align=\"center\">muti_accept</td>\n<td align=\"center\">worker子进程可以接收的新连接个数</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">语法</th>\n<th align=\"center\">可选值</th>\n<th align=\"center\">默认配置</th>\n<th align=\"center\">推荐配置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">use</td>\n<td align=\"center\">use method</td>\n<td align=\"center\">select、poll、kqueue、epoll、/dev/poll、eventport</td>\n<td align=\"center\">无</td>\n<td align=\"center\">不指定，让nginx自己选择</td>\n</tr>\n<tr>\n<td align=\"center\">worker_connections</td>\n<td align=\"center\">worker_connections number</td>\n<td align=\"center\"></td>\n<td align=\"center\">worker_connections 1024</td>\n<td align=\"center\">worker_connections 65535/worker_processes|65535</td>\n</tr>\n<tr>\n<td align=\"center\">accept_mutex</td>\n<td align=\"center\">accept_mutex on|off</td>\n<td align=\"center\">on、off</td>\n<td align=\"center\">accept_mutex off</td>\n<td align=\"center\">accept_mutex on</td>\n</tr>\n<tr>\n<td align=\"center\">accept_mutex_delay</td>\n<td align=\"center\">accept_mutex_delay time</td>\n<td align=\"center\"></td>\n<td align=\"center\">accept_mutex_delay 500ms</td>\n<td align=\"center\">accept_mutex_delay 200ms</td>\n</tr>\n<tr>\n<td align=\"center\">muti_accept</td>\n<td align=\"center\">muti_accept on|off</td>\n<td align=\"center\">on、off</td>\n<td align=\"center\">muti_accept off</td>\n<td align=\"center\">muti_accept on</td>\n</tr>\n</tbody></table>\n<br>\n\n<h2 id=\"配置文件http段核心参数用法\"><a href=\"#配置文件http段核心参数用法\" class=\"headerlink\" title=\"配置文件http段核心参数用法\"></a>配置文件http段核心参数用法</h2><h3 id=\"server-name指令\"><a href=\"#server-name指令\" class=\"headerlink\" title=\"server_name指令\"></a>server_name指令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可以写多个server name，可以使用正则表达式，通配符，也可以是ip 具体的域名。</span></span><br><span class=\"line\">server_name name1 name2 name3;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>匹配优先级<ul>\n<li>精确匹配 &gt; 左侧通配符匹配 &gt; 右侧通配符匹配 &gt; 正则表达式匹配</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"root和alias\"><a href=\"#root和alias\" class=\"headerlink\" title=\"root和alias\"></a>root和alias</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">语法</th>\n<th align=\"center\">上下文</th>\n<th align=\"center\">共同点</th>\n<th align=\"center\">区别</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">root</td>\n<td align=\"center\">root path;</td>\n<td align=\"center\">http server location if</td>\n<td align=\"center\">URI到磁盘文件的映射</td>\n<td align=\"center\">root会将定义路径与URI叠加</td>\n</tr>\n<tr>\n<td align=\"center\">alias</td>\n<td align=\"center\">alias path;</td>\n<td align=\"center\">location</td>\n<td align=\"center\">URI到磁盘文件的映射</td>\n<td align=\"center\">alias只取定义路径</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"location的基础用法\"><a href=\"#location的基础用法\" class=\"headerlink\" title=\"location的基础用法\"></a>location的基础用法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">语法：</span></span><br><span class=\"line\">\tlocaltion [ = | ~ | ~* | ^~ ] uri &#123;...&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">\t</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上下文：</span></span><br><span class=\"line\">\tserver location</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">匹配规则</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">=</td>\n<td align=\"center\">精确匹配</td>\n<td align=\"center\"><code>location = /images/ &#123;...&#125;</code></td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">正则匹配，区分大小写</td>\n<td align=\"center\">`location ~ .(jpg</td>\n</tr>\n<tr>\n<td align=\"center\">~*</td>\n<td align=\"center\">正则匹配，不区分大小写</td>\n<td align=\"center\">`location ~* .(jpg</td>\n</tr>\n<tr>\n<td align=\"center\">^~</td>\n<td align=\"center\">匹配到即停止搜索</td>\n<td align=\"center\"><code>location ^~ /images/ &#123;...&#125;</code></td>\n</tr>\n<tr>\n<td align=\"center\">不带任何符号</td>\n<td align=\"center\"></td>\n<td align=\"center\"><code>location / &#123;...&#125;</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li>匹配规则优先级</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4dfzxu6vkws0.webp\" width=\"45%\" />\n\n<br>\n\n<h3 id=\"理解location中url结尾的反斜线\"><a href=\"#理解location中url结尾的反斜线\" class=\"headerlink\" title=\"理解location中url结尾的反斜线\"></a>理解location中url结尾的反斜线</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /some-dir &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location /some-dir/ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果URL的结构是<code>https://domain.com/some-dir/</code>。尾部如果缺少<code>/</code>将导致重定向。因为根据约定，URL尾部的<code>/</code>表示目录，没有<code>/</code>表示文件。<ul>\n<li>所以访问<code>/some-dir/</code>时，服务器会自动去该目录下找对应的默认文件。</li>\n<li>如果访问<code>/some-dir</code>的话，服务器会先去找<code>some-dir</code>文件，找不到的话会将<code>some-dir</code>当成目录，重定向到<code>/some-dir/</code>，去该目录下找默认文件。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"stub-status模块用法\"><a href=\"#stub-status模块用法\" class=\"headerlink\" title=\"stub_status模块用法\"></a>stub_status模块用法</h3><ul>\n<li><code>stub_status</code>的使用，需要Nginx编译进去</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">语法结构</span></span><br><span class=\"line\">\tstub_status;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">低于1.7.5 版本：</span></span><br><span class=\"line\">\tstub_status on;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上下文：</span></span><br><span class=\"line\">\tserver location</span><br><span class=\"line\"><span class=\"meta prompt_\">\t</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置示例</span></span><br><span class=\"line\">\tlocation /uri &#123;</span><br><span class=\"line\">\t\tstub_status;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>状态项</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.98fiesmzwzk.webp\" width=\"65%\" />\n\n<br>\n\n<ul>\n<li>内嵌变量</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5h4bf27xt4c0.webp\" width=\"65%\" />\n\n<br>\n\n<br>\n\n<br>\n\n<h1 id=\"HTTP核心模块\"><a href=\"#HTTP核心模块\" class=\"headerlink\" title=\"HTTP核心模块\"></a>HTTP核心模块</h1><h2 id=\"connection-amp-request\"><a href=\"#connection-amp-request\" class=\"headerlink\" title=\"connection &amp; request\"></a>connection &amp; request</h2><ul>\n<li>connection 是连接，即常说的tcp连接，三次握手，状态机</li>\n<li>request是请求，例如http请求，无状态的协议</li>\n<li>request是必须建立在connection之上的</li>\n</ul>\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>linux信号量这块的管理机制可以再抽时间深入理解一下</li>\n<li>第三章、4 的相关内容算是比较简单，后续实践一下</li>\n<li>需要理解请求过程，连接、请求</li>\n<li>其实第二章的内容也很重要，要对Nginx有总体上的认知，特点、优势等等，需要说出个所以然来</li>\n<li>多进程和多线程相关的知识还需要深入理解一下</li>\n<li>Nginx的模块整体还需要有一个把握</li>\n<li>location这块的内容 还需要进一步熟悉一下</li>\n</ol>\n</blockquote>\n<br>\n\n<img src=\"\" width=\"65%\" />\n\n<br>\n\n<br>\n\n"},{"title":"《一站式学习Redis-从入门到高可用分布式实践》study notes","auth":"ratears","date":"2022-08-30T18:12:50.000Z","update":"2022-08-30T18:12:50.000Z","_content":"\n\n\n# Redis初识\n\n## Redis是什么\n\n- 开源\n- 基于键值的存储服务系统\n- 多种数据结构\n- 高性能、功能丰富\n\n<br>\n\n## Redis的特性\n\n- 速度快（10w OPS）\n  - 数据存储在内存（速度快的主要原因）\n  - 使用C语言编写\n  - 单线程\n- 持久化\n  - Redis的所有数据保存在内存中，对数据的更新异步的保存在磁盘上\n- 多种数据结构\n  - 5中主要类型\n- 支持多种编程语言\n  - 主流编程语言都支持Redis\n- 功能丰富\n  - 发布订阅\n  - 事物\n  - lua脚本\n  - pipeline\n- 简单\n  - 早期代码23000行\n  - 不依赖外部库\n  - 单线程模型\n- 主从复制\n- 高可用、分布式\n\n<br>\n\n## Redis典型使用场景\n\n- 缓存系统\n- 计数器\n- 消息队列系统\n- 排行榜\n- 社交网络\n- 事实系统\n\n<br>\n\n## Redis安装\n\n- 安装前环境准备\n\n```shell\nyum -y install gcc gcc-c++ kernel-devel\n```\n\n- 下载安装\n\n```shell\n[root@localhost ~]# cd /install\n\n[root@localhost install]# wget https://github.com/redis/redis/archive/7.0.4.tar.gz\n[root@localhost install]# tar -zxvf redis-7.0.4.tar.gz\n[root@localhost install]# mv redis-7.0.4 /usr/local/\n[root@localhost install]# cd /usr/local/\n\n[root@localhost local]# ln -s redis-7.0.4/ redis\n[root@localhost local]# cd redis\n\n# 直接 make 会失败报错 原因：建立redis时系统默认使用jemalloc作为内存管理工具，但是当前无可用jemalloc，切换为标准内存管理工具libc问题解决\n[root@localhost redis]# make MALLOC=libc\n[root@localhost redis]# make install\n```\n\n\n\n\n\n<br>\n\n## Redis三种启动方式\n\n- 最简启动\n\n```shell\n# 使用默认配置启动\nredis-server\n```\n\n- 动态参数启动\n\n```shell\nredis-server --port 6380\n```\n\n- 配置文件启动（推荐）\n\n```shell\nredis-server configPath\n```\n\n- 启动方式比较\n\n> 生产环境选择配置启动\n>\n> 单机多实例配置文件可以用端口区分开来\n\n<br>\n\n## 验证\n\n```shell\nps -ef |grep redis\n\nnetstat -antpl |grep redis\n\nredis-cli -h [ip] -p [port] ping \n```\n\n<br>\n\n## Redis可执行文件说明\n\n- redis-server\t-\tredis服务器\n- redis-cli\t-\tredis命令行客户端\n- redis-benchmark\t-\tredis性能测试工具\n- redis-check-aof\t-\tAOF文件修复工具\n- redis-check-dump\t-\tRDB文件检查工具\n- redis-sentinel\t-\tSentinel服务器（2.8之后）\n\n<br>\n\n## Redis常用配置\n\n```shell\n# 是否以守护进程方式启动 [yes|no]\ndaemonize yes\n\n# redis 对外端口\nport 6380\n\n# 配置日志名称\nlogfile \"6380.log\"\n\n# redis 工作目录（包括日志文件、持久化文件存储位置）\ndir \"/usr/local/redis/data/\"\n```\n\n<br>\n\n# API的理解和使用\n\n## 通用命令\n\n```shell\n# 遍历所有的key，可以使用通配符\n# 复杂度 O(n) ，不建议在生产环境使用，除非数量特别小\nkeys *\n\n# 内置的对键值 统计的计数器\ndbsize\n\n# 检查key是否存在，返回 1 或 0\nexists\n\n# 删除指定 key-value，返回 1 或 0\ndel key [key...]\n\n# 设置 key 在 seconds 秒后过期\nexpire key seconds\n\n# 查询key 还有多长时间过期，不过期则返回 -1\nttl key\n\n# 去除过期时间，\npersist key\n\n# 不存在则返回 none\ntype key\n```\n\n<br>\n\n## 数据结构和内部编码\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3scu9pvrtk80.webp\" width=\"75%\" />\n\n<br>\n\n- redisObject\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69a05a18h8s0.webp\" width=\"75%\"/>\n\n<br>\n\n## 单线程\n\n### 单线程为什么这么快\n\n- 纯内存（主要原因）\n- 阻塞IO\n- 避免线程切换和竞态消耗\n\n<br>\n\n### 注意事项\n\n1. 一次只运行一条命令\n\n2. 拒绝长（慢）命命令：`kesy` `flushall` `flushdb` `slow lua script` `mutil/exec` `operate big value(collection)`\n3. 其实不是单线程：`fysnc file descriptor` `close file descriptor`\n\n<br>\n\n## String（字符串）\n\n### 结构\n\n- 可以是真的字符串，同时也可以是数字，二进制数字等等。大小限制 512MB\n\n<img src =\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c36c4ac53ae6df147284b21e0fa921.lo8tp31mfhs.webp\" width=\"70%\" />\n\n<br>\n\n### 场景\n\n- 缓存\n- 计数器\n- 分布式锁\n- ......\n\n<br>\n\n### 命令\n\n|    命令     |          举例          | 时间复杂度 |                             说明                             |\n| :---------: | :--------------------: | :--------: | :----------------------------------------------------------: |\n|     set     |     set hello word     |    O(1)    |             不管key是否存在，都设置。成功返回ok              |\n|    setnx    |       setnx k v        |    O(1)    |                       key不存在才设置                        |\n|   set xx    |       set k v xx       |    O(1)    |                 key存在才设置。不存在返回nil                 |\n|    mset     |    mset k1 v1 k2 v2    |    O(n)    |                 批量设置key-value，原子操作                  |\n|     del     |       del hello        |    O(1)    |                     成功返回1,失败返回0                      |\n|     get     |       get hello        |    O(1)    |                 成功返回的value，失败返回nil                 |\n|    mget     |       mget k1 k2       |    O(n)    |                 批量获取key-value，原子操作                  |\n|    incr     |      incr counter      |    O(1)    | 自增1，并返回自增后的value值。如果key不存在，自增后get(key) = 1 |\n|    decr     |      decr counter      |    O(1)    | 自减1，并返回自减后的value值。如果key不存在，自减后get(key) = -1 |\n|   incrby    |     incrby view k      |    O(1)    | 自增k，并返回自增k后的value值。如果key不存在，自增后get(key) = k |\n|   decrby    |     decrby view k      |    O(1)    | 自减k，并返回自减后的value值。如果key不存在，自减后get(key) = -k |\n|   getset    |   getset k newvalue    |    O(1)    |              set key newValue，并返回旧的value               |\n|    apend    |       apend k v        |    O(1)    |                    将value追加到旧的value                    |\n|   strlen    |        strlen k        |    O(1)    |        返回字符串的长度[字节]（utf-8 中文占 2个字节）        |\n| incrbyfloat |    incrbyfloat k v     |    O(1)    |                       增加指定的浮点数                       |\n|  getrange   |  getrange k start end  |    O(1)    |                  获取字符串指定下标所有的值                  |\n|  setrange   | setrange k index value |    O(1)    |                     设置指定下标对应的值                     |\n\n<br>\n\n### 实战\n\n1. 记录网站每个用户的个人主页访问量\n\n```shell\n# 单线程：无竞争（并发不会出现计错数的情况）\nincr userId:pageView\n```\n\n\n\n2. 缓存视频的基本信息（数据源在MySQL中）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2nspuoc7ly60.webp\" width=\"70%\" />\n\n<br>\n\n3. 分布式id生成器\n\n<br>\n\n### 查漏补缺\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1d121aa9afdb06c7451e0fb8bb2d560.kias448eqho.webp\" width=\"70%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c1ea9bb24f88ec70a3aacc637a9183.4xykrj7thuw0.webp\" width=\"70%\" />\n\n\n\n\n\n\n\n## hash（哈希）\n\n\n\n\n\n<br>\n\n# Redis客户端\n\n## Java客户端Jedis\n\n### Jedis简单使用\n\n- maven依赖\n\n```xml\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>2.9.0</version>\n    <type>jar</type>\n    <scope>compile</scope>\n</dependency>\n```\n\n- Jedis直连\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1l6p9hnls4rk.webp\" width=\"70%\"/>\n\n<br>\n\n### JedisPool简单使用\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ehexcty0j20.webp\" width = \"70%\"/>\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3r9cudbxdi00.webp\" width = \"70%\"/>\n\n<br>\n\n### Jedis 与 JedisPool比较\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/97b459332ea53d7e42b90bd2743dcda.396pfset03e0.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/7e5d97f719abbfe9b363126e682f86d.3g21qh3ltu20.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/41e863e25d7ae1dc0c3cebe8444b9c5.2tj6g97vyck.webp\" width=\"60%\" />\n\n<br>\n\n\n\n\n\n### Jedis配置优化\n\n#### pool配置 - 资源数控制\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.21oqgp1jyxnk.webp\" width=\"60%\" />\n\n<br>\n\n#### pool配置 - 借还参数\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7cwnd55qd1s0.webp\" width=\"70%\" />\n\n<br>\n\n#### 适合的 maxTotal\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2mma31ou5nw0.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6sejm8evfwc.webp\" width=\"60%\" />\n\n<br>\n\n#### 适合的maxIdle和minIdle\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6lhcm72l9bo0.webp\" width=\"60%\" />\n\n<br>\n\n### 常见问题和解决思路\n\n- 常见问题\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75d32k2l47g0.webp\" width=\"60%\" />\n\n<br>\n\n- 解决思路\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41af9urqt6a0.webp\" width=\"60%\" />\n\n<br>\n\n- 错误示例\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.31pwe9jqbig0.webp\" width=\"60%\" />\n\n<br>\n\n- 推荐写法\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69xc8p0s24o0.webp\" width=\"60%\" />\n\n<br>\n\n# Redis其他功能\n\n## slowlog（慢查询）\n\n### 命令生命周期\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.76jbqyv85l80.webp\" width=\"70%\" />\n\n<br>\n\n- **（1）慢查询发生在第3阶段**\n- **（2）客户端超时不一定是慢查询，但慢查询是客户端超时的一个可能因素**\n\n<br>\n\n### 配置\n\n#### slowlog-max-len\n\n0. `slowlog-max-len` 表示慢查询队列长度\n\n1. 慢查询是一个先进先出的队列；如果在第3步执行过程中，被列入慢查询的范围内，就会进入一个队列（用redis的列表实现的）\n2. 慢查询队列是固定长度的\n3. 慢查询队列数据保存在内存中\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.44yrctjcttc0.webp\" width=\"70%\" />\n\n<br>\n\n#### slowlog-log-slower-than\n\n1. `slowlog-log-slower-than` 表示慢查询命令执行时间阈值（单位：微秒，1ms=1000微秒），超过阈值会被加入慢查询队列中\n2. `slowlog-log-slower-than = 0` ，记录所有命令\n3. `slowlog-log-slower-than < 0` ，不记录任何命令\n\n<br>\n\n#### 默认值\n\n```shell\n127.0.0.1:6380> config get slowlog-max-len\n1) \"slowlog-max-len\"\n2) \"128\"\n\n# 10000微秒 =》 10ms\n127.0.0.1:6380> config get slowlog-log-slower-than\n1) \"slowlog-log-slower-than\"\n2) \"10000\"\n```\n\n<br>\n\n#### 配置方法\n\n1. 方法一：修改配置文件重启（一般在第一次启动redis前进行配置。但如果redis正在运行中，不推荐此方式）\n\n2. 方法二：动态配置\n\n```shell\nconfig set slowlog-max-len 1000\n\nconfig set slowlog-log-slower-than 1000\n```\n\n```shell\n# 操作示例\n127.0.0.1:6380> config set slowlog-max-len 1000\nOK\n127.0.0.1:6380> config set slowlog-log-slower-than 1000\nOK\n127.0.0.1:6380> config get slowlog-max-len\n1) \"slowlog-max-len\"\n2) \"1000\"\n127.0.0.1:6380> config get slowlog-log-slower-than\n1) \"slowlog-log-slower-than\"\n2) \"1000\"\n127.0.0.1:6380>\n```\n\n<br>\n\n### 慢查询命令\n\n|   慢查询命令    |          说明          |\n| :-------------: | :--------------------: |\n| slowlog get [n] | 获取慢查询队列指定条数 |\n|   slowlog len   |   获取慢查询队列长度   |\n|  slowlog reset  |     清空慢查询队列     |\n\n<br>\n\n### 运维经验\n\n1. slowlog-max-len不要设置过大。默认10ms，通常设置1ms（实际情况要根据QPS来决定阈值大小，有可能1ms就已经对我们的QPS产生影响了）\n2. slowlog-log-slower-than不要设置过小，通常设置1000左右\n3. 理解命令生命周期，理解慢查询处于命令生命周期的位置。便于我们排错和优化（慢查询、阻塞、网络都可能成为客户端超时的原因）\n4. **定期持久化查询（因为慢查询是存在内存中的，且当慢查询数量逐步增多，早前的慢查询就会丢掉。做好持久化，可以分析历史的慢查询问题）。可以通过其它手段或开源软件实现这个功能**\n\n<br>\n\n## pipeline（流水线）\n\n### 网络命令通信模型\n\n#### 1次网络命令通信模型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.10peiok08sk0.webp\" width=\"60%\" />\n\n<br>\n\n#### 批量网络命令通信模型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yo8sxod81o0.webp\" width=\"60%\" />\n\n<br>\n\n### 什么是pipeline（流水线）\n\n- 我们知道redis的命令执行是很快的，但是网络时间却不一定。使用pipeline可以帮我们节约大量网络时间\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.v0w62a1vlc0.webp\" width=\"60%\" />\n\n<br>\n\n### pipeline的作用\n\n| 命令 |   N个命令操作   | 1次pipeline（N个命令） |\n| :--: | :-------------: | :--------------------: |\n| 时间 | n次网络+n次命令 |  1次网络时间+n次命令   |\n| 数量 |     1条命令     |        n条命令         |\n\n- 注意\n\n1. Redis的命令时间是微秒级别\n2. pipeline每次条数要控制（网络）\n\n\n\n- 举例\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2sv2n6wunz20.webp\" width=\"60%\" />\n\n<br>\n\n### pipeline的jedis实现\n\n- 添加maven依赖\n\n```xml\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>2.9.0</version>\n    <type>jar</type>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n- 没有pipe-line\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2cxbniglxcys.webp\" width=\"70%\" />\n\n<br>\n\n- 使用pipeline\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41hpky36m4a0.webp\" width=\"60%\" />\n\n<br>\n\n### pipeline与mget/mset操作的对比\n\n- 原生M操作\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6m3lpwqzxqs0.webp\" width=\"60%\" />\n\n<br>\n\n- pipeline\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7b0lz2zro400.webp\" width=\"60%\" />\n\n<br>\n\n**pipeline命令可拆分**\n\n<br>\n\n### pipeline使用建议\n\n- **注意每次pipeline携带数量**\n- **pipeline每次只能作用在一个Redis节点上**\n- **注意pipeline与M操作的区别**\n\n\n\n## 发布订阅\n\n### 角色\n\n- 发布者（publisher）\n- 订阅者（subscriber）\n- 频道（channel）\n\n<br>\n\n### 发布订阅模型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5skel4tjk0.webp\" width=\"60%\" />\n\n<br>\n\n- **新的订阅者订阅了一个频道，是无法收到之前的消息**（因为无法做消息堆积，因为redis不是一个真正的消息队列这样一个工具）\n\n<br>\n\n### 发布订阅API\n\n#### publish\n\n```shell\n# 向频道发布消息\nPUBLISH [channel_name] [message]\n\n127.0.0.1:6380> publish sohu:tv \"hello world\"\n(integer) 0\n127.0.0.1:6380> publish sohu:auto \"taxi\"\n(integer) 0\n```\n\n<br>\n\n#### subscribe\n\n```shell\n# 订阅一个或多个频道\nSUBSCRIBE [channel_name]...\n\n127.0.0.1:6380> subscribe sohu:tv\nReading messages... (press Ctrl-C to quit)\n1) \"subscribe\"\n2) \"sohu:tv\"\n3) (integer) 1\n```\n\n<br>\n\n#### unsubscribe\n\n```shell\n# 订阅一个或多个频道\nUNSUBSCRIBE [channel_name]...\n\n127.0.0.1:6380> UNSUBSCRIBE sohu:tv\n1) \"unsubscribe\"\n2) \"sohu:tv\"\n3) (integer) 0\n```\n\n<br>\n\n#### 其它API\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.j7q4w7w0f5c.webp\"  width=\"65%\"/>\n\n\n\n<br>\n\n#### 发布订阅与消息队列\n\n- Redis可以实现消息队列，消息队列是抢的模式\n- 注意二者的区别与使用场景\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.33zfet508q00.webp\" width=\"65%\" />\n\n<br>\n\n## BItmap（位图）\n\n\n\n\n\n## HyperLogLog\n\n- Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的（基于HyperLogLog算法：极小空间完成独立数量统计）\n- 本质还是字符串\n\n<br>\n\n### API（命令）\n\n```shell\n# Pfadd 命令将所有元素参数添加到 HyperLogLog 数据结构中\nredis 127.0.0.1:6379> PFADD key element [element ...]\n\nredis 127.0.0.1:6379> PFADD mykey a b c d e f g h i j\n(integer) 1\nredis 127.0.0.1:6379> PFCOUNT mykey\n(integer) 10\n```\n\n```shell\n# Pfcount 命令返回给定 HyperLogLog 的基数估算值\nredis 127.0.0.1:6379> PFCOUNT key [key ...]\n\nredis 127.0.0.1:6379> PFADD hll foo bar zap\n(integer) 1\nredis 127.0.0.1:6379> PFADD hll zap zap zap\n(integer) 0\nredis 127.0.0.1:6379> PFADD hll foo bar\n(integer) 0\nredis 127.0.0.1:6379> PFCOUNT hll\n(integer) 3\nredis 127.0.0.1:6379> PFADD some-other-hll 1 2 3\n(integer) 1\nredis 127.0.0.1:6379> PFCOUNT hll some-other-hll\n(integer) 6\nredis> \n```\n\n```shell\n#  PFMERGE 命令将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的\nPFMERGE destkey sourcekey [sourcekey ...]\n\nredis> PFADD hll1 foo bar zap a\n(integer) 1\nredis> PFADD hll2 a b c foo\n(integer) 1\nredis> PFMERGE hll3 hll1 hll2\n\"OK\"\nredis> PFCOUNT hll3\n(integer) 6\nredis>  \n```\n\n<br>\n\n### 示例（百万独立用户-内存消耗）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.540yx2nmmgw0.webp\" width=\"60%\" />\n\n<br>\n\n### 使用经验\n\n- 是否能容忍错误？（错误率：0.81%）\n- 是否需要单条数据？\n\n<br>\n\n# GEO\n\n- Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作（存储经纬度，计算两地距离，范围计算等）\n- 底层使用 zset 实现\n\n<br>\n\n### 应用场景\n\n- 类似微信摇一摇（计算指定范围类的用户）\n- 根据距离计算周围的酒店餐馆等\n\n<br>\n\n### API\n\n- geoadd：添加地理位置的坐标。\n- geopos：获取地理位置的坐标。\n- geodist：计算两个位置之间的距离。\n- georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。\n- georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。\n- geohash：返回一个或多个位置对象的 geohash 值。\n\n<br>\n\n# Redis持久化的取舍和选择\n\n## 持久化的作用\n\n1. 什么是持久化\n\n> redis所有的数据保存在内存中，对数据的更新将异步的保存在磁盘上\n\n内存 =》（持久化）=》磁盘\n\n内存 《=（恢复）《= 磁盘\n\n\n\n2. 持久化的方式\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.urjf6b58j5c.webp\" width=\"60%\" />\n\n<br>\n\n## RDB（Redis DataBase）\n\n### 什么是RDB\n\n- RDB：在不同的时间点，将 redis 存储的数据生成快照并存储到磁盘等介质上\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.xtthna1x3gg.webp\" width=\"60%\" />\n\n<br>\n\n### RDB触发机制的三种方式\n\n#### save（同步）\n\n- 可能会造成阻塞\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1mmseu4fo9og.webp\" width=\"60%\" />\n\n<br>\n\n```shell\n127.0.0.1:6380>  save\nOK\n```\n\n- 文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件\n- 复杂度：O(n)\n\n<br>\n\n#### bgsave（异步）\n\n- 客户端执行 `bgsave` redis会使用linux的 `fork()` 函数生成一个redis的子进程，由该子进程生成RDB文件\n- 一般情况下， `bgsave` 不会阻塞到redis\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nkd5mhwgzcw.webp\" width=\"60%\" />\n\n<br>\n\n```shell\n127.0.0.1:6380> bgsave\nBackground saving started\n```\n\n- 文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件\n- 复杂度：O(n)\n\n<br>\n\n#### save 与 bgsave比较\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7z4y2ta7f2w.webp\" width=\"65%\" />\n\n<br>\n\n#### 自动\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.42jf7bw3rfe0.webp\" width=\"70%\" />\n\n<br>\n\n- 说明：在 60s 中改变了10000 条数据（set，del），会自动做rdb的生成\n\n<br>\n\n##### 缺点\n\n- 数据写入量无法控制，生成规则无法控制。如果文件非常大，或很频繁的做这样的操作，会对硬盘造成一定压力\n\n<br>\n\n##### 默认配置\n\n```shell\n################################ 快照  #################################  \n#  \n# Save the DB on disk:保存数据库到磁盘  \n#  \n#   save <秒> <更新>  \n#  \n#   如果指定的秒数和数据库写操作次数都满足了就将数据库保存。  \n#  \n#   下面是保存操作的实例：  \n#   900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化）  \n#   300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）  \n#   60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）  \n#  \n#   注释：注释掉“save”这一行配置项就可以让保存数据库功能失效。  \n#  \n#   你也可以通过增加一个只有一个空字符串的配置项（如下面的实例）来去掉前面的“save”配置。  \n#  \n#   save \"\"  \n  \nsave 900 1  \nsave 300 10  \nsave 60 10000  \n  \n#在默认情况下，如果RDB快照持久化操作被激活（至少一个条件被激活）并且持久化操作失败，Redis则会停止接受更新操作。  \n#这样会让用户了解到数据没有被正确的存储到磁盘上。否则没人会注意到这个问题，可能会造成灾难。  \n#  \n#如果后台存储（持久化）操作进程再次工作，Redis会自动允许更新操作。  \n#  \n#然而，如果你已经恰当的配置了对Redis服务器的监视和备份，你也许想关掉这项功能。  \n#如此一来即使后台保存操作出错,redis也仍然可以继续像平常一样工作。  \nstop-writes-on-bgsave-error yes  \n  \n#是否在导出.rdb数据库文件的时候采用LZF压缩字符串和对象？  \n#默认情况下总是设置成‘yes’， 他看起来是一把双刃剑。  \n#如果你想在存储的子进程中节省一些CPU就设置成'no'，  \n#但是这样如果你的kye/value是可压缩的，你的到处数据接就会很大。  \nrdbcompression yes  \n  \n#从版本RDB版本5开始，一个CRC64的校验就被放在了文件末尾。  \n#这会让格式更加耐攻击，但是当存储或者加载rbd文件的时候会有一个10%左右的性能下降，  \n#所以，为了达到性能的最大化，你可以关掉这个配置项。  \n#  \n#没有校验的RDB文件会有一个0校验位，来告诉加载代码跳过校验检查。  \nrdbchecksum yes  \n  \n# 导出数据库的文件名称  \ndbfilename dump.rdb  \n  \n# 工作目录  \n#  \n# 导出的数据库会被写入这个目录，文件名就是上面'dbfilename'配置项指定的文件名。  \n#   \n# 只增的文件也会在这个目录创建（这句话没看明白）  \n#   \n# 注意你一定要在这个配置一个工作目录，而不是文件名称。  \ndir ./  \n```\n\n<br>\n\n##### 最佳配置\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23rdcl2poqrk.webp\" width=\"70%\" />\n\n<br>\n\n- 关闭自动配置\n\n### 触发机制 - 不容忽略方式\n\n1. 全量复制（主从复制时候，主会自动生成RDB）\n2. debug reload（相当于不会将内存清空的重启，也会生成RDB）\n3. shutdown\n\n<br>\n\n### RDB现存问题\n\n- 耗时耗性能\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.b2ax18993q0.webp\" width=\"50%\" />\n\n<br>\n\n- 不可控，丢失数据\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hq85j7f4ni0.webp\" width=\"50%\" />\n\n<br>\n\n## AOF（Append Only File）\n\n- 将 redis 执行过的所有写指令记录下来（它的写入是实时的），在下次 redis 重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了\n\n### AOF运行原理\n\n- 创建\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i410l2830jk.webp\" width=\"50%\" />\n\n<br>\n\n- 恢复\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2ode8n5q6b80.webp\" width=\"60%\" />\n\n<br>\n\n### AOF的三种策略\n\n#### always\n\n- 写入数据不会丢失\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nz1bf5i1ojk.webp\" width=\"50%\" />\n\n<br>\n\n#### everysec\n\n- 是redis的配置默认值\n- 可能会丢失1s的数据\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5uvzghtr78s0.webp\" width=\"50%\" />\n\n<br>\n\n#### no\n\n- 根据操作系统决定\n\n<br>\n\n### AOF的三种策略对比\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7ezkvv0o0bg0.webp\" width=\"50%\" />\n\n<br>\n\n### AOF重写\n\n- 减少磁盘占用量\n- 加速恢复速度\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3hr6crymmo0.webp\" width=\"50%\" />\n\n<br>\n\n#### AOF重写的两种方式\n\n- BGREWRITEAOF （类似rdb的bgsave）\n  - 将Redis中的数据进行回溯， 回溯成AOF文件\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5j30ijjpor40.webp\" width=\"50%\" />\n\n<br>\n\n- AOF重写配置\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.72n439aom900.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5wl4pwfy7ds0.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yskrqzxtakw.webp\" width=\"50%\" />\n\n<br>\n\n#### AOF重写流程\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2b1z2py9ols0.webp\" width=\"50%\" />\n\n<br>\n\n## RDB与AOF的抉择\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2got5zb1qs20.webp\" width=\"50%\" />\n\n<br>\n\n### RDB最佳策略\n\n- RDB\n\n1. ”关闭“\n2. 集中管理\n3. 主从，从开\n\n### AOF最佳策略\n\n1. ”开“：缓存和存储\n2. AOF集中管理\n3. everysec\n\n### 最佳策略\n\n1. 小分片\n2. 缓存或存储\n3. 监控（硬盘、内存、负载、网络）\n4. 足够的内存\n\n<br>\n\n# 常见的持久化开发运维问题\n\n## fork操作\n\n- \n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ofn5wyto2w0.webp\" width=\"50%\" />\n\n<br>\n\n- fork改善\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.25vvl1tdwgu8.webp\" width=\"50%\" />\n\n\n\n<br>\n\n## 子进程开销和优化\n\n- \n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5w40mtg9s0.webp\" width=\"50%\" />\n\n<br>\n\n## 硬盘优化\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lnrmjt1hw40.webp\" width=\"50%\" />\n\n<br>\n\n## AOF追加阻塞\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v89xx5ytl00.webp\" width=\"50%\" />\n\n<br>\n\n## AOF阻塞定位\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3t06d4zqkpo0.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qdujdqyup60.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.60mk8wrt4lk0.webp\" width=\"50%\" />\n\n<br>\n\n# Redis复制的原理与优化\n\n## 什么是主从复制\n\n- 一个master可以有多个slave，但一个slave只能有一个master\n- 数据流向必须是单向的。master -> slave\n- 变成从节点前会把数据清楚\n\n\n\n## 主从复制作用\n\n- 一个数据提供了多个副本（成为高可用、分布式的基础）\n- 扩展读性能（读写分离）\n\n\n\n## 主从复制实现\n\n### slaveof 命令\n\n- 复制（slaveof 这个命令是异步的）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pa32y5jfz80.webp\" width=\"60%\"/>\n\n<br>\n\n- 取消复制\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7jnus8oq23k0.webp\" width=\"60%\"/>\n\n<br>\n\n### 配置\n\n```shell\nslaveof ip port\nslave-read-only yes\n```\n\n\n\n### 主从复制-命令和配置的比较\n\n| 方式 |    命令    |   配置   |\n| :--: | :--------: | :------: |\n| 优点 |  无需重启  | 统一配置 |\n| 缺点 | 不便于管理 | 需要管理 |\n\n\n\n### 主从配置操作\n\n```shell\ninfo replication\n```\n\n\n\n## 主从复制原理\n\n### 全量复制过程原理\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.312gr8tguvm0.webp\" width=\"50%\" />\n\n<br>\n\n### 全量复制开销\n\n1. bgsave时间\n2. RDB文件网络传输时间\n3. 从节点清空数据时间\n4. 从节点加载RDB时间\n5. 可能的AOF重写时间\n\n\n\n### 部分复制过程原理\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3vhs1nc1dzi0.webp\" width=\"50%\" />\n\n<br>\n\n## 主从复制中的故障处理与常见问题\n\n- 故障不可避免\n- 自动故障转移\n- 故障分为master故障和slave故障\n\n\n\n### 读写分离问题\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.a738ve0k3y8.webp\" width=\"50%\" />\n\n<br>\n\n### 配置不一致\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.nl2kmy53a0w.webp\" width=\"50%\" />\n\n<br>\n\n### 规避全量复制\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6pe5jkk3nm80.webp\" width=\"50%\" />\n\n<br>\n\n### 规避复制风暴\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.361o49e7h2i0.webp\" width=\"50%\" />\n\n<br>\n\n# Redis Sentinel\n\n\n\n\n\n\n\n# 第9章 初识Redis Cluster\n\n\n\n\n\n<br>\n\n# 学习备注\n\n> 1. jedis 需要熟悉,有些代码还要手动过一遍才是\n> 2. 生产环境普通用户后台启动redis\n> 3. 部分图片内容是否应该转化为代码呢？\n> 4. bitmap不太懂，还需要深入理解。还包括 hyperloglog、geo\n> 5. RDB和AOF的恢复原理和过程是怎么样子的？\n> 6. 主从复制操作虽然简单，但是最好是实践一下\n\n<img src=\"\" width=\"50%\" />\n\n<br>\n\n\n\n\n\n\n\n\n\n","source":"_posts/2022/《一站式学习Redis-从入门到高可用分布式实践》study-notes.md","raw":"---\ntitle: 《一站式学习Redis-从入门到高可用分布式实践》study notes\nauth: ratears\ndate: 2022-08-31 02:12:50\nupdate: 2022-08-31 02:12:50\ncategories:\n\t- [database,redis]\n\t- [nosql,redis]\ntags:\n\t- redis\n\t- nosql\n\t- database\n---\n\n\n\n# Redis初识\n\n## Redis是什么\n\n- 开源\n- 基于键值的存储服务系统\n- 多种数据结构\n- 高性能、功能丰富\n\n<br>\n\n## Redis的特性\n\n- 速度快（10w OPS）\n  - 数据存储在内存（速度快的主要原因）\n  - 使用C语言编写\n  - 单线程\n- 持久化\n  - Redis的所有数据保存在内存中，对数据的更新异步的保存在磁盘上\n- 多种数据结构\n  - 5中主要类型\n- 支持多种编程语言\n  - 主流编程语言都支持Redis\n- 功能丰富\n  - 发布订阅\n  - 事物\n  - lua脚本\n  - pipeline\n- 简单\n  - 早期代码23000行\n  - 不依赖外部库\n  - 单线程模型\n- 主从复制\n- 高可用、分布式\n\n<br>\n\n## Redis典型使用场景\n\n- 缓存系统\n- 计数器\n- 消息队列系统\n- 排行榜\n- 社交网络\n- 事实系统\n\n<br>\n\n## Redis安装\n\n- 安装前环境准备\n\n```shell\nyum -y install gcc gcc-c++ kernel-devel\n```\n\n- 下载安装\n\n```shell\n[root@localhost ~]# cd /install\n\n[root@localhost install]# wget https://github.com/redis/redis/archive/7.0.4.tar.gz\n[root@localhost install]# tar -zxvf redis-7.0.4.tar.gz\n[root@localhost install]# mv redis-7.0.4 /usr/local/\n[root@localhost install]# cd /usr/local/\n\n[root@localhost local]# ln -s redis-7.0.4/ redis\n[root@localhost local]# cd redis\n\n# 直接 make 会失败报错 原因：建立redis时系统默认使用jemalloc作为内存管理工具，但是当前无可用jemalloc，切换为标准内存管理工具libc问题解决\n[root@localhost redis]# make MALLOC=libc\n[root@localhost redis]# make install\n```\n\n\n\n\n\n<br>\n\n## Redis三种启动方式\n\n- 最简启动\n\n```shell\n# 使用默认配置启动\nredis-server\n```\n\n- 动态参数启动\n\n```shell\nredis-server --port 6380\n```\n\n- 配置文件启动（推荐）\n\n```shell\nredis-server configPath\n```\n\n- 启动方式比较\n\n> 生产环境选择配置启动\n>\n> 单机多实例配置文件可以用端口区分开来\n\n<br>\n\n## 验证\n\n```shell\nps -ef |grep redis\n\nnetstat -antpl |grep redis\n\nredis-cli -h [ip] -p [port] ping \n```\n\n<br>\n\n## Redis可执行文件说明\n\n- redis-server\t-\tredis服务器\n- redis-cli\t-\tredis命令行客户端\n- redis-benchmark\t-\tredis性能测试工具\n- redis-check-aof\t-\tAOF文件修复工具\n- redis-check-dump\t-\tRDB文件检查工具\n- redis-sentinel\t-\tSentinel服务器（2.8之后）\n\n<br>\n\n## Redis常用配置\n\n```shell\n# 是否以守护进程方式启动 [yes|no]\ndaemonize yes\n\n# redis 对外端口\nport 6380\n\n# 配置日志名称\nlogfile \"6380.log\"\n\n# redis 工作目录（包括日志文件、持久化文件存储位置）\ndir \"/usr/local/redis/data/\"\n```\n\n<br>\n\n# API的理解和使用\n\n## 通用命令\n\n```shell\n# 遍历所有的key，可以使用通配符\n# 复杂度 O(n) ，不建议在生产环境使用，除非数量特别小\nkeys *\n\n# 内置的对键值 统计的计数器\ndbsize\n\n# 检查key是否存在，返回 1 或 0\nexists\n\n# 删除指定 key-value，返回 1 或 0\ndel key [key...]\n\n# 设置 key 在 seconds 秒后过期\nexpire key seconds\n\n# 查询key 还有多长时间过期，不过期则返回 -1\nttl key\n\n# 去除过期时间，\npersist key\n\n# 不存在则返回 none\ntype key\n```\n\n<br>\n\n## 数据结构和内部编码\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3scu9pvrtk80.webp\" width=\"75%\" />\n\n<br>\n\n- redisObject\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69a05a18h8s0.webp\" width=\"75%\"/>\n\n<br>\n\n## 单线程\n\n### 单线程为什么这么快\n\n- 纯内存（主要原因）\n- 阻塞IO\n- 避免线程切换和竞态消耗\n\n<br>\n\n### 注意事项\n\n1. 一次只运行一条命令\n\n2. 拒绝长（慢）命命令：`kesy` `flushall` `flushdb` `slow lua script` `mutil/exec` `operate big value(collection)`\n3. 其实不是单线程：`fysnc file descriptor` `close file descriptor`\n\n<br>\n\n## String（字符串）\n\n### 结构\n\n- 可以是真的字符串，同时也可以是数字，二进制数字等等。大小限制 512MB\n\n<img src =\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c36c4ac53ae6df147284b21e0fa921.lo8tp31mfhs.webp\" width=\"70%\" />\n\n<br>\n\n### 场景\n\n- 缓存\n- 计数器\n- 分布式锁\n- ......\n\n<br>\n\n### 命令\n\n|    命令     |          举例          | 时间复杂度 |                             说明                             |\n| :---------: | :--------------------: | :--------: | :----------------------------------------------------------: |\n|     set     |     set hello word     |    O(1)    |             不管key是否存在，都设置。成功返回ok              |\n|    setnx    |       setnx k v        |    O(1)    |                       key不存在才设置                        |\n|   set xx    |       set k v xx       |    O(1)    |                 key存在才设置。不存在返回nil                 |\n|    mset     |    mset k1 v1 k2 v2    |    O(n)    |                 批量设置key-value，原子操作                  |\n|     del     |       del hello        |    O(1)    |                     成功返回1,失败返回0                      |\n|     get     |       get hello        |    O(1)    |                 成功返回的value，失败返回nil                 |\n|    mget     |       mget k1 k2       |    O(n)    |                 批量获取key-value，原子操作                  |\n|    incr     |      incr counter      |    O(1)    | 自增1，并返回自增后的value值。如果key不存在，自增后get(key) = 1 |\n|    decr     |      decr counter      |    O(1)    | 自减1，并返回自减后的value值。如果key不存在，自减后get(key) = -1 |\n|   incrby    |     incrby view k      |    O(1)    | 自增k，并返回自增k后的value值。如果key不存在，自增后get(key) = k |\n|   decrby    |     decrby view k      |    O(1)    | 自减k，并返回自减后的value值。如果key不存在，自减后get(key) = -k |\n|   getset    |   getset k newvalue    |    O(1)    |              set key newValue，并返回旧的value               |\n|    apend    |       apend k v        |    O(1)    |                    将value追加到旧的value                    |\n|   strlen    |        strlen k        |    O(1)    |        返回字符串的长度[字节]（utf-8 中文占 2个字节）        |\n| incrbyfloat |    incrbyfloat k v     |    O(1)    |                       增加指定的浮点数                       |\n|  getrange   |  getrange k start end  |    O(1)    |                  获取字符串指定下标所有的值                  |\n|  setrange   | setrange k index value |    O(1)    |                     设置指定下标对应的值                     |\n\n<br>\n\n### 实战\n\n1. 记录网站每个用户的个人主页访问量\n\n```shell\n# 单线程：无竞争（并发不会出现计错数的情况）\nincr userId:pageView\n```\n\n\n\n2. 缓存视频的基本信息（数据源在MySQL中）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2nspuoc7ly60.webp\" width=\"70%\" />\n\n<br>\n\n3. 分布式id生成器\n\n<br>\n\n### 查漏补缺\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1d121aa9afdb06c7451e0fb8bb2d560.kias448eqho.webp\" width=\"70%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c1ea9bb24f88ec70a3aacc637a9183.4xykrj7thuw0.webp\" width=\"70%\" />\n\n\n\n\n\n\n\n## hash（哈希）\n\n\n\n\n\n<br>\n\n# Redis客户端\n\n## Java客户端Jedis\n\n### Jedis简单使用\n\n- maven依赖\n\n```xml\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>2.9.0</version>\n    <type>jar</type>\n    <scope>compile</scope>\n</dependency>\n```\n\n- Jedis直连\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1l6p9hnls4rk.webp\" width=\"70%\"/>\n\n<br>\n\n### JedisPool简单使用\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ehexcty0j20.webp\" width = \"70%\"/>\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3r9cudbxdi00.webp\" width = \"70%\"/>\n\n<br>\n\n### Jedis 与 JedisPool比较\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/97b459332ea53d7e42b90bd2743dcda.396pfset03e0.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/7e5d97f719abbfe9b363126e682f86d.3g21qh3ltu20.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/41e863e25d7ae1dc0c3cebe8444b9c5.2tj6g97vyck.webp\" width=\"60%\" />\n\n<br>\n\n\n\n\n\n### Jedis配置优化\n\n#### pool配置 - 资源数控制\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.21oqgp1jyxnk.webp\" width=\"60%\" />\n\n<br>\n\n#### pool配置 - 借还参数\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7cwnd55qd1s0.webp\" width=\"70%\" />\n\n<br>\n\n#### 适合的 maxTotal\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2mma31ou5nw0.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6sejm8evfwc.webp\" width=\"60%\" />\n\n<br>\n\n#### 适合的maxIdle和minIdle\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6lhcm72l9bo0.webp\" width=\"60%\" />\n\n<br>\n\n### 常见问题和解决思路\n\n- 常见问题\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75d32k2l47g0.webp\" width=\"60%\" />\n\n<br>\n\n- 解决思路\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41af9urqt6a0.webp\" width=\"60%\" />\n\n<br>\n\n- 错误示例\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.31pwe9jqbig0.webp\" width=\"60%\" />\n\n<br>\n\n- 推荐写法\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69xc8p0s24o0.webp\" width=\"60%\" />\n\n<br>\n\n# Redis其他功能\n\n## slowlog（慢查询）\n\n### 命令生命周期\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.76jbqyv85l80.webp\" width=\"70%\" />\n\n<br>\n\n- **（1）慢查询发生在第3阶段**\n- **（2）客户端超时不一定是慢查询，但慢查询是客户端超时的一个可能因素**\n\n<br>\n\n### 配置\n\n#### slowlog-max-len\n\n0. `slowlog-max-len` 表示慢查询队列长度\n\n1. 慢查询是一个先进先出的队列；如果在第3步执行过程中，被列入慢查询的范围内，就会进入一个队列（用redis的列表实现的）\n2. 慢查询队列是固定长度的\n3. 慢查询队列数据保存在内存中\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.44yrctjcttc0.webp\" width=\"70%\" />\n\n<br>\n\n#### slowlog-log-slower-than\n\n1. `slowlog-log-slower-than` 表示慢查询命令执行时间阈值（单位：微秒，1ms=1000微秒），超过阈值会被加入慢查询队列中\n2. `slowlog-log-slower-than = 0` ，记录所有命令\n3. `slowlog-log-slower-than < 0` ，不记录任何命令\n\n<br>\n\n#### 默认值\n\n```shell\n127.0.0.1:6380> config get slowlog-max-len\n1) \"slowlog-max-len\"\n2) \"128\"\n\n# 10000微秒 =》 10ms\n127.0.0.1:6380> config get slowlog-log-slower-than\n1) \"slowlog-log-slower-than\"\n2) \"10000\"\n```\n\n<br>\n\n#### 配置方法\n\n1. 方法一：修改配置文件重启（一般在第一次启动redis前进行配置。但如果redis正在运行中，不推荐此方式）\n\n2. 方法二：动态配置\n\n```shell\nconfig set slowlog-max-len 1000\n\nconfig set slowlog-log-slower-than 1000\n```\n\n```shell\n# 操作示例\n127.0.0.1:6380> config set slowlog-max-len 1000\nOK\n127.0.0.1:6380> config set slowlog-log-slower-than 1000\nOK\n127.0.0.1:6380> config get slowlog-max-len\n1) \"slowlog-max-len\"\n2) \"1000\"\n127.0.0.1:6380> config get slowlog-log-slower-than\n1) \"slowlog-log-slower-than\"\n2) \"1000\"\n127.0.0.1:6380>\n```\n\n<br>\n\n### 慢查询命令\n\n|   慢查询命令    |          说明          |\n| :-------------: | :--------------------: |\n| slowlog get [n] | 获取慢查询队列指定条数 |\n|   slowlog len   |   获取慢查询队列长度   |\n|  slowlog reset  |     清空慢查询队列     |\n\n<br>\n\n### 运维经验\n\n1. slowlog-max-len不要设置过大。默认10ms，通常设置1ms（实际情况要根据QPS来决定阈值大小，有可能1ms就已经对我们的QPS产生影响了）\n2. slowlog-log-slower-than不要设置过小，通常设置1000左右\n3. 理解命令生命周期，理解慢查询处于命令生命周期的位置。便于我们排错和优化（慢查询、阻塞、网络都可能成为客户端超时的原因）\n4. **定期持久化查询（因为慢查询是存在内存中的，且当慢查询数量逐步增多，早前的慢查询就会丢掉。做好持久化，可以分析历史的慢查询问题）。可以通过其它手段或开源软件实现这个功能**\n\n<br>\n\n## pipeline（流水线）\n\n### 网络命令通信模型\n\n#### 1次网络命令通信模型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.10peiok08sk0.webp\" width=\"60%\" />\n\n<br>\n\n#### 批量网络命令通信模型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yo8sxod81o0.webp\" width=\"60%\" />\n\n<br>\n\n### 什么是pipeline（流水线）\n\n- 我们知道redis的命令执行是很快的，但是网络时间却不一定。使用pipeline可以帮我们节约大量网络时间\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.v0w62a1vlc0.webp\" width=\"60%\" />\n\n<br>\n\n### pipeline的作用\n\n| 命令 |   N个命令操作   | 1次pipeline（N个命令） |\n| :--: | :-------------: | :--------------------: |\n| 时间 | n次网络+n次命令 |  1次网络时间+n次命令   |\n| 数量 |     1条命令     |        n条命令         |\n\n- 注意\n\n1. Redis的命令时间是微秒级别\n2. pipeline每次条数要控制（网络）\n\n\n\n- 举例\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2sv2n6wunz20.webp\" width=\"60%\" />\n\n<br>\n\n### pipeline的jedis实现\n\n- 添加maven依赖\n\n```xml\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>2.9.0</version>\n    <type>jar</type>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n- 没有pipe-line\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2cxbniglxcys.webp\" width=\"70%\" />\n\n<br>\n\n- 使用pipeline\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41hpky36m4a0.webp\" width=\"60%\" />\n\n<br>\n\n### pipeline与mget/mset操作的对比\n\n- 原生M操作\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6m3lpwqzxqs0.webp\" width=\"60%\" />\n\n<br>\n\n- pipeline\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7b0lz2zro400.webp\" width=\"60%\" />\n\n<br>\n\n**pipeline命令可拆分**\n\n<br>\n\n### pipeline使用建议\n\n- **注意每次pipeline携带数量**\n- **pipeline每次只能作用在一个Redis节点上**\n- **注意pipeline与M操作的区别**\n\n\n\n## 发布订阅\n\n### 角色\n\n- 发布者（publisher）\n- 订阅者（subscriber）\n- 频道（channel）\n\n<br>\n\n### 发布订阅模型\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5skel4tjk0.webp\" width=\"60%\" />\n\n<br>\n\n- **新的订阅者订阅了一个频道，是无法收到之前的消息**（因为无法做消息堆积，因为redis不是一个真正的消息队列这样一个工具）\n\n<br>\n\n### 发布订阅API\n\n#### publish\n\n```shell\n# 向频道发布消息\nPUBLISH [channel_name] [message]\n\n127.0.0.1:6380> publish sohu:tv \"hello world\"\n(integer) 0\n127.0.0.1:6380> publish sohu:auto \"taxi\"\n(integer) 0\n```\n\n<br>\n\n#### subscribe\n\n```shell\n# 订阅一个或多个频道\nSUBSCRIBE [channel_name]...\n\n127.0.0.1:6380> subscribe sohu:tv\nReading messages... (press Ctrl-C to quit)\n1) \"subscribe\"\n2) \"sohu:tv\"\n3) (integer) 1\n```\n\n<br>\n\n#### unsubscribe\n\n```shell\n# 订阅一个或多个频道\nUNSUBSCRIBE [channel_name]...\n\n127.0.0.1:6380> UNSUBSCRIBE sohu:tv\n1) \"unsubscribe\"\n2) \"sohu:tv\"\n3) (integer) 0\n```\n\n<br>\n\n#### 其它API\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.j7q4w7w0f5c.webp\"  width=\"65%\"/>\n\n\n\n<br>\n\n#### 发布订阅与消息队列\n\n- Redis可以实现消息队列，消息队列是抢的模式\n- 注意二者的区别与使用场景\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.33zfet508q00.webp\" width=\"65%\" />\n\n<br>\n\n## BItmap（位图）\n\n\n\n\n\n## HyperLogLog\n\n- Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的（基于HyperLogLog算法：极小空间完成独立数量统计）\n- 本质还是字符串\n\n<br>\n\n### API（命令）\n\n```shell\n# Pfadd 命令将所有元素参数添加到 HyperLogLog 数据结构中\nredis 127.0.0.1:6379> PFADD key element [element ...]\n\nredis 127.0.0.1:6379> PFADD mykey a b c d e f g h i j\n(integer) 1\nredis 127.0.0.1:6379> PFCOUNT mykey\n(integer) 10\n```\n\n```shell\n# Pfcount 命令返回给定 HyperLogLog 的基数估算值\nredis 127.0.0.1:6379> PFCOUNT key [key ...]\n\nredis 127.0.0.1:6379> PFADD hll foo bar zap\n(integer) 1\nredis 127.0.0.1:6379> PFADD hll zap zap zap\n(integer) 0\nredis 127.0.0.1:6379> PFADD hll foo bar\n(integer) 0\nredis 127.0.0.1:6379> PFCOUNT hll\n(integer) 3\nredis 127.0.0.1:6379> PFADD some-other-hll 1 2 3\n(integer) 1\nredis 127.0.0.1:6379> PFCOUNT hll some-other-hll\n(integer) 6\nredis> \n```\n\n```shell\n#  PFMERGE 命令将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的\nPFMERGE destkey sourcekey [sourcekey ...]\n\nredis> PFADD hll1 foo bar zap a\n(integer) 1\nredis> PFADD hll2 a b c foo\n(integer) 1\nredis> PFMERGE hll3 hll1 hll2\n\"OK\"\nredis> PFCOUNT hll3\n(integer) 6\nredis>  \n```\n\n<br>\n\n### 示例（百万独立用户-内存消耗）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.540yx2nmmgw0.webp\" width=\"60%\" />\n\n<br>\n\n### 使用经验\n\n- 是否能容忍错误？（错误率：0.81%）\n- 是否需要单条数据？\n\n<br>\n\n# GEO\n\n- Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作（存储经纬度，计算两地距离，范围计算等）\n- 底层使用 zset 实现\n\n<br>\n\n### 应用场景\n\n- 类似微信摇一摇（计算指定范围类的用户）\n- 根据距离计算周围的酒店餐馆等\n\n<br>\n\n### API\n\n- geoadd：添加地理位置的坐标。\n- geopos：获取地理位置的坐标。\n- geodist：计算两个位置之间的距离。\n- georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。\n- georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。\n- geohash：返回一个或多个位置对象的 geohash 值。\n\n<br>\n\n# Redis持久化的取舍和选择\n\n## 持久化的作用\n\n1. 什么是持久化\n\n> redis所有的数据保存在内存中，对数据的更新将异步的保存在磁盘上\n\n内存 =》（持久化）=》磁盘\n\n内存 《=（恢复）《= 磁盘\n\n\n\n2. 持久化的方式\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.urjf6b58j5c.webp\" width=\"60%\" />\n\n<br>\n\n## RDB（Redis DataBase）\n\n### 什么是RDB\n\n- RDB：在不同的时间点，将 redis 存储的数据生成快照并存储到磁盘等介质上\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.xtthna1x3gg.webp\" width=\"60%\" />\n\n<br>\n\n### RDB触发机制的三种方式\n\n#### save（同步）\n\n- 可能会造成阻塞\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1mmseu4fo9og.webp\" width=\"60%\" />\n\n<br>\n\n```shell\n127.0.0.1:6380>  save\nOK\n```\n\n- 文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件\n- 复杂度：O(n)\n\n<br>\n\n#### bgsave（异步）\n\n- 客户端执行 `bgsave` redis会使用linux的 `fork()` 函数生成一个redis的子进程，由该子进程生成RDB文件\n- 一般情况下， `bgsave` 不会阻塞到redis\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nkd5mhwgzcw.webp\" width=\"60%\" />\n\n<br>\n\n```shell\n127.0.0.1:6380> bgsave\nBackground saving started\n```\n\n- 文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件\n- 复杂度：O(n)\n\n<br>\n\n#### save 与 bgsave比较\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7z4y2ta7f2w.webp\" width=\"65%\" />\n\n<br>\n\n#### 自动\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.42jf7bw3rfe0.webp\" width=\"70%\" />\n\n<br>\n\n- 说明：在 60s 中改变了10000 条数据（set，del），会自动做rdb的生成\n\n<br>\n\n##### 缺点\n\n- 数据写入量无法控制，生成规则无法控制。如果文件非常大，或很频繁的做这样的操作，会对硬盘造成一定压力\n\n<br>\n\n##### 默认配置\n\n```shell\n################################ 快照  #################################  \n#  \n# Save the DB on disk:保存数据库到磁盘  \n#  \n#   save <秒> <更新>  \n#  \n#   如果指定的秒数和数据库写操作次数都满足了就将数据库保存。  \n#  \n#   下面是保存操作的实例：  \n#   900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化）  \n#   300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）  \n#   60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）  \n#  \n#   注释：注释掉“save”这一行配置项就可以让保存数据库功能失效。  \n#  \n#   你也可以通过增加一个只有一个空字符串的配置项（如下面的实例）来去掉前面的“save”配置。  \n#  \n#   save \"\"  \n  \nsave 900 1  \nsave 300 10  \nsave 60 10000  \n  \n#在默认情况下，如果RDB快照持久化操作被激活（至少一个条件被激活）并且持久化操作失败，Redis则会停止接受更新操作。  \n#这样会让用户了解到数据没有被正确的存储到磁盘上。否则没人会注意到这个问题，可能会造成灾难。  \n#  \n#如果后台存储（持久化）操作进程再次工作，Redis会自动允许更新操作。  \n#  \n#然而，如果你已经恰当的配置了对Redis服务器的监视和备份，你也许想关掉这项功能。  \n#如此一来即使后台保存操作出错,redis也仍然可以继续像平常一样工作。  \nstop-writes-on-bgsave-error yes  \n  \n#是否在导出.rdb数据库文件的时候采用LZF压缩字符串和对象？  \n#默认情况下总是设置成‘yes’， 他看起来是一把双刃剑。  \n#如果你想在存储的子进程中节省一些CPU就设置成'no'，  \n#但是这样如果你的kye/value是可压缩的，你的到处数据接就会很大。  \nrdbcompression yes  \n  \n#从版本RDB版本5开始，一个CRC64的校验就被放在了文件末尾。  \n#这会让格式更加耐攻击，但是当存储或者加载rbd文件的时候会有一个10%左右的性能下降，  \n#所以，为了达到性能的最大化，你可以关掉这个配置项。  \n#  \n#没有校验的RDB文件会有一个0校验位，来告诉加载代码跳过校验检查。  \nrdbchecksum yes  \n  \n# 导出数据库的文件名称  \ndbfilename dump.rdb  \n  \n# 工作目录  \n#  \n# 导出的数据库会被写入这个目录，文件名就是上面'dbfilename'配置项指定的文件名。  \n#   \n# 只增的文件也会在这个目录创建（这句话没看明白）  \n#   \n# 注意你一定要在这个配置一个工作目录，而不是文件名称。  \ndir ./  \n```\n\n<br>\n\n##### 最佳配置\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23rdcl2poqrk.webp\" width=\"70%\" />\n\n<br>\n\n- 关闭自动配置\n\n### 触发机制 - 不容忽略方式\n\n1. 全量复制（主从复制时候，主会自动生成RDB）\n2. debug reload（相当于不会将内存清空的重启，也会生成RDB）\n3. shutdown\n\n<br>\n\n### RDB现存问题\n\n- 耗时耗性能\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.b2ax18993q0.webp\" width=\"50%\" />\n\n<br>\n\n- 不可控，丢失数据\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hq85j7f4ni0.webp\" width=\"50%\" />\n\n<br>\n\n## AOF（Append Only File）\n\n- 将 redis 执行过的所有写指令记录下来（它的写入是实时的），在下次 redis 重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了\n\n### AOF运行原理\n\n- 创建\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i410l2830jk.webp\" width=\"50%\" />\n\n<br>\n\n- 恢复\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2ode8n5q6b80.webp\" width=\"60%\" />\n\n<br>\n\n### AOF的三种策略\n\n#### always\n\n- 写入数据不会丢失\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nz1bf5i1ojk.webp\" width=\"50%\" />\n\n<br>\n\n#### everysec\n\n- 是redis的配置默认值\n- 可能会丢失1s的数据\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5uvzghtr78s0.webp\" width=\"50%\" />\n\n<br>\n\n#### no\n\n- 根据操作系统决定\n\n<br>\n\n### AOF的三种策略对比\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7ezkvv0o0bg0.webp\" width=\"50%\" />\n\n<br>\n\n### AOF重写\n\n- 减少磁盘占用量\n- 加速恢复速度\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3hr6crymmo0.webp\" width=\"50%\" />\n\n<br>\n\n#### AOF重写的两种方式\n\n- BGREWRITEAOF （类似rdb的bgsave）\n  - 将Redis中的数据进行回溯， 回溯成AOF文件\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5j30ijjpor40.webp\" width=\"50%\" />\n\n<br>\n\n- AOF重写配置\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.72n439aom900.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5wl4pwfy7ds0.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yskrqzxtakw.webp\" width=\"50%\" />\n\n<br>\n\n#### AOF重写流程\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2b1z2py9ols0.webp\" width=\"50%\" />\n\n<br>\n\n## RDB与AOF的抉择\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2got5zb1qs20.webp\" width=\"50%\" />\n\n<br>\n\n### RDB最佳策略\n\n- RDB\n\n1. ”关闭“\n2. 集中管理\n3. 主从，从开\n\n### AOF最佳策略\n\n1. ”开“：缓存和存储\n2. AOF集中管理\n3. everysec\n\n### 最佳策略\n\n1. 小分片\n2. 缓存或存储\n3. 监控（硬盘、内存、负载、网络）\n4. 足够的内存\n\n<br>\n\n# 常见的持久化开发运维问题\n\n## fork操作\n\n- \n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ofn5wyto2w0.webp\" width=\"50%\" />\n\n<br>\n\n- fork改善\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.25vvl1tdwgu8.webp\" width=\"50%\" />\n\n\n\n<br>\n\n## 子进程开销和优化\n\n- \n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5w40mtg9s0.webp\" width=\"50%\" />\n\n<br>\n\n## 硬盘优化\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lnrmjt1hw40.webp\" width=\"50%\" />\n\n<br>\n\n## AOF追加阻塞\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v89xx5ytl00.webp\" width=\"50%\" />\n\n<br>\n\n## AOF阻塞定位\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3t06d4zqkpo0.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qdujdqyup60.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.60mk8wrt4lk0.webp\" width=\"50%\" />\n\n<br>\n\n# Redis复制的原理与优化\n\n## 什么是主从复制\n\n- 一个master可以有多个slave，但一个slave只能有一个master\n- 数据流向必须是单向的。master -> slave\n- 变成从节点前会把数据清楚\n\n\n\n## 主从复制作用\n\n- 一个数据提供了多个副本（成为高可用、分布式的基础）\n- 扩展读性能（读写分离）\n\n\n\n## 主从复制实现\n\n### slaveof 命令\n\n- 复制（slaveof 这个命令是异步的）\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pa32y5jfz80.webp\" width=\"60%\"/>\n\n<br>\n\n- 取消复制\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7jnus8oq23k0.webp\" width=\"60%\"/>\n\n<br>\n\n### 配置\n\n```shell\nslaveof ip port\nslave-read-only yes\n```\n\n\n\n### 主从复制-命令和配置的比较\n\n| 方式 |    命令    |   配置   |\n| :--: | :--------: | :------: |\n| 优点 |  无需重启  | 统一配置 |\n| 缺点 | 不便于管理 | 需要管理 |\n\n\n\n### 主从配置操作\n\n```shell\ninfo replication\n```\n\n\n\n## 主从复制原理\n\n### 全量复制过程原理\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.312gr8tguvm0.webp\" width=\"50%\" />\n\n<br>\n\n### 全量复制开销\n\n1. bgsave时间\n2. RDB文件网络传输时间\n3. 从节点清空数据时间\n4. 从节点加载RDB时间\n5. 可能的AOF重写时间\n\n\n\n### 部分复制过程原理\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3vhs1nc1dzi0.webp\" width=\"50%\" />\n\n<br>\n\n## 主从复制中的故障处理与常见问题\n\n- 故障不可避免\n- 自动故障转移\n- 故障分为master故障和slave故障\n\n\n\n### 读写分离问题\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.a738ve0k3y8.webp\" width=\"50%\" />\n\n<br>\n\n### 配置不一致\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.nl2kmy53a0w.webp\" width=\"50%\" />\n\n<br>\n\n### 规避全量复制\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6pe5jkk3nm80.webp\" width=\"50%\" />\n\n<br>\n\n### 规避复制风暴\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.361o49e7h2i0.webp\" width=\"50%\" />\n\n<br>\n\n# Redis Sentinel\n\n\n\n\n\n\n\n# 第9章 初识Redis Cluster\n\n\n\n\n\n<br>\n\n# 学习备注\n\n> 1. jedis 需要熟悉,有些代码还要手动过一遍才是\n> 2. 生产环境普通用户后台启动redis\n> 3. 部分图片内容是否应该转化为代码呢？\n> 4. bitmap不太懂，还需要深入理解。还包括 hyperloglog、geo\n> 5. RDB和AOF的恢复原理和过程是怎么样子的？\n> 6. 主从复制操作虽然简单，但是最好是实践一下\n\n<img src=\"\" width=\"50%\" />\n\n<br>\n\n\n\n\n\n\n\n\n\n","slug":"《一站式学习Redis-从入门到高可用分布式实践》study-notes","published":1,"updated":"2022-09-27T19:05:21.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zfsp00064dcta2wro30sm","content":"<h1 id=\"Redis初识\"><a href=\"#Redis初识\" class=\"headerlink\" title=\"Redis初识\"></a>Redis初识</h1><h2 id=\"Redis是什么\"><a href=\"#Redis是什么\" class=\"headerlink\" title=\"Redis是什么\"></a>Redis是什么</h2><ul>\n<li>开源</li>\n<li>基于键值的存储服务系统</li>\n<li>多种数据结构</li>\n<li>高性能、功能丰富</li>\n</ul>\n<br>\n\n<h2 id=\"Redis的特性\"><a href=\"#Redis的特性\" class=\"headerlink\" title=\"Redis的特性\"></a>Redis的特性</h2><ul>\n<li>速度快（10w OPS）<ul>\n<li>数据存储在内存（速度快的主要原因）</li>\n<li>使用C语言编写</li>\n<li>单线程</li>\n</ul>\n</li>\n<li>持久化<ul>\n<li>Redis的所有数据保存在内存中，对数据的更新异步的保存在磁盘上</li>\n</ul>\n</li>\n<li>多种数据结构<ul>\n<li>5中主要类型</li>\n</ul>\n</li>\n<li>支持多种编程语言<ul>\n<li>主流编程语言都支持Redis</li>\n</ul>\n</li>\n<li>功能丰富<ul>\n<li>发布订阅</li>\n<li>事物</li>\n<li>lua脚本</li>\n<li>pipeline</li>\n</ul>\n</li>\n<li>简单<ul>\n<li>早期代码23000行</li>\n<li>不依赖外部库</li>\n<li>单线程模型</li>\n</ul>\n</li>\n<li>主从复制</li>\n<li>高可用、分布式</li>\n</ul>\n<br>\n\n<h2 id=\"Redis典型使用场景\"><a href=\"#Redis典型使用场景\" class=\"headerlink\" title=\"Redis典型使用场景\"></a>Redis典型使用场景</h2><ul>\n<li>缓存系统</li>\n<li>计数器</li>\n<li>消息队列系统</li>\n<li>排行榜</li>\n<li>社交网络</li>\n<li>事实系统</li>\n</ul>\n<br>\n\n<h2 id=\"Redis安装\"><a href=\"#Redis安装\" class=\"headerlink\" title=\"Redis安装\"></a>Redis安装</h2><ul>\n<li>安装前环境准备</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ kernel-devel</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cd /install</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost install]# wget https://github.com/redis/redis/archive/7.0.4.tar.gz</span><br><span class=\"line\">[root@localhost install]# tar -zxvf redis-7.0.4.tar.gz</span><br><span class=\"line\">[root@localhost install]# mv redis-7.0.4 /usr/local/</span><br><span class=\"line\">[root@localhost install]# cd /usr/local/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost local]# ln -s redis-7.0.4/ redis</span><br><span class=\"line\">[root@localhost local]# cd redis</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接 make 会失败报错 原因：建立redis时系统默认使用jemalloc作为内存管理工具，但是当前无可用jemalloc，切换为标准内存管理工具libc问题解决</span></span><br><span class=\"line\">[root@localhost redis]# make MALLOC=libc</span><br><span class=\"line\">[root@localhost redis]# make install</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n<h2 id=\"Redis三种启动方式\"><a href=\"#Redis三种启动方式\" class=\"headerlink\" title=\"Redis三种启动方式\"></a>Redis三种启动方式</h2><ul>\n<li>最简启动</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用默认配置启动</span></span><br><span class=\"line\">redis-server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动态参数启动</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --port 6380</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置文件启动（推荐）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server configPath</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动方式比较</li>\n</ul>\n<blockquote>\n<p>生产环境选择配置启动</p>\n<p>单机多实例配置文件可以用端口区分开来</p>\n</blockquote>\n<br>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef |grep redis</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -antpl |grep redis</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli -h [ip] -p [port] ping </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Redis可执行文件说明\"><a href=\"#Redis可执行文件说明\" class=\"headerlink\" title=\"Redis可执行文件说明\"></a>Redis可执行文件说明</h2><ul>\n<li>redis-server    -    redis服务器</li>\n<li>redis-cli    -    redis命令行客户端</li>\n<li>redis-benchmark    -    redis性能测试工具</li>\n<li>redis-check-aof    -    AOF文件修复工具</li>\n<li>redis-check-dump    -    RDB文件检查工具</li>\n<li>redis-sentinel    -    Sentinel服务器（2.8之后）</li>\n</ul>\n<br>\n\n<h2 id=\"Redis常用配置\"><a href=\"#Redis常用配置\" class=\"headerlink\" title=\"Redis常用配置\"></a>Redis常用配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">是否以守护进程方式启动 [<span class=\"built_in\">yes</span>|no]</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">redis 对外端口</span></span><br><span class=\"line\">port 6380</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置日志名称</span></span><br><span class=\"line\">logfile &quot;6380.log&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">redis 工作目录（包括日志文件、持久化文件存储位置）</span></span><br><span class=\"line\">dir &quot;/usr/local/redis/data/&quot;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"API的理解和使用\"><a href=\"#API的理解和使用\" class=\"headerlink\" title=\"API的理解和使用\"></a>API的理解和使用</h1><h2 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">遍历所有的key，可以使用通配符</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复杂度 O(n) ，不建议在生产环境使用，除非数量特别小</span></span><br><span class=\"line\">keys *</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">内置的对键值 统计的计数器</span></span><br><span class=\"line\">dbsize</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查key是否存在，返回 1 或 0</span></span><br><span class=\"line\">exists</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除指定 key-value，返回 1 或 0</span></span><br><span class=\"line\">del key [key...]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置 key 在 seconds 秒后过期</span></span><br><span class=\"line\">expire key seconds</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询key 还有多长时间过期，不过期则返回 -1</span></span><br><span class=\"line\">ttl key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">去除过期时间，</span></span><br><span class=\"line\">persist key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不存在则返回 none</span></span><br><span class=\"line\">type key</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"数据结构和内部编码\"><a href=\"#数据结构和内部编码\" class=\"headerlink\" title=\"数据结构和内部编码\"></a>数据结构和内部编码</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3scu9pvrtk80.webp\" width=\"75%\" />\n\n<br>\n\n<ul>\n<li>redisObject</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69a05a18h8s0.webp\" width=\"75%\"/>\n\n<br>\n\n<h2 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h2><h3 id=\"单线程为什么这么快\"><a href=\"#单线程为什么这么快\" class=\"headerlink\" title=\"单线程为什么这么快\"></a>单线程为什么这么快</h3><ul>\n<li>纯内存（主要原因）</li>\n<li>阻塞IO</li>\n<li>避免线程切换和竞态消耗</li>\n</ul>\n<br>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li><p>一次只运行一条命令</p>\n</li>\n<li><p>拒绝长（慢）命命令：<code>kesy</code> <code>flushall</code> <code>flushdb</code> <code>slow lua script</code> <code>mutil/exec</code> <code>operate big value(collection)</code></p>\n</li>\n<li><p>其实不是单线程：<code>fysnc file descriptor</code> <code>close file descriptor</code></p>\n</li>\n</ol>\n<br>\n\n<h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h2><h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><ul>\n<li>可以是真的字符串，同时也可以是数字，二进制数字等等。大小限制 512MB</li>\n</ul>\n<img src =\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c36c4ac53ae6df147284b21e0fa921.lo8tp31mfhs.webp\" width=\"70%\" />\n\n<br>\n\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><ul>\n<li>缓存</li>\n<li>计数器</li>\n<li>分布式锁</li>\n<li>……</li>\n</ul>\n<br>\n\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">举例</th>\n<th align=\"center\">时间复杂度</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">set</td>\n<td align=\"center\">set hello word</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">不管key是否存在，都设置。成功返回ok</td>\n</tr>\n<tr>\n<td align=\"center\">setnx</td>\n<td align=\"center\">setnx k v</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">key不存在才设置</td>\n</tr>\n<tr>\n<td align=\"center\">set xx</td>\n<td align=\"center\">set k v xx</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">key存在才设置。不存在返回nil</td>\n</tr>\n<tr>\n<td align=\"center\">mset</td>\n<td align=\"center\">mset k1 v1 k2 v2</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">批量设置key-value，原子操作</td>\n</tr>\n<tr>\n<td align=\"center\">del</td>\n<td align=\"center\">del hello</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">成功返回1,失败返回0</td>\n</tr>\n<tr>\n<td align=\"center\">get</td>\n<td align=\"center\">get hello</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">成功返回的value，失败返回nil</td>\n</tr>\n<tr>\n<td align=\"center\">mget</td>\n<td align=\"center\">mget k1 k2</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">批量获取key-value，原子操作</td>\n</tr>\n<tr>\n<td align=\"center\">incr</td>\n<td align=\"center\">incr counter</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">自增1，并返回自增后的value值。如果key不存在，自增后get(key) = 1</td>\n</tr>\n<tr>\n<td align=\"center\">decr</td>\n<td align=\"center\">decr counter</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">自减1，并返回自减后的value值。如果key不存在，自减后get(key) = -1</td>\n</tr>\n<tr>\n<td align=\"center\">incrby</td>\n<td align=\"center\">incrby view k</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">自增k，并返回自增k后的value值。如果key不存在，自增后get(key) = k</td>\n</tr>\n<tr>\n<td align=\"center\">decrby</td>\n<td align=\"center\">decrby view k</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">自减k，并返回自减后的value值。如果key不存在，自减后get(key) = -k</td>\n</tr>\n<tr>\n<td align=\"center\">getset</td>\n<td align=\"center\">getset k newvalue</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">set key newValue，并返回旧的value</td>\n</tr>\n<tr>\n<td align=\"center\">apend</td>\n<td align=\"center\">apend k v</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">将value追加到旧的value</td>\n</tr>\n<tr>\n<td align=\"center\">strlen</td>\n<td align=\"center\">strlen k</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">返回字符串的长度[字节]（utf-8 中文占 2个字节）</td>\n</tr>\n<tr>\n<td align=\"center\">incrbyfloat</td>\n<td align=\"center\">incrbyfloat k v</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">增加指定的浮点数</td>\n</tr>\n<tr>\n<td align=\"center\">getrange</td>\n<td align=\"center\">getrange k start end</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">获取字符串指定下标所有的值</td>\n</tr>\n<tr>\n<td align=\"center\">setrange</td>\n<td align=\"center\">setrange k index value</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">设置指定下标对应的值</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h3><ol>\n<li>记录网站每个用户的个人主页访问量</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">单线程：无竞争（并发不会出现计错数的情况）</span></span><br><span class=\"line\">incr userId:pageView</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>缓存视频的基本信息（数据源在MySQL中）</li>\n</ol>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2nspuoc7ly60.webp\" width=\"70%\" />\n\n<br>\n\n<ol start=\"3\">\n<li>分布式id生成器</li>\n</ol>\n<br>\n\n<h3 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1d121aa9afdb06c7451e0fb8bb2d560.kias448eqho.webp\" width=\"70%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c1ea9bb24f88ec70a3aacc637a9183.4xykrj7thuw0.webp\" width=\"70%\" />\n\n\n\n\n\n\n\n<h2 id=\"hash（哈希）\"><a href=\"#hash（哈希）\" class=\"headerlink\" title=\"hash（哈希）\"></a>hash（哈希）</h2><br>\n\n<h1 id=\"Redis客户端\"><a href=\"#Redis客户端\" class=\"headerlink\" title=\"Redis客户端\"></a>Redis客户端</h1><h2 id=\"Java客户端Jedis\"><a href=\"#Java客户端Jedis\" class=\"headerlink\" title=\"Java客户端Jedis\"></a>Java客户端Jedis</h2><h3 id=\"Jedis简单使用\"><a href=\"#Jedis简单使用\" class=\"headerlink\" title=\"Jedis简单使用\"></a>Jedis简单使用</h3><ul>\n<li>maven依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Jedis直连</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1l6p9hnls4rk.webp\" width=\"70%\"/>\n\n<br>\n\n<h3 id=\"JedisPool简单使用\"><a href=\"#JedisPool简单使用\" class=\"headerlink\" title=\"JedisPool简单使用\"></a>JedisPool简单使用</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ehexcty0j20.webp\" width = \"70%\"/>\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3r9cudbxdi00.webp\" width = \"70%\"/>\n\n<br>\n\n<h3 id=\"Jedis-与-JedisPool比较\"><a href=\"#Jedis-与-JedisPool比较\" class=\"headerlink\" title=\"Jedis 与 JedisPool比较\"></a>Jedis 与 JedisPool比较</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/97b459332ea53d7e42b90bd2743dcda.396pfset03e0.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/7e5d97f719abbfe9b363126e682f86d.3g21qh3ltu20.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/41e863e25d7ae1dc0c3cebe8444b9c5.2tj6g97vyck.webp\" width=\"60%\" />\n\n<br>\n\n\n\n\n\n<h3 id=\"Jedis配置优化\"><a href=\"#Jedis配置优化\" class=\"headerlink\" title=\"Jedis配置优化\"></a>Jedis配置优化</h3><h4 id=\"pool配置-资源数控制\"><a href=\"#pool配置-资源数控制\" class=\"headerlink\" title=\"pool配置 - 资源数控制\"></a>pool配置 - 资源数控制</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.21oqgp1jyxnk.webp\" width=\"60%\" />\n\n<br>\n\n<h4 id=\"pool配置-借还参数\"><a href=\"#pool配置-借还参数\" class=\"headerlink\" title=\"pool配置 - 借还参数\"></a>pool配置 - 借还参数</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7cwnd55qd1s0.webp\" width=\"70%\" />\n\n<br>\n\n<h4 id=\"适合的-maxTotal\"><a href=\"#适合的-maxTotal\" class=\"headerlink\" title=\"适合的 maxTotal\"></a>适合的 maxTotal</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2mma31ou5nw0.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6sejm8evfwc.webp\" width=\"60%\" />\n\n<br>\n\n<h4 id=\"适合的maxIdle和minIdle\"><a href=\"#适合的maxIdle和minIdle\" class=\"headerlink\" title=\"适合的maxIdle和minIdle\"></a>适合的maxIdle和minIdle</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6lhcm72l9bo0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"常见问题和解决思路\"><a href=\"#常见问题和解决思路\" class=\"headerlink\" title=\"常见问题和解决思路\"></a>常见问题和解决思路</h3><ul>\n<li>常见问题</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75d32k2l47g0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li>解决思路</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41af9urqt6a0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li>错误示例</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.31pwe9jqbig0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li>推荐写法</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69xc8p0s24o0.webp\" width=\"60%\" />\n\n<br>\n\n<h1 id=\"Redis其他功能\"><a href=\"#Redis其他功能\" class=\"headerlink\" title=\"Redis其他功能\"></a>Redis其他功能</h1><h2 id=\"slowlog（慢查询）\"><a href=\"#slowlog（慢查询）\" class=\"headerlink\" title=\"slowlog（慢查询）\"></a>slowlog（慢查询）</h2><h3 id=\"命令生命周期\"><a href=\"#命令生命周期\" class=\"headerlink\" title=\"命令生命周期\"></a>命令生命周期</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.76jbqyv85l80.webp\" width=\"70%\" />\n\n<br>\n\n<ul>\n<li><strong>（1）慢查询发生在第3阶段</strong></li>\n<li><strong>（2）客户端超时不一定是慢查询，但慢查询是客户端超时的一个可能因素</strong></li>\n</ul>\n<br>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"slowlog-max-len\"><a href=\"#slowlog-max-len\" class=\"headerlink\" title=\"slowlog-max-len\"></a>slowlog-max-len</h4><ol start=\"0\">\n<li><p><code>slowlog-max-len</code> 表示慢查询队列长度</p>\n</li>\n<li><p>慢查询是一个先进先出的队列；如果在第3步执行过程中，被列入慢查询的范围内，就会进入一个队列（用redis的列表实现的）</p>\n</li>\n<li><p>慢查询队列是固定长度的</p>\n</li>\n<li><p>慢查询队列数据保存在内存中</p>\n</li>\n</ol>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.44yrctjcttc0.webp\" width=\"70%\" />\n\n<br>\n\n<h4 id=\"slowlog-log-slower-than\"><a href=\"#slowlog-log-slower-than\" class=\"headerlink\" title=\"slowlog-log-slower-than\"></a>slowlog-log-slower-than</h4><ol>\n<li><code>slowlog-log-slower-than</code> 表示慢查询命令执行时间阈值（单位：微秒，1ms=1000微秒），超过阈值会被加入慢查询队列中</li>\n<li><code>slowlog-log-slower-than = 0</code> ，记录所有命令</li>\n<li><code>slowlog-log-slower-than &lt; 0</code> ，不记录任何命令</li>\n</ol>\n<br>\n\n<h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; config get slowlog-max-len</span><br><span class=\"line\">1) &quot;slowlog-max-len&quot;</span><br><span class=\"line\">2) &quot;128&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10000微秒 =》 10ms</span></span><br><span class=\"line\">127.0.0.1:6380&gt; config get slowlog-log-slower-than</span><br><span class=\"line\">1) &quot;slowlog-log-slower-than&quot;</span><br><span class=\"line\">2) &quot;10000&quot;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"配置方法\"><a href=\"#配置方法\" class=\"headerlink\" title=\"配置方法\"></a>配置方法</h4><ol>\n<li><p>方法一：修改配置文件重启（一般在第一次启动redis前进行配置。但如果redis正在运行中，不推荐此方式）</p>\n</li>\n<li><p>方法二：动态配置</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config set slowlog-max-len 1000</span><br><span class=\"line\"></span><br><span class=\"line\">config set slowlog-log-slower-than 1000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">操作示例</span></span><br><span class=\"line\">127.0.0.1:6380&gt; config set slowlog-max-len 1000</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; config set slowlog-log-slower-than 1000</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; config get slowlog-max-len</span><br><span class=\"line\">1) &quot;slowlog-max-len&quot;</span><br><span class=\"line\">2) &quot;1000&quot;</span><br><span class=\"line\">127.0.0.1:6380&gt; config get slowlog-log-slower-than</span><br><span class=\"line\">1) &quot;slowlog-log-slower-than&quot;</span><br><span class=\"line\">2) &quot;1000&quot;</span><br><span class=\"line\">127.0.0.1:6380&gt;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"慢查询命令\"><a href=\"#慢查询命令\" class=\"headerlink\" title=\"慢查询命令\"></a>慢查询命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">慢查询命令</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">slowlog get [n]</td>\n<td align=\"center\">获取慢查询队列指定条数</td>\n</tr>\n<tr>\n<td align=\"center\">slowlog len</td>\n<td align=\"center\">获取慢查询队列长度</td>\n</tr>\n<tr>\n<td align=\"center\">slowlog reset</td>\n<td align=\"center\">清空慢查询队列</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"运维经验\"><a href=\"#运维经验\" class=\"headerlink\" title=\"运维经验\"></a>运维经验</h3><ol>\n<li>slowlog-max-len不要设置过大。默认10ms，通常设置1ms（实际情况要根据QPS来决定阈值大小，有可能1ms就已经对我们的QPS产生影响了）</li>\n<li>slowlog-log-slower-than不要设置过小，通常设置1000左右</li>\n<li>理解命令生命周期，理解慢查询处于命令生命周期的位置。便于我们排错和优化（慢查询、阻塞、网络都可能成为客户端超时的原因）</li>\n<li><strong>定期持久化查询（因为慢查询是存在内存中的，且当慢查询数量逐步增多，早前的慢查询就会丢掉。做好持久化，可以分析历史的慢查询问题）。可以通过其它手段或开源软件实现这个功能</strong></li>\n</ol>\n<br>\n\n<h2 id=\"pipeline（流水线）\"><a href=\"#pipeline（流水线）\" class=\"headerlink\" title=\"pipeline（流水线）\"></a>pipeline（流水线）</h2><h3 id=\"网络命令通信模型\"><a href=\"#网络命令通信模型\" class=\"headerlink\" title=\"网络命令通信模型\"></a>网络命令通信模型</h3><h4 id=\"1次网络命令通信模型\"><a href=\"#1次网络命令通信模型\" class=\"headerlink\" title=\"1次网络命令通信模型\"></a>1次网络命令通信模型</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.10peiok08sk0.webp\" width=\"60%\" />\n\n<br>\n\n<h4 id=\"批量网络命令通信模型\"><a href=\"#批量网络命令通信模型\" class=\"headerlink\" title=\"批量网络命令通信模型\"></a>批量网络命令通信模型</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yo8sxod81o0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"什么是pipeline（流水线）\"><a href=\"#什么是pipeline（流水线）\" class=\"headerlink\" title=\"什么是pipeline（流水线）\"></a>什么是pipeline（流水线）</h3><ul>\n<li>我们知道redis的命令执行是很快的，但是网络时间却不一定。使用pipeline可以帮我们节约大量网络时间</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.v0w62a1vlc0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"pipeline的作用\"><a href=\"#pipeline的作用\" class=\"headerlink\" title=\"pipeline的作用\"></a>pipeline的作用</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">N个命令操作</th>\n<th align=\"center\">1次pipeline（N个命令）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">时间</td>\n<td align=\"center\">n次网络+n次命令</td>\n<td align=\"center\">1次网络时间+n次命令</td>\n</tr>\n<tr>\n<td align=\"center\">数量</td>\n<td align=\"center\">1条命令</td>\n<td align=\"center\">n条命令</td>\n</tr>\n</tbody></table>\n<ul>\n<li>注意</li>\n</ul>\n<ol>\n<li>Redis的命令时间是微秒级别</li>\n<li>pipeline每次条数要控制（网络）</li>\n</ol>\n<ul>\n<li>举例</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2sv2n6wunz20.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"pipeline的jedis实现\"><a href=\"#pipeline的jedis实现\" class=\"headerlink\" title=\"pipeline的jedis实现\"></a>pipeline的jedis实现</h3><ul>\n<li>添加maven依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>没有pipe-line</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2cxbniglxcys.webp\" width=\"70%\" />\n\n<br>\n\n<ul>\n<li>使用pipeline</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41hpky36m4a0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"pipeline与mget-mset操作的对比\"><a href=\"#pipeline与mget-mset操作的对比\" class=\"headerlink\" title=\"pipeline与mget/mset操作的对比\"></a>pipeline与mget/mset操作的对比</h3><ul>\n<li>原生M操作</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6m3lpwqzxqs0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li>pipeline</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7b0lz2zro400.webp\" width=\"60%\" />\n\n<br>\n\n<p><strong>pipeline命令可拆分</strong></p>\n<br>\n\n<h3 id=\"pipeline使用建议\"><a href=\"#pipeline使用建议\" class=\"headerlink\" title=\"pipeline使用建议\"></a>pipeline使用建议</h3><ul>\n<li><strong>注意每次pipeline携带数量</strong></li>\n<li><strong>pipeline每次只能作用在一个Redis节点上</strong></li>\n<li><strong>注意pipeline与M操作的区别</strong></li>\n</ul>\n<h2 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h2><h3 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h3><ul>\n<li>发布者（publisher）</li>\n<li>订阅者（subscriber）</li>\n<li>频道（channel）</li>\n</ul>\n<br>\n\n<h3 id=\"发布订阅模型\"><a href=\"#发布订阅模型\" class=\"headerlink\" title=\"发布订阅模型\"></a>发布订阅模型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5skel4tjk0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li><strong>新的订阅者订阅了一个频道，是无法收到之前的消息</strong>（因为无法做消息堆积，因为redis不是一个真正的消息队列这样一个工具）</li>\n</ul>\n<br>\n\n<h3 id=\"发布订阅API\"><a href=\"#发布订阅API\" class=\"headerlink\" title=\"发布订阅API\"></a>发布订阅API</h3><h4 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">向频道发布消息</span></span><br><span class=\"line\">PUBLISH [channel_name] [message]</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6380&gt; publish sohu:tv &quot;hello world&quot;</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; publish sohu:auto &quot;taxi&quot;</span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"subscribe\"><a href=\"#subscribe\" class=\"headerlink\" title=\"subscribe\"></a>subscribe</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">订阅一个或多个频道</span></span><br><span class=\"line\">SUBSCRIBE [channel_name]...</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6380&gt; subscribe sohu:tv</span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) &quot;subscribe&quot;</span><br><span class=\"line\">2) &quot;sohu:tv&quot;</span><br><span class=\"line\">3) (integer) 1</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"unsubscribe\"><a href=\"#unsubscribe\" class=\"headerlink\" title=\"unsubscribe\"></a>unsubscribe</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">订阅一个或多个频道</span></span><br><span class=\"line\">UNSUBSCRIBE [channel_name]...</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6380&gt; UNSUBSCRIBE sohu:tv</span><br><span class=\"line\">1) &quot;unsubscribe&quot;</span><br><span class=\"line\">2) &quot;sohu:tv&quot;</span><br><span class=\"line\">3) (integer) 0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"其它API\"><a href=\"#其它API\" class=\"headerlink\" title=\"其它API\"></a>其它API</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.j7q4w7w0f5c.webp\"  width=\"65%\"/>\n\n\n\n<br>\n\n<h4 id=\"发布订阅与消息队列\"><a href=\"#发布订阅与消息队列\" class=\"headerlink\" title=\"发布订阅与消息队列\"></a>发布订阅与消息队列</h4><ul>\n<li>Redis可以实现消息队列，消息队列是抢的模式</li>\n<li>注意二者的区别与使用场景</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.33zfet508q00.webp\" width=\"65%\" />\n\n<br>\n\n<h2 id=\"BItmap（位图）\"><a href=\"#BItmap（位图）\" class=\"headerlink\" title=\"BItmap（位图）\"></a>BItmap（位图）</h2><h2 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h2><ul>\n<li>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的（基于HyperLogLog算法：极小空间完成独立数量统计）</li>\n<li>本质还是字符串</li>\n</ul>\n<br>\n\n<h3 id=\"API（命令）\"><a href=\"#API（命令）\" class=\"headerlink\" title=\"API（命令）\"></a>API（命令）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Pfadd 命令将所有元素参数添加到 HyperLogLog 数据结构中</span></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD key element [element ...]</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFCOUNT mykey</span><br><span class=\"line\">(integer) 10</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Pfcount 命令返回给定 HyperLogLog 的基数估算值</span></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFCOUNT key [key ...]</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD hll foo bar zap</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD hll zap zap zap</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD hll foo bar</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFCOUNT hll</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD some-other-hll 1 2 3</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFCOUNT hll some-other-hll</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> PFMERGE 命令将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的</span></span><br><span class=\"line\">PFMERGE destkey sourcekey [sourcekey ...]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\">PFADD hll1 foo bar zap a</span></span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\">PFADD hll2 a b c foo</span></span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\">PFMERGE hll3 hll1 hll2</span></span><br><span class=\"line\">&quot;OK&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\">PFCOUNT hll3</span></span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\"> </span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"示例（百万独立用户-内存消耗）\"><a href=\"#示例（百万独立用户-内存消耗）\" class=\"headerlink\" title=\"示例（百万独立用户-内存消耗）\"></a>示例（百万独立用户-内存消耗）</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.540yx2nmmgw0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"使用经验\"><a href=\"#使用经验\" class=\"headerlink\" title=\"使用经验\"></a>使用经验</h3><ul>\n<li>是否能容忍错误？（错误率：0.81%）</li>\n<li>是否需要单条数据？</li>\n</ul>\n<br>\n\n<h1 id=\"GEO\"><a href=\"#GEO\" class=\"headerlink\" title=\"GEO\"></a>GEO</h1><ul>\n<li>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作（存储经纬度，计算两地距离，范围计算等）</li>\n<li>底层使用 zset 实现</li>\n</ul>\n<br>\n\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>类似微信摇一摇（计算指定范围类的用户）</li>\n<li>根据距离计算周围的酒店餐馆等</li>\n</ul>\n<br>\n\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><ul>\n<li>geoadd：添加地理位置的坐标。</li>\n<li>geopos：获取地理位置的坐标。</li>\n<li>geodist：计算两个位置之间的距离。</li>\n<li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li>\n<li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li>\n<li>geohash：返回一个或多个位置对象的 geohash 值。</li>\n</ul>\n<br>\n\n<h1 id=\"Redis持久化的取舍和选择\"><a href=\"#Redis持久化的取舍和选择\" class=\"headerlink\" title=\"Redis持久化的取舍和选择\"></a>Redis持久化的取舍和选择</h1><h2 id=\"持久化的作用\"><a href=\"#持久化的作用\" class=\"headerlink\" title=\"持久化的作用\"></a>持久化的作用</h2><ol>\n<li>什么是持久化</li>\n</ol>\n<blockquote>\n<p>redis所有的数据保存在内存中，对数据的更新将异步的保存在磁盘上</p>\n</blockquote>\n<p>内存 =》（持久化）=》磁盘</p>\n<p>内存 《=（恢复）《= 磁盘</p>\n<ol start=\"2\">\n<li>持久化的方式</li>\n</ol>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.urjf6b58j5c.webp\" width=\"60%\" />\n\n<br>\n\n<h2 id=\"RDB（Redis-DataBase）\"><a href=\"#RDB（Redis-DataBase）\" class=\"headerlink\" title=\"RDB（Redis DataBase）\"></a>RDB（Redis DataBase）</h2><h3 id=\"什么是RDB\"><a href=\"#什么是RDB\" class=\"headerlink\" title=\"什么是RDB\"></a>什么是RDB</h3><ul>\n<li>RDB：在不同的时间点，将 redis 存储的数据生成快照并存储到磁盘等介质上</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.xtthna1x3gg.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"RDB触发机制的三种方式\"><a href=\"#RDB触发机制的三种方式\" class=\"headerlink\" title=\"RDB触发机制的三种方式\"></a>RDB触发机制的三种方式</h3><h4 id=\"save（同步）\"><a href=\"#save（同步）\" class=\"headerlink\" title=\"save（同步）\"></a>save（同步）</h4><ul>\n<li>可能会造成阻塞</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1mmseu4fo9og.webp\" width=\"60%\" />\n\n<br>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt;  save</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件</li>\n<li>复杂度：O(n)</li>\n</ul>\n<br>\n\n<h4 id=\"bgsave（异步）\"><a href=\"#bgsave（异步）\" class=\"headerlink\" title=\"bgsave（异步）\"></a>bgsave（异步）</h4><ul>\n<li>客户端执行 <code>bgsave</code> redis会使用linux的 <code>fork()</code> 函数生成一个redis的子进程，由该子进程生成RDB文件</li>\n<li>一般情况下， <code>bgsave</code> 不会阻塞到redis</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nkd5mhwgzcw.webp\" width=\"60%\" />\n\n<br>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; bgsave</span><br><span class=\"line\">Background saving started</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件</li>\n<li>复杂度：O(n)</li>\n</ul>\n<br>\n\n<h4 id=\"save-与-bgsave比较\"><a href=\"#save-与-bgsave比较\" class=\"headerlink\" title=\"save 与 bgsave比较\"></a>save 与 bgsave比较</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7z4y2ta7f2w.webp\" width=\"65%\" />\n\n<br>\n\n<h4 id=\"自动\"><a href=\"#自动\" class=\"headerlink\" title=\"自动\"></a>自动</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.42jf7bw3rfe0.webp\" width=\"70%\" />\n\n<br>\n\n<ul>\n<li>说明：在 60s 中改变了10000 条数据（set，del），会自动做rdb的生成</li>\n</ul>\n<br>\n\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>数据写入量无法控制，生成规则无法控制。如果文件非常大，或很频繁的做这样的操作，会对硬盘造成一定压力</li>\n</ul>\n<br>\n\n<h5 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">############################### 快照  #################################</span></span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Save the DB on disk:保存数据库到磁盘</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  save &lt;秒&gt; &lt;更新&gt;</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  如果指定的秒数和数据库写操作次数都满足了就将数据库保存。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  下面是保存操作的实例：</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  注释：注释掉“save”这一行配置项就可以让保存数据库功能失效。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  你也可以通过增加一个只有一个空字符串的配置项（如下面的实例）来去掉前面的“save”配置。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  save <span class=\"string\">&quot;&quot;</span></span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">save 900 1  </span><br><span class=\"line\">save 300 10  </span><br><span class=\"line\">save 60 10000  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在默认情况下，如果RDB快照持久化操作被激活（至少一个条件被激活）并且持久化操作失败，Redis则会停止接受更新操作。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这样会让用户了解到数据没有被正确的存储到磁盘上。否则没人会注意到这个问题，可能会造成灾难。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果后台存储（持久化）操作进程再次工作，Redis会自动允许更新操作。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">然而，如果你已经恰当的配置了对Redis服务器的监视和备份，你也许想关掉这项功能。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如此一来即使后台保存操作出错,redis也仍然可以继续像平常一样工作。</span>  </span><br><span class=\"line\">stop-writes-on-bgsave-error yes  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">是否在导出.rdb数据库文件的时候采用LZF压缩字符串和对象？</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认情况下总是设置成‘<span class=\"built_in\">yes</span>’， 他看起来是一把双刃剑。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果你想在存储的子进程中节省一些CPU就设置成<span class=\"string\">&#x27;no&#x27;</span>，</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">但是这样如果你的kye/value是可压缩的，你的到处数据接就会很大。</span>  </span><br><span class=\"line\">rdbcompression yes  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">从版本RDB版本5开始，一个CRC64的校验就被放在了文件末尾。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这会让格式更加耐攻击，但是当存储或者加载rbd文件的时候会有一个10%左右的性能下降，</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">所以，为了达到性能的最大化，你可以关掉这个配置项。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">没有校验的RDB文件会有一个0校验位，来告诉加载代码跳过校验检查。</span>  </span><br><span class=\"line\">rdbchecksum yes  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出数据库的文件名称</span>  </span><br><span class=\"line\">dbfilename dump.rdb  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">工作目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出的数据库会被写入这个目录，文件名就是上面<span class=\"string\">&#x27;dbfilename&#x27;</span>配置项指定的文件名。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只增的文件也会在这个目录创建（这句话没看明白）</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意你一定要在这个配置一个工作目录，而不是文件名称。</span>  </span><br><span class=\"line\">dir ./  </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h5 id=\"最佳配置\"><a href=\"#最佳配置\" class=\"headerlink\" title=\"最佳配置\"></a>最佳配置</h5><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23rdcl2poqrk.webp\" width=\"70%\" />\n\n<br>\n\n<ul>\n<li>关闭自动配置</li>\n</ul>\n<h3 id=\"触发机制-不容忽略方式\"><a href=\"#触发机制-不容忽略方式\" class=\"headerlink\" title=\"触发机制 - 不容忽略方式\"></a>触发机制 - 不容忽略方式</h3><ol>\n<li>全量复制（主从复制时候，主会自动生成RDB）</li>\n<li>debug reload（相当于不会将内存清空的重启，也会生成RDB）</li>\n<li>shutdown</li>\n</ol>\n<br>\n\n<h3 id=\"RDB现存问题\"><a href=\"#RDB现存问题\" class=\"headerlink\" title=\"RDB现存问题\"></a>RDB现存问题</h3><ul>\n<li>耗时耗性能</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.b2ax18993q0.webp\" width=\"50%\" />\n\n<br>\n\n<ul>\n<li>不可控，丢失数据</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hq85j7f4ni0.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"AOF（Append-Only-File）\"><a href=\"#AOF（Append-Only-File）\" class=\"headerlink\" title=\"AOF（Append Only File）\"></a>AOF（Append Only File）</h2><ul>\n<li>将 redis 执行过的所有写指令记录下来（它的写入是实时的），在下次 redis 重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了</li>\n</ul>\n<h3 id=\"AOF运行原理\"><a href=\"#AOF运行原理\" class=\"headerlink\" title=\"AOF运行原理\"></a>AOF运行原理</h3><ul>\n<li>创建</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i410l2830jk.webp\" width=\"50%\" />\n\n<br>\n\n<ul>\n<li>恢复</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2ode8n5q6b80.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"AOF的三种策略\"><a href=\"#AOF的三种策略\" class=\"headerlink\" title=\"AOF的三种策略\"></a>AOF的三种策略</h3><h4 id=\"always\"><a href=\"#always\" class=\"headerlink\" title=\"always\"></a>always</h4><ul>\n<li>写入数据不会丢失</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nz1bf5i1ojk.webp\" width=\"50%\" />\n\n<br>\n\n<h4 id=\"everysec\"><a href=\"#everysec\" class=\"headerlink\" title=\"everysec\"></a>everysec</h4><ul>\n<li>是redis的配置默认值</li>\n<li>可能会丢失1s的数据</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5uvzghtr78s0.webp\" width=\"50%\" />\n\n<br>\n\n<h4 id=\"no\"><a href=\"#no\" class=\"headerlink\" title=\"no\"></a>no</h4><ul>\n<li>根据操作系统决定</li>\n</ul>\n<br>\n\n<h3 id=\"AOF的三种策略对比\"><a href=\"#AOF的三种策略对比\" class=\"headerlink\" title=\"AOF的三种策略对比\"></a>AOF的三种策略对比</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7ezkvv0o0bg0.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><ul>\n<li>减少磁盘占用量</li>\n<li>加速恢复速度</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3hr6crymmo0.webp\" width=\"50%\" />\n\n<br>\n\n<h4 id=\"AOF重写的两种方式\"><a href=\"#AOF重写的两种方式\" class=\"headerlink\" title=\"AOF重写的两种方式\"></a>AOF重写的两种方式</h4><ul>\n<li>BGREWRITEAOF （类似rdb的bgsave）<ul>\n<li>将Redis中的数据进行回溯， 回溯成AOF文件</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5j30ijjpor40.webp\" width=\"50%\" />\n\n<br>\n\n<ul>\n<li>AOF重写配置</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.72n439aom900.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5wl4pwfy7ds0.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yskrqzxtakw.webp\" width=\"50%\" />\n\n<br>\n\n<h4 id=\"AOF重写流程\"><a href=\"#AOF重写流程\" class=\"headerlink\" title=\"AOF重写流程\"></a>AOF重写流程</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2b1z2py9ols0.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"RDB与AOF的抉择\"><a href=\"#RDB与AOF的抉择\" class=\"headerlink\" title=\"RDB与AOF的抉择\"></a>RDB与AOF的抉择</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2got5zb1qs20.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"RDB最佳策略\"><a href=\"#RDB最佳策略\" class=\"headerlink\" title=\"RDB最佳策略\"></a>RDB最佳策略</h3><ul>\n<li>RDB</li>\n</ul>\n<ol>\n<li>”关闭“</li>\n<li>集中管理</li>\n<li>主从，从开</li>\n</ol>\n<h3 id=\"AOF最佳策略\"><a href=\"#AOF最佳策略\" class=\"headerlink\" title=\"AOF最佳策略\"></a>AOF最佳策略</h3><ol>\n<li>”开“：缓存和存储</li>\n<li>AOF集中管理</li>\n<li>everysec</li>\n</ol>\n<h3 id=\"最佳策略\"><a href=\"#最佳策略\" class=\"headerlink\" title=\"最佳策略\"></a>最佳策略</h3><ol>\n<li>小分片</li>\n<li>缓存或存储</li>\n<li>监控（硬盘、内存、负载、网络）</li>\n<li>足够的内存</li>\n</ol>\n<br>\n\n<h1 id=\"常见的持久化开发运维问题\"><a href=\"#常见的持久化开发运维问题\" class=\"headerlink\" title=\"常见的持久化开发运维问题\"></a>常见的持久化开发运维问题</h1><h2 id=\"fork操作\"><a href=\"#fork操作\" class=\"headerlink\" title=\"fork操作\"></a>fork操作</h2><ul>\n<li></li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ofn5wyto2w0.webp\" width=\"50%\" />\n\n<br>\n\n<ul>\n<li>fork改善</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.25vvl1tdwgu8.webp\" width=\"50%\" />\n\n\n\n<br>\n\n<h2 id=\"子进程开销和优化\"><a href=\"#子进程开销和优化\" class=\"headerlink\" title=\"子进程开销和优化\"></a>子进程开销和优化</h2><ul>\n<li></li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5w40mtg9s0.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"硬盘优化\"><a href=\"#硬盘优化\" class=\"headerlink\" title=\"硬盘优化\"></a>硬盘优化</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lnrmjt1hw40.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"AOF追加阻塞\"><a href=\"#AOF追加阻塞\" class=\"headerlink\" title=\"AOF追加阻塞\"></a>AOF追加阻塞</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v89xx5ytl00.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"AOF阻塞定位\"><a href=\"#AOF阻塞定位\" class=\"headerlink\" title=\"AOF阻塞定位\"></a>AOF阻塞定位</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3t06d4zqkpo0.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qdujdqyup60.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.60mk8wrt4lk0.webp\" width=\"50%\" />\n\n<br>\n\n<h1 id=\"Redis复制的原理与优化\"><a href=\"#Redis复制的原理与优化\" class=\"headerlink\" title=\"Redis复制的原理与优化\"></a>Redis复制的原理与优化</h1><h2 id=\"什么是主从复制\"><a href=\"#什么是主从复制\" class=\"headerlink\" title=\"什么是主从复制\"></a>什么是主从复制</h2><ul>\n<li>一个master可以有多个slave，但一个slave只能有一个master</li>\n<li>数据流向必须是单向的。master -&gt; slave</li>\n<li>变成从节点前会把数据清楚</li>\n</ul>\n<h2 id=\"主从复制作用\"><a href=\"#主从复制作用\" class=\"headerlink\" title=\"主从复制作用\"></a>主从复制作用</h2><ul>\n<li>一个数据提供了多个副本（成为高可用、分布式的基础）</li>\n<li>扩展读性能（读写分离）</li>\n</ul>\n<h2 id=\"主从复制实现\"><a href=\"#主从复制实现\" class=\"headerlink\" title=\"主从复制实现\"></a>主从复制实现</h2><h3 id=\"slaveof-命令\"><a href=\"#slaveof-命令\" class=\"headerlink\" title=\"slaveof 命令\"></a>slaveof 命令</h3><ul>\n<li>复制（slaveof 这个命令是异步的）</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pa32y5jfz80.webp\" width=\"60%\"/>\n\n<br>\n\n<ul>\n<li>取消复制</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7jnus8oq23k0.webp\" width=\"60%\"/>\n\n<br>\n\n<h3 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slaveof ip port</span><br><span class=\"line\">slave-read-only yes</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主从复制-命令和配置的比较\"><a href=\"#主从复制-命令和配置的比较\" class=\"headerlink\" title=\"主从复制-命令和配置的比较\"></a>主从复制-命令和配置的比较</h3><table>\n<thead>\n<tr>\n<th align=\"center\">方式</th>\n<th align=\"center\">命令</th>\n<th align=\"center\">配置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">优点</td>\n<td align=\"center\">无需重启</td>\n<td align=\"center\">统一配置</td>\n</tr>\n<tr>\n<td align=\"center\">缺点</td>\n<td align=\"center\">不便于管理</td>\n<td align=\"center\">需要管理</td>\n</tr>\n</tbody></table>\n<h3 id=\"主从配置操作\"><a href=\"#主从配置操作\" class=\"headerlink\" title=\"主从配置操作\"></a>主从配置操作</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info replication</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"主从复制原理\"><a href=\"#主从复制原理\" class=\"headerlink\" title=\"主从复制原理\"></a>主从复制原理</h2><h3 id=\"全量复制过程原理\"><a href=\"#全量复制过程原理\" class=\"headerlink\" title=\"全量复制过程原理\"></a>全量复制过程原理</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.312gr8tguvm0.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"全量复制开销\"><a href=\"#全量复制开销\" class=\"headerlink\" title=\"全量复制开销\"></a>全量复制开销</h3><ol>\n<li>bgsave时间</li>\n<li>RDB文件网络传输时间</li>\n<li>从节点清空数据时间</li>\n<li>从节点加载RDB时间</li>\n<li>可能的AOF重写时间</li>\n</ol>\n<h3 id=\"部分复制过程原理\"><a href=\"#部分复制过程原理\" class=\"headerlink\" title=\"部分复制过程原理\"></a>部分复制过程原理</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3vhs1nc1dzi0.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"主从复制中的故障处理与常见问题\"><a href=\"#主从复制中的故障处理与常见问题\" class=\"headerlink\" title=\"主从复制中的故障处理与常见问题\"></a>主从复制中的故障处理与常见问题</h2><ul>\n<li>故障不可避免</li>\n<li>自动故障转移</li>\n<li>故障分为master故障和slave故障</li>\n</ul>\n<h3 id=\"读写分离问题\"><a href=\"#读写分离问题\" class=\"headerlink\" title=\"读写分离问题\"></a>读写分离问题</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.a738ve0k3y8.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"配置不一致\"><a href=\"#配置不一致\" class=\"headerlink\" title=\"配置不一致\"></a>配置不一致</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.nl2kmy53a0w.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"规避全量复制\"><a href=\"#规避全量复制\" class=\"headerlink\" title=\"规避全量复制\"></a>规避全量复制</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6pe5jkk3nm80.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"规避复制风暴\"><a href=\"#规避复制风暴\" class=\"headerlink\" title=\"规避复制风暴\"></a>规避复制风暴</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.361o49e7h2i0.webp\" width=\"50%\" />\n\n<br>\n\n<h1 id=\"Redis-Sentinel\"><a href=\"#Redis-Sentinel\" class=\"headerlink\" title=\"Redis Sentinel\"></a>Redis Sentinel</h1><h1 id=\"第9章-初识Redis-Cluster\"><a href=\"#第9章-初识Redis-Cluster\" class=\"headerlink\" title=\"第9章 初识Redis Cluster\"></a>第9章 初识Redis Cluster</h1><br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>jedis 需要熟悉,有些代码还要手动过一遍才是</li>\n<li>生产环境普通用户后台启动redis</li>\n<li>部分图片内容是否应该转化为代码呢？</li>\n<li>bitmap不太懂，还需要深入理解。还包括 hyperloglog、geo</li>\n<li>RDB和AOF的恢复原理和过程是怎么样子的？</li>\n<li>主从复制操作虽然简单，但是最好是实践一下</li>\n</ol>\n</blockquote>\n<img src=\"\" width=\"50%\" />\n\n<br>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis初识\"><a href=\"#Redis初识\" class=\"headerlink\" title=\"Redis初识\"></a>Redis初识</h1><h2 id=\"Redis是什么\"><a href=\"#Redis是什么\" class=\"headerlink\" title=\"Redis是什么\"></a>Redis是什么</h2><ul>\n<li>开源</li>\n<li>基于键值的存储服务系统</li>\n<li>多种数据结构</li>\n<li>高性能、功能丰富</li>\n</ul>\n<br>\n\n<h2 id=\"Redis的特性\"><a href=\"#Redis的特性\" class=\"headerlink\" title=\"Redis的特性\"></a>Redis的特性</h2><ul>\n<li>速度快（10w OPS）<ul>\n<li>数据存储在内存（速度快的主要原因）</li>\n<li>使用C语言编写</li>\n<li>单线程</li>\n</ul>\n</li>\n<li>持久化<ul>\n<li>Redis的所有数据保存在内存中，对数据的更新异步的保存在磁盘上</li>\n</ul>\n</li>\n<li>多种数据结构<ul>\n<li>5中主要类型</li>\n</ul>\n</li>\n<li>支持多种编程语言<ul>\n<li>主流编程语言都支持Redis</li>\n</ul>\n</li>\n<li>功能丰富<ul>\n<li>发布订阅</li>\n<li>事物</li>\n<li>lua脚本</li>\n<li>pipeline</li>\n</ul>\n</li>\n<li>简单<ul>\n<li>早期代码23000行</li>\n<li>不依赖外部库</li>\n<li>单线程模型</li>\n</ul>\n</li>\n<li>主从复制</li>\n<li>高可用、分布式</li>\n</ul>\n<br>\n\n<h2 id=\"Redis典型使用场景\"><a href=\"#Redis典型使用场景\" class=\"headerlink\" title=\"Redis典型使用场景\"></a>Redis典型使用场景</h2><ul>\n<li>缓存系统</li>\n<li>计数器</li>\n<li>消息队列系统</li>\n<li>排行榜</li>\n<li>社交网络</li>\n<li>事实系统</li>\n</ul>\n<br>\n\n<h2 id=\"Redis安装\"><a href=\"#Redis安装\" class=\"headerlink\" title=\"Redis安装\"></a>Redis安装</h2><ul>\n<li>安装前环境准备</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ kernel-devel</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cd /install</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost install]# wget https://github.com/redis/redis/archive/7.0.4.tar.gz</span><br><span class=\"line\">[root@localhost install]# tar -zxvf redis-7.0.4.tar.gz</span><br><span class=\"line\">[root@localhost install]# mv redis-7.0.4 /usr/local/</span><br><span class=\"line\">[root@localhost install]# cd /usr/local/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost local]# ln -s redis-7.0.4/ redis</span><br><span class=\"line\">[root@localhost local]# cd redis</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接 make 会失败报错 原因：建立redis时系统默认使用jemalloc作为内存管理工具，但是当前无可用jemalloc，切换为标准内存管理工具libc问题解决</span></span><br><span class=\"line\">[root@localhost redis]# make MALLOC=libc</span><br><span class=\"line\">[root@localhost redis]# make install</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n<h2 id=\"Redis三种启动方式\"><a href=\"#Redis三种启动方式\" class=\"headerlink\" title=\"Redis三种启动方式\"></a>Redis三种启动方式</h2><ul>\n<li>最简启动</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用默认配置启动</span></span><br><span class=\"line\">redis-server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动态参数启动</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --port 6380</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置文件启动（推荐）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server configPath</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动方式比较</li>\n</ul>\n<blockquote>\n<p>生产环境选择配置启动</p>\n<p>单机多实例配置文件可以用端口区分开来</p>\n</blockquote>\n<br>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef |grep redis</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -antpl |grep redis</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli -h [ip] -p [port] ping </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Redis可执行文件说明\"><a href=\"#Redis可执行文件说明\" class=\"headerlink\" title=\"Redis可执行文件说明\"></a>Redis可执行文件说明</h2><ul>\n<li>redis-server    -    redis服务器</li>\n<li>redis-cli    -    redis命令行客户端</li>\n<li>redis-benchmark    -    redis性能测试工具</li>\n<li>redis-check-aof    -    AOF文件修复工具</li>\n<li>redis-check-dump    -    RDB文件检查工具</li>\n<li>redis-sentinel    -    Sentinel服务器（2.8之后）</li>\n</ul>\n<br>\n\n<h2 id=\"Redis常用配置\"><a href=\"#Redis常用配置\" class=\"headerlink\" title=\"Redis常用配置\"></a>Redis常用配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">是否以守护进程方式启动 [<span class=\"built_in\">yes</span>|no]</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">redis 对外端口</span></span><br><span class=\"line\">port 6380</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置日志名称</span></span><br><span class=\"line\">logfile &quot;6380.log&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">redis 工作目录（包括日志文件、持久化文件存储位置）</span></span><br><span class=\"line\">dir &quot;/usr/local/redis/data/&quot;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"API的理解和使用\"><a href=\"#API的理解和使用\" class=\"headerlink\" title=\"API的理解和使用\"></a>API的理解和使用</h1><h2 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">遍历所有的key，可以使用通配符</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复杂度 O(n) ，不建议在生产环境使用，除非数量特别小</span></span><br><span class=\"line\">keys *</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">内置的对键值 统计的计数器</span></span><br><span class=\"line\">dbsize</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查key是否存在，返回 1 或 0</span></span><br><span class=\"line\">exists</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除指定 key-value，返回 1 或 0</span></span><br><span class=\"line\">del key [key...]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置 key 在 seconds 秒后过期</span></span><br><span class=\"line\">expire key seconds</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询key 还有多长时间过期，不过期则返回 -1</span></span><br><span class=\"line\">ttl key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">去除过期时间，</span></span><br><span class=\"line\">persist key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不存在则返回 none</span></span><br><span class=\"line\">type key</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"数据结构和内部编码\"><a href=\"#数据结构和内部编码\" class=\"headerlink\" title=\"数据结构和内部编码\"></a>数据结构和内部编码</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3scu9pvrtk80.webp\" width=\"75%\" />\n\n<br>\n\n<ul>\n<li>redisObject</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69a05a18h8s0.webp\" width=\"75%\"/>\n\n<br>\n\n<h2 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h2><h3 id=\"单线程为什么这么快\"><a href=\"#单线程为什么这么快\" class=\"headerlink\" title=\"单线程为什么这么快\"></a>单线程为什么这么快</h3><ul>\n<li>纯内存（主要原因）</li>\n<li>阻塞IO</li>\n<li>避免线程切换和竞态消耗</li>\n</ul>\n<br>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li><p>一次只运行一条命令</p>\n</li>\n<li><p>拒绝长（慢）命命令：<code>kesy</code> <code>flushall</code> <code>flushdb</code> <code>slow lua script</code> <code>mutil/exec</code> <code>operate big value(collection)</code></p>\n</li>\n<li><p>其实不是单线程：<code>fysnc file descriptor</code> <code>close file descriptor</code></p>\n</li>\n</ol>\n<br>\n\n<h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h2><h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><ul>\n<li>可以是真的字符串，同时也可以是数字，二进制数字等等。大小限制 512MB</li>\n</ul>\n<img src =\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c36c4ac53ae6df147284b21e0fa921.lo8tp31mfhs.webp\" width=\"70%\" />\n\n<br>\n\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><ul>\n<li>缓存</li>\n<li>计数器</li>\n<li>分布式锁</li>\n<li>……</li>\n</ul>\n<br>\n\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">举例</th>\n<th align=\"center\">时间复杂度</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">set</td>\n<td align=\"center\">set hello word</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">不管key是否存在，都设置。成功返回ok</td>\n</tr>\n<tr>\n<td align=\"center\">setnx</td>\n<td align=\"center\">setnx k v</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">key不存在才设置</td>\n</tr>\n<tr>\n<td align=\"center\">set xx</td>\n<td align=\"center\">set k v xx</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">key存在才设置。不存在返回nil</td>\n</tr>\n<tr>\n<td align=\"center\">mset</td>\n<td align=\"center\">mset k1 v1 k2 v2</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">批量设置key-value，原子操作</td>\n</tr>\n<tr>\n<td align=\"center\">del</td>\n<td align=\"center\">del hello</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">成功返回1,失败返回0</td>\n</tr>\n<tr>\n<td align=\"center\">get</td>\n<td align=\"center\">get hello</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">成功返回的value，失败返回nil</td>\n</tr>\n<tr>\n<td align=\"center\">mget</td>\n<td align=\"center\">mget k1 k2</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">批量获取key-value，原子操作</td>\n</tr>\n<tr>\n<td align=\"center\">incr</td>\n<td align=\"center\">incr counter</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">自增1，并返回自增后的value值。如果key不存在，自增后get(key) = 1</td>\n</tr>\n<tr>\n<td align=\"center\">decr</td>\n<td align=\"center\">decr counter</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">自减1，并返回自减后的value值。如果key不存在，自减后get(key) = -1</td>\n</tr>\n<tr>\n<td align=\"center\">incrby</td>\n<td align=\"center\">incrby view k</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">自增k，并返回自增k后的value值。如果key不存在，自增后get(key) = k</td>\n</tr>\n<tr>\n<td align=\"center\">decrby</td>\n<td align=\"center\">decrby view k</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">自减k，并返回自减后的value值。如果key不存在，自减后get(key) = -k</td>\n</tr>\n<tr>\n<td align=\"center\">getset</td>\n<td align=\"center\">getset k newvalue</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">set key newValue，并返回旧的value</td>\n</tr>\n<tr>\n<td align=\"center\">apend</td>\n<td align=\"center\">apend k v</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">将value追加到旧的value</td>\n</tr>\n<tr>\n<td align=\"center\">strlen</td>\n<td align=\"center\">strlen k</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">返回字符串的长度[字节]（utf-8 中文占 2个字节）</td>\n</tr>\n<tr>\n<td align=\"center\">incrbyfloat</td>\n<td align=\"center\">incrbyfloat k v</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">增加指定的浮点数</td>\n</tr>\n<tr>\n<td align=\"center\">getrange</td>\n<td align=\"center\">getrange k start end</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">获取字符串指定下标所有的值</td>\n</tr>\n<tr>\n<td align=\"center\">setrange</td>\n<td align=\"center\">setrange k index value</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">设置指定下标对应的值</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h3><ol>\n<li>记录网站每个用户的个人主页访问量</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">单线程：无竞争（并发不会出现计错数的情况）</span></span><br><span class=\"line\">incr userId:pageView</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>缓存视频的基本信息（数据源在MySQL中）</li>\n</ol>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2nspuoc7ly60.webp\" width=\"70%\" />\n\n<br>\n\n<ol start=\"3\">\n<li>分布式id生成器</li>\n</ol>\n<br>\n\n<h3 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1d121aa9afdb06c7451e0fb8bb2d560.kias448eqho.webp\" width=\"70%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/4c1ea9bb24f88ec70a3aacc637a9183.4xykrj7thuw0.webp\" width=\"70%\" />\n\n\n\n\n\n\n\n<h2 id=\"hash（哈希）\"><a href=\"#hash（哈希）\" class=\"headerlink\" title=\"hash（哈希）\"></a>hash（哈希）</h2><br>\n\n<h1 id=\"Redis客户端\"><a href=\"#Redis客户端\" class=\"headerlink\" title=\"Redis客户端\"></a>Redis客户端</h1><h2 id=\"Java客户端Jedis\"><a href=\"#Java客户端Jedis\" class=\"headerlink\" title=\"Java客户端Jedis\"></a>Java客户端Jedis</h2><h3 id=\"Jedis简单使用\"><a href=\"#Jedis简单使用\" class=\"headerlink\" title=\"Jedis简单使用\"></a>Jedis简单使用</h3><ul>\n<li>maven依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Jedis直连</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1l6p9hnls4rk.webp\" width=\"70%\"/>\n\n<br>\n\n<h3 id=\"JedisPool简单使用\"><a href=\"#JedisPool简单使用\" class=\"headerlink\" title=\"JedisPool简单使用\"></a>JedisPool简单使用</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4ehexcty0j20.webp\" width = \"70%\"/>\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3r9cudbxdi00.webp\" width = \"70%\"/>\n\n<br>\n\n<h3 id=\"Jedis-与-JedisPool比较\"><a href=\"#Jedis-与-JedisPool比较\" class=\"headerlink\" title=\"Jedis 与 JedisPool比较\"></a>Jedis 与 JedisPool比较</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/97b459332ea53d7e42b90bd2743dcda.396pfset03e0.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/7e5d97f719abbfe9b363126e682f86d.3g21qh3ltu20.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/41e863e25d7ae1dc0c3cebe8444b9c5.2tj6g97vyck.webp\" width=\"60%\" />\n\n<br>\n\n\n\n\n\n<h3 id=\"Jedis配置优化\"><a href=\"#Jedis配置优化\" class=\"headerlink\" title=\"Jedis配置优化\"></a>Jedis配置优化</h3><h4 id=\"pool配置-资源数控制\"><a href=\"#pool配置-资源数控制\" class=\"headerlink\" title=\"pool配置 - 资源数控制\"></a>pool配置 - 资源数控制</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.21oqgp1jyxnk.webp\" width=\"60%\" />\n\n<br>\n\n<h4 id=\"pool配置-借还参数\"><a href=\"#pool配置-借还参数\" class=\"headerlink\" title=\"pool配置 - 借还参数\"></a>pool配置 - 借还参数</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7cwnd55qd1s0.webp\" width=\"70%\" />\n\n<br>\n\n<h4 id=\"适合的-maxTotal\"><a href=\"#适合的-maxTotal\" class=\"headerlink\" title=\"适合的 maxTotal\"></a>适合的 maxTotal</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2mma31ou5nw0.webp\" width=\"60%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6sejm8evfwc.webp\" width=\"60%\" />\n\n<br>\n\n<h4 id=\"适合的maxIdle和minIdle\"><a href=\"#适合的maxIdle和minIdle\" class=\"headerlink\" title=\"适合的maxIdle和minIdle\"></a>适合的maxIdle和minIdle</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6lhcm72l9bo0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"常见问题和解决思路\"><a href=\"#常见问题和解决思路\" class=\"headerlink\" title=\"常见问题和解决思路\"></a>常见问题和解决思路</h3><ul>\n<li>常见问题</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.75d32k2l47g0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li>解决思路</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41af9urqt6a0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li>错误示例</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.31pwe9jqbig0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li>推荐写法</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69xc8p0s24o0.webp\" width=\"60%\" />\n\n<br>\n\n<h1 id=\"Redis其他功能\"><a href=\"#Redis其他功能\" class=\"headerlink\" title=\"Redis其他功能\"></a>Redis其他功能</h1><h2 id=\"slowlog（慢查询）\"><a href=\"#slowlog（慢查询）\" class=\"headerlink\" title=\"slowlog（慢查询）\"></a>slowlog（慢查询）</h2><h3 id=\"命令生命周期\"><a href=\"#命令生命周期\" class=\"headerlink\" title=\"命令生命周期\"></a>命令生命周期</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.76jbqyv85l80.webp\" width=\"70%\" />\n\n<br>\n\n<ul>\n<li><strong>（1）慢查询发生在第3阶段</strong></li>\n<li><strong>（2）客户端超时不一定是慢查询，但慢查询是客户端超时的一个可能因素</strong></li>\n</ul>\n<br>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"slowlog-max-len\"><a href=\"#slowlog-max-len\" class=\"headerlink\" title=\"slowlog-max-len\"></a>slowlog-max-len</h4><ol start=\"0\">\n<li><p><code>slowlog-max-len</code> 表示慢查询队列长度</p>\n</li>\n<li><p>慢查询是一个先进先出的队列；如果在第3步执行过程中，被列入慢查询的范围内，就会进入一个队列（用redis的列表实现的）</p>\n</li>\n<li><p>慢查询队列是固定长度的</p>\n</li>\n<li><p>慢查询队列数据保存在内存中</p>\n</li>\n</ol>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.44yrctjcttc0.webp\" width=\"70%\" />\n\n<br>\n\n<h4 id=\"slowlog-log-slower-than\"><a href=\"#slowlog-log-slower-than\" class=\"headerlink\" title=\"slowlog-log-slower-than\"></a>slowlog-log-slower-than</h4><ol>\n<li><code>slowlog-log-slower-than</code> 表示慢查询命令执行时间阈值（单位：微秒，1ms=1000微秒），超过阈值会被加入慢查询队列中</li>\n<li><code>slowlog-log-slower-than = 0</code> ，记录所有命令</li>\n<li><code>slowlog-log-slower-than &lt; 0</code> ，不记录任何命令</li>\n</ol>\n<br>\n\n<h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; config get slowlog-max-len</span><br><span class=\"line\">1) &quot;slowlog-max-len&quot;</span><br><span class=\"line\">2) &quot;128&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10000微秒 =》 10ms</span></span><br><span class=\"line\">127.0.0.1:6380&gt; config get slowlog-log-slower-than</span><br><span class=\"line\">1) &quot;slowlog-log-slower-than&quot;</span><br><span class=\"line\">2) &quot;10000&quot;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"配置方法\"><a href=\"#配置方法\" class=\"headerlink\" title=\"配置方法\"></a>配置方法</h4><ol>\n<li><p>方法一：修改配置文件重启（一般在第一次启动redis前进行配置。但如果redis正在运行中，不推荐此方式）</p>\n</li>\n<li><p>方法二：动态配置</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config set slowlog-max-len 1000</span><br><span class=\"line\"></span><br><span class=\"line\">config set slowlog-log-slower-than 1000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">操作示例</span></span><br><span class=\"line\">127.0.0.1:6380&gt; config set slowlog-max-len 1000</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; config set slowlog-log-slower-than 1000</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; config get slowlog-max-len</span><br><span class=\"line\">1) &quot;slowlog-max-len&quot;</span><br><span class=\"line\">2) &quot;1000&quot;</span><br><span class=\"line\">127.0.0.1:6380&gt; config get slowlog-log-slower-than</span><br><span class=\"line\">1) &quot;slowlog-log-slower-than&quot;</span><br><span class=\"line\">2) &quot;1000&quot;</span><br><span class=\"line\">127.0.0.1:6380&gt;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"慢查询命令\"><a href=\"#慢查询命令\" class=\"headerlink\" title=\"慢查询命令\"></a>慢查询命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">慢查询命令</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">slowlog get [n]</td>\n<td align=\"center\">获取慢查询队列指定条数</td>\n</tr>\n<tr>\n<td align=\"center\">slowlog len</td>\n<td align=\"center\">获取慢查询队列长度</td>\n</tr>\n<tr>\n<td align=\"center\">slowlog reset</td>\n<td align=\"center\">清空慢查询队列</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"运维经验\"><a href=\"#运维经验\" class=\"headerlink\" title=\"运维经验\"></a>运维经验</h3><ol>\n<li>slowlog-max-len不要设置过大。默认10ms，通常设置1ms（实际情况要根据QPS来决定阈值大小，有可能1ms就已经对我们的QPS产生影响了）</li>\n<li>slowlog-log-slower-than不要设置过小，通常设置1000左右</li>\n<li>理解命令生命周期，理解慢查询处于命令生命周期的位置。便于我们排错和优化（慢查询、阻塞、网络都可能成为客户端超时的原因）</li>\n<li><strong>定期持久化查询（因为慢查询是存在内存中的，且当慢查询数量逐步增多，早前的慢查询就会丢掉。做好持久化，可以分析历史的慢查询问题）。可以通过其它手段或开源软件实现这个功能</strong></li>\n</ol>\n<br>\n\n<h2 id=\"pipeline（流水线）\"><a href=\"#pipeline（流水线）\" class=\"headerlink\" title=\"pipeline（流水线）\"></a>pipeline（流水线）</h2><h3 id=\"网络命令通信模型\"><a href=\"#网络命令通信模型\" class=\"headerlink\" title=\"网络命令通信模型\"></a>网络命令通信模型</h3><h4 id=\"1次网络命令通信模型\"><a href=\"#1次网络命令通信模型\" class=\"headerlink\" title=\"1次网络命令通信模型\"></a>1次网络命令通信模型</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.10peiok08sk0.webp\" width=\"60%\" />\n\n<br>\n\n<h4 id=\"批量网络命令通信模型\"><a href=\"#批量网络命令通信模型\" class=\"headerlink\" title=\"批量网络命令通信模型\"></a>批量网络命令通信模型</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yo8sxod81o0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"什么是pipeline（流水线）\"><a href=\"#什么是pipeline（流水线）\" class=\"headerlink\" title=\"什么是pipeline（流水线）\"></a>什么是pipeline（流水线）</h3><ul>\n<li>我们知道redis的命令执行是很快的，但是网络时间却不一定。使用pipeline可以帮我们节约大量网络时间</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.v0w62a1vlc0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"pipeline的作用\"><a href=\"#pipeline的作用\" class=\"headerlink\" title=\"pipeline的作用\"></a>pipeline的作用</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">N个命令操作</th>\n<th align=\"center\">1次pipeline（N个命令）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">时间</td>\n<td align=\"center\">n次网络+n次命令</td>\n<td align=\"center\">1次网络时间+n次命令</td>\n</tr>\n<tr>\n<td align=\"center\">数量</td>\n<td align=\"center\">1条命令</td>\n<td align=\"center\">n条命令</td>\n</tr>\n</tbody></table>\n<ul>\n<li>注意</li>\n</ul>\n<ol>\n<li>Redis的命令时间是微秒级别</li>\n<li>pipeline每次条数要控制（网络）</li>\n</ol>\n<ul>\n<li>举例</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2sv2n6wunz20.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"pipeline的jedis实现\"><a href=\"#pipeline的jedis实现\" class=\"headerlink\" title=\"pipeline的jedis实现\"></a>pipeline的jedis实现</h3><ul>\n<li>添加maven依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>没有pipe-line</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2cxbniglxcys.webp\" width=\"70%\" />\n\n<br>\n\n<ul>\n<li>使用pipeline</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41hpky36m4a0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"pipeline与mget-mset操作的对比\"><a href=\"#pipeline与mget-mset操作的对比\" class=\"headerlink\" title=\"pipeline与mget/mset操作的对比\"></a>pipeline与mget/mset操作的对比</h3><ul>\n<li>原生M操作</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6m3lpwqzxqs0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li>pipeline</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7b0lz2zro400.webp\" width=\"60%\" />\n\n<br>\n\n<p><strong>pipeline命令可拆分</strong></p>\n<br>\n\n<h3 id=\"pipeline使用建议\"><a href=\"#pipeline使用建议\" class=\"headerlink\" title=\"pipeline使用建议\"></a>pipeline使用建议</h3><ul>\n<li><strong>注意每次pipeline携带数量</strong></li>\n<li><strong>pipeline每次只能作用在一个Redis节点上</strong></li>\n<li><strong>注意pipeline与M操作的区别</strong></li>\n</ul>\n<h2 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h2><h3 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h3><ul>\n<li>发布者（publisher）</li>\n<li>订阅者（subscriber）</li>\n<li>频道（channel）</li>\n</ul>\n<br>\n\n<h3 id=\"发布订阅模型\"><a href=\"#发布订阅模型\" class=\"headerlink\" title=\"发布订阅模型\"></a>发布订阅模型</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5skel4tjk0.webp\" width=\"60%\" />\n\n<br>\n\n<ul>\n<li><strong>新的订阅者订阅了一个频道，是无法收到之前的消息</strong>（因为无法做消息堆积，因为redis不是一个真正的消息队列这样一个工具）</li>\n</ul>\n<br>\n\n<h3 id=\"发布订阅API\"><a href=\"#发布订阅API\" class=\"headerlink\" title=\"发布订阅API\"></a>发布订阅API</h3><h4 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">向频道发布消息</span></span><br><span class=\"line\">PUBLISH [channel_name] [message]</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6380&gt; publish sohu:tv &quot;hello world&quot;</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; publish sohu:auto &quot;taxi&quot;</span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"subscribe\"><a href=\"#subscribe\" class=\"headerlink\" title=\"subscribe\"></a>subscribe</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">订阅一个或多个频道</span></span><br><span class=\"line\">SUBSCRIBE [channel_name]...</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6380&gt; subscribe sohu:tv</span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) &quot;subscribe&quot;</span><br><span class=\"line\">2) &quot;sohu:tv&quot;</span><br><span class=\"line\">3) (integer) 1</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"unsubscribe\"><a href=\"#unsubscribe\" class=\"headerlink\" title=\"unsubscribe\"></a>unsubscribe</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">订阅一个或多个频道</span></span><br><span class=\"line\">UNSUBSCRIBE [channel_name]...</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6380&gt; UNSUBSCRIBE sohu:tv</span><br><span class=\"line\">1) &quot;unsubscribe&quot;</span><br><span class=\"line\">2) &quot;sohu:tv&quot;</span><br><span class=\"line\">3) (integer) 0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"其它API\"><a href=\"#其它API\" class=\"headerlink\" title=\"其它API\"></a>其它API</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.j7q4w7w0f5c.webp\"  width=\"65%\"/>\n\n\n\n<br>\n\n<h4 id=\"发布订阅与消息队列\"><a href=\"#发布订阅与消息队列\" class=\"headerlink\" title=\"发布订阅与消息队列\"></a>发布订阅与消息队列</h4><ul>\n<li>Redis可以实现消息队列，消息队列是抢的模式</li>\n<li>注意二者的区别与使用场景</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.33zfet508q00.webp\" width=\"65%\" />\n\n<br>\n\n<h2 id=\"BItmap（位图）\"><a href=\"#BItmap（位图）\" class=\"headerlink\" title=\"BItmap（位图）\"></a>BItmap（位图）</h2><h2 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h2><ul>\n<li>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的（基于HyperLogLog算法：极小空间完成独立数量统计）</li>\n<li>本质还是字符串</li>\n</ul>\n<br>\n\n<h3 id=\"API（命令）\"><a href=\"#API（命令）\" class=\"headerlink\" title=\"API（命令）\"></a>API（命令）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Pfadd 命令将所有元素参数添加到 HyperLogLog 数据结构中</span></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD key element [element ...]</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFCOUNT mykey</span><br><span class=\"line\">(integer) 10</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Pfcount 命令返回给定 HyperLogLog 的基数估算值</span></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFCOUNT key [key ...]</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD hll foo bar zap</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD hll zap zap zap</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD hll foo bar</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFCOUNT hll</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD some-other-hll 1 2 3</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFCOUNT hll some-other-hll</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> PFMERGE 命令将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的</span></span><br><span class=\"line\">PFMERGE destkey sourcekey [sourcekey ...]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\">PFADD hll1 foo bar zap a</span></span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\">PFADD hll2 a b c foo</span></span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\">PFMERGE hll3 hll1 hll2</span></span><br><span class=\"line\">&quot;OK&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\">PFCOUNT hll3</span></span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\"><span class=\"meta prompt_\">redis&gt; </span><span class=\"language-bash\"> </span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"示例（百万独立用户-内存消耗）\"><a href=\"#示例（百万独立用户-内存消耗）\" class=\"headerlink\" title=\"示例（百万独立用户-内存消耗）\"></a>示例（百万独立用户-内存消耗）</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.540yx2nmmgw0.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"使用经验\"><a href=\"#使用经验\" class=\"headerlink\" title=\"使用经验\"></a>使用经验</h3><ul>\n<li>是否能容忍错误？（错误率：0.81%）</li>\n<li>是否需要单条数据？</li>\n</ul>\n<br>\n\n<h1 id=\"GEO\"><a href=\"#GEO\" class=\"headerlink\" title=\"GEO\"></a>GEO</h1><ul>\n<li>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作（存储经纬度，计算两地距离，范围计算等）</li>\n<li>底层使用 zset 实现</li>\n</ul>\n<br>\n\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>类似微信摇一摇（计算指定范围类的用户）</li>\n<li>根据距离计算周围的酒店餐馆等</li>\n</ul>\n<br>\n\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><ul>\n<li>geoadd：添加地理位置的坐标。</li>\n<li>geopos：获取地理位置的坐标。</li>\n<li>geodist：计算两个位置之间的距离。</li>\n<li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li>\n<li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li>\n<li>geohash：返回一个或多个位置对象的 geohash 值。</li>\n</ul>\n<br>\n\n<h1 id=\"Redis持久化的取舍和选择\"><a href=\"#Redis持久化的取舍和选择\" class=\"headerlink\" title=\"Redis持久化的取舍和选择\"></a>Redis持久化的取舍和选择</h1><h2 id=\"持久化的作用\"><a href=\"#持久化的作用\" class=\"headerlink\" title=\"持久化的作用\"></a>持久化的作用</h2><ol>\n<li>什么是持久化</li>\n</ol>\n<blockquote>\n<p>redis所有的数据保存在内存中，对数据的更新将异步的保存在磁盘上</p>\n</blockquote>\n<p>内存 =》（持久化）=》磁盘</p>\n<p>内存 《=（恢复）《= 磁盘</p>\n<ol start=\"2\">\n<li>持久化的方式</li>\n</ol>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.urjf6b58j5c.webp\" width=\"60%\" />\n\n<br>\n\n<h2 id=\"RDB（Redis-DataBase）\"><a href=\"#RDB（Redis-DataBase）\" class=\"headerlink\" title=\"RDB（Redis DataBase）\"></a>RDB（Redis DataBase）</h2><h3 id=\"什么是RDB\"><a href=\"#什么是RDB\" class=\"headerlink\" title=\"什么是RDB\"></a>什么是RDB</h3><ul>\n<li>RDB：在不同的时间点，将 redis 存储的数据生成快照并存储到磁盘等介质上</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.xtthna1x3gg.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"RDB触发机制的三种方式\"><a href=\"#RDB触发机制的三种方式\" class=\"headerlink\" title=\"RDB触发机制的三种方式\"></a>RDB触发机制的三种方式</h3><h4 id=\"save（同步）\"><a href=\"#save（同步）\" class=\"headerlink\" title=\"save（同步）\"></a>save（同步）</h4><ul>\n<li>可能会造成阻塞</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1mmseu4fo9og.webp\" width=\"60%\" />\n\n<br>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt;  save</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件</li>\n<li>复杂度：O(n)</li>\n</ul>\n<br>\n\n<h4 id=\"bgsave（异步）\"><a href=\"#bgsave（异步）\" class=\"headerlink\" title=\"bgsave（异步）\"></a>bgsave（异步）</h4><ul>\n<li>客户端执行 <code>bgsave</code> redis会使用linux的 <code>fork()</code> 函数生成一个redis的子进程，由该子进程生成RDB文件</li>\n<li>一般情况下， <code>bgsave</code> 不会阻塞到redis</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nkd5mhwgzcw.webp\" width=\"60%\" />\n\n<br>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; bgsave</span><br><span class=\"line\">Background saving started</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件策略：生成临时的rdb文件，当save执行完后。如果存在老的rdb文件，临时文件变成新文件替换老文件</li>\n<li>复杂度：O(n)</li>\n</ul>\n<br>\n\n<h4 id=\"save-与-bgsave比较\"><a href=\"#save-与-bgsave比较\" class=\"headerlink\" title=\"save 与 bgsave比较\"></a>save 与 bgsave比较</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7z4y2ta7f2w.webp\" width=\"65%\" />\n\n<br>\n\n<h4 id=\"自动\"><a href=\"#自动\" class=\"headerlink\" title=\"自动\"></a>自动</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.42jf7bw3rfe0.webp\" width=\"70%\" />\n\n<br>\n\n<ul>\n<li>说明：在 60s 中改变了10000 条数据（set，del），会自动做rdb的生成</li>\n</ul>\n<br>\n\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>数据写入量无法控制，生成规则无法控制。如果文件非常大，或很频繁的做这样的操作，会对硬盘造成一定压力</li>\n</ul>\n<br>\n\n<h5 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">############################### 快照  #################################</span></span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Save the DB on disk:保存数据库到磁盘</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  save &lt;秒&gt; &lt;更新&gt;</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  如果指定的秒数和数据库写操作次数都满足了就将数据库保存。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  下面是保存操作的实例：</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  注释：注释掉“save”这一行配置项就可以让保存数据库功能失效。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  你也可以通过增加一个只有一个空字符串的配置项（如下面的实例）来去掉前面的“save”配置。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  save <span class=\"string\">&quot;&quot;</span></span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">save 900 1  </span><br><span class=\"line\">save 300 10  </span><br><span class=\"line\">save 60 10000  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在默认情况下，如果RDB快照持久化操作被激活（至少一个条件被激活）并且持久化操作失败，Redis则会停止接受更新操作。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这样会让用户了解到数据没有被正确的存储到磁盘上。否则没人会注意到这个问题，可能会造成灾难。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果后台存储（持久化）操作进程再次工作，Redis会自动允许更新操作。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">然而，如果你已经恰当的配置了对Redis服务器的监视和备份，你也许想关掉这项功能。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如此一来即使后台保存操作出错,redis也仍然可以继续像平常一样工作。</span>  </span><br><span class=\"line\">stop-writes-on-bgsave-error yes  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">是否在导出.rdb数据库文件的时候采用LZF压缩字符串和对象？</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认情况下总是设置成‘<span class=\"built_in\">yes</span>’， 他看起来是一把双刃剑。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果你想在存储的子进程中节省一些CPU就设置成<span class=\"string\">&#x27;no&#x27;</span>，</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">但是这样如果你的kye/value是可压缩的，你的到处数据接就会很大。</span>  </span><br><span class=\"line\">rdbcompression yes  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">从版本RDB版本5开始，一个CRC64的校验就被放在了文件末尾。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这会让格式更加耐攻击，但是当存储或者加载rbd文件的时候会有一个10%左右的性能下降，</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">所以，为了达到性能的最大化，你可以关掉这个配置项。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">没有校验的RDB文件会有一个0校验位，来告诉加载代码跳过校验检查。</span>  </span><br><span class=\"line\">rdbchecksum yes  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出数据库的文件名称</span>  </span><br><span class=\"line\">dbfilename dump.rdb  </span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">工作目录</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出的数据库会被写入这个目录，文件名就是上面<span class=\"string\">&#x27;dbfilename&#x27;</span>配置项指定的文件名。</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只增的文件也会在这个目录创建（这句话没看明白）</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意你一定要在这个配置一个工作目录，而不是文件名称。</span>  </span><br><span class=\"line\">dir ./  </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h5 id=\"最佳配置\"><a href=\"#最佳配置\" class=\"headerlink\" title=\"最佳配置\"></a>最佳配置</h5><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.23rdcl2poqrk.webp\" width=\"70%\" />\n\n<br>\n\n<ul>\n<li>关闭自动配置</li>\n</ul>\n<h3 id=\"触发机制-不容忽略方式\"><a href=\"#触发机制-不容忽略方式\" class=\"headerlink\" title=\"触发机制 - 不容忽略方式\"></a>触发机制 - 不容忽略方式</h3><ol>\n<li>全量复制（主从复制时候，主会自动生成RDB）</li>\n<li>debug reload（相当于不会将内存清空的重启，也会生成RDB）</li>\n<li>shutdown</li>\n</ol>\n<br>\n\n<h3 id=\"RDB现存问题\"><a href=\"#RDB现存问题\" class=\"headerlink\" title=\"RDB现存问题\"></a>RDB现存问题</h3><ul>\n<li>耗时耗性能</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.b2ax18993q0.webp\" width=\"50%\" />\n\n<br>\n\n<ul>\n<li>不可控，丢失数据</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2hq85j7f4ni0.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"AOF（Append-Only-File）\"><a href=\"#AOF（Append-Only-File）\" class=\"headerlink\" title=\"AOF（Append Only File）\"></a>AOF（Append Only File）</h2><ul>\n<li>将 redis 执行过的所有写指令记录下来（它的写入是实时的），在下次 redis 重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了</li>\n</ul>\n<h3 id=\"AOF运行原理\"><a href=\"#AOF运行原理\" class=\"headerlink\" title=\"AOF运行原理\"></a>AOF运行原理</h3><ul>\n<li>创建</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1i410l2830jk.webp\" width=\"50%\" />\n\n<br>\n\n<ul>\n<li>恢复</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2ode8n5q6b80.webp\" width=\"60%\" />\n\n<br>\n\n<h3 id=\"AOF的三种策略\"><a href=\"#AOF的三种策略\" class=\"headerlink\" title=\"AOF的三种策略\"></a>AOF的三种策略</h3><h4 id=\"always\"><a href=\"#always\" class=\"headerlink\" title=\"always\"></a>always</h4><ul>\n<li>写入数据不会丢失</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.1nz1bf5i1ojk.webp\" width=\"50%\" />\n\n<br>\n\n<h4 id=\"everysec\"><a href=\"#everysec\" class=\"headerlink\" title=\"everysec\"></a>everysec</h4><ul>\n<li>是redis的配置默认值</li>\n<li>可能会丢失1s的数据</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5uvzghtr78s0.webp\" width=\"50%\" />\n\n<br>\n\n<h4 id=\"no\"><a href=\"#no\" class=\"headerlink\" title=\"no\"></a>no</h4><ul>\n<li>根据操作系统决定</li>\n</ul>\n<br>\n\n<h3 id=\"AOF的三种策略对比\"><a href=\"#AOF的三种策略对比\" class=\"headerlink\" title=\"AOF的三种策略对比\"></a>AOF的三种策略对比</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7ezkvv0o0bg0.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><ul>\n<li>减少磁盘占用量</li>\n<li>加速恢复速度</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3hr6crymmo0.webp\" width=\"50%\" />\n\n<br>\n\n<h4 id=\"AOF重写的两种方式\"><a href=\"#AOF重写的两种方式\" class=\"headerlink\" title=\"AOF重写的两种方式\"></a>AOF重写的两种方式</h4><ul>\n<li>BGREWRITEAOF （类似rdb的bgsave）<ul>\n<li>将Redis中的数据进行回溯， 回溯成AOF文件</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5j30ijjpor40.webp\" width=\"50%\" />\n\n<br>\n\n<ul>\n<li>AOF重写配置</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.72n439aom900.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5wl4pwfy7ds0.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.yskrqzxtakw.webp\" width=\"50%\" />\n\n<br>\n\n<h4 id=\"AOF重写流程\"><a href=\"#AOF重写流程\" class=\"headerlink\" title=\"AOF重写流程\"></a>AOF重写流程</h4><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2b1z2py9ols0.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"RDB与AOF的抉择\"><a href=\"#RDB与AOF的抉择\" class=\"headerlink\" title=\"RDB与AOF的抉择\"></a>RDB与AOF的抉择</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2got5zb1qs20.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"RDB最佳策略\"><a href=\"#RDB最佳策略\" class=\"headerlink\" title=\"RDB最佳策略\"></a>RDB最佳策略</h3><ul>\n<li>RDB</li>\n</ul>\n<ol>\n<li>”关闭“</li>\n<li>集中管理</li>\n<li>主从，从开</li>\n</ol>\n<h3 id=\"AOF最佳策略\"><a href=\"#AOF最佳策略\" class=\"headerlink\" title=\"AOF最佳策略\"></a>AOF最佳策略</h3><ol>\n<li>”开“：缓存和存储</li>\n<li>AOF集中管理</li>\n<li>everysec</li>\n</ol>\n<h3 id=\"最佳策略\"><a href=\"#最佳策略\" class=\"headerlink\" title=\"最佳策略\"></a>最佳策略</h3><ol>\n<li>小分片</li>\n<li>缓存或存储</li>\n<li>监控（硬盘、内存、负载、网络）</li>\n<li>足够的内存</li>\n</ol>\n<br>\n\n<h1 id=\"常见的持久化开发运维问题\"><a href=\"#常见的持久化开发运维问题\" class=\"headerlink\" title=\"常见的持久化开发运维问题\"></a>常见的持久化开发运维问题</h1><h2 id=\"fork操作\"><a href=\"#fork操作\" class=\"headerlink\" title=\"fork操作\"></a>fork操作</h2><ul>\n<li></li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3ofn5wyto2w0.webp\" width=\"50%\" />\n\n<br>\n\n<ul>\n<li>fork改善</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.25vvl1tdwgu8.webp\" width=\"50%\" />\n\n\n\n<br>\n\n<h2 id=\"子进程开销和优化\"><a href=\"#子进程开销和优化\" class=\"headerlink\" title=\"子进程开销和优化\"></a>子进程开销和优化</h2><ul>\n<li></li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5u5w40mtg9s0.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"硬盘优化\"><a href=\"#硬盘优化\" class=\"headerlink\" title=\"硬盘优化\"></a>硬盘优化</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5lnrmjt1hw40.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"AOF追加阻塞\"><a href=\"#AOF追加阻塞\" class=\"headerlink\" title=\"AOF追加阻塞\"></a>AOF追加阻塞</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6v89xx5ytl00.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"AOF阻塞定位\"><a href=\"#AOF阻塞定位\" class=\"headerlink\" title=\"AOF阻塞定位\"></a>AOF阻塞定位</h2><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3t06d4zqkpo0.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3qdujdqyup60.webp\" width=\"50%\" />\n\n<br>\n\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.60mk8wrt4lk0.webp\" width=\"50%\" />\n\n<br>\n\n<h1 id=\"Redis复制的原理与优化\"><a href=\"#Redis复制的原理与优化\" class=\"headerlink\" title=\"Redis复制的原理与优化\"></a>Redis复制的原理与优化</h1><h2 id=\"什么是主从复制\"><a href=\"#什么是主从复制\" class=\"headerlink\" title=\"什么是主从复制\"></a>什么是主从复制</h2><ul>\n<li>一个master可以有多个slave，但一个slave只能有一个master</li>\n<li>数据流向必须是单向的。master -&gt; slave</li>\n<li>变成从节点前会把数据清楚</li>\n</ul>\n<h2 id=\"主从复制作用\"><a href=\"#主从复制作用\" class=\"headerlink\" title=\"主从复制作用\"></a>主从复制作用</h2><ul>\n<li>一个数据提供了多个副本（成为高可用、分布式的基础）</li>\n<li>扩展读性能（读写分离）</li>\n</ul>\n<h2 id=\"主从复制实现\"><a href=\"#主从复制实现\" class=\"headerlink\" title=\"主从复制实现\"></a>主从复制实现</h2><h3 id=\"slaveof-命令\"><a href=\"#slaveof-命令\" class=\"headerlink\" title=\"slaveof 命令\"></a>slaveof 命令</h3><ul>\n<li>复制（slaveof 这个命令是异步的）</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2pa32y5jfz80.webp\" width=\"60%\"/>\n\n<br>\n\n<ul>\n<li>取消复制</li>\n</ul>\n<img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7jnus8oq23k0.webp\" width=\"60%\"/>\n\n<br>\n\n<h3 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slaveof ip port</span><br><span class=\"line\">slave-read-only yes</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主从复制-命令和配置的比较\"><a href=\"#主从复制-命令和配置的比较\" class=\"headerlink\" title=\"主从复制-命令和配置的比较\"></a>主从复制-命令和配置的比较</h3><table>\n<thead>\n<tr>\n<th align=\"center\">方式</th>\n<th align=\"center\">命令</th>\n<th align=\"center\">配置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">优点</td>\n<td align=\"center\">无需重启</td>\n<td align=\"center\">统一配置</td>\n</tr>\n<tr>\n<td align=\"center\">缺点</td>\n<td align=\"center\">不便于管理</td>\n<td align=\"center\">需要管理</td>\n</tr>\n</tbody></table>\n<h3 id=\"主从配置操作\"><a href=\"#主从配置操作\" class=\"headerlink\" title=\"主从配置操作\"></a>主从配置操作</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info replication</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"主从复制原理\"><a href=\"#主从复制原理\" class=\"headerlink\" title=\"主从复制原理\"></a>主从复制原理</h2><h3 id=\"全量复制过程原理\"><a href=\"#全量复制过程原理\" class=\"headerlink\" title=\"全量复制过程原理\"></a>全量复制过程原理</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.312gr8tguvm0.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"全量复制开销\"><a href=\"#全量复制开销\" class=\"headerlink\" title=\"全量复制开销\"></a>全量复制开销</h3><ol>\n<li>bgsave时间</li>\n<li>RDB文件网络传输时间</li>\n<li>从节点清空数据时间</li>\n<li>从节点加载RDB时间</li>\n<li>可能的AOF重写时间</li>\n</ol>\n<h3 id=\"部分复制过程原理\"><a href=\"#部分复制过程原理\" class=\"headerlink\" title=\"部分复制过程原理\"></a>部分复制过程原理</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3vhs1nc1dzi0.webp\" width=\"50%\" />\n\n<br>\n\n<h2 id=\"主从复制中的故障处理与常见问题\"><a href=\"#主从复制中的故障处理与常见问题\" class=\"headerlink\" title=\"主从复制中的故障处理与常见问题\"></a>主从复制中的故障处理与常见问题</h2><ul>\n<li>故障不可避免</li>\n<li>自动故障转移</li>\n<li>故障分为master故障和slave故障</li>\n</ul>\n<h3 id=\"读写分离问题\"><a href=\"#读写分离问题\" class=\"headerlink\" title=\"读写分离问题\"></a>读写分离问题</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.a738ve0k3y8.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"配置不一致\"><a href=\"#配置不一致\" class=\"headerlink\" title=\"配置不一致\"></a>配置不一致</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.nl2kmy53a0w.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"规避全量复制\"><a href=\"#规避全量复制\" class=\"headerlink\" title=\"规避全量复制\"></a>规避全量复制</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6pe5jkk3nm80.webp\" width=\"50%\" />\n\n<br>\n\n<h3 id=\"规避复制风暴\"><a href=\"#规避复制风暴\" class=\"headerlink\" title=\"规避复制风暴\"></a>规避复制风暴</h3><img src=\"https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.361o49e7h2i0.webp\" width=\"50%\" />\n\n<br>\n\n<h1 id=\"Redis-Sentinel\"><a href=\"#Redis-Sentinel\" class=\"headerlink\" title=\"Redis Sentinel\"></a>Redis Sentinel</h1><h1 id=\"第9章-初识Redis-Cluster\"><a href=\"#第9章-初识Redis-Cluster\" class=\"headerlink\" title=\"第9章 初识Redis Cluster\"></a>第9章 初识Redis Cluster</h1><br>\n\n<h1 id=\"学习备注\"><a href=\"#学习备注\" class=\"headerlink\" title=\"学习备注\"></a>学习备注</h1><blockquote>\n<ol>\n<li>jedis 需要熟悉,有些代码还要手动过一遍才是</li>\n<li>生产环境普通用户后台启动redis</li>\n<li>部分图片内容是否应该转化为代码呢？</li>\n<li>bitmap不太懂，还需要深入理解。还包括 hyperloglog、geo</li>\n<li>RDB和AOF的恢复原理和过程是怎么样子的？</li>\n<li>主从复制操作虽然简单，但是最好是实践一下</li>\n</ol>\n</blockquote>\n<img src=\"\" width=\"50%\" />\n\n<br>\n\n\n\n\n\n\n\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clb3zfsn00006dcta8apj6zxx","category_id":"clb3zfsn5000gdctadnzmcc8x","_id":"clb3zfsn9000pdctae43y0r2k"},{"post_id":"clb3zfsn20009dcta928d1pzc","category_id":"clb3zfsn7000mdcta18bo7aup","_id":"clb3zfsne000xdcta8pqr5rpk"},{"post_id":"clb3zfsnb000rdctadgkj3mt7","category_id":"clb3zfsn10007dctactahctx2","_id":"clb3zfsng0014dctaaydge1f4"},{"post_id":"clb3zfsnb000rdctadgkj3mt7","category_id":"clb3zfsnb000sdcta4s0ae6se","_id":"clb3zfsni0019dctabp7i9ve5"},{"post_id":"clb3zfsmt0001dcta7hh79art","category_id":"clb3zfsn10007dctactahctx2","_id":"clb3zfsni001cdctahq6sggpa"},{"post_id":"clb3zfsmt0001dcta7hh79art","category_id":"clb3zfsnb000sdcta4s0ae6se","_id":"clb3zfsnk001hdcta5be97b86"},{"post_id":"clb3zfsn2000adcta2fpi6dqf","category_id":"clb3zfsn10007dctactahctx2","_id":"clb3zfsnk001kdcta88uyc7xo"},{"post_id":"clb3zfsn2000adcta2fpi6dqf","category_id":"clb3zfsnf000zdctaf78kaczk","_id":"clb3zfsnm001pdcta8r08d3mt"},{"post_id":"clb3zfsn4000ddctag5um9na0","category_id":"clb3zfsnh0016dctaduzaffv7","_id":"clb3zfsnm001sdcta8ef3ayqv"},{"post_id":"clb3zfsmv0003dcta5u5gclmq","category_id":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsno001ydcta5maz7qpi"},{"post_id":"clb3zfsmv0003dcta5u5gclmq","category_id":"clb3zfsnj001fdctabbs8eawv","_id":"clb3zfsnp0021dcta2qjp8igp"},{"post_id":"clb3zfsnk001jdctagl4wecsb","category_id":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsnq0026dctagr7c28u7"},{"post_id":"clb3zfsnk001jdctagl4wecsb","category_id":"clb3zfsnj001fdctabbs8eawv","_id":"clb3zfsnr0028dcta4q6732au"},{"post_id":"clb3zfsn4000edcta3d7o8f5b","category_id":"clb3zfsnl001odcta343pcnli","_id":"clb3zfsns002cdcta96yj1nc1"},{"post_id":"clb3zfsnm001rdctacven2t7x","category_id":"clb3zfsn10007dctactahctx2","_id":"clb3zfsnu002fdcta1g57145h"},{"post_id":"clb3zfsnm001rdctacven2t7x","category_id":"clb3zfsnb000sdcta4s0ae6se","_id":"clb3zfsnw002jdcta85fv5at1"},{"post_id":"clb3zfsn6000jdcta7w846ezi","category_id":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsnw002ldcta10th3ju5"},{"post_id":"clb3zfsn6000jdcta7w846ezi","category_id":"clb3zfsnp0024dcta0zga1hzt","_id":"clb3zfsnw002mdctabp1hgujg"},{"post_id":"clb3zfsnd000wdctaci1j0r1b","category_id":"clb3zfsnw002kdcta5bac12hf","_id":"clb3zfsnx002udctad48vccgt"},{"post_id":"clb3zfsnf0011dcta6qbxgixf","category_id":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsny002xdcta5di34dnu"},{"post_id":"clb3zfsnf0011dcta6qbxgixf","category_id":"clb3zfsnj001fdctabbs8eawv","_id":"clb3zfsny002zdcta1qfk7ees"},{"post_id":"clb3zfsng0013dcta3t829c33","category_id":"clb3zfsnx002sdcta4y5b1k2w","_id":"clb3zfsnz0032dctaebwn9fci"},{"post_id":"clb3zfsni001bdctaeprm0y7b","category_id":"clb3zfsny0031dcta89t50n4b","_id":"clb3zfso10039dcta7sdv1wvz"},{"post_id":"clb3zfsnj001gdctageo62rb1","category_id":"clb3zfsnw002kdcta5bac12hf","_id":"clb3zfso1003cdcta0y6s197n"},{"post_id":"clb3zfsnn001udcta75hthtg8","category_id":"clb3zfsn10007dctactahctx2","_id":"clb3zfso4003kdcta7lpe5sme"},{"post_id":"clb3zfsnn001udcta75hthtg8","category_id":"clb3zfso1003bdctaary620f6","_id":"clb3zfso4003mdcta8isgf4w9"},{"post_id":"clb3zfsn5000hdctabjnc8lxu","category_id":"clb3zfsnn001wdcta1wi9bu2f","_id":"clb3zfso5003rdcta6g38acu7"},{"post_id":"clb3zfsn5000hdctabjnc8lxu","category_id":"clb3zfso3003idcta6kfm8a6w","_id":"clb3zfso5003sdcta5iobd1uu"},{"post_id":"clb3zfsnc000udctag1w2ey35","category_id":"clb3zfsns002bdctahpo7ay3l","_id":"clb3zfso9004cdcta9zaghiwt"},{"post_id":"clb3zfsnc000udctag1w2ey35","category_id":"clb3zfso70045dcta3m8ag205","_id":"clb3zfso9004edcta3d6tg3s9"},{"post_id":"clb3zfsnh0018dctagup2aezd","category_id":"clb3zfsny002wdcta5rhqf1fq","_id":"clb3zfsoa004hdcta98p7ae06"},{"post_id":"clb3zfsnh0018dctagup2aezd","category_id":"clb3zfso80048dctad0m83j4p","_id":"clb3zfsoa004idcta0ov76174"},{"post_id":"clb3zfsnl001ndctaahg39fpi","category_id":"clb3zfso10038dcta7mnm8i27","_id":"clb3zfsoa004mdctagoqchftu"},{"post_id":"clb3zfsnl001ndctaahg39fpi","category_id":"clb3zfso9004adcta0vfnckdj","_id":"clb3zfsob004odcta3l9zaijj"},{"post_id":"clb3zfsno001zdctaggvw4to7","category_id":"clb3zfsny0031dcta89t50n4b","_id":"clb3zfsob004rdctahfm38wtw"},{"post_id":"clb3zfsno001zdctaggvw4to7","category_id":"clb3zfso9004gdcta1j5s7vio","_id":"clb3zfsob004sdcta8e5iff3v"},{"post_id":"clb3zfsnp0022dctab9ztfzxx","category_id":"clb3zfso4003odcta2jnt2tsp","_id":"clb3zfsoc004wdctagigzebqu"},{"post_id":"clb3zfsnp0022dctab9ztfzxx","category_id":"clb3zfsoa004kdcta5e1x7zaz","_id":"clb3zfsoc004ydcta89fu6w3u"},{"post_id":"clb3zfsnq0027dcta4kbmba59","category_id":"clb3zfso4003qdcta658j8bd2","_id":"clb3zfsod0051dcta2jqv4egg"},{"post_id":"clb3zfsnq0027dcta4kbmba59","category_id":"clb3zfsob004qdctab645072e","_id":"clb3zfsod0053dcta48kpc18l"},{"post_id":"clb3zfsnr0029dcta9kz0c11e","category_id":"clb3zfso4003odcta2jnt2tsp","_id":"clb3zfsoe0056dctadhmxdy2m"},{"post_id":"clb3zfsnr0029dcta9kz0c11e","category_id":"clb3zfsoa004kdcta5e1x7zaz","_id":"clb3zfsoe0059dcta3rabbnas"},{"post_id":"clb3zfsnt002ddctabo221ky7","category_id":"clb3zfso4003odcta2jnt2tsp","_id":"clb3zfsoe005adcta42fn7oz0"},{"post_id":"clb3zfsnt002ddctabo221ky7","category_id":"clb3zfsoa004kdcta5e1x7zaz","_id":"clb3zfsoe005bdctabo0a76dt"},{"post_id":"clb3zfsnu002gdcta4gx0d3d4","category_id":"clb3zfso4003odcta2jnt2tsp","_id":"clb3zfsof005edcta995ndorn"},{"post_id":"clb3zfsnu002gdcta4gx0d3d4","category_id":"clb3zfsoa004kdcta5e1x7zaz","_id":"clb3zfsof005gdcta3b3s2v8u"},{"post_id":"clb3zfsor005kdcta0fegeghq","category_id":"clb3zfsot005mdcta7mw9bbvk","_id":"clb3zfsoy005xdcta4musaoz5"},{"post_id":"clb3zfsot005odctadxc71cib","category_id":"clb3zfso4003odcta2jnt2tsp","_id":"clb3zfsoz0062dctabzan08bu"},{"post_id":"clb3zfsot005odctadxc71cib","category_id":"clb3zfsoa004kdcta5e1x7zaz","_id":"clb3zfsp10065dctaf3dg5c3r"},{"post_id":"clb3zfsou005pdcta33nm8e1d","category_id":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsp10068dcta4sdug692"},{"post_id":"clb3zfsou005pdcta33nm8e1d","category_id":"clb3zfsnp0024dcta0zga1hzt","_id":"clb3zfsp2006adcta22u0dsav"},{"post_id":"clb3zfsos005ldctabm2b61cn","category_id":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsp2006ddcta8gwc3f72"},{"post_id":"clb3zfsos005ldctabm2b61cn","category_id":"clb3zfsov005rdctaecqo78t6","_id":"clb3zfsp7006gdcta0fif538t"},{"post_id":"clb3zfsow005udctad1743k2m","category_id":"clb3zfsns002bdctahpo7ay3l","_id":"clb3zfsp7006jdcta4fh18tyw"},{"post_id":"clb3zfsow005udctad1743k2m","category_id":"clb3zfso70045dcta3m8ag205","_id":"clb3zfsp8006ldcta16jegxpq"},{"post_id":"clb3zfsoz0061dctagmht7tkd","category_id":"clb3zfsnx002sdcta4y5b1k2w","_id":"clb3zfsp8006odctahk8zct4a"},{"post_id":"clb3zfsoy005wdcta43awej1z","category_id":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsp8006qdcta79bv52te"},{"post_id":"clb3zfsoy005wdcta43awej1z","category_id":"clb3zfsnj001fdctabbs8eawv","_id":"clb3zfsp8006sdcta54r4fhpd"},{"post_id":"clb3zfsou005qdcta1jju82t0","category_id":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsp8006udcta4gzn5m8o"},{"post_id":"clb3zfsou005qdcta1jju82t0","category_id":"clb3zfsoz005ydctadzo79jpb","_id":"clb3zfsp8006vdcta92fp60dq"},{"post_id":"clb3zfsp00064dcta2wro30sm","category_id":"clb3zfsn3000cdcta3j53dbci","_id":"clb3zfsp8006wdctah3kj94xk"},{"post_id":"clb3zfsp00064dcta2wro30sm","category_id":"clb3zfsoz005ydctadzo79jpb","_id":"clb3zfsp8006xdctah4yraivp"},{"post_id":"clb3zfsp00064dcta2wro30sm","category_id":"clb3zfsp7006edcta1di54vgy","_id":"clb3zfsp9006ydctah5u6c8wi"},{"post_id":"clb3zfsp00064dcta2wro30sm","category_id":"clb3zfsp8006mdctaesbx82vs","_id":"clb3zfsp9006zdctaggi8bv0g"}],"PostTag":[{"post_id":"clb3zfsmt0001dcta7hh79art","tag_id":"clb3zfsmx0004dctac4315goj","_id":"clb3zfsn6000idcta0esy1ng1"},{"post_id":"clb3zfsmt0001dcta7hh79art","tag_id":"clb3zfsn3000bdcta7uigg4dc","_id":"clb3zfsn6000kdctafha8e9qs"},{"post_id":"clb3zfsmv0003dcta5u5gclmq","tag_id":"clb3zfsn5000fdcta1zojbkv6","_id":"clb3zfsnc000tdctaeqnia0u9"},{"post_id":"clb3zfsmv0003dcta5u5gclmq","tag_id":"clb3zfsn7000ldctafmqq16fu","_id":"clb3zfsnd000vdctac2sp1nru"},{"post_id":"clb3zfsnb000rdctadgkj3mt7","tag_id":"clb3zfsmx0004dctac4315goj","_id":"clb3zfsnf0010dctagw1a98mf"},{"post_id":"clb3zfsnb000rdctadgkj3mt7","tag_id":"clb3zfsn3000bdcta7uigg4dc","_id":"clb3zfsng0012dctagzbnaraz"},{"post_id":"clb3zfsn00006dcta8apj6zxx","tag_id":"clb3zfsn9000qdctac0ezc6nv","_id":"clb3zfsnh0017dcta9sad32bq"},{"post_id":"clb3zfsnf0011dcta6qbxgixf","tag_id":"clb3zfsn5000fdcta1zojbkv6","_id":"clb3zfsni001adctag7vx13bh"},{"post_id":"clb3zfsnf0011dcta6qbxgixf","tag_id":"clb3zfsn7000ldctafmqq16fu","_id":"clb3zfsnj001edcta0xv52344"},{"post_id":"clb3zfsn20009dcta928d1pzc","tag_id":"clb3zfsne000ydcta93msg2yf","_id":"clb3zfsnk001idcta2dvjc16g"},{"post_id":"clb3zfsn2000adcta2fpi6dqf","tag_id":"clb3zfsng0015dctab3j1buip","_id":"clb3zfsnl001ldctagzwi05m1"},{"post_id":"clb3zfsn4000ddctag5um9na0","tag_id":"clb3zfsnj001ddcta9gej7aln","_id":"clb3zfsnm001qdcta8zf58ya3"},{"post_id":"clb3zfsnk001jdctagl4wecsb","tag_id":"clb3zfsn5000fdcta1zojbkv6","_id":"clb3zfsnn001tdctahd8rhiyn"},{"post_id":"clb3zfsnk001jdctagl4wecsb","tag_id":"clb3zfsn7000ldctafmqq16fu","_id":"clb3zfsno001xdcta1wj49ac6"},{"post_id":"clb3zfsnm001rdctacven2t7x","tag_id":"clb3zfsmx0004dctac4315goj","_id":"clb3zfsno0020dctab8jc1wg5"},{"post_id":"clb3zfsn4000edcta3d7o8f5b","tag_id":"clb3zfsnl001mdcta5nu4c176","_id":"clb3zfsnq0025dctaekk35ljj"},{"post_id":"clb3zfsn5000hdctabjnc8lxu","tag_id":"clb3zfsnn001vdctadazndmda","_id":"clb3zfsnu002edcta87xwgvvp"},{"post_id":"clb3zfsn5000hdctabjnc8lxu","tag_id":"clb3zfsnp0023dctadwmd6rq4","_id":"clb3zfsnu002hdctaf9ek0lfk"},{"post_id":"clb3zfsn6000jdcta7w846ezi","tag_id":"clb3zfsn7000ldctafmqq16fu","_id":"clb3zfsnx002pdctacvsgdmzt"},{"post_id":"clb3zfsn6000jdcta7w846ezi","tag_id":"clb3zfsnv002idcta5x24ar66","_id":"clb3zfsnx002qdctag849h3e7"},{"post_id":"clb3zfsn7000ndctac4d0ax62","tag_id":"clb3zfsnw002ndctafnrf8ijn","_id":"clb3zfsnx002tdctabmpyfk1d"},{"post_id":"clb3zfsn8000odcta2b651qf2","tag_id":"clb3zfsnx002rdctad9t76keh","_id":"clb3zfsny002ydctadq27f7ub"},{"post_id":"clb3zfsnc000udctag1w2ey35","tag_id":"clb3zfsny002vdcta9no15qvs","_id":"clb3zfsnz0033dctabk831q5b"},{"post_id":"clb3zfsnd000wdctaci1j0r1b","tag_id":"clb3zfsnx002rdctad9t76keh","_id":"clb3zfso00036dctafnc5fiuu"},{"post_id":"clb3zfsng0013dcta3t829c33","tag_id":"clb3zfsnz0034dctafujgdxcv","_id":"clb3zfso1003ddcta693nccf5"},{"post_id":"clb3zfsng0013dcta3t829c33","tag_id":"clb3zfso00037dcta6c39cleh","_id":"clb3zfso1003edcta4by0h0oy"},{"post_id":"clb3zfsnh0018dctagup2aezd","tag_id":"clb3zfso1003adcta84ri61rf","_id":"clb3zfso3003jdcta9m4x1bvi"},{"post_id":"clb3zfsnh0018dctagup2aezd","tag_id":"clb3zfsnw002ndctafnrf8ijn","_id":"clb3zfso4003ldcta5azd5fgr"},{"post_id":"clb3zfsni001bdctaeprm0y7b","tag_id":"clb3zfso3003hdcta77z7bxx8","_id":"clb3zfso6003vdcta6bjo8y1u"},{"post_id":"clb3zfsni001bdctaeprm0y7b","tag_id":"clb3zfso4003ndcta698ycidm","_id":"clb3zfso6003wdcta200c4cw6"},{"post_id":"clb3zfsni001bdctaeprm0y7b","tag_id":"clb3zfso00037dcta6c39cleh","_id":"clb3zfso6003zdcta3cz3hga3"},{"post_id":"clb3zfsnj001gdctageo62rb1","tag_id":"clb3zfsnx002rdctad9t76keh","_id":"clb3zfso60040dctah1u784h2"},{"post_id":"clb3zfsnl001ndctaahg39fpi","tag_id":"clb3zfso6003xdcta871136b2","_id":"clb3zfso70043dcta8bexh1i1"},{"post_id":"clb3zfsnn001udcta75hthtg8","tag_id":"clb3zfso6003xdcta871136b2","_id":"clb3zfso80046dcta06zi1ut9"},{"post_id":"clb3zfsno001zdctaggvw4to7","tag_id":"clb3zfso70044dcta3v499y4p","_id":"clb3zfso9004bdcta0rbtcafi"},{"post_id":"clb3zfsno001zdctaggvw4to7","tag_id":"clb3zfso4003ndcta698ycidm","_id":"clb3zfso9004ddcta0ge30rgt"},{"post_id":"clb3zfsnp0022dctab9ztfzxx","tag_id":"clb3zfso80049dctabpxcaxoc","_id":"clb3zfsoa004ldcta5cl8by3g"},{"post_id":"clb3zfsnp0022dctab9ztfzxx","tag_id":"clb3zfso9004fdcta3o6m8jd6","_id":"clb3zfsob004ndctacdsj8gjt"},{"post_id":"clb3zfsnq0027dcta4kbmba59","tag_id":"clb3zfsoa004jdcta3x9p8ym2","_id":"clb3zfsoc004vdctafug76bwd"},{"post_id":"clb3zfsnq0027dcta4kbmba59","tag_id":"clb3zfsob004pdctac6b01t2c","_id":"clb3zfsoc004xdcta1k3589mc"},{"post_id":"clb3zfsnr0029dcta9kz0c11e","tag_id":"clb3zfso80049dctabpxcaxoc","_id":"clb3zfsoe0055dcta3vhd167d"},{"post_id":"clb3zfsnr0029dcta9kz0c11e","tag_id":"clb3zfso9004fdcta3o6m8jd6","_id":"clb3zfsoe0057dctaawlz9t55"},{"post_id":"clb3zfsnt002ddctabo221ky7","tag_id":"clb3zfso80049dctabpxcaxoc","_id":"clb3zfsof005ddctab3z07th2"},{"post_id":"clb3zfsnt002ddctabo221ky7","tag_id":"clb3zfsoe0058dctafqi9296d","_id":"clb3zfsof005fdcta7rchc7ka"},{"post_id":"clb3zfsnu002gdcta4gx0d3d4","tag_id":"clb3zfso80049dctabpxcaxoc","_id":"clb3zfsof005idctahjax805c"},{"post_id":"clb3zfsnu002gdcta4gx0d3d4","tag_id":"clb3zfso9004fdcta3o6m8jd6","_id":"clb3zfsof005jdcta7cv2aa2h"},{"post_id":"clb3zfsou005pdcta33nm8e1d","tag_id":"clb3zfsnv002idcta5x24ar66","_id":"clb3zfsow005tdcta2v6qfruo"},{"post_id":"clb3zfsou005pdcta33nm8e1d","tag_id":"clb3zfsn7000ldctafmqq16fu","_id":"clb3zfsoy005vdcta2v3o3dl4"},{"post_id":"clb3zfsor005kdcta0fegeghq","tag_id":"clb3zfsot005ndctaey6m2jy6","_id":"clb3zfsoz0060dcta5vcmhj0d"},{"post_id":"clb3zfsow005udctad1743k2m","tag_id":"clb3zfsny002vdcta9no15qvs","_id":"clb3zfsp00063dcta5xmkca22"},{"post_id":"clb3zfsos005ldctabm2b61cn","tag_id":"clb3zfsov005sdctaa5a9gmdn","_id":"clb3zfsp10067dctahyqp5ho4"},{"post_id":"clb3zfsoy005wdcta43awej1z","tag_id":"clb3zfsn5000fdcta1zojbkv6","_id":"clb3zfsp20069dctabvde0eu0"},{"post_id":"clb3zfsoy005wdcta43awej1z","tag_id":"clb3zfsn7000ldctafmqq16fu","_id":"clb3zfsp2006bdcta6gdr84it"},{"post_id":"clb3zfsoz0061dctagmht7tkd","tag_id":"clb3zfsnz0034dctafujgdxcv","_id":"clb3zfsp7006fdcta0xp85bqd"},{"post_id":"clb3zfsot005odctadxc71cib","tag_id":"clb3zfsn3000bdcta7uigg4dc","_id":"clb3zfsp7006hdcta9sop5ds6"},{"post_id":"clb3zfsot005odctadxc71cib","tag_id":"clb3zfsoz005zdctah56a4d0a","_id":"clb3zfsp8006kdcta1phu2axm"},{"post_id":"clb3zfsou005qdcta1jju82t0","tag_id":"clb3zfsp10066dctaak09589p","_id":"clb3zfsp8006ndcta1eg11w5f"},{"post_id":"clb3zfsp00064dcta2wro30sm","tag_id":"clb3zfsp10066dctaak09589p","_id":"clb3zfsp8006pdctae8ib65to"},{"post_id":"clb3zfsp00064dcta2wro30sm","tag_id":"clb3zfsp7006idcta3ngzg3h3","_id":"clb3zfsp8006rdcta5h44e88e"},{"post_id":"clb3zfsp00064dcta2wro30sm","tag_id":"clb3zfsn7000ldctafmqq16fu","_id":"clb3zfsp8006tdctac9vahtet"}],"Tag":[{"name":"concurrent","_id":"clb3zfsmx0004dctac4315goj"},{"name":"java","_id":"clb3zfsn3000bdcta7uigg4dc"},{"name":"MySQL","_id":"clb3zfsn5000fdcta1zojbkv6"},{"name":"database","_id":"clb3zfsn7000ldctafmqq16fu"},{"name":"git","_id":"clb3zfsn9000qdctac0ezc6nv"},{"name":"gradle","_id":"clb3zfsne000ydcta93msg2yf"},{"name":"collection","_id":"clb3zfsng0015dctab3j1buip"},{"name":"maven","_id":"clb3zfsnj001ddcta9gej7aln"},{"name":"mybatis","_id":"clb3zfsnl001mdcta5nu4c176"},{"name":"Nexus","_id":"clb3zfsnn001vdctadazndmda"},{"name":"Maven","_id":"clb3zfsnp0023dctadwmd6rq4"},{"name":"kingbase","_id":"clb3zfsnv002idcta5x24ar66"},{"name":"spring","_id":"clb3zfsnw002ndctafnrf8ijn"},{"name":"linux","_id":"clb3zfsnx002rdctad9t76keh"},{"name":"Kafka","_id":"clb3zfsny002vdcta9no15qvs"},{"name":"Nginx","_id":"clb3zfsnz0034dctafujgdxcv"},{"name":"study-notes","_id":"clb3zfso00037dcta6c39cleh"},{"name":"jpa","_id":"clb3zfso1003adcta84ri61rf"},{"name":"wireshark","_id":"clb3zfso3003hdcta77z7bxx8"},{"name":"network","_id":"clb3zfso4003ndcta698ycidm"},{"name":"jvm","_id":"clb3zfso6003xdcta871136b2"},{"name":"http","_id":"clb3zfso70044dcta3v499y4p"},{"name":"Operating-Systems","_id":"clb3zfso80049dctabpxcaxoc"},{"name":"I/O","_id":"clb3zfso9004fdcta3o6m8jd6"},{"name":"computer","_id":"clb3zfsoa004jdcta3x9p8ym2"},{"name":"character encoding","_id":"clb3zfsob004pdctac6b01t2c"},{"name":"communication-mechanism","_id":"clb3zfsoe0058dctafqi9296d"},{"name":"nginx","_id":"clb3zfsot005ndctaey6m2jy6"},{"name":"mysql","_id":"clb3zfsov005sdctaa5a9gmdn"},{"name":"io","_id":"clb3zfsoz005zdctah56a4d0a"},{"name":"redis","_id":"clb3zfsp10066dctaak09589p"},{"name":"nosql","_id":"clb3zfsp7006idcta3ngzg3h3"}]}}